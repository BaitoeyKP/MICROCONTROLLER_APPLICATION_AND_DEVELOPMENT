
Final_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053cc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080055cc  080055cc  000155cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005628  08005628  0002019c  2**0
                  CONTENTS
  4 .ARM          00000008  08005628  08005628  00015628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005630  08005630  0002019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005630  08005630  00015630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005634  08005634  00015634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005638  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000005c  08005694  0002005c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000fc  08005734  000200fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000083c  2000019c  080057d4  0002019c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200009d8  080057d4  000209d8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000201ca  2**0
                  CONTENTS, READONLY
 15 .debug_info   00016a91  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002ae5  00000000  00000000  00036c9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000012b0  00000000  00000000  00039788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000e9a  00000000  00000000  0003aa38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00029940  00000000  00000000  0003b8d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000162ee  00000000  00000000  00065212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00103fa6  00000000  00000000  0007b500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00005510  00000000  00000000  0017f4a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000088  00000000  00000000  001849b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000019c 	.word	0x2000019c
 800021c:	00000000 	.word	0x00000000
 8000220:	080055b4 	.word	0x080055b4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001a0 	.word	0x200001a0
 800023c:	080055b4 	.word	0x080055b4

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b09a      	sub	sp, #104	; 0x68
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 fd20 	bl	8001036 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f881 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 f9ef 	bl	80009dc <MX_GPIO_Init>
  MX_ETH_Init();
 80005fe:	f000 f8ed 	bl	80007dc <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000602:	f000 f98d 	bl	8000920 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000606:	f000 f9bb 	bl	8000980 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 800060a:	f000 f935 	bl	8000878 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  char str[100];
  int time_count=3032;
 800060e:	f640 33d8 	movw	r3, #3032	; 0xbd8
 8000612:	667b      	str	r3, [r7, #100]	; 0x64
  HAL_TIM_Base_Start_IT(&htim1);
 8000614:	4832      	ldr	r0, [pc, #200]	; (80006e0 <main+0xf4>)
 8000616:	f002 fea1 	bl	800335c <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==SET)
 800061a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800061e:	4831      	ldr	r0, [pc, #196]	; (80006e4 <main+0xf8>)
 8000620:	f001 fb6e 	bl	8001d00 <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	2b01      	cmp	r3, #1
 8000628:	d120      	bne.n	800066c <main+0x80>
	{
		HAL_TIM_Base_Stop_IT(&htim1);
 800062a:	482d      	ldr	r0, [pc, #180]	; (80006e0 <main+0xf4>)
 800062c:	f002 ff0e 	bl	800344c <HAL_TIM_Base_Stop_IT>
		HAL_Delay(1000);
 8000630:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000634:	f000 fd5c 	bl	80010f0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,SET);
 8000638:	2201      	movs	r2, #1
 800063a:	2101      	movs	r1, #1
 800063c:	482a      	ldr	r0, [pc, #168]	; (80006e8 <main+0xfc>)
 800063e:	f001 fb77 	bl	8001d30 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000642:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000646:	f000 fd53 	bl	80010f0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,SET);
 800064a:	2201      	movs	r2, #1
 800064c:	2180      	movs	r1, #128	; 0x80
 800064e:	4826      	ldr	r0, [pc, #152]	; (80006e8 <main+0xfc>)
 8000650:	f001 fb6e 	bl	8001d30 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000654:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000658:	f000 fd4a 	bl	80010f0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0|GPIO_PIN_7,RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	2181      	movs	r1, #129	; 0x81
 8000660:	4821      	ldr	r0, [pc, #132]	; (80006e8 <main+0xfc>)
 8000662:	f001 fb65 	bl	8001d30 <HAL_GPIO_WritePin>
		HAL_TIM_Base_Start_IT(&htim1);
 8000666:	481e      	ldr	r0, [pc, #120]	; (80006e0 <main+0xf4>)
 8000668:	f002 fe78 	bl	800335c <HAL_TIM_Base_Start_IT>
	}
	if(state==1)
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <main+0x100>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b01      	cmp	r3, #1
 8000672:	d1d2      	bne.n	800061a <main+0x2e>
	{
		state=0;
 8000674:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <main+0x100>)
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
		time_count-=2;
 800067a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800067c:	3b02      	subs	r3, #2
 800067e:	667b      	str	r3, [r7, #100]	; 0x64
		if(time_count<3000)
 8000680:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000682:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000686:	4293      	cmp	r3, r2
 8000688:	dc13      	bgt.n	80006b2 <main+0xc6>
		{
			sprintf(str,"STOP",time_count);
 800068a:	463b      	mov	r3, r7
 800068c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800068e:	4918      	ldr	r1, [pc, #96]	; (80006f0 <main+0x104>)
 8000690:	4618      	mov	r0, r3
 8000692:	f004 faeb 	bl	8004c6c <siprintf>
					HAL_UART_Transmit(&huart3, str, strlen(str), 1000);
 8000696:	463b      	mov	r3, r7
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff fdd1 	bl	8000240 <strlen>
 800069e:	4603      	mov	r3, r0
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	4639      	mov	r1, r7
 80006a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a8:	4812      	ldr	r0, [pc, #72]	; (80006f4 <main+0x108>)
 80006aa:	f003 fb4d 	bl	8003d48 <HAL_UART_Transmit>
					return 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	e012      	b.n	80006d8 <main+0xec>
		}
		sprintf(str,"%d\r\n",time_count);
 80006b2:	463b      	mov	r3, r7
 80006b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80006b6:	4910      	ldr	r1, [pc, #64]	; (80006f8 <main+0x10c>)
 80006b8:	4618      	mov	r0, r3
 80006ba:	f004 fad7 	bl	8004c6c <siprintf>
		HAL_UART_Transmit(&huart3, str, strlen(str), 1000);
 80006be:	463b      	mov	r3, r7
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff fdbd 	bl	8000240 <strlen>
 80006c6:	4603      	mov	r3, r0
 80006c8:	b29a      	uxth	r2, r3
 80006ca:	4639      	mov	r1, r7
 80006cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d0:	4808      	ldr	r0, [pc, #32]	; (80006f4 <main+0x108>)
 80006d2:	f003 fb39 	bl	8003d48 <HAL_UART_Transmit>
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==SET)
 80006d6:	e7a0      	b.n	800061a <main+0x2e>
	}
  }
  /* USER CODE END 3 */
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3768      	adds	r7, #104	; 0x68
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	200002a0 	.word	0x200002a0
 80006e4:	40020800 	.word	0x40020800
 80006e8:	40020400 	.word	0x40020400
 80006ec:	2000087c 	.word	0x2000087c
 80006f0:	080055cc 	.word	0x080055cc
 80006f4:	200002ec 	.word	0x200002ec
 80006f8:	080055d4 	.word	0x080055d4

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b094      	sub	sp, #80	; 0x50
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	2234      	movs	r2, #52	; 0x34
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f004 face 	bl	8004cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000720:	f001 fc68 	bl	8001ff4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000724:	4b2b      	ldr	r3, [pc, #172]	; (80007d4 <SystemClock_Config+0xd8>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000728:	4a2a      	ldr	r2, [pc, #168]	; (80007d4 <SystemClock_Config+0xd8>)
 800072a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072e:	6413      	str	r3, [r2, #64]	; 0x40
 8000730:	4b28      	ldr	r3, [pc, #160]	; (80007d4 <SystemClock_Config+0xd8>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800073c:	4b26      	ldr	r3, [pc, #152]	; (80007d8 <SystemClock_Config+0xdc>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a25      	ldr	r2, [pc, #148]	; (80007d8 <SystemClock_Config+0xdc>)
 8000742:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000746:	6013      	str	r3, [r2, #0]
 8000748:	4b23      	ldr	r3, [pc, #140]	; (80007d8 <SystemClock_Config+0xdc>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000754:	2301      	movs	r3, #1
 8000756:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000758:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800075c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075e:	2302      	movs	r3, #2
 8000760:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000762:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000766:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000768:	2304      	movs	r3, #4
 800076a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800076c:	23d8      	movs	r3, #216	; 0xd8
 800076e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000770:	2302      	movs	r3, #2
 8000772:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000774:	2309      	movs	r3, #9
 8000776:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000778:	2302      	movs	r3, #2
 800077a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077c:	f107 031c 	add.w	r3, r7, #28
 8000780:	4618      	mov	r0, r3
 8000782:	f001 fc97 	bl	80020b4 <HAL_RCC_OscConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800078c:	f000 f9c8 	bl	8000b20 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000790:	f001 fc40 	bl	8002014 <HAL_PWREx_EnableOverDrive>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800079a:	f000 f9c1 	bl	8000b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079e:	230f      	movs	r3, #15
 80007a0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a2:	2302      	movs	r3, #2
 80007a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007b6:	f107 0308 	add.w	r3, r7, #8
 80007ba:	2107      	movs	r1, #7
 80007bc:	4618      	mov	r0, r3
 80007be:	f001 ff27 	bl	8002610 <HAL_RCC_ClockConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80007c8:	f000 f9aa 	bl	8000b20 <Error_Handler>
  }
}
 80007cc:	bf00      	nop
 80007ce:	3750      	adds	r7, #80	; 0x50
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40007000 	.word	0x40007000

080007dc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007e0:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <MX_ETH_Init+0x84>)
 80007e2:	4a20      	ldr	r2, [pc, #128]	; (8000864 <MX_ETH_Init+0x88>)
 80007e4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007e6:	4b20      	ldr	r3, [pc, #128]	; (8000868 <MX_ETH_Init+0x8c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007ec:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <MX_ETH_Init+0x8c>)
 80007ee:	2280      	movs	r2, #128	; 0x80
 80007f0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007f2:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <MX_ETH_Init+0x8c>)
 80007f4:	22e1      	movs	r2, #225	; 0xe1
 80007f6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007f8:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <MX_ETH_Init+0x8c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007fe:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_ETH_Init+0x8c>)
 8000800:	2200      	movs	r2, #0
 8000802:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000804:	4b18      	ldr	r3, [pc, #96]	; (8000868 <MX_ETH_Init+0x8c>)
 8000806:	2200      	movs	r2, #0
 8000808:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800080a:	4b15      	ldr	r3, [pc, #84]	; (8000860 <MX_ETH_Init+0x84>)
 800080c:	4a16      	ldr	r2, [pc, #88]	; (8000868 <MX_ETH_Init+0x8c>)
 800080e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000810:	4b13      	ldr	r3, [pc, #76]	; (8000860 <MX_ETH_Init+0x84>)
 8000812:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000816:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_ETH_Init+0x84>)
 800081a:	4a14      	ldr	r2, [pc, #80]	; (800086c <MX_ETH_Init+0x90>)
 800081c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <MX_ETH_Init+0x84>)
 8000820:	4a13      	ldr	r2, [pc, #76]	; (8000870 <MX_ETH_Init+0x94>)
 8000822:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000824:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_ETH_Init+0x84>)
 8000826:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800082a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800082c:	480c      	ldr	r0, [pc, #48]	; (8000860 <MX_ETH_Init+0x84>)
 800082e:	f000 fd95 	bl	800135c <HAL_ETH_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000838:	f000 f972 	bl	8000b20 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800083c:	2238      	movs	r2, #56	; 0x38
 800083e:	2100      	movs	r1, #0
 8000840:	480c      	ldr	r0, [pc, #48]	; (8000874 <MX_ETH_Init+0x98>)
 8000842:	f004 fa33 	bl	8004cac <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <MX_ETH_Init+0x98>)
 8000848:	2221      	movs	r2, #33	; 0x21
 800084a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_ETH_Init+0x98>)
 800084e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000852:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000854:	4b07      	ldr	r3, [pc, #28]	; (8000874 <MX_ETH_Init+0x98>)
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200001f0 	.word	0x200001f0
 8000864:	40028000 	.word	0x40028000
 8000868:	20000880 	.word	0x20000880
 800086c:	200000fc 	.word	0x200000fc
 8000870:	2000005c 	.word	0x2000005c
 8000874:	200001b8 	.word	0x200001b8

08000878 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b088      	sub	sp, #32
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800087e:	f107 0310 	add.w	r3, r7, #16
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000896:	4b20      	ldr	r3, [pc, #128]	; (8000918 <MX_TIM1_Init+0xa0>)
 8000898:	4a20      	ldr	r2, [pc, #128]	; (800091c <MX_TIM1_Init+0xa4>)
 800089a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 21600-1;
 800089c:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <MX_TIM1_Init+0xa0>)
 800089e:	f245 425f 	movw	r2, #21599	; 0x545f
 80008a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a4:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <MX_TIM1_Init+0xa0>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80008aa:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <MX_TIM1_Init+0xa0>)
 80008ac:	f242 720f 	movw	r2, #9999	; 0x270f
 80008b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b2:	4b19      	ldr	r3, [pc, #100]	; (8000918 <MX_TIM1_Init+0xa0>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008b8:	4b17      	ldr	r3, [pc, #92]	; (8000918 <MX_TIM1_Init+0xa0>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008be:	4b16      	ldr	r3, [pc, #88]	; (8000918 <MX_TIM1_Init+0xa0>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008c4:	4814      	ldr	r0, [pc, #80]	; (8000918 <MX_TIM1_Init+0xa0>)
 80008c6:	f002 fcf1 	bl	80032ac <HAL_TIM_Base_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80008d0:	f000 f926 	bl	8000b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008da:	f107 0310 	add.w	r3, r7, #16
 80008de:	4619      	mov	r1, r3
 80008e0:	480d      	ldr	r0, [pc, #52]	; (8000918 <MX_TIM1_Init+0xa0>)
 80008e2:	f002 ff01 	bl	80036e8 <HAL_TIM_ConfigClockSource>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80008ec:	f000 f918 	bl	8000b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f0:	2300      	movs	r3, #0
 80008f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	4619      	mov	r1, r3
 8000900:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_TIM1_Init+0xa0>)
 8000902:	f003 f927 	bl	8003b54 <HAL_TIMEx_MasterConfigSynchronization>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800090c:	f000 f908 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	3720      	adds	r7, #32
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	200002a0 	.word	0x200002a0
 800091c:	40010000 	.word	0x40010000

08000920 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000924:	4b14      	ldr	r3, [pc, #80]	; (8000978 <MX_USART3_UART_Init+0x58>)
 8000926:	4a15      	ldr	r2, [pc, #84]	; (800097c <MX_USART3_UART_Init+0x5c>)
 8000928:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800092a:	4b13      	ldr	r3, [pc, #76]	; (8000978 <MX_USART3_UART_Init+0x58>)
 800092c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000930:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <MX_USART3_UART_Init+0x58>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000938:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <MX_USART3_UART_Init+0x58>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <MX_USART3_UART_Init+0x58>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MX_USART3_UART_Init+0x58>)
 8000946:	220c      	movs	r2, #12
 8000948:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <MX_USART3_UART_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_USART3_UART_Init+0x58>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <MX_USART3_UART_Init+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_USART3_UART_Init+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_USART3_UART_Init+0x58>)
 8000964:	f003 f9a2 	bl	8003cac <HAL_UART_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800096e:	f000 f8d7 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	200002ec 	.word	0x200002ec
 800097c:	40004800 	.word	0x40004800

08000980 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000986:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800098a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800098c:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098e:	2206      	movs	r2, #6
 8000990:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000994:	2202      	movs	r2, #2
 8000996:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000998:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a0:	2202      	movs	r2, #2
 80009a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009b0:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009be:	2200      	movs	r2, #0
 80009c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009c2:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c4:	f001 f9cd 	bl	8001d62 <HAL_PCD_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009ce:	f000 f8a7 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000374 	.word	0x20000374

080009dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08c      	sub	sp, #48	; 0x30
 80009e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f2:	4b47      	ldr	r3, [pc, #284]	; (8000b10 <MX_GPIO_Init+0x134>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a46      	ldr	r2, [pc, #280]	; (8000b10 <MX_GPIO_Init+0x134>)
 80009f8:	f043 0304 	orr.w	r3, r3, #4
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b44      	ldr	r3, [pc, #272]	; (8000b10 <MX_GPIO_Init+0x134>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	61bb      	str	r3, [r7, #24]
 8000a08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a0a:	4b41      	ldr	r3, [pc, #260]	; (8000b10 <MX_GPIO_Init+0x134>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a40      	ldr	r2, [pc, #256]	; (8000b10 <MX_GPIO_Init+0x134>)
 8000a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b3e      	ldr	r3, [pc, #248]	; (8000b10 <MX_GPIO_Init+0x134>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	4b3b      	ldr	r3, [pc, #236]	; (8000b10 <MX_GPIO_Init+0x134>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a3a      	ldr	r2, [pc, #232]	; (8000b10 <MX_GPIO_Init+0x134>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b38      	ldr	r3, [pc, #224]	; (8000b10 <MX_GPIO_Init+0x134>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3a:	4b35      	ldr	r3, [pc, #212]	; (8000b10 <MX_GPIO_Init+0x134>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a34      	ldr	r2, [pc, #208]	; (8000b10 <MX_GPIO_Init+0x134>)
 8000a40:	f043 0302 	orr.w	r3, r3, #2
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b32      	ldr	r3, [pc, #200]	; (8000b10 <MX_GPIO_Init+0x134>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0302 	and.w	r3, r3, #2
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a52:	4b2f      	ldr	r3, [pc, #188]	; (8000b10 <MX_GPIO_Init+0x134>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a2e      	ldr	r2, [pc, #184]	; (8000b10 <MX_GPIO_Init+0x134>)
 8000a58:	f043 0308 	orr.w	r3, r3, #8
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b2c      	ldr	r3, [pc, #176]	; (8000b10 <MX_GPIO_Init+0x134>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0308 	and.w	r3, r3, #8
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a6a:	4b29      	ldr	r3, [pc, #164]	; (8000b10 <MX_GPIO_Init+0x134>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a28      	ldr	r2, [pc, #160]	; (8000b10 <MX_GPIO_Init+0x134>)
 8000a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b26      	ldr	r3, [pc, #152]	; (8000b10 <MX_GPIO_Init+0x134>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a82:	2200      	movs	r2, #0
 8000a84:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a88:	4822      	ldr	r0, [pc, #136]	; (8000b14 <MX_GPIO_Init+0x138>)
 8000a8a:	f001 f951 	bl	8001d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2140      	movs	r1, #64	; 0x40
 8000a92:	4821      	ldr	r0, [pc, #132]	; (8000b18 <MX_GPIO_Init+0x13c>)
 8000a94:	f001 f94c 	bl	8001d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a9e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4619      	mov	r1, r3
 8000aae:	481b      	ldr	r0, [pc, #108]	; (8000b1c <MX_GPIO_Init+0x140>)
 8000ab0:	f000 ff7a 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ab4:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aba:	2301      	movs	r3, #1
 8000abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac6:	f107 031c 	add.w	r3, r7, #28
 8000aca:	4619      	mov	r1, r3
 8000acc:	4811      	ldr	r0, [pc, #68]	; (8000b14 <MX_GPIO_Init+0x138>)
 8000ace:	f000 ff6b 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ad2:	2340      	movs	r3, #64	; 0x40
 8000ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	480b      	ldr	r0, [pc, #44]	; (8000b18 <MX_GPIO_Init+0x13c>)
 8000aea:	f000 ff5d 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000aee:	2380      	movs	r3, #128	; 0x80
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af2:	2300      	movs	r3, #0
 8000af4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	4619      	mov	r1, r3
 8000b00:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_GPIO_Init+0x13c>)
 8000b02:	f000 ff51 	bl	80019a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b06:	bf00      	nop
 8000b08:	3730      	adds	r7, #48	; 0x30
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40020400 	.word	0x40020400
 8000b18:	40021800 	.word	0x40021800
 8000b1c:	40020800 	.word	0x40020800

08000b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b24:	b672      	cpsid	i
}
 8000b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <Error_Handler+0x8>
	...

08000b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b32:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <HAL_MspInit+0x44>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	4a0e      	ldr	r2, [pc, #56]	; (8000b70 <HAL_MspInit+0x44>)
 8000b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <HAL_MspInit+0x44>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <HAL_MspInit+0x44>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4e:	4a08      	ldr	r2, [pc, #32]	; (8000b70 <HAL_MspInit+0x44>)
 8000b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b54:	6453      	str	r3, [r2, #68]	; 0x44
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_MspInit+0x44>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	40023800 	.word	0x40023800

08000b74 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08e      	sub	sp, #56	; 0x38
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a4e      	ldr	r2, [pc, #312]	; (8000ccc <HAL_ETH_MspInit+0x158>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	f040 8096 	bne.w	8000cc4 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b98:	4b4d      	ldr	r3, [pc, #308]	; (8000cd0 <HAL_ETH_MspInit+0x15c>)
 8000b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9c:	4a4c      	ldr	r2, [pc, #304]	; (8000cd0 <HAL_ETH_MspInit+0x15c>)
 8000b9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ba2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba4:	4b4a      	ldr	r3, [pc, #296]	; (8000cd0 <HAL_ETH_MspInit+0x15c>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bac:	623b      	str	r3, [r7, #32]
 8000bae:	6a3b      	ldr	r3, [r7, #32]
 8000bb0:	4b47      	ldr	r3, [pc, #284]	; (8000cd0 <HAL_ETH_MspInit+0x15c>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb4:	4a46      	ldr	r2, [pc, #280]	; (8000cd0 <HAL_ETH_MspInit+0x15c>)
 8000bb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000bba:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbc:	4b44      	ldr	r3, [pc, #272]	; (8000cd0 <HAL_ETH_MspInit+0x15c>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bc4:	61fb      	str	r3, [r7, #28]
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	4b41      	ldr	r3, [pc, #260]	; (8000cd0 <HAL_ETH_MspInit+0x15c>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bcc:	4a40      	ldr	r2, [pc, #256]	; (8000cd0 <HAL_ETH_MspInit+0x15c>)
 8000bce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000bd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd4:	4b3e      	ldr	r3, [pc, #248]	; (8000cd0 <HAL_ETH_MspInit+0x15c>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000bdc:	61bb      	str	r3, [r7, #24]
 8000bde:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be0:	4b3b      	ldr	r3, [pc, #236]	; (8000cd0 <HAL_ETH_MspInit+0x15c>)
 8000be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be4:	4a3a      	ldr	r2, [pc, #232]	; (8000cd0 <HAL_ETH_MspInit+0x15c>)
 8000be6:	f043 0304 	orr.w	r3, r3, #4
 8000bea:	6313      	str	r3, [r2, #48]	; 0x30
 8000bec:	4b38      	ldr	r3, [pc, #224]	; (8000cd0 <HAL_ETH_MspInit+0x15c>)
 8000bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf0:	f003 0304 	and.w	r3, r3, #4
 8000bf4:	617b      	str	r3, [r7, #20]
 8000bf6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf8:	4b35      	ldr	r3, [pc, #212]	; (8000cd0 <HAL_ETH_MspInit+0x15c>)
 8000bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfc:	4a34      	ldr	r2, [pc, #208]	; (8000cd0 <HAL_ETH_MspInit+0x15c>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	6313      	str	r3, [r2, #48]	; 0x30
 8000c04:	4b32      	ldr	r3, [pc, #200]	; (8000cd0 <HAL_ETH_MspInit+0x15c>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c08:	f003 0301 	and.w	r3, r3, #1
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c10:	4b2f      	ldr	r3, [pc, #188]	; (8000cd0 <HAL_ETH_MspInit+0x15c>)
 8000c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c14:	4a2e      	ldr	r2, [pc, #184]	; (8000cd0 <HAL_ETH_MspInit+0x15c>)
 8000c16:	f043 0302 	orr.w	r3, r3, #2
 8000c1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1c:	4b2c      	ldr	r3, [pc, #176]	; (8000cd0 <HAL_ETH_MspInit+0x15c>)
 8000c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c20:	f003 0302 	and.w	r3, r3, #2
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c28:	4b29      	ldr	r3, [pc, #164]	; (8000cd0 <HAL_ETH_MspInit+0x15c>)
 8000c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2c:	4a28      	ldr	r2, [pc, #160]	; (8000cd0 <HAL_ETH_MspInit+0x15c>)
 8000c2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c32:	6313      	str	r3, [r2, #48]	; 0x30
 8000c34:	4b26      	ldr	r3, [pc, #152]	; (8000cd0 <HAL_ETH_MspInit+0x15c>)
 8000c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c40:	2332      	movs	r3, #50	; 0x32
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c44:	2302      	movs	r3, #2
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c50:	230b      	movs	r3, #11
 8000c52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c58:	4619      	mov	r1, r3
 8000c5a:	481e      	ldr	r0, [pc, #120]	; (8000cd4 <HAL_ETH_MspInit+0x160>)
 8000c5c:	f000 fea4 	bl	80019a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c60:	2386      	movs	r3, #134	; 0x86
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c70:	230b      	movs	r3, #11
 8000c72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4817      	ldr	r0, [pc, #92]	; (8000cd8 <HAL_ETH_MspInit+0x164>)
 8000c7c:	f000 fe94 	bl	80019a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c92:	230b      	movs	r3, #11
 8000c94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	480f      	ldr	r0, [pc, #60]	; (8000cdc <HAL_ETH_MspInit+0x168>)
 8000c9e:	f000 fe83 	bl	80019a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ca2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cb4:	230b      	movs	r3, #11
 8000cb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4808      	ldr	r0, [pc, #32]	; (8000ce0 <HAL_ETH_MspInit+0x16c>)
 8000cc0:	f000 fe72 	bl	80019a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000cc4:	bf00      	nop
 8000cc6:	3738      	adds	r7, #56	; 0x38
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40028000 	.word	0x40028000
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40020800 	.word	0x40020800
 8000cd8:	40020000 	.word	0x40020000
 8000cdc:	40020400 	.word	0x40020400
 8000ce0:	40021800 	.word	0x40021800

08000ce4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0d      	ldr	r2, [pc, #52]	; (8000d28 <HAL_TIM_Base_MspInit+0x44>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d113      	bne.n	8000d1e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <HAL_TIM_Base_MspInit+0x48>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfa:	4a0c      	ldr	r2, [pc, #48]	; (8000d2c <HAL_TIM_Base_MspInit+0x48>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6453      	str	r3, [r2, #68]	; 0x44
 8000d02:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <HAL_TIM_Base_MspInit+0x48>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2100      	movs	r1, #0
 8000d12:	2019      	movs	r0, #25
 8000d14:	f000 faeb 	bl	80012ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d18:	2019      	movs	r0, #25
 8000d1a:	f000 fb04 	bl	8001326 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40010000 	.word	0x40010000
 8000d2c:	40023800 	.word	0x40023800

08000d30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b0ae      	sub	sp, #184	; 0xb8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	2290      	movs	r2, #144	; 0x90
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f003 ffab 	bl	8004cac <memset>
  if(huart->Instance==USART3)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a22      	ldr	r2, [pc, #136]	; (8000de4 <HAL_UART_MspInit+0xb4>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d13c      	bne.n	8000dda <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d64:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d66:	2300      	movs	r3, #0
 8000d68:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f001 fe74 	bl	8002a5c <HAL_RCCEx_PeriphCLKConfig>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d7a:	f7ff fed1 	bl	8000b20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d7e:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <HAL_UART_MspInit+0xb8>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	4a19      	ldr	r2, [pc, #100]	; (8000de8 <HAL_UART_MspInit+0xb8>)
 8000d84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d88:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8a:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <HAL_UART_MspInit+0xb8>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d96:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <HAL_UART_MspInit+0xb8>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a13      	ldr	r2, [pc, #76]	; (8000de8 <HAL_UART_MspInit+0xb8>)
 8000d9c:	f043 0308 	orr.w	r3, r3, #8
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <HAL_UART_MspInit+0xb8>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0308 	and.w	r3, r3, #8
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000dae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000db2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dc8:	2307      	movs	r3, #7
 8000dca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4805      	ldr	r0, [pc, #20]	; (8000dec <HAL_UART_MspInit+0xbc>)
 8000dd6:	f000 fde7 	bl	80019a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dda:	bf00      	nop
 8000ddc:	37b8      	adds	r7, #184	; 0xb8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40004800 	.word	0x40004800
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020c00 	.word	0x40020c00

08000df0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b0ae      	sub	sp, #184	; 0xb8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	2290      	movs	r2, #144	; 0x90
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f003 ff4b 	bl	8004cac <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e1e:	d159      	bne.n	8000ed4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000e20:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000e24:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4618      	mov	r0, r3
 8000e32:	f001 fe13 	bl	8002a5c <HAL_RCCEx_PeriphCLKConfig>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000e3c:	f7ff fe70 	bl	8000b20 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e40:	4b26      	ldr	r3, [pc, #152]	; (8000edc <HAL_PCD_MspInit+0xec>)
 8000e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e44:	4a25      	ldr	r2, [pc, #148]	; (8000edc <HAL_PCD_MspInit+0xec>)
 8000e46:	f043 0301 	orr.w	r3, r3, #1
 8000e4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4c:	4b23      	ldr	r3, [pc, #140]	; (8000edc <HAL_PCD_MspInit+0xec>)
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e58:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e72:	230a      	movs	r3, #10
 8000e74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e78:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4818      	ldr	r0, [pc, #96]	; (8000ee0 <HAL_PCD_MspInit+0xf0>)
 8000e80:	f000 fd92 	bl	80019a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e98:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4810      	ldr	r0, [pc, #64]	; (8000ee0 <HAL_PCD_MspInit+0xf0>)
 8000ea0:	f000 fd82 	bl	80019a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ea4:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <HAL_PCD_MspInit+0xec>)
 8000ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ea8:	4a0c      	ldr	r2, [pc, #48]	; (8000edc <HAL_PCD_MspInit+0xec>)
 8000eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eae:	6353      	str	r3, [r2, #52]	; 0x34
 8000eb0:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <HAL_PCD_MspInit+0xec>)
 8000eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	4b07      	ldr	r3, [pc, #28]	; (8000edc <HAL_PCD_MspInit+0xec>)
 8000ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec0:	4a06      	ldr	r2, [pc, #24]	; (8000edc <HAL_PCD_MspInit+0xec>)
 8000ec2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec6:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec8:	4b04      	ldr	r3, [pc, #16]	; (8000edc <HAL_PCD_MspInit+0xec>)
 8000eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ecc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ed4:	bf00      	nop
 8000ed6:	37b8      	adds	r7, #184	; 0xb8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40020000 	.word	0x40020000

08000ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <NMI_Handler+0x4>

08000eea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eee:	e7fe      	b.n	8000eee <HardFault_Handler+0x4>

08000ef0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <MemManage_Handler+0x4>

08000ef6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <BusFault_Handler+0x4>

08000efc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <UsageFault_Handler+0x4>

08000f02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f30:	f000 f8be 	bl	80010b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f3c:	4803      	ldr	r0, [pc, #12]	; (8000f4c <TIM1_UP_TIM10_IRQHandler+0x14>)
 8000f3e:	f002 fab4 	bl	80034aa <HAL_TIM_IRQHandler>
  state=1;
 8000f42:	4b03      	ldr	r3, [pc, #12]	; (8000f50 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200002a0 	.word	0x200002a0
 8000f50:	2000087c 	.word	0x2000087c

08000f54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f5c:	4a14      	ldr	r2, [pc, #80]	; (8000fb0 <_sbrk+0x5c>)
 8000f5e:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <_sbrk+0x60>)
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f68:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <_sbrk+0x64>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d102      	bne.n	8000f76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f70:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <_sbrk+0x64>)
 8000f72:	4a12      	ldr	r2, [pc, #72]	; (8000fbc <_sbrk+0x68>)
 8000f74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f76:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <_sbrk+0x64>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d207      	bcs.n	8000f94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f84:	f003 fe9a 	bl	8004cbc <__errno>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	220c      	movs	r2, #12
 8000f8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f92:	e009      	b.n	8000fa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <_sbrk+0x64>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f9a:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <_sbrk+0x64>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <_sbrk+0x64>)
 8000fa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20080000 	.word	0x20080000
 8000fb4:	00000400 	.word	0x00000400
 8000fb8:	20000888 	.word	0x20000888
 8000fbc:	200009d8 	.word	0x200009d8

08000fc0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <SystemInit+0x20>)
 8000fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fca:	4a05      	ldr	r2, [pc, #20]	; (8000fe0 <SystemInit+0x20>)
 8000fcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fe4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800101c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fe8:	480d      	ldr	r0, [pc, #52]	; (8001020 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fea:	490e      	ldr	r1, [pc, #56]	; (8001024 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fec:	4a0e      	ldr	r2, [pc, #56]	; (8001028 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff0:	e002      	b.n	8000ff8 <LoopCopyDataInit>

08000ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff6:	3304      	adds	r3, #4

08000ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ffc:	d3f9      	bcc.n	8000ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffe:	4a0b      	ldr	r2, [pc, #44]	; (800102c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001000:	4c0b      	ldr	r4, [pc, #44]	; (8001030 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001004:	e001      	b.n	800100a <LoopFillZerobss>

08001006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001008:	3204      	adds	r2, #4

0800100a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800100c:	d3fb      	bcc.n	8001006 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800100e:	f7ff ffd7 	bl	8000fc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001012:	f003 fe59 	bl	8004cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001016:	f7ff fae9 	bl	80005ec <main>
  bx  lr    
 800101a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800101c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001024:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001028:	08005638 	.word	0x08005638
  ldr r2, =_sbss
 800102c:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 8001030:	200009d8 	.word	0x200009d8

08001034 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001034:	e7fe      	b.n	8001034 <ADC_IRQHandler>

08001036 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800103a:	2003      	movs	r0, #3
 800103c:	f000 f94c 	bl	80012d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001040:	2000      	movs	r0, #0
 8001042:	f000 f805 	bl	8001050 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001046:	f7ff fd71 	bl	8000b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	bd80      	pop	{r7, pc}

08001050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <HAL_InitTick+0x54>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_InitTick+0x58>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4619      	mov	r1, r3
 8001062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001066:	fbb3 f3f1 	udiv	r3, r3, r1
 800106a:	fbb2 f3f3 	udiv	r3, r2, r3
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f967 	bl	8001342 <HAL_SYSTICK_Config>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e00e      	b.n	800109c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b0f      	cmp	r3, #15
 8001082:	d80a      	bhi.n	800109a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001084:	2200      	movs	r2, #0
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	f04f 30ff 	mov.w	r0, #4294967295
 800108c:	f000 f92f 	bl	80012ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001090:	4a06      	ldr	r2, [pc, #24]	; (80010ac <HAL_InitTick+0x5c>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001096:	2300      	movs	r3, #0
 8001098:	e000      	b.n	800109c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
}
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000000 	.word	0x20000000
 80010a8:	20000008 	.word	0x20000008
 80010ac:	20000004 	.word	0x20000004

080010b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_IncTick+0x20>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_IncTick+0x24>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4413      	add	r3, r2
 80010c0:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <HAL_IncTick+0x24>)
 80010c2:	6013      	str	r3, [r2, #0]
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000008 	.word	0x20000008
 80010d4:	2000088c 	.word	0x2000088c

080010d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return uwTick;
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <HAL_GetTick+0x14>)
 80010de:	681b      	ldr	r3, [r3, #0]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	2000088c 	.word	0x2000088c

080010f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f8:	f7ff ffee 	bl	80010d8 <HAL_GetTick>
 80010fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001108:	d005      	beq.n	8001116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800110a:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <HAL_Delay+0x44>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	461a      	mov	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4413      	add	r3, r2
 8001114:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001116:	bf00      	nop
 8001118:	f7ff ffde 	bl	80010d8 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	429a      	cmp	r2, r3
 8001126:	d8f7      	bhi.n	8001118 <HAL_Delay+0x28>
  {
  }
}
 8001128:	bf00      	nop
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000008 	.word	0x20000008

08001138 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <__NVIC_SetPriorityGrouping+0x40>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001154:	4013      	ands	r3, r2
 8001156:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <__NVIC_SetPriorityGrouping+0x44>)
 8001162:	4313      	orrs	r3, r2
 8001164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001166:	4a04      	ldr	r2, [pc, #16]	; (8001178 <__NVIC_SetPriorityGrouping+0x40>)
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	60d3      	str	r3, [r2, #12]
}
 800116c:	bf00      	nop
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000ed00 	.word	0xe000ed00
 800117c:	05fa0000 	.word	0x05fa0000

08001180 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <__NVIC_GetPriorityGrouping+0x18>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	0a1b      	lsrs	r3, r3, #8
 800118a:	f003 0307 	and.w	r3, r3, #7
}
 800118e:	4618      	mov	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	db0b      	blt.n	80011c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	f003 021f 	and.w	r2, r3, #31
 80011b4:	4907      	ldr	r1, [pc, #28]	; (80011d4 <__NVIC_EnableIRQ+0x38>)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	095b      	lsrs	r3, r3, #5
 80011bc:	2001      	movs	r0, #1
 80011be:	fa00 f202 	lsl.w	r2, r0, r2
 80011c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000e100 	.word	0xe000e100

080011d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	6039      	str	r1, [r7, #0]
 80011e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	db0a      	blt.n	8001202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	490c      	ldr	r1, [pc, #48]	; (8001224 <__NVIC_SetPriority+0x4c>)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	0112      	lsls	r2, r2, #4
 80011f8:	b2d2      	uxtb	r2, r2
 80011fa:	440b      	add	r3, r1
 80011fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001200:	e00a      	b.n	8001218 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4908      	ldr	r1, [pc, #32]	; (8001228 <__NVIC_SetPriority+0x50>)
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	3b04      	subs	r3, #4
 8001210:	0112      	lsls	r2, r2, #4
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	440b      	add	r3, r1
 8001216:	761a      	strb	r2, [r3, #24]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000e100 	.word	0xe000e100
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800122c:	b480      	push	{r7}
 800122e:	b089      	sub	sp, #36	; 0x24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f1c3 0307 	rsb	r3, r3, #7
 8001246:	2b04      	cmp	r3, #4
 8001248:	bf28      	it	cs
 800124a:	2304      	movcs	r3, #4
 800124c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3304      	adds	r3, #4
 8001252:	2b06      	cmp	r3, #6
 8001254:	d902      	bls.n	800125c <NVIC_EncodePriority+0x30>
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3b03      	subs	r3, #3
 800125a:	e000      	b.n	800125e <NVIC_EncodePriority+0x32>
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	f04f 32ff 	mov.w	r2, #4294967295
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43da      	mvns	r2, r3
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	401a      	ands	r2, r3
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001274:	f04f 31ff 	mov.w	r1, #4294967295
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	fa01 f303 	lsl.w	r3, r1, r3
 800127e:	43d9      	mvns	r1, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	4313      	orrs	r3, r2
         );
}
 8001286:	4618      	mov	r0, r3
 8001288:	3724      	adds	r7, #36	; 0x24
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
	...

08001294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3b01      	subs	r3, #1
 80012a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a4:	d301      	bcc.n	80012aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012a6:	2301      	movs	r3, #1
 80012a8:	e00f      	b.n	80012ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012aa:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <SysTick_Config+0x40>)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b2:	210f      	movs	r1, #15
 80012b4:	f04f 30ff 	mov.w	r0, #4294967295
 80012b8:	f7ff ff8e 	bl	80011d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012bc:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <SysTick_Config+0x40>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c2:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <SysTick_Config+0x40>)
 80012c4:	2207      	movs	r2, #7
 80012c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	e000e010 	.word	0xe000e010

080012d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ff29 	bl	8001138 <__NVIC_SetPriorityGrouping>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b086      	sub	sp, #24
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	4603      	mov	r3, r0
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001300:	f7ff ff3e 	bl	8001180 <__NVIC_GetPriorityGrouping>
 8001304:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	68b9      	ldr	r1, [r7, #8]
 800130a:	6978      	ldr	r0, [r7, #20]
 800130c:	f7ff ff8e 	bl	800122c <NVIC_EncodePriority>
 8001310:	4602      	mov	r2, r0
 8001312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001316:	4611      	mov	r1, r2
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff5d 	bl	80011d8 <__NVIC_SetPriority>
}
 800131e:	bf00      	nop
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	4603      	mov	r3, r0
 800132e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff31 	bl	800119c <__NVIC_EnableIRQ>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ffa2 	bl	8001294 <SysTick_Config>
 8001350:	4603      	mov	r3, r0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e06a      	b.n	8001444 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001374:	2b00      	cmp	r3, #0
 8001376:	d106      	bne.n	8001386 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2223      	movs	r2, #35	; 0x23
 800137c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff fbf7 	bl	8000b74 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001386:	4b31      	ldr	r3, [pc, #196]	; (800144c <HAL_ETH_Init+0xf0>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138a:	4a30      	ldr	r2, [pc, #192]	; (800144c <HAL_ETH_Init+0xf0>)
 800138c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001390:	6453      	str	r3, [r2, #68]	; 0x44
 8001392:	4b2e      	ldr	r3, [pc, #184]	; (800144c <HAL_ETH_Init+0xf0>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800139e:	4b2c      	ldr	r3, [pc, #176]	; (8001450 <HAL_ETH_Init+0xf4>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	4a2b      	ldr	r2, [pc, #172]	; (8001450 <HAL_ETH_Init+0xf4>)
 80013a4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013a8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80013aa:	4b29      	ldr	r3, [pc, #164]	; (8001450 <HAL_ETH_Init+0xf4>)
 80013ac:	685a      	ldr	r2, [r3, #4]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	4927      	ldr	r1, [pc, #156]	; (8001450 <HAL_ETH_Init+0xf4>)
 80013b4:	4313      	orrs	r3, r2
 80013b6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80013b8:	4b25      	ldr	r3, [pc, #148]	; (8001450 <HAL_ETH_Init+0xf4>)
 80013ba:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	6812      	ldr	r2, [r2, #0]
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013d2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013d4:	f7ff fe80 	bl	80010d8 <HAL_GetTick>
 80013d8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013da:	e011      	b.n	8001400 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80013dc:	f7ff fe7c 	bl	80010d8 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013ea:	d909      	bls.n	8001400 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2204      	movs	r2, #4
 80013f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	22e0      	movs	r2, #224	; 0xe0
 80013f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e021      	b.n	8001444 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1e4      	bne.n	80013dc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f000 f958 	bl	80016c8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 f9ff 	bl	800181c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f000 fa55 	bl	80018ce <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	461a      	mov	r2, r3
 800142a:	2100      	movs	r1, #0
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f000 f9bd 	bl	80017ac <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2210      	movs	r2, #16
 800143e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40023800 	.word	0x40023800
 8001450:	40013800 	.word	0x40013800

08001454 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	4b51      	ldr	r3, [pc, #324]	; (80015b0 <ETH_SetMACConfig+0x15c>)
 800146a:	4013      	ands	r3, r2
 800146c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	7c1b      	ldrb	r3, [r3, #16]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d102      	bne.n	800147c <ETH_SetMACConfig+0x28>
 8001476:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800147a:	e000      	b.n	800147e <ETH_SetMACConfig+0x2a>
 800147c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	7c5b      	ldrb	r3, [r3, #17]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d102      	bne.n	800148c <ETH_SetMACConfig+0x38>
 8001486:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800148a:	e000      	b.n	800148e <ETH_SetMACConfig+0x3a>
 800148c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800148e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001494:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	7fdb      	ldrb	r3, [r3, #31]
 800149a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800149c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80014a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	7f92      	ldrb	r2, [r2, #30]
 80014a8:	2a00      	cmp	r2, #0
 80014aa:	d102      	bne.n	80014b2 <ETH_SetMACConfig+0x5e>
 80014ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014b0:	e000      	b.n	80014b4 <ETH_SetMACConfig+0x60>
 80014b2:	2200      	movs	r2, #0
                        macconf->Speed |
 80014b4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	7f1b      	ldrb	r3, [r3, #28]
 80014ba:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80014bc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80014c2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	791b      	ldrb	r3, [r3, #4]
 80014c8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80014ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80014cc:	683a      	ldr	r2, [r7, #0]
 80014ce:	f892 2020 	ldrb.w	r2, [r2, #32]
 80014d2:	2a00      	cmp	r2, #0
 80014d4:	d102      	bne.n	80014dc <ETH_SetMACConfig+0x88>
 80014d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014da:	e000      	b.n	80014de <ETH_SetMACConfig+0x8a>
 80014dc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80014de:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	7bdb      	ldrb	r3, [r3, #15]
 80014e4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80014e6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80014ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80014f4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014f6:	4313      	orrs	r3, r2
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800150e:	2001      	movs	r0, #1
 8001510:	f7ff fdee 	bl	80010f0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	68fa      	ldr	r2, [r7, #12]
 800151a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	f64f 7341 	movw	r3, #65345	; 0xff41
 800152a:	4013      	ands	r3, r2
 800152c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001532:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800153a:	2a00      	cmp	r2, #0
 800153c:	d101      	bne.n	8001542 <ETH_SetMACConfig+0xee>
 800153e:	2280      	movs	r2, #128	; 0x80
 8001540:	e000      	b.n	8001544 <ETH_SetMACConfig+0xf0>
 8001542:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001544:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800154a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001552:	2a01      	cmp	r2, #1
 8001554:	d101      	bne.n	800155a <ETH_SetMACConfig+0x106>
 8001556:	2208      	movs	r2, #8
 8001558:	e000      	b.n	800155c <ETH_SetMACConfig+0x108>
 800155a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800155c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800155e:	683a      	ldr	r2, [r7, #0]
 8001560:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001564:	2a01      	cmp	r2, #1
 8001566:	d101      	bne.n	800156c <ETH_SetMACConfig+0x118>
 8001568:	2204      	movs	r2, #4
 800156a:	e000      	b.n	800156e <ETH_SetMACConfig+0x11a>
 800156c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800156e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001576:	2a01      	cmp	r2, #1
 8001578:	d101      	bne.n	800157e <ETH_SetMACConfig+0x12a>
 800157a:	2202      	movs	r2, #2
 800157c:	e000      	b.n	8001580 <ETH_SetMACConfig+0x12c>
 800157e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001580:	4313      	orrs	r3, r2
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	4313      	orrs	r3, r2
 8001586:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001598:	2001      	movs	r0, #1
 800159a:	f7ff fda9 	bl	80010f0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	619a      	str	r2, [r3, #24]
}
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	ff20810f 	.word	0xff20810f

080015b4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	4b3d      	ldr	r3, [pc, #244]	; (80016c4 <ETH_SetDMAConfig+0x110>)
 80015ce:	4013      	ands	r3, r2
 80015d0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	7b1b      	ldrb	r3, [r3, #12]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d102      	bne.n	80015e0 <ETH_SetDMAConfig+0x2c>
 80015da:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80015de:	e000      	b.n	80015e2 <ETH_SetDMAConfig+0x2e>
 80015e0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	7b5b      	ldrb	r3, [r3, #13]
 80015e6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015e8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	7f52      	ldrb	r2, [r2, #29]
 80015ee:	2a00      	cmp	r2, #0
 80015f0:	d102      	bne.n	80015f8 <ETH_SetDMAConfig+0x44>
 80015f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80015f6:	e000      	b.n	80015fa <ETH_SetDMAConfig+0x46>
 80015f8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80015fa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	7b9b      	ldrb	r3, [r3, #14]
 8001600:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001602:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001608:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	7f1b      	ldrb	r3, [r3, #28]
 800160e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001610:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	7f9b      	ldrb	r3, [r3, #30]
 8001616:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001618:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800161e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001626:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001628:	4313      	orrs	r3, r2
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	4313      	orrs	r3, r2
 800162e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001638:	461a      	mov	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800164a:	2001      	movs	r0, #1
 800164c:	f7ff fd50 	bl	80010f0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001658:	461a      	mov	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	791b      	ldrb	r3, [r3, #4]
 8001662:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001668:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800166e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001674:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800167c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800167e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001684:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001686:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800168c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	6812      	ldr	r2, [r2, #0]
 8001692:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001696:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800169a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016a8:	2001      	movs	r0, #1
 80016aa:	f7ff fd21 	bl	80010f0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016b6:	461a      	mov	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6013      	str	r3, [r2, #0]
}
 80016bc:	bf00      	nop
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	f8de3f23 	.word	0xf8de3f23

080016c8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b0a6      	sub	sp, #152	; 0x98
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80016d0:	2301      	movs	r3, #1
 80016d2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80016d6:	2301      	movs	r3, #1
 80016d8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80016dc:	2300      	movs	r3, #0
 80016de:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80016e6:	2301      	movs	r3, #1
 80016e8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80016f2:	2301      	movs	r3, #1
 80016f4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80016f8:	2300      	movs	r3, #0
 80016fa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80016fe:	2300      	movs	r3, #0
 8001700:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001704:	2300      	movs	r3, #0
 8001706:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001708:	2300      	movs	r3, #0
 800170a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800170e:	2300      	movs	r3, #0
 8001710:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001712:	2300      	movs	r3, #0
 8001714:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001718:	2300      	movs	r3, #0
 800171a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800171e:	2300      	movs	r3, #0
 8001720:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001724:	2300      	movs	r3, #0
 8001726:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800172a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800172e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001730:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001734:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001736:	2300      	movs	r3, #0
 8001738:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800173c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001740:	4619      	mov	r1, r3
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff fe86 	bl	8001454 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001748:	2301      	movs	r3, #1
 800174a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800174c:	2301      	movs	r3, #1
 800174e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001750:	2301      	movs	r3, #1
 8001752:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001756:	2301      	movs	r3, #1
 8001758:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001764:	2300      	movs	r3, #0
 8001766:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800176a:	2300      	movs	r3, #0
 800176c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800176e:	2301      	movs	r3, #1
 8001770:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001774:	2301      	movs	r3, #1
 8001776:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001778:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800177c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800177e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001782:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001784:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001788:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800178a:	2301      	movs	r3, #1
 800178c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001790:	2300      	movs	r3, #0
 8001792:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001794:	2300      	movs	r3, #0
 8001796:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001798:	f107 0308 	add.w	r3, r7, #8
 800179c:	4619      	mov	r1, r3
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff ff08 	bl	80015b4 <ETH_SetDMAConfig>
}
 80017a4:	bf00      	nop
 80017a6:	3798      	adds	r7, #152	; 0x98
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b087      	sub	sp, #28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3305      	adds	r3, #5
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	021b      	lsls	r3, r3, #8
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	3204      	adds	r2, #4
 80017c4:	7812      	ldrb	r2, [r2, #0]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	4b11      	ldr	r3, [pc, #68]	; (8001814 <ETH_MACAddressConfig+0x68>)
 80017ce:	4413      	add	r3, r2
 80017d0:	461a      	mov	r2, r3
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	3303      	adds	r3, #3
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	061a      	lsls	r2, r3, #24
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3302      	adds	r3, #2
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	041b      	lsls	r3, r3, #16
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3301      	adds	r3, #1
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	021b      	lsls	r3, r3, #8
 80017f0:	4313      	orrs	r3, r2
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	7812      	ldrb	r2, [r2, #0]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80017fa:	68ba      	ldr	r2, [r7, #8]
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <ETH_MACAddressConfig+0x6c>)
 80017fe:	4413      	add	r3, r2
 8001800:	461a      	mov	r2, r3
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	6013      	str	r3, [r2, #0]
}
 8001806:	bf00      	nop
 8001808:	371c      	adds	r7, #28
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40028040 	.word	0x40028040
 8001818:	40028044 	.word	0x40028044

0800181c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	e03e      	b.n	80018a8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68d9      	ldr	r1, [r3, #12]
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	4613      	mov	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	440b      	add	r3, r1
 800183a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	2200      	movs	r2, #0
 8001846:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	2200      	movs	r2, #0
 8001852:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001854:	68b9      	ldr	r1, [r7, #8]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	3206      	adds	r2, #6
 800185c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2b02      	cmp	r3, #2
 8001870:	d80c      	bhi.n	800188c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68d9      	ldr	r1, [r3, #12]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	1c5a      	adds	r2, r3, #1
 800187a:	4613      	mov	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4413      	add	r3, r2
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	440b      	add	r3, r1
 8001884:	461a      	mov	r2, r3
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	e004      	b.n	8001896 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	461a      	mov	r2, r3
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	3301      	adds	r3, #1
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2b03      	cmp	r3, #3
 80018ac:	d9bd      	bls.n	800182a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68da      	ldr	r2, [r3, #12]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018c0:	611a      	str	r2, [r3, #16]
}
 80018c2:	bf00      	nop
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b085      	sub	sp, #20
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	e046      	b.n	800196a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6919      	ldr	r1, [r3, #16]
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	440b      	add	r3, r1
 80018ec:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	2200      	movs	r2, #0
 80018f8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	2200      	movs	r2, #0
 80018fe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	2200      	movs	r2, #0
 8001904:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	2200      	movs	r2, #0
 800190a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	2200      	movs	r2, #0
 8001910:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001918:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001920:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800192e:	68b9      	ldr	r1, [r7, #8]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	3212      	adds	r2, #18
 8001936:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2b02      	cmp	r3, #2
 800193e:	d80c      	bhi.n	800195a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6919      	ldr	r1, [r3, #16]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	1c5a      	adds	r2, r3, #1
 8001948:	4613      	mov	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4413      	add	r3, r2
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	440b      	add	r3, r1
 8001952:	461a      	mov	r2, r3
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	60da      	str	r2, [r3, #12]
 8001958:	e004      	b.n	8001964 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	461a      	mov	r2, r3
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	3301      	adds	r3, #1
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2b03      	cmp	r3, #3
 800196e:	d9b5      	bls.n	80018dc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	691a      	ldr	r2, [r3, #16]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800199a:	60da      	str	r2, [r3, #12]
}
 800199c:	bf00      	nop
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b089      	sub	sp, #36	; 0x24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80019be:	2300      	movs	r3, #0
 80019c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80019c2:	2300      	movs	r3, #0
 80019c4:	61fb      	str	r3, [r7, #28]
 80019c6:	e175      	b.n	8001cb4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80019c8:	2201      	movs	r2, #1
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	4013      	ands	r3, r2
 80019da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	f040 8164 	bne.w	8001cae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f003 0303 	and.w	r3, r3, #3
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d005      	beq.n	80019fe <HAL_GPIO_Init+0x56>
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d130      	bne.n	8001a60 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	2203      	movs	r2, #3
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4013      	ands	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	68da      	ldr	r2, [r3, #12]
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a34:	2201      	movs	r2, #1
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	091b      	lsrs	r3, r3, #4
 8001a4a:	f003 0201 	and.w	r2, r3, #1
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	2b03      	cmp	r3, #3
 8001a6a:	d017      	beq.n	8001a9c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	2203      	movs	r2, #3
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 0303 	and.w	r3, r3, #3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d123      	bne.n	8001af0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	08da      	lsrs	r2, r3, #3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3208      	adds	r2, #8
 8001ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	220f      	movs	r2, #15
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	691a      	ldr	r2, [r3, #16]
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	08da      	lsrs	r2, r3, #3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3208      	adds	r2, #8
 8001aea:	69b9      	ldr	r1, [r7, #24]
 8001aec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	2203      	movs	r2, #3
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 0203 	and.w	r2, r3, #3
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 80be 	beq.w	8001cae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b32:	4b66      	ldr	r3, [pc, #408]	; (8001ccc <HAL_GPIO_Init+0x324>)
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	4a65      	ldr	r2, [pc, #404]	; (8001ccc <HAL_GPIO_Init+0x324>)
 8001b38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b3e:	4b63      	ldr	r3, [pc, #396]	; (8001ccc <HAL_GPIO_Init+0x324>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b4a:	4a61      	ldr	r2, [pc, #388]	; (8001cd0 <HAL_GPIO_Init+0x328>)
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	089b      	lsrs	r3, r3, #2
 8001b50:	3302      	adds	r3, #2
 8001b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f003 0303 	and.w	r3, r3, #3
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	220f      	movs	r2, #15
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a58      	ldr	r2, [pc, #352]	; (8001cd4 <HAL_GPIO_Init+0x32c>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d037      	beq.n	8001be6 <HAL_GPIO_Init+0x23e>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a57      	ldr	r2, [pc, #348]	; (8001cd8 <HAL_GPIO_Init+0x330>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d031      	beq.n	8001be2 <HAL_GPIO_Init+0x23a>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a56      	ldr	r2, [pc, #344]	; (8001cdc <HAL_GPIO_Init+0x334>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d02b      	beq.n	8001bde <HAL_GPIO_Init+0x236>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a55      	ldr	r2, [pc, #340]	; (8001ce0 <HAL_GPIO_Init+0x338>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d025      	beq.n	8001bda <HAL_GPIO_Init+0x232>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a54      	ldr	r2, [pc, #336]	; (8001ce4 <HAL_GPIO_Init+0x33c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d01f      	beq.n	8001bd6 <HAL_GPIO_Init+0x22e>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a53      	ldr	r2, [pc, #332]	; (8001ce8 <HAL_GPIO_Init+0x340>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d019      	beq.n	8001bd2 <HAL_GPIO_Init+0x22a>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a52      	ldr	r2, [pc, #328]	; (8001cec <HAL_GPIO_Init+0x344>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d013      	beq.n	8001bce <HAL_GPIO_Init+0x226>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a51      	ldr	r2, [pc, #324]	; (8001cf0 <HAL_GPIO_Init+0x348>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d00d      	beq.n	8001bca <HAL_GPIO_Init+0x222>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a50      	ldr	r2, [pc, #320]	; (8001cf4 <HAL_GPIO_Init+0x34c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d007      	beq.n	8001bc6 <HAL_GPIO_Init+0x21e>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a4f      	ldr	r2, [pc, #316]	; (8001cf8 <HAL_GPIO_Init+0x350>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d101      	bne.n	8001bc2 <HAL_GPIO_Init+0x21a>
 8001bbe:	2309      	movs	r3, #9
 8001bc0:	e012      	b.n	8001be8 <HAL_GPIO_Init+0x240>
 8001bc2:	230a      	movs	r3, #10
 8001bc4:	e010      	b.n	8001be8 <HAL_GPIO_Init+0x240>
 8001bc6:	2308      	movs	r3, #8
 8001bc8:	e00e      	b.n	8001be8 <HAL_GPIO_Init+0x240>
 8001bca:	2307      	movs	r3, #7
 8001bcc:	e00c      	b.n	8001be8 <HAL_GPIO_Init+0x240>
 8001bce:	2306      	movs	r3, #6
 8001bd0:	e00a      	b.n	8001be8 <HAL_GPIO_Init+0x240>
 8001bd2:	2305      	movs	r3, #5
 8001bd4:	e008      	b.n	8001be8 <HAL_GPIO_Init+0x240>
 8001bd6:	2304      	movs	r3, #4
 8001bd8:	e006      	b.n	8001be8 <HAL_GPIO_Init+0x240>
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e004      	b.n	8001be8 <HAL_GPIO_Init+0x240>
 8001bde:	2302      	movs	r3, #2
 8001be0:	e002      	b.n	8001be8 <HAL_GPIO_Init+0x240>
 8001be2:	2301      	movs	r3, #1
 8001be4:	e000      	b.n	8001be8 <HAL_GPIO_Init+0x240>
 8001be6:	2300      	movs	r3, #0
 8001be8:	69fa      	ldr	r2, [r7, #28]
 8001bea:	f002 0203 	and.w	r2, r2, #3
 8001bee:	0092      	lsls	r2, r2, #2
 8001bf0:	4093      	lsls	r3, r2
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001bf8:	4935      	ldr	r1, [pc, #212]	; (8001cd0 <HAL_GPIO_Init+0x328>)
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	089b      	lsrs	r3, r3, #2
 8001bfe:	3302      	adds	r3, #2
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c06:	4b3d      	ldr	r3, [pc, #244]	; (8001cfc <HAL_GPIO_Init+0x354>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4013      	ands	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c2a:	4a34      	ldr	r2, [pc, #208]	; (8001cfc <HAL_GPIO_Init+0x354>)
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c30:	4b32      	ldr	r3, [pc, #200]	; (8001cfc <HAL_GPIO_Init+0x354>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c54:	4a29      	ldr	r2, [pc, #164]	; (8001cfc <HAL_GPIO_Init+0x354>)
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c5a:	4b28      	ldr	r3, [pc, #160]	; (8001cfc <HAL_GPIO_Init+0x354>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	43db      	mvns	r3, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4013      	ands	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c7e:	4a1f      	ldr	r2, [pc, #124]	; (8001cfc <HAL_GPIO_Init+0x354>)
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c84:	4b1d      	ldr	r3, [pc, #116]	; (8001cfc <HAL_GPIO_Init+0x354>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d003      	beq.n	8001ca8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ca8:	4a14      	ldr	r2, [pc, #80]	; (8001cfc <HAL_GPIO_Init+0x354>)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	61fb      	str	r3, [r7, #28]
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	2b0f      	cmp	r3, #15
 8001cb8:	f67f ae86 	bls.w	80019c8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001cbc:	bf00      	nop
 8001cbe:	bf00      	nop
 8001cc0:	3724      	adds	r7, #36	; 0x24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40013800 	.word	0x40013800
 8001cd4:	40020000 	.word	0x40020000
 8001cd8:	40020400 	.word	0x40020400
 8001cdc:	40020800 	.word	0x40020800
 8001ce0:	40020c00 	.word	0x40020c00
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	40021400 	.word	0x40021400
 8001cec:	40021800 	.word	0x40021800
 8001cf0:	40021c00 	.word	0x40021c00
 8001cf4:	40022000 	.word	0x40022000
 8001cf8:	40022400 	.word	0x40022400
 8001cfc:	40013c00 	.word	0x40013c00

08001d00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691a      	ldr	r2, [r3, #16]
 8001d10:	887b      	ldrh	r3, [r7, #2]
 8001d12:	4013      	ands	r3, r2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d002      	beq.n	8001d1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	73fb      	strb	r3, [r7, #15]
 8001d1c:	e001      	b.n	8001d22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	807b      	strh	r3, [r7, #2]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d40:	787b      	ldrb	r3, [r7, #1]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d46:	887a      	ldrh	r2, [r7, #2]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001d4c:	e003      	b.n	8001d56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001d4e:	887b      	ldrh	r3, [r7, #2]
 8001d50:	041a      	lsls	r2, r3, #16
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	619a      	str	r2, [r3, #24]
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d64:	b08f      	sub	sp, #60	; 0x3c
 8001d66:	af0a      	add	r7, sp, #40	; 0x28
 8001d68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e116      	b.n	8001fa2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d106      	bne.n	8001d94 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff f82e 	bl	8000df0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2203      	movs	r2, #3
 8001d98:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d102      	bne.n	8001dae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f002 fcbe 	bl	8004734 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	603b      	str	r3, [r7, #0]
 8001dbe:	687e      	ldr	r6, [r7, #4]
 8001dc0:	466d      	mov	r5, sp
 8001dc2:	f106 0410 	add.w	r4, r6, #16
 8001dc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dce:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001dd2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001dd6:	1d33      	adds	r3, r6, #4
 8001dd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dda:	6838      	ldr	r0, [r7, #0]
 8001ddc:	f002 fc52 	bl	8004684 <USB_CoreInit>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d005      	beq.n	8001df2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2202      	movs	r2, #2
 8001dea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e0d7      	b.n	8001fa2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2100      	movs	r1, #0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f002 fcac 	bl	8004756 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dfe:	2300      	movs	r3, #0
 8001e00:	73fb      	strb	r3, [r7, #15]
 8001e02:	e04a      	b.n	8001e9a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e04:	7bfa      	ldrb	r2, [r7, #15]
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4413      	add	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	333d      	adds	r3, #61	; 0x3d
 8001e14:	2201      	movs	r2, #1
 8001e16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e18:	7bfa      	ldrb	r2, [r7, #15]
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	4413      	add	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	333c      	adds	r3, #60	; 0x3c
 8001e28:	7bfa      	ldrb	r2, [r7, #15]
 8001e2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e2c:	7bfa      	ldrb	r2, [r7, #15]
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	b298      	uxth	r0, r3
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	4613      	mov	r3, r2
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	4413      	add	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	3344      	adds	r3, #68	; 0x44
 8001e40:	4602      	mov	r2, r0
 8001e42:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e44:	7bfa      	ldrb	r2, [r7, #15]
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	3340      	adds	r3, #64	; 0x40
 8001e54:	2200      	movs	r2, #0
 8001e56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e58:	7bfa      	ldrb	r2, [r7, #15]
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	4413      	add	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	3348      	adds	r3, #72	; 0x48
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e6c:	7bfa      	ldrb	r2, [r7, #15]
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	4613      	mov	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	4413      	add	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	440b      	add	r3, r1
 8001e7a:	334c      	adds	r3, #76	; 0x4c
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e80:	7bfa      	ldrb	r2, [r7, #15]
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	4613      	mov	r3, r2
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	4413      	add	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	3354      	adds	r3, #84	; 0x54
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	3301      	adds	r3, #1
 8001e98:	73fb      	strb	r3, [r7, #15]
 8001e9a:	7bfa      	ldrb	r2, [r7, #15]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d3af      	bcc.n	8001e04 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	73fb      	strb	r3, [r7, #15]
 8001ea8:	e044      	b.n	8001f34 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001eaa:	7bfa      	ldrb	r2, [r7, #15]
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	4413      	add	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	440b      	add	r3, r1
 8001eb8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ec0:	7bfa      	ldrb	r2, [r7, #15]
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	4413      	add	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	440b      	add	r3, r1
 8001ece:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001ed2:	7bfa      	ldrb	r2, [r7, #15]
 8001ed4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ed6:	7bfa      	ldrb	r2, [r7, #15]
 8001ed8:	6879      	ldr	r1, [r7, #4]
 8001eda:	4613      	mov	r3, r2
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	4413      	add	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001ee8:	2200      	movs	r2, #0
 8001eea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001eec:	7bfa      	ldrb	r2, [r7, #15]
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	440b      	add	r3, r1
 8001efa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f02:	7bfa      	ldrb	r2, [r7, #15]
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	440b      	add	r3, r1
 8001f10:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f18:	7bfa      	ldrb	r2, [r7, #15]
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	4413      	add	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
 8001f30:	3301      	adds	r3, #1
 8001f32:	73fb      	strb	r3, [r7, #15]
 8001f34:	7bfa      	ldrb	r2, [r7, #15]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d3b5      	bcc.n	8001eaa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	603b      	str	r3, [r7, #0]
 8001f44:	687e      	ldr	r6, [r7, #4]
 8001f46:	466d      	mov	r5, sp
 8001f48:	f106 0410 	add.w	r4, r6, #16
 8001f4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f58:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f5c:	1d33      	adds	r3, r6, #4
 8001f5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f60:	6838      	ldr	r0, [r7, #0]
 8001f62:	f002 fc45 	bl	80047f0 <USB_DevInit>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d005      	beq.n	8001f78 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2202      	movs	r2, #2
 8001f70:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e014      	b.n	8001fa2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d102      	bne.n	8001f96 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f80b 	bl	8001fac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f002 fe03 	bl	8004ba6 <USB_DevDisconnect>

  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001fac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001fda:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <HAL_PCDEx_ActivateLPM+0x44>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3714      	adds	r7, #20
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	10000003 	.word	0x10000003

08001ff4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a04      	ldr	r2, [pc, #16]	; (8002010 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002002:	6013      	str	r3, [r2, #0]
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	40007000 	.word	0x40007000

08002014 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800201a:	2300      	movs	r3, #0
 800201c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800201e:	4b23      	ldr	r3, [pc, #140]	; (80020ac <HAL_PWREx_EnableOverDrive+0x98>)
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	4a22      	ldr	r2, [pc, #136]	; (80020ac <HAL_PWREx_EnableOverDrive+0x98>)
 8002024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002028:	6413      	str	r3, [r2, #64]	; 0x40
 800202a:	4b20      	ldr	r3, [pc, #128]	; (80020ac <HAL_PWREx_EnableOverDrive+0x98>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002032:	603b      	str	r3, [r7, #0]
 8002034:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002036:	4b1e      	ldr	r3, [pc, #120]	; (80020b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a1d      	ldr	r2, [pc, #116]	; (80020b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800203c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002040:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002042:	f7ff f849 	bl	80010d8 <HAL_GetTick>
 8002046:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002048:	e009      	b.n	800205e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800204a:	f7ff f845 	bl	80010d8 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002058:	d901      	bls.n	800205e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e022      	b.n	80020a4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800205e:	4b14      	ldr	r3, [pc, #80]	; (80020b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800206a:	d1ee      	bne.n	800204a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800206c:	4b10      	ldr	r3, [pc, #64]	; (80020b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a0f      	ldr	r2, [pc, #60]	; (80020b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002072:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002076:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002078:	f7ff f82e 	bl	80010d8 <HAL_GetTick>
 800207c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800207e:	e009      	b.n	8002094 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002080:	f7ff f82a 	bl	80010d8 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800208e:	d901      	bls.n	8002094 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e007      	b.n	80020a4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002094:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80020a0:	d1ee      	bne.n	8002080 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40023800 	.word	0x40023800
 80020b0:	40007000 	.word	0x40007000

080020b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80020bc:	2300      	movs	r3, #0
 80020be:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e29b      	b.n	8002602 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 8087 	beq.w	80021e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020d8:	4b96      	ldr	r3, [pc, #600]	; (8002334 <HAL_RCC_OscConfig+0x280>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 030c 	and.w	r3, r3, #12
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	d00c      	beq.n	80020fe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020e4:	4b93      	ldr	r3, [pc, #588]	; (8002334 <HAL_RCC_OscConfig+0x280>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 030c 	and.w	r3, r3, #12
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	d112      	bne.n	8002116 <HAL_RCC_OscConfig+0x62>
 80020f0:	4b90      	ldr	r3, [pc, #576]	; (8002334 <HAL_RCC_OscConfig+0x280>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020fc:	d10b      	bne.n	8002116 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020fe:	4b8d      	ldr	r3, [pc, #564]	; (8002334 <HAL_RCC_OscConfig+0x280>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d06c      	beq.n	80021e4 <HAL_RCC_OscConfig+0x130>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d168      	bne.n	80021e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e275      	b.n	8002602 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800211e:	d106      	bne.n	800212e <HAL_RCC_OscConfig+0x7a>
 8002120:	4b84      	ldr	r3, [pc, #528]	; (8002334 <HAL_RCC_OscConfig+0x280>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a83      	ldr	r2, [pc, #524]	; (8002334 <HAL_RCC_OscConfig+0x280>)
 8002126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	e02e      	b.n	800218c <HAL_RCC_OscConfig+0xd8>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10c      	bne.n	8002150 <HAL_RCC_OscConfig+0x9c>
 8002136:	4b7f      	ldr	r3, [pc, #508]	; (8002334 <HAL_RCC_OscConfig+0x280>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a7e      	ldr	r2, [pc, #504]	; (8002334 <HAL_RCC_OscConfig+0x280>)
 800213c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	4b7c      	ldr	r3, [pc, #496]	; (8002334 <HAL_RCC_OscConfig+0x280>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a7b      	ldr	r2, [pc, #492]	; (8002334 <HAL_RCC_OscConfig+0x280>)
 8002148:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	e01d      	b.n	800218c <HAL_RCC_OscConfig+0xd8>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002158:	d10c      	bne.n	8002174 <HAL_RCC_OscConfig+0xc0>
 800215a:	4b76      	ldr	r3, [pc, #472]	; (8002334 <HAL_RCC_OscConfig+0x280>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a75      	ldr	r2, [pc, #468]	; (8002334 <HAL_RCC_OscConfig+0x280>)
 8002160:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	4b73      	ldr	r3, [pc, #460]	; (8002334 <HAL_RCC_OscConfig+0x280>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a72      	ldr	r2, [pc, #456]	; (8002334 <HAL_RCC_OscConfig+0x280>)
 800216c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	e00b      	b.n	800218c <HAL_RCC_OscConfig+0xd8>
 8002174:	4b6f      	ldr	r3, [pc, #444]	; (8002334 <HAL_RCC_OscConfig+0x280>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a6e      	ldr	r2, [pc, #440]	; (8002334 <HAL_RCC_OscConfig+0x280>)
 800217a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800217e:	6013      	str	r3, [r2, #0]
 8002180:	4b6c      	ldr	r3, [pc, #432]	; (8002334 <HAL_RCC_OscConfig+0x280>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a6b      	ldr	r2, [pc, #428]	; (8002334 <HAL_RCC_OscConfig+0x280>)
 8002186:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800218a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d013      	beq.n	80021bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002194:	f7fe ffa0 	bl	80010d8 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800219c:	f7fe ff9c 	bl	80010d8 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b64      	cmp	r3, #100	; 0x64
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e229      	b.n	8002602 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ae:	4b61      	ldr	r3, [pc, #388]	; (8002334 <HAL_RCC_OscConfig+0x280>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0xe8>
 80021ba:	e014      	b.n	80021e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021bc:	f7fe ff8c 	bl	80010d8 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c4:	f7fe ff88 	bl	80010d8 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b64      	cmp	r3, #100	; 0x64
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e215      	b.n	8002602 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021d6:	4b57      	ldr	r3, [pc, #348]	; (8002334 <HAL_RCC_OscConfig+0x280>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f0      	bne.n	80021c4 <HAL_RCC_OscConfig+0x110>
 80021e2:	e000      	b.n	80021e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d069      	beq.n	80022c6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021f2:	4b50      	ldr	r3, [pc, #320]	; (8002334 <HAL_RCC_OscConfig+0x280>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 030c 	and.w	r3, r3, #12
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00b      	beq.n	8002216 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021fe:	4b4d      	ldr	r3, [pc, #308]	; (8002334 <HAL_RCC_OscConfig+0x280>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 030c 	and.w	r3, r3, #12
 8002206:	2b08      	cmp	r3, #8
 8002208:	d11c      	bne.n	8002244 <HAL_RCC_OscConfig+0x190>
 800220a:	4b4a      	ldr	r3, [pc, #296]	; (8002334 <HAL_RCC_OscConfig+0x280>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d116      	bne.n	8002244 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002216:	4b47      	ldr	r3, [pc, #284]	; (8002334 <HAL_RCC_OscConfig+0x280>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d005      	beq.n	800222e <HAL_RCC_OscConfig+0x17a>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d001      	beq.n	800222e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e1e9      	b.n	8002602 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800222e:	4b41      	ldr	r3, [pc, #260]	; (8002334 <HAL_RCC_OscConfig+0x280>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	493d      	ldr	r1, [pc, #244]	; (8002334 <HAL_RCC_OscConfig+0x280>)
 800223e:	4313      	orrs	r3, r2
 8002240:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002242:	e040      	b.n	80022c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d023      	beq.n	8002294 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800224c:	4b39      	ldr	r3, [pc, #228]	; (8002334 <HAL_RCC_OscConfig+0x280>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a38      	ldr	r2, [pc, #224]	; (8002334 <HAL_RCC_OscConfig+0x280>)
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002258:	f7fe ff3e 	bl	80010d8 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002260:	f7fe ff3a 	bl	80010d8 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e1c7      	b.n	8002602 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002272:	4b30      	ldr	r3, [pc, #192]	; (8002334 <HAL_RCC_OscConfig+0x280>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f0      	beq.n	8002260 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800227e:	4b2d      	ldr	r3, [pc, #180]	; (8002334 <HAL_RCC_OscConfig+0x280>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	4929      	ldr	r1, [pc, #164]	; (8002334 <HAL_RCC_OscConfig+0x280>)
 800228e:	4313      	orrs	r3, r2
 8002290:	600b      	str	r3, [r1, #0]
 8002292:	e018      	b.n	80022c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002294:	4b27      	ldr	r3, [pc, #156]	; (8002334 <HAL_RCC_OscConfig+0x280>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a26      	ldr	r2, [pc, #152]	; (8002334 <HAL_RCC_OscConfig+0x280>)
 800229a:	f023 0301 	bic.w	r3, r3, #1
 800229e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a0:	f7fe ff1a 	bl	80010d8 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022a8:	f7fe ff16 	bl	80010d8 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e1a3      	b.n	8002602 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ba:	4b1e      	ldr	r3, [pc, #120]	; (8002334 <HAL_RCC_OscConfig+0x280>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f0      	bne.n	80022a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d038      	beq.n	8002344 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d019      	beq.n	800230e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022da:	4b16      	ldr	r3, [pc, #88]	; (8002334 <HAL_RCC_OscConfig+0x280>)
 80022dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022de:	4a15      	ldr	r2, [pc, #84]	; (8002334 <HAL_RCC_OscConfig+0x280>)
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e6:	f7fe fef7 	bl	80010d8 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ee:	f7fe fef3 	bl	80010d8 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e180      	b.n	8002602 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002300:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <HAL_RCC_OscConfig+0x280>)
 8002302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0f0      	beq.n	80022ee <HAL_RCC_OscConfig+0x23a>
 800230c:	e01a      	b.n	8002344 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800230e:	4b09      	ldr	r3, [pc, #36]	; (8002334 <HAL_RCC_OscConfig+0x280>)
 8002310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002312:	4a08      	ldr	r2, [pc, #32]	; (8002334 <HAL_RCC_OscConfig+0x280>)
 8002314:	f023 0301 	bic.w	r3, r3, #1
 8002318:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800231a:	f7fe fedd 	bl	80010d8 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002320:	e00a      	b.n	8002338 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002322:	f7fe fed9 	bl	80010d8 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d903      	bls.n	8002338 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e166      	b.n	8002602 <HAL_RCC_OscConfig+0x54e>
 8002334:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002338:	4b92      	ldr	r3, [pc, #584]	; (8002584 <HAL_RCC_OscConfig+0x4d0>)
 800233a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1ee      	bne.n	8002322 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 80a4 	beq.w	800249a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002352:	4b8c      	ldr	r3, [pc, #560]	; (8002584 <HAL_RCC_OscConfig+0x4d0>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10d      	bne.n	800237a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800235e:	4b89      	ldr	r3, [pc, #548]	; (8002584 <HAL_RCC_OscConfig+0x4d0>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	4a88      	ldr	r2, [pc, #544]	; (8002584 <HAL_RCC_OscConfig+0x4d0>)
 8002364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002368:	6413      	str	r3, [r2, #64]	; 0x40
 800236a:	4b86      	ldr	r3, [pc, #536]	; (8002584 <HAL_RCC_OscConfig+0x4d0>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002372:	60bb      	str	r3, [r7, #8]
 8002374:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002376:	2301      	movs	r3, #1
 8002378:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800237a:	4b83      	ldr	r3, [pc, #524]	; (8002588 <HAL_RCC_OscConfig+0x4d4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002382:	2b00      	cmp	r3, #0
 8002384:	d118      	bne.n	80023b8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002386:	4b80      	ldr	r3, [pc, #512]	; (8002588 <HAL_RCC_OscConfig+0x4d4>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a7f      	ldr	r2, [pc, #508]	; (8002588 <HAL_RCC_OscConfig+0x4d4>)
 800238c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002390:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002392:	f7fe fea1 	bl	80010d8 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800239a:	f7fe fe9d 	bl	80010d8 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b64      	cmp	r3, #100	; 0x64
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e12a      	b.n	8002602 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023ac:	4b76      	ldr	r3, [pc, #472]	; (8002588 <HAL_RCC_OscConfig+0x4d4>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f0      	beq.n	800239a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d106      	bne.n	80023ce <HAL_RCC_OscConfig+0x31a>
 80023c0:	4b70      	ldr	r3, [pc, #448]	; (8002584 <HAL_RCC_OscConfig+0x4d0>)
 80023c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c4:	4a6f      	ldr	r2, [pc, #444]	; (8002584 <HAL_RCC_OscConfig+0x4d0>)
 80023c6:	f043 0301 	orr.w	r3, r3, #1
 80023ca:	6713      	str	r3, [r2, #112]	; 0x70
 80023cc:	e02d      	b.n	800242a <HAL_RCC_OscConfig+0x376>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10c      	bne.n	80023f0 <HAL_RCC_OscConfig+0x33c>
 80023d6:	4b6b      	ldr	r3, [pc, #428]	; (8002584 <HAL_RCC_OscConfig+0x4d0>)
 80023d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023da:	4a6a      	ldr	r2, [pc, #424]	; (8002584 <HAL_RCC_OscConfig+0x4d0>)
 80023dc:	f023 0301 	bic.w	r3, r3, #1
 80023e0:	6713      	str	r3, [r2, #112]	; 0x70
 80023e2:	4b68      	ldr	r3, [pc, #416]	; (8002584 <HAL_RCC_OscConfig+0x4d0>)
 80023e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e6:	4a67      	ldr	r2, [pc, #412]	; (8002584 <HAL_RCC_OscConfig+0x4d0>)
 80023e8:	f023 0304 	bic.w	r3, r3, #4
 80023ec:	6713      	str	r3, [r2, #112]	; 0x70
 80023ee:	e01c      	b.n	800242a <HAL_RCC_OscConfig+0x376>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	2b05      	cmp	r3, #5
 80023f6:	d10c      	bne.n	8002412 <HAL_RCC_OscConfig+0x35e>
 80023f8:	4b62      	ldr	r3, [pc, #392]	; (8002584 <HAL_RCC_OscConfig+0x4d0>)
 80023fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fc:	4a61      	ldr	r2, [pc, #388]	; (8002584 <HAL_RCC_OscConfig+0x4d0>)
 80023fe:	f043 0304 	orr.w	r3, r3, #4
 8002402:	6713      	str	r3, [r2, #112]	; 0x70
 8002404:	4b5f      	ldr	r3, [pc, #380]	; (8002584 <HAL_RCC_OscConfig+0x4d0>)
 8002406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002408:	4a5e      	ldr	r2, [pc, #376]	; (8002584 <HAL_RCC_OscConfig+0x4d0>)
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	6713      	str	r3, [r2, #112]	; 0x70
 8002410:	e00b      	b.n	800242a <HAL_RCC_OscConfig+0x376>
 8002412:	4b5c      	ldr	r3, [pc, #368]	; (8002584 <HAL_RCC_OscConfig+0x4d0>)
 8002414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002416:	4a5b      	ldr	r2, [pc, #364]	; (8002584 <HAL_RCC_OscConfig+0x4d0>)
 8002418:	f023 0301 	bic.w	r3, r3, #1
 800241c:	6713      	str	r3, [r2, #112]	; 0x70
 800241e:	4b59      	ldr	r3, [pc, #356]	; (8002584 <HAL_RCC_OscConfig+0x4d0>)
 8002420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002422:	4a58      	ldr	r2, [pc, #352]	; (8002584 <HAL_RCC_OscConfig+0x4d0>)
 8002424:	f023 0304 	bic.w	r3, r3, #4
 8002428:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d015      	beq.n	800245e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002432:	f7fe fe51 	bl	80010d8 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002438:	e00a      	b.n	8002450 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243a:	f7fe fe4d 	bl	80010d8 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	f241 3288 	movw	r2, #5000	; 0x1388
 8002448:	4293      	cmp	r3, r2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e0d8      	b.n	8002602 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002450:	4b4c      	ldr	r3, [pc, #304]	; (8002584 <HAL_RCC_OscConfig+0x4d0>)
 8002452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0ee      	beq.n	800243a <HAL_RCC_OscConfig+0x386>
 800245c:	e014      	b.n	8002488 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245e:	f7fe fe3b 	bl	80010d8 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002464:	e00a      	b.n	800247c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002466:	f7fe fe37 	bl	80010d8 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	f241 3288 	movw	r2, #5000	; 0x1388
 8002474:	4293      	cmp	r3, r2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e0c2      	b.n	8002602 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800247c:	4b41      	ldr	r3, [pc, #260]	; (8002584 <HAL_RCC_OscConfig+0x4d0>)
 800247e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1ee      	bne.n	8002466 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002488:	7dfb      	ldrb	r3, [r7, #23]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d105      	bne.n	800249a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800248e:	4b3d      	ldr	r3, [pc, #244]	; (8002584 <HAL_RCC_OscConfig+0x4d0>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	4a3c      	ldr	r2, [pc, #240]	; (8002584 <HAL_RCC_OscConfig+0x4d0>)
 8002494:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002498:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 80ae 	beq.w	8002600 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024a4:	4b37      	ldr	r3, [pc, #220]	; (8002584 <HAL_RCC_OscConfig+0x4d0>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 030c 	and.w	r3, r3, #12
 80024ac:	2b08      	cmp	r3, #8
 80024ae:	d06d      	beq.n	800258c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d14b      	bne.n	8002550 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b8:	4b32      	ldr	r3, [pc, #200]	; (8002584 <HAL_RCC_OscConfig+0x4d0>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a31      	ldr	r2, [pc, #196]	; (8002584 <HAL_RCC_OscConfig+0x4d0>)
 80024be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c4:	f7fe fe08 	bl	80010d8 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024cc:	f7fe fe04 	bl	80010d8 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e091      	b.n	8002602 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024de:	4b29      	ldr	r3, [pc, #164]	; (8002584 <HAL_RCC_OscConfig+0x4d0>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1f0      	bne.n	80024cc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	69da      	ldr	r2, [r3, #28]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f8:	019b      	lsls	r3, r3, #6
 80024fa:	431a      	orrs	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002500:	085b      	lsrs	r3, r3, #1
 8002502:	3b01      	subs	r3, #1
 8002504:	041b      	lsls	r3, r3, #16
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250c:	061b      	lsls	r3, r3, #24
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002514:	071b      	lsls	r3, r3, #28
 8002516:	491b      	ldr	r1, [pc, #108]	; (8002584 <HAL_RCC_OscConfig+0x4d0>)
 8002518:	4313      	orrs	r3, r2
 800251a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800251c:	4b19      	ldr	r3, [pc, #100]	; (8002584 <HAL_RCC_OscConfig+0x4d0>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a18      	ldr	r2, [pc, #96]	; (8002584 <HAL_RCC_OscConfig+0x4d0>)
 8002522:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002528:	f7fe fdd6 	bl	80010d8 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002530:	f7fe fdd2 	bl	80010d8 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e05f      	b.n	8002602 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002542:	4b10      	ldr	r3, [pc, #64]	; (8002584 <HAL_RCC_OscConfig+0x4d0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0f0      	beq.n	8002530 <HAL_RCC_OscConfig+0x47c>
 800254e:	e057      	b.n	8002600 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002550:	4b0c      	ldr	r3, [pc, #48]	; (8002584 <HAL_RCC_OscConfig+0x4d0>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a0b      	ldr	r2, [pc, #44]	; (8002584 <HAL_RCC_OscConfig+0x4d0>)
 8002556:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800255a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255c:	f7fe fdbc 	bl	80010d8 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002564:	f7fe fdb8 	bl	80010d8 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e045      	b.n	8002602 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002576:	4b03      	ldr	r3, [pc, #12]	; (8002584 <HAL_RCC_OscConfig+0x4d0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f0      	bne.n	8002564 <HAL_RCC_OscConfig+0x4b0>
 8002582:	e03d      	b.n	8002600 <HAL_RCC_OscConfig+0x54c>
 8002584:	40023800 	.word	0x40023800
 8002588:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800258c:	4b1f      	ldr	r3, [pc, #124]	; (800260c <HAL_RCC_OscConfig+0x558>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d030      	beq.n	80025fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d129      	bne.n	80025fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d122      	bne.n	80025fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025bc:	4013      	ands	r3, r2
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025c2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d119      	bne.n	80025fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d2:	085b      	lsrs	r3, r3, #1
 80025d4:	3b01      	subs	r3, #1
 80025d6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025d8:	429a      	cmp	r2, r3
 80025da:	d10f      	bne.n	80025fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d107      	bne.n	80025fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d001      	beq.n	8002600 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e000      	b.n	8002602 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40023800 	.word	0x40023800

08002610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800261a:	2300      	movs	r3, #0
 800261c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e0d0      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002628:	4b6a      	ldr	r3, [pc, #424]	; (80027d4 <HAL_RCC_ClockConfig+0x1c4>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 030f 	and.w	r3, r3, #15
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	429a      	cmp	r2, r3
 8002634:	d910      	bls.n	8002658 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002636:	4b67      	ldr	r3, [pc, #412]	; (80027d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f023 020f 	bic.w	r2, r3, #15
 800263e:	4965      	ldr	r1, [pc, #404]	; (80027d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	4313      	orrs	r3, r2
 8002644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002646:	4b63      	ldr	r3, [pc, #396]	; (80027d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	d001      	beq.n	8002658 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e0b8      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d020      	beq.n	80026a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b00      	cmp	r3, #0
 800266e:	d005      	beq.n	800267c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002670:	4b59      	ldr	r3, [pc, #356]	; (80027d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	4a58      	ldr	r2, [pc, #352]	; (80027d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002676:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800267a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0308 	and.w	r3, r3, #8
 8002684:	2b00      	cmp	r3, #0
 8002686:	d005      	beq.n	8002694 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002688:	4b53      	ldr	r3, [pc, #332]	; (80027d8 <HAL_RCC_ClockConfig+0x1c8>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	4a52      	ldr	r2, [pc, #328]	; (80027d8 <HAL_RCC_ClockConfig+0x1c8>)
 800268e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002692:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002694:	4b50      	ldr	r3, [pc, #320]	; (80027d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	494d      	ldr	r1, [pc, #308]	; (80027d8 <HAL_RCC_ClockConfig+0x1c8>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d040      	beq.n	8002734 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d107      	bne.n	80026ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ba:	4b47      	ldr	r3, [pc, #284]	; (80027d8 <HAL_RCC_ClockConfig+0x1c8>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d115      	bne.n	80026f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e07f      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d107      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026d2:	4b41      	ldr	r3, [pc, #260]	; (80027d8 <HAL_RCC_ClockConfig+0x1c8>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d109      	bne.n	80026f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e073      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e2:	4b3d      	ldr	r3, [pc, #244]	; (80027d8 <HAL_RCC_ClockConfig+0x1c8>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e06b      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026f2:	4b39      	ldr	r3, [pc, #228]	; (80027d8 <HAL_RCC_ClockConfig+0x1c8>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f023 0203 	bic.w	r2, r3, #3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	4936      	ldr	r1, [pc, #216]	; (80027d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002700:	4313      	orrs	r3, r2
 8002702:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002704:	f7fe fce8 	bl	80010d8 <HAL_GetTick>
 8002708:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800270a:	e00a      	b.n	8002722 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800270c:	f7fe fce4 	bl	80010d8 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	f241 3288 	movw	r2, #5000	; 0x1388
 800271a:	4293      	cmp	r3, r2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e053      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002722:	4b2d      	ldr	r3, [pc, #180]	; (80027d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 020c 	and.w	r2, r3, #12
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	429a      	cmp	r2, r3
 8002732:	d1eb      	bne.n	800270c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002734:	4b27      	ldr	r3, [pc, #156]	; (80027d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 030f 	and.w	r3, r3, #15
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d210      	bcs.n	8002764 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002742:	4b24      	ldr	r3, [pc, #144]	; (80027d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f023 020f 	bic.w	r2, r3, #15
 800274a:	4922      	ldr	r1, [pc, #136]	; (80027d4 <HAL_RCC_ClockConfig+0x1c4>)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	4313      	orrs	r3, r2
 8002750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002752:	4b20      	ldr	r3, [pc, #128]	; (80027d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	429a      	cmp	r2, r3
 800275e:	d001      	beq.n	8002764 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e032      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b00      	cmp	r3, #0
 800276e:	d008      	beq.n	8002782 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002770:	4b19      	ldr	r3, [pc, #100]	; (80027d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	4916      	ldr	r1, [pc, #88]	; (80027d8 <HAL_RCC_ClockConfig+0x1c8>)
 800277e:	4313      	orrs	r3, r2
 8002780:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b00      	cmp	r3, #0
 800278c:	d009      	beq.n	80027a2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800278e:	4b12      	ldr	r3, [pc, #72]	; (80027d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	490e      	ldr	r1, [pc, #56]	; (80027d8 <HAL_RCC_ClockConfig+0x1c8>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027a2:	f000 f821 	bl	80027e8 <HAL_RCC_GetSysClockFreq>
 80027a6:	4602      	mov	r2, r0
 80027a8:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <HAL_RCC_ClockConfig+0x1c8>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	091b      	lsrs	r3, r3, #4
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	490a      	ldr	r1, [pc, #40]	; (80027dc <HAL_RCC_ClockConfig+0x1cc>)
 80027b4:	5ccb      	ldrb	r3, [r1, r3]
 80027b6:	fa22 f303 	lsr.w	r3, r2, r3
 80027ba:	4a09      	ldr	r2, [pc, #36]	; (80027e0 <HAL_RCC_ClockConfig+0x1d0>)
 80027bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027be:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <HAL_RCC_ClockConfig+0x1d4>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fe fc44 	bl	8001050 <HAL_InitTick>

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40023c00 	.word	0x40023c00
 80027d8:	40023800 	.word	0x40023800
 80027dc:	080055dc 	.word	0x080055dc
 80027e0:	20000000 	.word	0x20000000
 80027e4:	20000004 	.word	0x20000004

080027e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027ec:	b094      	sub	sp, #80	; 0x50
 80027ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80027f0:	2300      	movs	r3, #0
 80027f2:	647b      	str	r3, [r7, #68]	; 0x44
 80027f4:	2300      	movs	r3, #0
 80027f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027f8:	2300      	movs	r3, #0
 80027fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80027fc:	2300      	movs	r3, #0
 80027fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002800:	4b79      	ldr	r3, [pc, #484]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 030c 	and.w	r3, r3, #12
 8002808:	2b08      	cmp	r3, #8
 800280a:	d00d      	beq.n	8002828 <HAL_RCC_GetSysClockFreq+0x40>
 800280c:	2b08      	cmp	r3, #8
 800280e:	f200 80e1 	bhi.w	80029d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002812:	2b00      	cmp	r3, #0
 8002814:	d002      	beq.n	800281c <HAL_RCC_GetSysClockFreq+0x34>
 8002816:	2b04      	cmp	r3, #4
 8002818:	d003      	beq.n	8002822 <HAL_RCC_GetSysClockFreq+0x3a>
 800281a:	e0db      	b.n	80029d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800281c:	4b73      	ldr	r3, [pc, #460]	; (80029ec <HAL_RCC_GetSysClockFreq+0x204>)
 800281e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002820:	e0db      	b.n	80029da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002822:	4b73      	ldr	r3, [pc, #460]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002824:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002826:	e0d8      	b.n	80029da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002828:	4b6f      	ldr	r3, [pc, #444]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002830:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002832:	4b6d      	ldr	r3, [pc, #436]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d063      	beq.n	8002906 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800283e:	4b6a      	ldr	r3, [pc, #424]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	099b      	lsrs	r3, r3, #6
 8002844:	2200      	movs	r2, #0
 8002846:	63bb      	str	r3, [r7, #56]	; 0x38
 8002848:	63fa      	str	r2, [r7, #60]	; 0x3c
 800284a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800284c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002850:	633b      	str	r3, [r7, #48]	; 0x30
 8002852:	2300      	movs	r3, #0
 8002854:	637b      	str	r3, [r7, #52]	; 0x34
 8002856:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800285a:	4622      	mov	r2, r4
 800285c:	462b      	mov	r3, r5
 800285e:	f04f 0000 	mov.w	r0, #0
 8002862:	f04f 0100 	mov.w	r1, #0
 8002866:	0159      	lsls	r1, r3, #5
 8002868:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800286c:	0150      	lsls	r0, r2, #5
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	4621      	mov	r1, r4
 8002874:	1a51      	subs	r1, r2, r1
 8002876:	6139      	str	r1, [r7, #16]
 8002878:	4629      	mov	r1, r5
 800287a:	eb63 0301 	sbc.w	r3, r3, r1
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	f04f 0300 	mov.w	r3, #0
 8002888:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800288c:	4659      	mov	r1, fp
 800288e:	018b      	lsls	r3, r1, #6
 8002890:	4651      	mov	r1, sl
 8002892:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002896:	4651      	mov	r1, sl
 8002898:	018a      	lsls	r2, r1, #6
 800289a:	4651      	mov	r1, sl
 800289c:	ebb2 0801 	subs.w	r8, r2, r1
 80028a0:	4659      	mov	r1, fp
 80028a2:	eb63 0901 	sbc.w	r9, r3, r1
 80028a6:	f04f 0200 	mov.w	r2, #0
 80028aa:	f04f 0300 	mov.w	r3, #0
 80028ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028ba:	4690      	mov	r8, r2
 80028bc:	4699      	mov	r9, r3
 80028be:	4623      	mov	r3, r4
 80028c0:	eb18 0303 	adds.w	r3, r8, r3
 80028c4:	60bb      	str	r3, [r7, #8]
 80028c6:	462b      	mov	r3, r5
 80028c8:	eb49 0303 	adc.w	r3, r9, r3
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	f04f 0200 	mov.w	r2, #0
 80028d2:	f04f 0300 	mov.w	r3, #0
 80028d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028da:	4629      	mov	r1, r5
 80028dc:	024b      	lsls	r3, r1, #9
 80028de:	4621      	mov	r1, r4
 80028e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028e4:	4621      	mov	r1, r4
 80028e6:	024a      	lsls	r2, r1, #9
 80028e8:	4610      	mov	r0, r2
 80028ea:	4619      	mov	r1, r3
 80028ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028ee:	2200      	movs	r2, #0
 80028f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80028f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028f8:	f7fd fcfa 	bl	80002f0 <__aeabi_uldivmod>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	4613      	mov	r3, r2
 8002902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002904:	e058      	b.n	80029b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002906:	4b38      	ldr	r3, [pc, #224]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	099b      	lsrs	r3, r3, #6
 800290c:	2200      	movs	r2, #0
 800290e:	4618      	mov	r0, r3
 8002910:	4611      	mov	r1, r2
 8002912:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002916:	623b      	str	r3, [r7, #32]
 8002918:	2300      	movs	r3, #0
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
 800291c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002920:	4642      	mov	r2, r8
 8002922:	464b      	mov	r3, r9
 8002924:	f04f 0000 	mov.w	r0, #0
 8002928:	f04f 0100 	mov.w	r1, #0
 800292c:	0159      	lsls	r1, r3, #5
 800292e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002932:	0150      	lsls	r0, r2, #5
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	4641      	mov	r1, r8
 800293a:	ebb2 0a01 	subs.w	sl, r2, r1
 800293e:	4649      	mov	r1, r9
 8002940:	eb63 0b01 	sbc.w	fp, r3, r1
 8002944:	f04f 0200 	mov.w	r2, #0
 8002948:	f04f 0300 	mov.w	r3, #0
 800294c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002950:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002954:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002958:	ebb2 040a 	subs.w	r4, r2, sl
 800295c:	eb63 050b 	sbc.w	r5, r3, fp
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	f04f 0300 	mov.w	r3, #0
 8002968:	00eb      	lsls	r3, r5, #3
 800296a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800296e:	00e2      	lsls	r2, r4, #3
 8002970:	4614      	mov	r4, r2
 8002972:	461d      	mov	r5, r3
 8002974:	4643      	mov	r3, r8
 8002976:	18e3      	adds	r3, r4, r3
 8002978:	603b      	str	r3, [r7, #0]
 800297a:	464b      	mov	r3, r9
 800297c:	eb45 0303 	adc.w	r3, r5, r3
 8002980:	607b      	str	r3, [r7, #4]
 8002982:	f04f 0200 	mov.w	r2, #0
 8002986:	f04f 0300 	mov.w	r3, #0
 800298a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800298e:	4629      	mov	r1, r5
 8002990:	028b      	lsls	r3, r1, #10
 8002992:	4621      	mov	r1, r4
 8002994:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002998:	4621      	mov	r1, r4
 800299a:	028a      	lsls	r2, r1, #10
 800299c:	4610      	mov	r0, r2
 800299e:	4619      	mov	r1, r3
 80029a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029a2:	2200      	movs	r2, #0
 80029a4:	61bb      	str	r3, [r7, #24]
 80029a6:	61fa      	str	r2, [r7, #28]
 80029a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029ac:	f7fd fca0 	bl	80002f0 <__aeabi_uldivmod>
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	4613      	mov	r3, r2
 80029b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80029b8:	4b0b      	ldr	r3, [pc, #44]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	0c1b      	lsrs	r3, r3, #16
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	3301      	adds	r3, #1
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80029c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029d2:	e002      	b.n	80029da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029d4:	4b05      	ldr	r3, [pc, #20]	; (80029ec <HAL_RCC_GetSysClockFreq+0x204>)
 80029d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3750      	adds	r7, #80	; 0x50
 80029e0:	46bd      	mov	sp, r7
 80029e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029e6:	bf00      	nop
 80029e8:	40023800 	.word	0x40023800
 80029ec:	00f42400 	.word	0x00f42400
 80029f0:	007a1200 	.word	0x007a1200

080029f4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029f8:	4b03      	ldr	r3, [pc, #12]	; (8002a08 <HAL_RCC_GetHCLKFreq+0x14>)
 80029fa:	681b      	ldr	r3, [r3, #0]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	20000000 	.word	0x20000000

08002a0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a10:	f7ff fff0 	bl	80029f4 <HAL_RCC_GetHCLKFreq>
 8002a14:	4602      	mov	r2, r0
 8002a16:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	0a9b      	lsrs	r3, r3, #10
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	4903      	ldr	r1, [pc, #12]	; (8002a30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a22:	5ccb      	ldrb	r3, [r1, r3]
 8002a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	080055ec 	.word	0x080055ec

08002a34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a38:	f7ff ffdc 	bl	80029f4 <HAL_RCC_GetHCLKFreq>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	0b5b      	lsrs	r3, r3, #13
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	4903      	ldr	r1, [pc, #12]	; (8002a58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a4a:	5ccb      	ldrb	r3, [r1, r3]
 8002a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40023800 	.word	0x40023800
 8002a58:	080055ec 	.word	0x080055ec

08002a5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b088      	sub	sp, #32
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002a70:	2300      	movs	r3, #0
 8002a72:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002a74:	2300      	movs	r3, #0
 8002a76:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d012      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a84:	4b69      	ldr	r3, [pc, #420]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	4a68      	ldr	r2, [pc, #416]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a8a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002a8e:	6093      	str	r3, [r2, #8]
 8002a90:	4b66      	ldr	r3, [pc, #408]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a98:	4964      	ldr	r1, [pc, #400]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d017      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ab6:	4b5d      	ldr	r3, [pc, #372]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002abc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac4:	4959      	ldr	r1, [pc, #356]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ad4:	d101      	bne.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d017      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002af2:	4b4e      	ldr	r3, [pc, #312]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002af8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	494a      	ldr	r1, [pc, #296]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b10:	d101      	bne.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b12:	2301      	movs	r3, #1
 8002b14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0320 	and.w	r3, r3, #32
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f000 808b 	beq.w	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b40:	4b3a      	ldr	r3, [pc, #232]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	4a39      	ldr	r2, [pc, #228]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b4a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b4c:	4b37      	ldr	r3, [pc, #220]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b54:	60bb      	str	r3, [r7, #8]
 8002b56:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b58:	4b35      	ldr	r3, [pc, #212]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a34      	ldr	r2, [pc, #208]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b64:	f7fe fab8 	bl	80010d8 <HAL_GetTick>
 8002b68:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b6c:	f7fe fab4 	bl	80010d8 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b64      	cmp	r3, #100	; 0x64
 8002b78:	d901      	bls.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e38f      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b7e:	4b2c      	ldr	r3, [pc, #176]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b8a:	4b28      	ldr	r3, [pc, #160]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b92:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d035      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d02e      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ba8:	4b20      	ldr	r3, [pc, #128]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bb0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bb2:	4b1e      	ldr	r3, [pc, #120]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb6:	4a1d      	ldr	r2, [pc, #116]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bbc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bbe:	4b1b      	ldr	r3, [pc, #108]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc2:	4a1a      	ldr	r2, [pc, #104]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bc8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002bca:	4a18      	ldr	r2, [pc, #96]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002bd0:	4b16      	ldr	r3, [pc, #88]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d114      	bne.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bdc:	f7fe fa7c 	bl	80010d8 <HAL_GetTick>
 8002be0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be2:	e00a      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002be4:	f7fe fa78 	bl	80010d8 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e351      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bfa:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0ee      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c12:	d111      	bne.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c14:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c20:	4b04      	ldr	r3, [pc, #16]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c22:	400b      	ands	r3, r1
 8002c24:	4901      	ldr	r1, [pc, #4]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	608b      	str	r3, [r1, #8]
 8002c2a:	e00b      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	40007000 	.word	0x40007000
 8002c34:	0ffffcff 	.word	0x0ffffcff
 8002c38:	4bac      	ldr	r3, [pc, #688]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	4aab      	ldr	r2, [pc, #684]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c3e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002c42:	6093      	str	r3, [r2, #8]
 8002c44:	4ba9      	ldr	r3, [pc, #676]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c50:	49a6      	ldr	r1, [pc, #664]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0310 	and.w	r3, r3, #16
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d010      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c62:	4ba2      	ldr	r3, [pc, #648]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c68:	4aa0      	ldr	r2, [pc, #640]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c6e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002c72:	4b9e      	ldr	r3, [pc, #632]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c74:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7c:	499b      	ldr	r1, [pc, #620]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00a      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c90:	4b96      	ldr	r3, [pc, #600]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c96:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c9e:	4993      	ldr	r1, [pc, #588]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00a      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cb2:	4b8e      	ldr	r3, [pc, #568]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cc0:	498a      	ldr	r1, [pc, #552]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00a      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cd4:	4b85      	ldr	r3, [pc, #532]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ce2:	4982      	ldr	r1, [pc, #520]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00a      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002cf6:	4b7d      	ldr	r3, [pc, #500]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d04:	4979      	ldr	r1, [pc, #484]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00a      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d18:	4b74      	ldr	r3, [pc, #464]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1e:	f023 0203 	bic.w	r2, r3, #3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d26:	4971      	ldr	r1, [pc, #452]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00a      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d3a:	4b6c      	ldr	r3, [pc, #432]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d40:	f023 020c 	bic.w	r2, r3, #12
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d48:	4968      	ldr	r1, [pc, #416]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00a      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d5c:	4b63      	ldr	r3, [pc, #396]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d62:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d6a:	4960      	ldr	r1, [pc, #384]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00a      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d7e:	4b5b      	ldr	r3, [pc, #364]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d84:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d8c:	4957      	ldr	r1, [pc, #348]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00a      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002da0:	4b52      	ldr	r3, [pc, #328]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dae:	494f      	ldr	r1, [pc, #316]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00a      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002dc2:	4b4a      	ldr	r3, [pc, #296]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd0:	4946      	ldr	r1, [pc, #280]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00a      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002de4:	4b41      	ldr	r3, [pc, #260]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df2:	493e      	ldr	r1, [pc, #248]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00a      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e06:	4b39      	ldr	r3, [pc, #228]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e14:	4935      	ldr	r1, [pc, #212]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00a      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e28:	4b30      	ldr	r3, [pc, #192]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e36:	492d      	ldr	r1, [pc, #180]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d011      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e4a:	4b28      	ldr	r3, [pc, #160]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e50:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e58:	4924      	ldr	r1, [pc, #144]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e68:	d101      	bne.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0308 	and.w	r3, r3, #8
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00a      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e8a:	4b18      	ldr	r3, [pc, #96]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e90:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e98:	4914      	ldr	r1, [pc, #80]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00b      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002eac:	4b0f      	ldr	r3, [pc, #60]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ebc:	490b      	ldr	r1, [pc, #44]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00f      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002ed0:	4b06      	ldr	r3, [pc, #24]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ee0:	4902      	ldr	r1, [pc, #8]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ee8:	e002      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002eea:	bf00      	nop
 8002eec:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00b      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002efc:	4b8a      	ldr	r3, [pc, #552]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002efe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f02:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0c:	4986      	ldr	r1, [pc, #536]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00b      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002f20:	4b81      	ldr	r3, [pc, #516]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f26:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f30:	497d      	ldr	r1, [pc, #500]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d006      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 80d6 	beq.w	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f4c:	4b76      	ldr	r3, [pc, #472]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a75      	ldr	r2, [pc, #468]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f58:	f7fe f8be 	bl	80010d8 <HAL_GetTick>
 8002f5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f60:	f7fe f8ba 	bl	80010d8 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b64      	cmp	r3, #100	; 0x64
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e195      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f72:	4b6d      	ldr	r3, [pc, #436]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1f0      	bne.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d021      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d11d      	bne.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f92:	4b65      	ldr	r3, [pc, #404]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f98:	0c1b      	lsrs	r3, r3, #16
 8002f9a:	f003 0303 	and.w	r3, r3, #3
 8002f9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002fa0:	4b61      	ldr	r3, [pc, #388]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fa6:	0e1b      	lsrs	r3, r3, #24
 8002fa8:	f003 030f 	and.w	r3, r3, #15
 8002fac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	019a      	lsls	r2, r3, #6
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	041b      	lsls	r3, r3, #16
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	061b      	lsls	r3, r3, #24
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	071b      	lsls	r3, r3, #28
 8002fc6:	4958      	ldr	r1, [pc, #352]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d004      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fe2:	d00a      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d02e      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ff8:	d129      	bne.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ffa:	4b4b      	ldr	r3, [pc, #300]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003000:	0c1b      	lsrs	r3, r3, #16
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003008:	4b47      	ldr	r3, [pc, #284]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800300a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800300e:	0f1b      	lsrs	r3, r3, #28
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	019a      	lsls	r2, r3, #6
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	041b      	lsls	r3, r3, #16
 8003020:	431a      	orrs	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	061b      	lsls	r3, r3, #24
 8003028:	431a      	orrs	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	071b      	lsls	r3, r3, #28
 800302e:	493e      	ldr	r1, [pc, #248]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003030:	4313      	orrs	r3, r2
 8003032:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003036:	4b3c      	ldr	r3, [pc, #240]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800303c:	f023 021f 	bic.w	r2, r3, #31
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	3b01      	subs	r3, #1
 8003046:	4938      	ldr	r1, [pc, #224]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003048:	4313      	orrs	r3, r2
 800304a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d01d      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800305a:	4b33      	ldr	r3, [pc, #204]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800305c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003060:	0e1b      	lsrs	r3, r3, #24
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003068:	4b2f      	ldr	r3, [pc, #188]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800306a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800306e:	0f1b      	lsrs	r3, r3, #28
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	019a      	lsls	r2, r3, #6
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	041b      	lsls	r3, r3, #16
 8003082:	431a      	orrs	r2, r3
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	061b      	lsls	r3, r3, #24
 8003088:	431a      	orrs	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	071b      	lsls	r3, r3, #28
 800308e:	4926      	ldr	r1, [pc, #152]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003090:	4313      	orrs	r3, r2
 8003092:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d011      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	019a      	lsls	r2, r3, #6
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	041b      	lsls	r3, r3, #16
 80030ae:	431a      	orrs	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	061b      	lsls	r3, r3, #24
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	071b      	lsls	r3, r3, #28
 80030be:	491a      	ldr	r1, [pc, #104]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030c6:	4b18      	ldr	r3, [pc, #96]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a17      	ldr	r2, [pc, #92]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030d2:	f7fe f801 	bl	80010d8 <HAL_GetTick>
 80030d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030d8:	e008      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030da:	f7fd fffd 	bl	80010d8 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b64      	cmp	r3, #100	; 0x64
 80030e6:	d901      	bls.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e0d8      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030ec:	4b0e      	ldr	r3, [pc, #56]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0f0      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	f040 80ce 	bne.w	800329c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003100:	4b09      	ldr	r3, [pc, #36]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a08      	ldr	r2, [pc, #32]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003106:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800310a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800310c:	f7fd ffe4 	bl	80010d8 <HAL_GetTick>
 8003110:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003112:	e00b      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003114:	f7fd ffe0 	bl	80010d8 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b64      	cmp	r3, #100	; 0x64
 8003120:	d904      	bls.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e0bb      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003126:	bf00      	nop
 8003128:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800312c:	4b5e      	ldr	r3, [pc, #376]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003134:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003138:	d0ec      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314a:	2b00      	cmp	r3, #0
 800314c:	d009      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003156:	2b00      	cmp	r3, #0
 8003158:	d02e      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	2b00      	cmp	r3, #0
 8003160:	d12a      	bne.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003162:	4b51      	ldr	r3, [pc, #324]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003168:	0c1b      	lsrs	r3, r3, #16
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003170:	4b4d      	ldr	r3, [pc, #308]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003176:	0f1b      	lsrs	r3, r3, #28
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	019a      	lsls	r2, r3, #6
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	041b      	lsls	r3, r3, #16
 8003188:	431a      	orrs	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	061b      	lsls	r3, r3, #24
 8003190:	431a      	orrs	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	071b      	lsls	r3, r3, #28
 8003196:	4944      	ldr	r1, [pc, #272]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800319e:	4b42      	ldr	r3, [pc, #264]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ac:	3b01      	subs	r3, #1
 80031ae:	021b      	lsls	r3, r3, #8
 80031b0:	493d      	ldr	r1, [pc, #244]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d022      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031cc:	d11d      	bne.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031ce:	4b36      	ldr	r3, [pc, #216]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d4:	0e1b      	lsrs	r3, r3, #24
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031dc:	4b32      	ldr	r3, [pc, #200]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e2:	0f1b      	lsrs	r3, r3, #28
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	019a      	lsls	r2, r3, #6
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	041b      	lsls	r3, r3, #16
 80031f6:	431a      	orrs	r2, r3
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	061b      	lsls	r3, r3, #24
 80031fc:	431a      	orrs	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	071b      	lsls	r3, r3, #28
 8003202:	4929      	ldr	r1, [pc, #164]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003204:	4313      	orrs	r3, r2
 8003206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b00      	cmp	r3, #0
 8003214:	d028      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003216:	4b24      	ldr	r3, [pc, #144]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321c:	0e1b      	lsrs	r3, r3, #24
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003224:	4b20      	ldr	r3, [pc, #128]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322a:	0c1b      	lsrs	r3, r3, #16
 800322c:	f003 0303 	and.w	r3, r3, #3
 8003230:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	019a      	lsls	r2, r3, #6
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	041b      	lsls	r3, r3, #16
 800323c:	431a      	orrs	r2, r3
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	061b      	lsls	r3, r3, #24
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	69db      	ldr	r3, [r3, #28]
 8003248:	071b      	lsls	r3, r3, #28
 800324a:	4917      	ldr	r1, [pc, #92]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800324c:	4313      	orrs	r3, r2
 800324e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003252:	4b15      	ldr	r3, [pc, #84]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003254:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003258:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003260:	4911      	ldr	r1, [pc, #68]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003262:	4313      	orrs	r3, r2
 8003264:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003268:	4b0f      	ldr	r3, [pc, #60]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a0e      	ldr	r2, [pc, #56]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800326e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003272:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003274:	f7fd ff30 	bl	80010d8 <HAL_GetTick>
 8003278:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800327a:	e008      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800327c:	f7fd ff2c 	bl	80010d8 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b64      	cmp	r3, #100	; 0x64
 8003288:	d901      	bls.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e007      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800328e:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003296:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800329a:	d1ef      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3720      	adds	r7, #32
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40023800 	.word	0x40023800

080032ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e049      	b.n	8003352 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d106      	bne.n	80032d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7fd fd06 	bl	8000ce4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2202      	movs	r2, #2
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3304      	adds	r3, #4
 80032e8:	4619      	mov	r1, r3
 80032ea:	4610      	mov	r0, r2
 80032ec:	f000 faf8 	bl	80038e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
	...

0800335c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b01      	cmp	r3, #1
 800336e:	d001      	beq.n	8003374 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e054      	b.n	800341e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2202      	movs	r2, #2
 8003378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0201 	orr.w	r2, r2, #1
 800338a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a26      	ldr	r2, [pc, #152]	; (800342c <HAL_TIM_Base_Start_IT+0xd0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d022      	beq.n	80033dc <HAL_TIM_Base_Start_IT+0x80>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800339e:	d01d      	beq.n	80033dc <HAL_TIM_Base_Start_IT+0x80>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a22      	ldr	r2, [pc, #136]	; (8003430 <HAL_TIM_Base_Start_IT+0xd4>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d018      	beq.n	80033dc <HAL_TIM_Base_Start_IT+0x80>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a21      	ldr	r2, [pc, #132]	; (8003434 <HAL_TIM_Base_Start_IT+0xd8>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d013      	beq.n	80033dc <HAL_TIM_Base_Start_IT+0x80>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a1f      	ldr	r2, [pc, #124]	; (8003438 <HAL_TIM_Base_Start_IT+0xdc>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d00e      	beq.n	80033dc <HAL_TIM_Base_Start_IT+0x80>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a1e      	ldr	r2, [pc, #120]	; (800343c <HAL_TIM_Base_Start_IT+0xe0>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d009      	beq.n	80033dc <HAL_TIM_Base_Start_IT+0x80>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a1c      	ldr	r2, [pc, #112]	; (8003440 <HAL_TIM_Base_Start_IT+0xe4>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d004      	beq.n	80033dc <HAL_TIM_Base_Start_IT+0x80>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a1b      	ldr	r2, [pc, #108]	; (8003444 <HAL_TIM_Base_Start_IT+0xe8>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d115      	bne.n	8003408 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689a      	ldr	r2, [r3, #8]
 80033e2:	4b19      	ldr	r3, [pc, #100]	; (8003448 <HAL_TIM_Base_Start_IT+0xec>)
 80033e4:	4013      	ands	r3, r2
 80033e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2b06      	cmp	r3, #6
 80033ec:	d015      	beq.n	800341a <HAL_TIM_Base_Start_IT+0xbe>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033f4:	d011      	beq.n	800341a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f042 0201 	orr.w	r2, r2, #1
 8003404:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003406:	e008      	b.n	800341a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0201 	orr.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	e000      	b.n	800341c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800341a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3714      	adds	r7, #20
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	40010000 	.word	0x40010000
 8003430:	40000400 	.word	0x40000400
 8003434:	40000800 	.word	0x40000800
 8003438:	40000c00 	.word	0x40000c00
 800343c:	40010400 	.word	0x40010400
 8003440:	40014000 	.word	0x40014000
 8003444:	40001800 	.word	0x40001800
 8003448:	00010007 	.word	0x00010007

0800344c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68da      	ldr	r2, [r3, #12]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0201 	bic.w	r2, r2, #1
 8003462:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6a1a      	ldr	r2, [r3, #32]
 800346a:	f241 1311 	movw	r3, #4369	; 0x1111
 800346e:	4013      	ands	r3, r2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10f      	bne.n	8003494 <HAL_TIM_Base_Stop_IT+0x48>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6a1a      	ldr	r2, [r3, #32]
 800347a:	f240 4344 	movw	r3, #1092	; 0x444
 800347e:	4013      	ands	r3, r2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d107      	bne.n	8003494 <HAL_TIM_Base_Stop_IT+0x48>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0201 	bic.w	r2, r2, #1
 8003492:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b082      	sub	sp, #8
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d122      	bne.n	8003506 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d11b      	bne.n	8003506 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f06f 0202 	mvn.w	r2, #2
 80034d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	f003 0303 	and.w	r3, r3, #3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 f9d9 	bl	80038a4 <HAL_TIM_IC_CaptureCallback>
 80034f2:	e005      	b.n	8003500 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f9cb 	bl	8003890 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f9dc 	bl	80038b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b04      	cmp	r3, #4
 8003512:	d122      	bne.n	800355a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	f003 0304 	and.w	r3, r3, #4
 800351e:	2b04      	cmp	r3, #4
 8003520:	d11b      	bne.n	800355a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f06f 0204 	mvn.w	r2, #4
 800352a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800353c:	2b00      	cmp	r3, #0
 800353e:	d003      	beq.n	8003548 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 f9af 	bl	80038a4 <HAL_TIM_IC_CaptureCallback>
 8003546:	e005      	b.n	8003554 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f9a1 	bl	8003890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f9b2 	bl	80038b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	f003 0308 	and.w	r3, r3, #8
 8003564:	2b08      	cmp	r3, #8
 8003566:	d122      	bne.n	80035ae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	2b08      	cmp	r3, #8
 8003574:	d11b      	bne.n	80035ae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f06f 0208 	mvn.w	r2, #8
 800357e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2204      	movs	r2, #4
 8003584:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	69db      	ldr	r3, [r3, #28]
 800358c:	f003 0303 	and.w	r3, r3, #3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f985 	bl	80038a4 <HAL_TIM_IC_CaptureCallback>
 800359a:	e005      	b.n	80035a8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 f977 	bl	8003890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f988 	bl	80038b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	f003 0310 	and.w	r3, r3, #16
 80035b8:	2b10      	cmp	r3, #16
 80035ba:	d122      	bne.n	8003602 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	f003 0310 	and.w	r3, r3, #16
 80035c6:	2b10      	cmp	r3, #16
 80035c8:	d11b      	bne.n	8003602 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f06f 0210 	mvn.w	r2, #16
 80035d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2208      	movs	r2, #8
 80035d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d003      	beq.n	80035f0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 f95b 	bl	80038a4 <HAL_TIM_IC_CaptureCallback>
 80035ee:	e005      	b.n	80035fc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 f94d 	bl	8003890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f95e 	bl	80038b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b01      	cmp	r3, #1
 800360e:	d10e      	bne.n	800362e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b01      	cmp	r3, #1
 800361c:	d107      	bne.n	800362e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f06f 0201 	mvn.w	r2, #1
 8003626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 f927 	bl	800387c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003638:	2b80      	cmp	r3, #128	; 0x80
 800363a:	d10e      	bne.n	800365a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003646:	2b80      	cmp	r3, #128	; 0x80
 8003648:	d107      	bne.n	800365a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 fb15 	bl	8003c84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003664:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003668:	d10e      	bne.n	8003688 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003674:	2b80      	cmp	r3, #128	; 0x80
 8003676:	d107      	bne.n	8003688 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 fb08 	bl	8003c98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003692:	2b40      	cmp	r3, #64	; 0x40
 8003694:	d10e      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a0:	2b40      	cmp	r3, #64	; 0x40
 80036a2:	d107      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f90c 	bl	80038cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	f003 0320 	and.w	r3, r3, #32
 80036be:	2b20      	cmp	r3, #32
 80036c0:	d10e      	bne.n	80036e0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f003 0320 	and.w	r3, r3, #32
 80036cc:	2b20      	cmp	r3, #32
 80036ce:	d107      	bne.n	80036e0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f06f 0220 	mvn.w	r2, #32
 80036d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 fac8 	bl	8003c70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036e0:	bf00      	nop
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036f2:	2300      	movs	r3, #0
 80036f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d101      	bne.n	8003704 <HAL_TIM_ConfigClockSource+0x1c>
 8003700:	2302      	movs	r3, #2
 8003702:	e0b4      	b.n	800386e <HAL_TIM_ConfigClockSource+0x186>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800371c:	68ba      	ldr	r2, [r7, #8]
 800371e:	4b56      	ldr	r3, [pc, #344]	; (8003878 <HAL_TIM_ConfigClockSource+0x190>)
 8003720:	4013      	ands	r3, r2
 8003722:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800372a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800373c:	d03e      	beq.n	80037bc <HAL_TIM_ConfigClockSource+0xd4>
 800373e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003742:	f200 8087 	bhi.w	8003854 <HAL_TIM_ConfigClockSource+0x16c>
 8003746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800374a:	f000 8086 	beq.w	800385a <HAL_TIM_ConfigClockSource+0x172>
 800374e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003752:	d87f      	bhi.n	8003854 <HAL_TIM_ConfigClockSource+0x16c>
 8003754:	2b70      	cmp	r3, #112	; 0x70
 8003756:	d01a      	beq.n	800378e <HAL_TIM_ConfigClockSource+0xa6>
 8003758:	2b70      	cmp	r3, #112	; 0x70
 800375a:	d87b      	bhi.n	8003854 <HAL_TIM_ConfigClockSource+0x16c>
 800375c:	2b60      	cmp	r3, #96	; 0x60
 800375e:	d050      	beq.n	8003802 <HAL_TIM_ConfigClockSource+0x11a>
 8003760:	2b60      	cmp	r3, #96	; 0x60
 8003762:	d877      	bhi.n	8003854 <HAL_TIM_ConfigClockSource+0x16c>
 8003764:	2b50      	cmp	r3, #80	; 0x50
 8003766:	d03c      	beq.n	80037e2 <HAL_TIM_ConfigClockSource+0xfa>
 8003768:	2b50      	cmp	r3, #80	; 0x50
 800376a:	d873      	bhi.n	8003854 <HAL_TIM_ConfigClockSource+0x16c>
 800376c:	2b40      	cmp	r3, #64	; 0x40
 800376e:	d058      	beq.n	8003822 <HAL_TIM_ConfigClockSource+0x13a>
 8003770:	2b40      	cmp	r3, #64	; 0x40
 8003772:	d86f      	bhi.n	8003854 <HAL_TIM_ConfigClockSource+0x16c>
 8003774:	2b30      	cmp	r3, #48	; 0x30
 8003776:	d064      	beq.n	8003842 <HAL_TIM_ConfigClockSource+0x15a>
 8003778:	2b30      	cmp	r3, #48	; 0x30
 800377a:	d86b      	bhi.n	8003854 <HAL_TIM_ConfigClockSource+0x16c>
 800377c:	2b20      	cmp	r3, #32
 800377e:	d060      	beq.n	8003842 <HAL_TIM_ConfigClockSource+0x15a>
 8003780:	2b20      	cmp	r3, #32
 8003782:	d867      	bhi.n	8003854 <HAL_TIM_ConfigClockSource+0x16c>
 8003784:	2b00      	cmp	r3, #0
 8003786:	d05c      	beq.n	8003842 <HAL_TIM_ConfigClockSource+0x15a>
 8003788:	2b10      	cmp	r3, #16
 800378a:	d05a      	beq.n	8003842 <HAL_TIM_ConfigClockSource+0x15a>
 800378c:	e062      	b.n	8003854 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800379e:	f000 f9b9 	bl	8003b14 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	609a      	str	r2, [r3, #8]
      break;
 80037ba:	e04f      	b.n	800385c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037cc:	f000 f9a2 	bl	8003b14 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689a      	ldr	r2, [r3, #8]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037de:	609a      	str	r2, [r3, #8]
      break;
 80037e0:	e03c      	b.n	800385c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ee:	461a      	mov	r2, r3
 80037f0:	f000 f916 	bl	8003a20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2150      	movs	r1, #80	; 0x50
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 f96f 	bl	8003ade <TIM_ITRx_SetConfig>
      break;
 8003800:	e02c      	b.n	800385c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800380e:	461a      	mov	r2, r3
 8003810:	f000 f935 	bl	8003a7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2160      	movs	r1, #96	; 0x60
 800381a:	4618      	mov	r0, r3
 800381c:	f000 f95f 	bl	8003ade <TIM_ITRx_SetConfig>
      break;
 8003820:	e01c      	b.n	800385c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800382e:	461a      	mov	r2, r3
 8003830:	f000 f8f6 	bl	8003a20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2140      	movs	r1, #64	; 0x40
 800383a:	4618      	mov	r0, r3
 800383c:	f000 f94f 	bl	8003ade <TIM_ITRx_SetConfig>
      break;
 8003840:	e00c      	b.n	800385c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4619      	mov	r1, r3
 800384c:	4610      	mov	r0, r2
 800384e:	f000 f946 	bl	8003ade <TIM_ITRx_SetConfig>
      break;
 8003852:	e003      	b.n	800385c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	73fb      	strb	r3, [r7, #15]
      break;
 8003858:	e000      	b.n	800385c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800385a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800386c:	7bfb      	ldrb	r3, [r7, #15]
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	fffeff88 	.word	0xfffeff88

0800387c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a40      	ldr	r2, [pc, #256]	; (80039f4 <TIM_Base_SetConfig+0x114>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d013      	beq.n	8003920 <TIM_Base_SetConfig+0x40>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038fe:	d00f      	beq.n	8003920 <TIM_Base_SetConfig+0x40>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a3d      	ldr	r2, [pc, #244]	; (80039f8 <TIM_Base_SetConfig+0x118>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d00b      	beq.n	8003920 <TIM_Base_SetConfig+0x40>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a3c      	ldr	r2, [pc, #240]	; (80039fc <TIM_Base_SetConfig+0x11c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d007      	beq.n	8003920 <TIM_Base_SetConfig+0x40>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a3b      	ldr	r2, [pc, #236]	; (8003a00 <TIM_Base_SetConfig+0x120>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d003      	beq.n	8003920 <TIM_Base_SetConfig+0x40>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a3a      	ldr	r2, [pc, #232]	; (8003a04 <TIM_Base_SetConfig+0x124>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d108      	bne.n	8003932 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003926:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	4313      	orrs	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a2f      	ldr	r2, [pc, #188]	; (80039f4 <TIM_Base_SetConfig+0x114>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d02b      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003940:	d027      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a2c      	ldr	r2, [pc, #176]	; (80039f8 <TIM_Base_SetConfig+0x118>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d023      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a2b      	ldr	r2, [pc, #172]	; (80039fc <TIM_Base_SetConfig+0x11c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d01f      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a2a      	ldr	r2, [pc, #168]	; (8003a00 <TIM_Base_SetConfig+0x120>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d01b      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a29      	ldr	r2, [pc, #164]	; (8003a04 <TIM_Base_SetConfig+0x124>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d017      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a28      	ldr	r2, [pc, #160]	; (8003a08 <TIM_Base_SetConfig+0x128>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d013      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a27      	ldr	r2, [pc, #156]	; (8003a0c <TIM_Base_SetConfig+0x12c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d00f      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a26      	ldr	r2, [pc, #152]	; (8003a10 <TIM_Base_SetConfig+0x130>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d00b      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a25      	ldr	r2, [pc, #148]	; (8003a14 <TIM_Base_SetConfig+0x134>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d007      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a24      	ldr	r2, [pc, #144]	; (8003a18 <TIM_Base_SetConfig+0x138>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d003      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a23      	ldr	r2, [pc, #140]	; (8003a1c <TIM_Base_SetConfig+0x13c>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d108      	bne.n	80039a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a0a      	ldr	r2, [pc, #40]	; (80039f4 <TIM_Base_SetConfig+0x114>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d003      	beq.n	80039d8 <TIM_Base_SetConfig+0xf8>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a0c      	ldr	r2, [pc, #48]	; (8003a04 <TIM_Base_SetConfig+0x124>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d103      	bne.n	80039e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	691a      	ldr	r2, [r3, #16]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	615a      	str	r2, [r3, #20]
}
 80039e6:	bf00      	nop
 80039e8:	3714      	adds	r7, #20
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	40010000 	.word	0x40010000
 80039f8:	40000400 	.word	0x40000400
 80039fc:	40000800 	.word	0x40000800
 8003a00:	40000c00 	.word	0x40000c00
 8003a04:	40010400 	.word	0x40010400
 8003a08:	40014000 	.word	0x40014000
 8003a0c:	40014400 	.word	0x40014400
 8003a10:	40014800 	.word	0x40014800
 8003a14:	40001800 	.word	0x40001800
 8003a18:	40001c00 	.word	0x40001c00
 8003a1c:	40002000 	.word	0x40002000

08003a20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b087      	sub	sp, #28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	f023 0201 	bic.w	r2, r3, #1
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	011b      	lsls	r3, r3, #4
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f023 030a 	bic.w	r3, r3, #10
 8003a5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	621a      	str	r2, [r3, #32]
}
 8003a72:	bf00      	nop
 8003a74:	371c      	adds	r7, #28
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b087      	sub	sp, #28
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	60f8      	str	r0, [r7, #12]
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	f023 0210 	bic.w	r2, r3, #16
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003aa8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	031b      	lsls	r3, r3, #12
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003aba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	621a      	str	r2, [r3, #32]
}
 8003ad2:	bf00      	nop
 8003ad4:	371c      	adds	r7, #28
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b085      	sub	sp, #20
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
 8003ae6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	f043 0307 	orr.w	r3, r3, #7
 8003b00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	609a      	str	r2, [r3, #8]
}
 8003b08:	bf00      	nop
 8003b0a:	3714      	adds	r7, #20
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b087      	sub	sp, #28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
 8003b20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	021a      	lsls	r2, r3, #8
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	431a      	orrs	r2, r3
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	609a      	str	r2, [r3, #8]
}
 8003b48:	bf00      	nop
 8003b4a:	371c      	adds	r7, #28
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d101      	bne.n	8003b6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b68:	2302      	movs	r3, #2
 8003b6a:	e06d      	b.n	8003c48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2202      	movs	r2, #2
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a30      	ldr	r2, [pc, #192]	; (8003c54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d004      	beq.n	8003ba0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a2f      	ldr	r2, [pc, #188]	; (8003c58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d108      	bne.n	8003bb2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003ba6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bb8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a20      	ldr	r2, [pc, #128]	; (8003c54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d022      	beq.n	8003c1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bde:	d01d      	beq.n	8003c1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a1d      	ldr	r2, [pc, #116]	; (8003c5c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d018      	beq.n	8003c1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a1c      	ldr	r2, [pc, #112]	; (8003c60 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d013      	beq.n	8003c1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a1a      	ldr	r2, [pc, #104]	; (8003c64 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d00e      	beq.n	8003c1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a15      	ldr	r2, [pc, #84]	; (8003c58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d009      	beq.n	8003c1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a16      	ldr	r2, [pc, #88]	; (8003c68 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d004      	beq.n	8003c1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a15      	ldr	r2, [pc, #84]	; (8003c6c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d10c      	bne.n	8003c36 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	68ba      	ldr	r2, [r7, #8]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	40010000 	.word	0x40010000
 8003c58:	40010400 	.word	0x40010400
 8003c5c:	40000400 	.word	0x40000400
 8003c60:	40000800 	.word	0x40000800
 8003c64:	40000c00 	.word	0x40000c00
 8003c68:	40014000 	.word	0x40014000
 8003c6c:	40001800 	.word	0x40001800

08003c70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e040      	b.n	8003d40 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d106      	bne.n	8003cd4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7fd f82e 	bl	8000d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2224      	movs	r2, #36	; 0x24
 8003cd8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 0201 	bic.w	r2, r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f8b0 	bl	8003e50 <UART_SetConfig>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d101      	bne.n	8003cfa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e022      	b.n	8003d40 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d002      	beq.n	8003d08 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 fb08 	bl	8004318 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689a      	ldr	r2, [r3, #8]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0201 	orr.w	r2, r2, #1
 8003d36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 fb8f 	bl	800445c <UART_CheckIdleState>
 8003d3e:	4603      	mov	r3, r0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b08a      	sub	sp, #40	; 0x28
 8003d4c:	af02      	add	r7, sp, #8
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	603b      	str	r3, [r7, #0]
 8003d54:	4613      	mov	r3, r2
 8003d56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d5c:	2b20      	cmp	r3, #32
 8003d5e:	d171      	bne.n	8003e44 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d002      	beq.n	8003d6c <HAL_UART_Transmit+0x24>
 8003d66:	88fb      	ldrh	r3, [r7, #6]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d101      	bne.n	8003d70 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e06a      	b.n	8003e46 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2221      	movs	r2, #33	; 0x21
 8003d7c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d7e:	f7fd f9ab 	bl	80010d8 <HAL_GetTick>
 8003d82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	88fa      	ldrh	r2, [r7, #6]
 8003d88:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	88fa      	ldrh	r2, [r7, #6]
 8003d90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d9c:	d108      	bne.n	8003db0 <HAL_UART_Transmit+0x68>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d104      	bne.n	8003db0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003da6:	2300      	movs	r3, #0
 8003da8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	61bb      	str	r3, [r7, #24]
 8003dae:	e003      	b.n	8003db8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003db4:	2300      	movs	r3, #0
 8003db6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003db8:	e02c      	b.n	8003e14 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	2180      	movs	r1, #128	; 0x80
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 fb96 	bl	80044f6 <UART_WaitOnFlagUntilTimeout>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d001      	beq.n	8003dd4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e038      	b.n	8003e46 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10b      	bne.n	8003df2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	881b      	ldrh	r3, [r3, #0]
 8003dde:	461a      	mov	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003de8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	3302      	adds	r3, #2
 8003dee:	61bb      	str	r3, [r7, #24]
 8003df0:	e007      	b.n	8003e02 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	781a      	ldrb	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1cc      	bne.n	8003dba <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	2200      	movs	r2, #0
 8003e28:	2140      	movs	r1, #64	; 0x40
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f000 fb63 	bl	80044f6 <UART_WaitOnFlagUntilTimeout>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e005      	b.n	8003e46 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003e40:	2300      	movs	r3, #0
 8003e42:	e000      	b.n	8003e46 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003e44:	2302      	movs	r3, #2
  }
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3720      	adds	r7, #32
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
	...

08003e50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b088      	sub	sp, #32
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	431a      	orrs	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	69db      	ldr	r3, [r3, #28]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	4ba6      	ldr	r3, [pc, #664]	; (8004114 <UART_SetConfig+0x2c4>)
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	6812      	ldr	r2, [r2, #0]
 8003e82:	6979      	ldr	r1, [r7, #20]
 8003e84:	430b      	orrs	r3, r1
 8003e86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68da      	ldr	r2, [r3, #12]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a94      	ldr	r2, [pc, #592]	; (8004118 <UART_SetConfig+0x2c8>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d120      	bne.n	8003f0e <UART_SetConfig+0xbe>
 8003ecc:	4b93      	ldr	r3, [pc, #588]	; (800411c <UART_SetConfig+0x2cc>)
 8003ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed2:	f003 0303 	and.w	r3, r3, #3
 8003ed6:	2b03      	cmp	r3, #3
 8003ed8:	d816      	bhi.n	8003f08 <UART_SetConfig+0xb8>
 8003eda:	a201      	add	r2, pc, #4	; (adr r2, 8003ee0 <UART_SetConfig+0x90>)
 8003edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee0:	08003ef1 	.word	0x08003ef1
 8003ee4:	08003efd 	.word	0x08003efd
 8003ee8:	08003ef7 	.word	0x08003ef7
 8003eec:	08003f03 	.word	0x08003f03
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	77fb      	strb	r3, [r7, #31]
 8003ef4:	e150      	b.n	8004198 <UART_SetConfig+0x348>
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	77fb      	strb	r3, [r7, #31]
 8003efa:	e14d      	b.n	8004198 <UART_SetConfig+0x348>
 8003efc:	2304      	movs	r3, #4
 8003efe:	77fb      	strb	r3, [r7, #31]
 8003f00:	e14a      	b.n	8004198 <UART_SetConfig+0x348>
 8003f02:	2308      	movs	r3, #8
 8003f04:	77fb      	strb	r3, [r7, #31]
 8003f06:	e147      	b.n	8004198 <UART_SetConfig+0x348>
 8003f08:	2310      	movs	r3, #16
 8003f0a:	77fb      	strb	r3, [r7, #31]
 8003f0c:	e144      	b.n	8004198 <UART_SetConfig+0x348>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a83      	ldr	r2, [pc, #524]	; (8004120 <UART_SetConfig+0x2d0>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d132      	bne.n	8003f7e <UART_SetConfig+0x12e>
 8003f18:	4b80      	ldr	r3, [pc, #512]	; (800411c <UART_SetConfig+0x2cc>)
 8003f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1e:	f003 030c 	and.w	r3, r3, #12
 8003f22:	2b0c      	cmp	r3, #12
 8003f24:	d828      	bhi.n	8003f78 <UART_SetConfig+0x128>
 8003f26:	a201      	add	r2, pc, #4	; (adr r2, 8003f2c <UART_SetConfig+0xdc>)
 8003f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2c:	08003f61 	.word	0x08003f61
 8003f30:	08003f79 	.word	0x08003f79
 8003f34:	08003f79 	.word	0x08003f79
 8003f38:	08003f79 	.word	0x08003f79
 8003f3c:	08003f6d 	.word	0x08003f6d
 8003f40:	08003f79 	.word	0x08003f79
 8003f44:	08003f79 	.word	0x08003f79
 8003f48:	08003f79 	.word	0x08003f79
 8003f4c:	08003f67 	.word	0x08003f67
 8003f50:	08003f79 	.word	0x08003f79
 8003f54:	08003f79 	.word	0x08003f79
 8003f58:	08003f79 	.word	0x08003f79
 8003f5c:	08003f73 	.word	0x08003f73
 8003f60:	2300      	movs	r3, #0
 8003f62:	77fb      	strb	r3, [r7, #31]
 8003f64:	e118      	b.n	8004198 <UART_SetConfig+0x348>
 8003f66:	2302      	movs	r3, #2
 8003f68:	77fb      	strb	r3, [r7, #31]
 8003f6a:	e115      	b.n	8004198 <UART_SetConfig+0x348>
 8003f6c:	2304      	movs	r3, #4
 8003f6e:	77fb      	strb	r3, [r7, #31]
 8003f70:	e112      	b.n	8004198 <UART_SetConfig+0x348>
 8003f72:	2308      	movs	r3, #8
 8003f74:	77fb      	strb	r3, [r7, #31]
 8003f76:	e10f      	b.n	8004198 <UART_SetConfig+0x348>
 8003f78:	2310      	movs	r3, #16
 8003f7a:	77fb      	strb	r3, [r7, #31]
 8003f7c:	e10c      	b.n	8004198 <UART_SetConfig+0x348>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a68      	ldr	r2, [pc, #416]	; (8004124 <UART_SetConfig+0x2d4>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d120      	bne.n	8003fca <UART_SetConfig+0x17a>
 8003f88:	4b64      	ldr	r3, [pc, #400]	; (800411c <UART_SetConfig+0x2cc>)
 8003f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f92:	2b30      	cmp	r3, #48	; 0x30
 8003f94:	d013      	beq.n	8003fbe <UART_SetConfig+0x16e>
 8003f96:	2b30      	cmp	r3, #48	; 0x30
 8003f98:	d814      	bhi.n	8003fc4 <UART_SetConfig+0x174>
 8003f9a:	2b20      	cmp	r3, #32
 8003f9c:	d009      	beq.n	8003fb2 <UART_SetConfig+0x162>
 8003f9e:	2b20      	cmp	r3, #32
 8003fa0:	d810      	bhi.n	8003fc4 <UART_SetConfig+0x174>
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <UART_SetConfig+0x15c>
 8003fa6:	2b10      	cmp	r3, #16
 8003fa8:	d006      	beq.n	8003fb8 <UART_SetConfig+0x168>
 8003faa:	e00b      	b.n	8003fc4 <UART_SetConfig+0x174>
 8003fac:	2300      	movs	r3, #0
 8003fae:	77fb      	strb	r3, [r7, #31]
 8003fb0:	e0f2      	b.n	8004198 <UART_SetConfig+0x348>
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	77fb      	strb	r3, [r7, #31]
 8003fb6:	e0ef      	b.n	8004198 <UART_SetConfig+0x348>
 8003fb8:	2304      	movs	r3, #4
 8003fba:	77fb      	strb	r3, [r7, #31]
 8003fbc:	e0ec      	b.n	8004198 <UART_SetConfig+0x348>
 8003fbe:	2308      	movs	r3, #8
 8003fc0:	77fb      	strb	r3, [r7, #31]
 8003fc2:	e0e9      	b.n	8004198 <UART_SetConfig+0x348>
 8003fc4:	2310      	movs	r3, #16
 8003fc6:	77fb      	strb	r3, [r7, #31]
 8003fc8:	e0e6      	b.n	8004198 <UART_SetConfig+0x348>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a56      	ldr	r2, [pc, #344]	; (8004128 <UART_SetConfig+0x2d8>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d120      	bne.n	8004016 <UART_SetConfig+0x1c6>
 8003fd4:	4b51      	ldr	r3, [pc, #324]	; (800411c <UART_SetConfig+0x2cc>)
 8003fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fda:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003fde:	2bc0      	cmp	r3, #192	; 0xc0
 8003fe0:	d013      	beq.n	800400a <UART_SetConfig+0x1ba>
 8003fe2:	2bc0      	cmp	r3, #192	; 0xc0
 8003fe4:	d814      	bhi.n	8004010 <UART_SetConfig+0x1c0>
 8003fe6:	2b80      	cmp	r3, #128	; 0x80
 8003fe8:	d009      	beq.n	8003ffe <UART_SetConfig+0x1ae>
 8003fea:	2b80      	cmp	r3, #128	; 0x80
 8003fec:	d810      	bhi.n	8004010 <UART_SetConfig+0x1c0>
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d002      	beq.n	8003ff8 <UART_SetConfig+0x1a8>
 8003ff2:	2b40      	cmp	r3, #64	; 0x40
 8003ff4:	d006      	beq.n	8004004 <UART_SetConfig+0x1b4>
 8003ff6:	e00b      	b.n	8004010 <UART_SetConfig+0x1c0>
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	77fb      	strb	r3, [r7, #31]
 8003ffc:	e0cc      	b.n	8004198 <UART_SetConfig+0x348>
 8003ffe:	2302      	movs	r3, #2
 8004000:	77fb      	strb	r3, [r7, #31]
 8004002:	e0c9      	b.n	8004198 <UART_SetConfig+0x348>
 8004004:	2304      	movs	r3, #4
 8004006:	77fb      	strb	r3, [r7, #31]
 8004008:	e0c6      	b.n	8004198 <UART_SetConfig+0x348>
 800400a:	2308      	movs	r3, #8
 800400c:	77fb      	strb	r3, [r7, #31]
 800400e:	e0c3      	b.n	8004198 <UART_SetConfig+0x348>
 8004010:	2310      	movs	r3, #16
 8004012:	77fb      	strb	r3, [r7, #31]
 8004014:	e0c0      	b.n	8004198 <UART_SetConfig+0x348>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a44      	ldr	r2, [pc, #272]	; (800412c <UART_SetConfig+0x2dc>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d125      	bne.n	800406c <UART_SetConfig+0x21c>
 8004020:	4b3e      	ldr	r3, [pc, #248]	; (800411c <UART_SetConfig+0x2cc>)
 8004022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800402a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800402e:	d017      	beq.n	8004060 <UART_SetConfig+0x210>
 8004030:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004034:	d817      	bhi.n	8004066 <UART_SetConfig+0x216>
 8004036:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800403a:	d00b      	beq.n	8004054 <UART_SetConfig+0x204>
 800403c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004040:	d811      	bhi.n	8004066 <UART_SetConfig+0x216>
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <UART_SetConfig+0x1fe>
 8004046:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800404a:	d006      	beq.n	800405a <UART_SetConfig+0x20a>
 800404c:	e00b      	b.n	8004066 <UART_SetConfig+0x216>
 800404e:	2300      	movs	r3, #0
 8004050:	77fb      	strb	r3, [r7, #31]
 8004052:	e0a1      	b.n	8004198 <UART_SetConfig+0x348>
 8004054:	2302      	movs	r3, #2
 8004056:	77fb      	strb	r3, [r7, #31]
 8004058:	e09e      	b.n	8004198 <UART_SetConfig+0x348>
 800405a:	2304      	movs	r3, #4
 800405c:	77fb      	strb	r3, [r7, #31]
 800405e:	e09b      	b.n	8004198 <UART_SetConfig+0x348>
 8004060:	2308      	movs	r3, #8
 8004062:	77fb      	strb	r3, [r7, #31]
 8004064:	e098      	b.n	8004198 <UART_SetConfig+0x348>
 8004066:	2310      	movs	r3, #16
 8004068:	77fb      	strb	r3, [r7, #31]
 800406a:	e095      	b.n	8004198 <UART_SetConfig+0x348>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a2f      	ldr	r2, [pc, #188]	; (8004130 <UART_SetConfig+0x2e0>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d125      	bne.n	80040c2 <UART_SetConfig+0x272>
 8004076:	4b29      	ldr	r3, [pc, #164]	; (800411c <UART_SetConfig+0x2cc>)
 8004078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004080:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004084:	d017      	beq.n	80040b6 <UART_SetConfig+0x266>
 8004086:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800408a:	d817      	bhi.n	80040bc <UART_SetConfig+0x26c>
 800408c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004090:	d00b      	beq.n	80040aa <UART_SetConfig+0x25a>
 8004092:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004096:	d811      	bhi.n	80040bc <UART_SetConfig+0x26c>
 8004098:	2b00      	cmp	r3, #0
 800409a:	d003      	beq.n	80040a4 <UART_SetConfig+0x254>
 800409c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040a0:	d006      	beq.n	80040b0 <UART_SetConfig+0x260>
 80040a2:	e00b      	b.n	80040bc <UART_SetConfig+0x26c>
 80040a4:	2301      	movs	r3, #1
 80040a6:	77fb      	strb	r3, [r7, #31]
 80040a8:	e076      	b.n	8004198 <UART_SetConfig+0x348>
 80040aa:	2302      	movs	r3, #2
 80040ac:	77fb      	strb	r3, [r7, #31]
 80040ae:	e073      	b.n	8004198 <UART_SetConfig+0x348>
 80040b0:	2304      	movs	r3, #4
 80040b2:	77fb      	strb	r3, [r7, #31]
 80040b4:	e070      	b.n	8004198 <UART_SetConfig+0x348>
 80040b6:	2308      	movs	r3, #8
 80040b8:	77fb      	strb	r3, [r7, #31]
 80040ba:	e06d      	b.n	8004198 <UART_SetConfig+0x348>
 80040bc:	2310      	movs	r3, #16
 80040be:	77fb      	strb	r3, [r7, #31]
 80040c0:	e06a      	b.n	8004198 <UART_SetConfig+0x348>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a1b      	ldr	r2, [pc, #108]	; (8004134 <UART_SetConfig+0x2e4>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d138      	bne.n	800413e <UART_SetConfig+0x2ee>
 80040cc:	4b13      	ldr	r3, [pc, #76]	; (800411c <UART_SetConfig+0x2cc>)
 80040ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80040d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040da:	d017      	beq.n	800410c <UART_SetConfig+0x2bc>
 80040dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040e0:	d82a      	bhi.n	8004138 <UART_SetConfig+0x2e8>
 80040e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040e6:	d00b      	beq.n	8004100 <UART_SetConfig+0x2b0>
 80040e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ec:	d824      	bhi.n	8004138 <UART_SetConfig+0x2e8>
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d003      	beq.n	80040fa <UART_SetConfig+0x2aa>
 80040f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040f6:	d006      	beq.n	8004106 <UART_SetConfig+0x2b6>
 80040f8:	e01e      	b.n	8004138 <UART_SetConfig+0x2e8>
 80040fa:	2300      	movs	r3, #0
 80040fc:	77fb      	strb	r3, [r7, #31]
 80040fe:	e04b      	b.n	8004198 <UART_SetConfig+0x348>
 8004100:	2302      	movs	r3, #2
 8004102:	77fb      	strb	r3, [r7, #31]
 8004104:	e048      	b.n	8004198 <UART_SetConfig+0x348>
 8004106:	2304      	movs	r3, #4
 8004108:	77fb      	strb	r3, [r7, #31]
 800410a:	e045      	b.n	8004198 <UART_SetConfig+0x348>
 800410c:	2308      	movs	r3, #8
 800410e:	77fb      	strb	r3, [r7, #31]
 8004110:	e042      	b.n	8004198 <UART_SetConfig+0x348>
 8004112:	bf00      	nop
 8004114:	efff69f3 	.word	0xefff69f3
 8004118:	40011000 	.word	0x40011000
 800411c:	40023800 	.word	0x40023800
 8004120:	40004400 	.word	0x40004400
 8004124:	40004800 	.word	0x40004800
 8004128:	40004c00 	.word	0x40004c00
 800412c:	40005000 	.word	0x40005000
 8004130:	40011400 	.word	0x40011400
 8004134:	40007800 	.word	0x40007800
 8004138:	2310      	movs	r3, #16
 800413a:	77fb      	strb	r3, [r7, #31]
 800413c:	e02c      	b.n	8004198 <UART_SetConfig+0x348>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a72      	ldr	r2, [pc, #456]	; (800430c <UART_SetConfig+0x4bc>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d125      	bne.n	8004194 <UART_SetConfig+0x344>
 8004148:	4b71      	ldr	r3, [pc, #452]	; (8004310 <UART_SetConfig+0x4c0>)
 800414a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004152:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004156:	d017      	beq.n	8004188 <UART_SetConfig+0x338>
 8004158:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800415c:	d817      	bhi.n	800418e <UART_SetConfig+0x33e>
 800415e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004162:	d00b      	beq.n	800417c <UART_SetConfig+0x32c>
 8004164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004168:	d811      	bhi.n	800418e <UART_SetConfig+0x33e>
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <UART_SetConfig+0x326>
 800416e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004172:	d006      	beq.n	8004182 <UART_SetConfig+0x332>
 8004174:	e00b      	b.n	800418e <UART_SetConfig+0x33e>
 8004176:	2300      	movs	r3, #0
 8004178:	77fb      	strb	r3, [r7, #31]
 800417a:	e00d      	b.n	8004198 <UART_SetConfig+0x348>
 800417c:	2302      	movs	r3, #2
 800417e:	77fb      	strb	r3, [r7, #31]
 8004180:	e00a      	b.n	8004198 <UART_SetConfig+0x348>
 8004182:	2304      	movs	r3, #4
 8004184:	77fb      	strb	r3, [r7, #31]
 8004186:	e007      	b.n	8004198 <UART_SetConfig+0x348>
 8004188:	2308      	movs	r3, #8
 800418a:	77fb      	strb	r3, [r7, #31]
 800418c:	e004      	b.n	8004198 <UART_SetConfig+0x348>
 800418e:	2310      	movs	r3, #16
 8004190:	77fb      	strb	r3, [r7, #31]
 8004192:	e001      	b.n	8004198 <UART_SetConfig+0x348>
 8004194:	2310      	movs	r3, #16
 8004196:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	69db      	ldr	r3, [r3, #28]
 800419c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041a0:	d15b      	bne.n	800425a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80041a2:	7ffb      	ldrb	r3, [r7, #31]
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	d828      	bhi.n	80041fa <UART_SetConfig+0x3aa>
 80041a8:	a201      	add	r2, pc, #4	; (adr r2, 80041b0 <UART_SetConfig+0x360>)
 80041aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ae:	bf00      	nop
 80041b0:	080041d5 	.word	0x080041d5
 80041b4:	080041dd 	.word	0x080041dd
 80041b8:	080041e5 	.word	0x080041e5
 80041bc:	080041fb 	.word	0x080041fb
 80041c0:	080041eb 	.word	0x080041eb
 80041c4:	080041fb 	.word	0x080041fb
 80041c8:	080041fb 	.word	0x080041fb
 80041cc:	080041fb 	.word	0x080041fb
 80041d0:	080041f3 	.word	0x080041f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041d4:	f7fe fc1a 	bl	8002a0c <HAL_RCC_GetPCLK1Freq>
 80041d8:	61b8      	str	r0, [r7, #24]
        break;
 80041da:	e013      	b.n	8004204 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041dc:	f7fe fc2a 	bl	8002a34 <HAL_RCC_GetPCLK2Freq>
 80041e0:	61b8      	str	r0, [r7, #24]
        break;
 80041e2:	e00f      	b.n	8004204 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041e4:	4b4b      	ldr	r3, [pc, #300]	; (8004314 <UART_SetConfig+0x4c4>)
 80041e6:	61bb      	str	r3, [r7, #24]
        break;
 80041e8:	e00c      	b.n	8004204 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041ea:	f7fe fafd 	bl	80027e8 <HAL_RCC_GetSysClockFreq>
 80041ee:	61b8      	str	r0, [r7, #24]
        break;
 80041f0:	e008      	b.n	8004204 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041f6:	61bb      	str	r3, [r7, #24]
        break;
 80041f8:	e004      	b.n	8004204 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	77bb      	strb	r3, [r7, #30]
        break;
 8004202:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d074      	beq.n	80042f4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	005a      	lsls	r2, r3, #1
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	085b      	lsrs	r3, r3, #1
 8004214:	441a      	add	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	fbb2 f3f3 	udiv	r3, r2, r3
 800421e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	2b0f      	cmp	r3, #15
 8004224:	d916      	bls.n	8004254 <UART_SetConfig+0x404>
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800422c:	d212      	bcs.n	8004254 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	b29b      	uxth	r3, r3
 8004232:	f023 030f 	bic.w	r3, r3, #15
 8004236:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	085b      	lsrs	r3, r3, #1
 800423c:	b29b      	uxth	r3, r3
 800423e:	f003 0307 	and.w	r3, r3, #7
 8004242:	b29a      	uxth	r2, r3
 8004244:	89fb      	ldrh	r3, [r7, #14]
 8004246:	4313      	orrs	r3, r2
 8004248:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	89fa      	ldrh	r2, [r7, #14]
 8004250:	60da      	str	r2, [r3, #12]
 8004252:	e04f      	b.n	80042f4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	77bb      	strb	r3, [r7, #30]
 8004258:	e04c      	b.n	80042f4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800425a:	7ffb      	ldrb	r3, [r7, #31]
 800425c:	2b08      	cmp	r3, #8
 800425e:	d828      	bhi.n	80042b2 <UART_SetConfig+0x462>
 8004260:	a201      	add	r2, pc, #4	; (adr r2, 8004268 <UART_SetConfig+0x418>)
 8004262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004266:	bf00      	nop
 8004268:	0800428d 	.word	0x0800428d
 800426c:	08004295 	.word	0x08004295
 8004270:	0800429d 	.word	0x0800429d
 8004274:	080042b3 	.word	0x080042b3
 8004278:	080042a3 	.word	0x080042a3
 800427c:	080042b3 	.word	0x080042b3
 8004280:	080042b3 	.word	0x080042b3
 8004284:	080042b3 	.word	0x080042b3
 8004288:	080042ab 	.word	0x080042ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800428c:	f7fe fbbe 	bl	8002a0c <HAL_RCC_GetPCLK1Freq>
 8004290:	61b8      	str	r0, [r7, #24]
        break;
 8004292:	e013      	b.n	80042bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004294:	f7fe fbce 	bl	8002a34 <HAL_RCC_GetPCLK2Freq>
 8004298:	61b8      	str	r0, [r7, #24]
        break;
 800429a:	e00f      	b.n	80042bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800429c:	4b1d      	ldr	r3, [pc, #116]	; (8004314 <UART_SetConfig+0x4c4>)
 800429e:	61bb      	str	r3, [r7, #24]
        break;
 80042a0:	e00c      	b.n	80042bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042a2:	f7fe faa1 	bl	80027e8 <HAL_RCC_GetSysClockFreq>
 80042a6:	61b8      	str	r0, [r7, #24]
        break;
 80042a8:	e008      	b.n	80042bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042ae:	61bb      	str	r3, [r7, #24]
        break;
 80042b0:	e004      	b.n	80042bc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80042b2:	2300      	movs	r3, #0
 80042b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	77bb      	strb	r3, [r7, #30]
        break;
 80042ba:	bf00      	nop
    }

    if (pclk != 0U)
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d018      	beq.n	80042f4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	085a      	lsrs	r2, r3, #1
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	441a      	add	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	2b0f      	cmp	r3, #15
 80042da:	d909      	bls.n	80042f0 <UART_SetConfig+0x4a0>
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e2:	d205      	bcs.n	80042f0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	60da      	str	r2, [r3, #12]
 80042ee:	e001      	b.n	80042f4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004300:	7fbb      	ldrb	r3, [r7, #30]
}
 8004302:	4618      	mov	r0, r3
 8004304:	3720      	adds	r7, #32
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	40007c00 	.word	0x40007c00
 8004310:	40023800 	.word	0x40023800
 8004314:	00f42400 	.word	0x00f42400

08004318 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00a      	beq.n	8004342 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00a      	beq.n	8004364 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	430a      	orrs	r2, r1
 8004362:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	f003 0304 	and.w	r3, r3, #4
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00a      	beq.n	8004386 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438a:	f003 0308 	and.w	r3, r3, #8
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	f003 0310 	and.w	r3, r3, #16
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00a      	beq.n	80043ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	f003 0320 	and.w	r3, r3, #32
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d01a      	beq.n	800442e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004416:	d10a      	bne.n	800442e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00a      	beq.n	8004450 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	605a      	str	r2, [r3, #4]
  }
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af02      	add	r7, sp, #8
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800446c:	f7fc fe34 	bl	80010d8 <HAL_GetTick>
 8004470:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0308 	and.w	r3, r3, #8
 800447c:	2b08      	cmp	r3, #8
 800447e:	d10e      	bne.n	800449e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004480:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f831 	bl	80044f6 <UART_WaitOnFlagUntilTimeout>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e027      	b.n	80044ee <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0304 	and.w	r3, r3, #4
 80044a8:	2b04      	cmp	r3, #4
 80044aa:	d10e      	bne.n	80044ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f81b 	bl	80044f6 <UART_WaitOnFlagUntilTimeout>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e011      	b.n	80044ee <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2220      	movs	r2, #32
 80044ce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2220      	movs	r2, #32
 80044d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b09c      	sub	sp, #112	; 0x70
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	60f8      	str	r0, [r7, #12]
 80044fe:	60b9      	str	r1, [r7, #8]
 8004500:	603b      	str	r3, [r7, #0]
 8004502:	4613      	mov	r3, r2
 8004504:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004506:	e0a7      	b.n	8004658 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004508:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800450a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800450e:	f000 80a3 	beq.w	8004658 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004512:	f7fc fde1 	bl	80010d8 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800451e:	429a      	cmp	r2, r3
 8004520:	d302      	bcc.n	8004528 <UART_WaitOnFlagUntilTimeout+0x32>
 8004522:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004524:	2b00      	cmp	r3, #0
 8004526:	d13f      	bne.n	80045a8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004530:	e853 3f00 	ldrex	r3, [r3]
 8004534:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004538:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800453c:	667b      	str	r3, [r7, #100]	; 0x64
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	461a      	mov	r2, r3
 8004544:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004546:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004548:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800454c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800454e:	e841 2300 	strex	r3, r2, [r1]
 8004552:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004554:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1e6      	bne.n	8004528 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	3308      	adds	r3, #8
 8004560:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004564:	e853 3f00 	ldrex	r3, [r3]
 8004568:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800456a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456c:	f023 0301 	bic.w	r3, r3, #1
 8004570:	663b      	str	r3, [r7, #96]	; 0x60
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	3308      	adds	r3, #8
 8004578:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800457a:	64ba      	str	r2, [r7, #72]	; 0x48
 800457c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004580:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004582:	e841 2300 	strex	r3, r2, [r1]
 8004586:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1e5      	bne.n	800455a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2220      	movs	r2, #32
 8004592:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2220      	movs	r2, #32
 8004598:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e068      	b.n	800467a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0304 	and.w	r3, r3, #4
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d050      	beq.n	8004658 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	69db      	ldr	r3, [r3, #28]
 80045bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045c4:	d148      	bne.n	8004658 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045ce:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d8:	e853 3f00 	ldrex	r3, [r3]
 80045dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	461a      	mov	r2, r3
 80045ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ee:	637b      	str	r3, [r7, #52]	; 0x34
 80045f0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045f6:	e841 2300 	strex	r3, r2, [r1]
 80045fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80045fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1e6      	bne.n	80045d0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	3308      	adds	r3, #8
 8004608:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	e853 3f00 	ldrex	r3, [r3]
 8004610:	613b      	str	r3, [r7, #16]
   return(result);
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	f023 0301 	bic.w	r3, r3, #1
 8004618:	66bb      	str	r3, [r7, #104]	; 0x68
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	3308      	adds	r3, #8
 8004620:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004622:	623a      	str	r2, [r7, #32]
 8004624:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004626:	69f9      	ldr	r1, [r7, #28]
 8004628:	6a3a      	ldr	r2, [r7, #32]
 800462a:	e841 2300 	strex	r3, r2, [r1]
 800462e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1e5      	bne.n	8004602 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2220      	movs	r2, #32
 800463a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2220      	movs	r2, #32
 8004640:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2220      	movs	r2, #32
 8004648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e010      	b.n	800467a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	69da      	ldr	r2, [r3, #28]
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	4013      	ands	r3, r2
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	429a      	cmp	r2, r3
 8004666:	bf0c      	ite	eq
 8004668:	2301      	moveq	r3, #1
 800466a:	2300      	movne	r3, #0
 800466c:	b2db      	uxtb	r3, r3
 800466e:	461a      	mov	r2, r3
 8004670:	79fb      	ldrb	r3, [r7, #7]
 8004672:	429a      	cmp	r2, r3
 8004674:	f43f af48 	beq.w	8004508 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3770      	adds	r7, #112	; 0x70
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
	...

08004684 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004684:	b084      	sub	sp, #16
 8004686:	b580      	push	{r7, lr}
 8004688:	b084      	sub	sp, #16
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
 800468e:	f107 001c 	add.w	r0, r7, #28
 8004692:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004698:	2b01      	cmp	r3, #1
 800469a:	d120      	bne.n	80046de <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68da      	ldr	r2, [r3, #12]
 80046ac:	4b20      	ldr	r3, [pc, #128]	; (8004730 <USB_CoreInit+0xac>)
 80046ae:	4013      	ands	r3, r2
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80046c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d105      	bne.n	80046d2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 fa96 	bl	8004c04 <USB_CoreReset>
 80046d8:	4603      	mov	r3, r0
 80046da:	73fb      	strb	r3, [r7, #15]
 80046dc:	e010      	b.n	8004700 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 fa8a 	bl	8004c04 <USB_CoreReset>
 80046f0:	4603      	mov	r3, r0
 80046f2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004702:	2b01      	cmp	r3, #1
 8004704:	d10b      	bne.n	800471e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f043 0206 	orr.w	r2, r3, #6
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f043 0220 	orr.w	r2, r3, #32
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800471e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004720:	4618      	mov	r0, r3
 8004722:	3710      	adds	r7, #16
 8004724:	46bd      	mov	sp, r7
 8004726:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800472a:	b004      	add	sp, #16
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	ffbdffbf 	.word	0xffbdffbf

08004734 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f023 0201 	bic.w	r2, r3, #1
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b084      	sub	sp, #16
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
 800475e:	460b      	mov	r3, r1
 8004760:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004762:	2300      	movs	r3, #0
 8004764:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004772:	78fb      	ldrb	r3, [r7, #3]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d115      	bne.n	80047a4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004784:	2001      	movs	r0, #1
 8004786:	f7fc fcb3 	bl	80010f0 <HAL_Delay>
      ms++;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	3301      	adds	r3, #1
 800478e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 fa29 	bl	8004be8 <USB_GetMode>
 8004796:	4603      	mov	r3, r0
 8004798:	2b01      	cmp	r3, #1
 800479a:	d01e      	beq.n	80047da <USB_SetCurrentMode+0x84>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2b31      	cmp	r3, #49	; 0x31
 80047a0:	d9f0      	bls.n	8004784 <USB_SetCurrentMode+0x2e>
 80047a2:	e01a      	b.n	80047da <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80047a4:	78fb      	ldrb	r3, [r7, #3]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d115      	bne.n	80047d6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80047b6:	2001      	movs	r0, #1
 80047b8:	f7fc fc9a 	bl	80010f0 <HAL_Delay>
      ms++;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	3301      	adds	r3, #1
 80047c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 fa10 	bl	8004be8 <USB_GetMode>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d005      	beq.n	80047da <USB_SetCurrentMode+0x84>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2b31      	cmp	r3, #49	; 0x31
 80047d2:	d9f0      	bls.n	80047b6 <USB_SetCurrentMode+0x60>
 80047d4:	e001      	b.n	80047da <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e005      	b.n	80047e6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2b32      	cmp	r3, #50	; 0x32
 80047de:	d101      	bne.n	80047e4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e000      	b.n	80047e6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
	...

080047f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047f0:	b084      	sub	sp, #16
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b086      	sub	sp, #24
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
 80047fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80047fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004802:	2300      	movs	r3, #0
 8004804:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800480a:	2300      	movs	r3, #0
 800480c:	613b      	str	r3, [r7, #16]
 800480e:	e009      	b.n	8004824 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	3340      	adds	r3, #64	; 0x40
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4413      	add	r3, r2
 800481a:	2200      	movs	r2, #0
 800481c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	3301      	adds	r3, #1
 8004822:	613b      	str	r3, [r7, #16]
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	2b0e      	cmp	r3, #14
 8004828:	d9f2      	bls.n	8004810 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800482a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800482c:	2b00      	cmp	r3, #0
 800482e:	d11c      	bne.n	800486a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800483e:	f043 0302 	orr.w	r3, r3, #2
 8004842:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004848:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	e005      	b.n	8004876 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800487c:	461a      	mov	r2, r3
 800487e:	2300      	movs	r3, #0
 8004880:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004888:	4619      	mov	r1, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004890:	461a      	mov	r2, r3
 8004892:	680b      	ldr	r3, [r1, #0]
 8004894:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004898:	2b01      	cmp	r3, #1
 800489a:	d10c      	bne.n	80048b6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800489c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d104      	bne.n	80048ac <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80048a2:	2100      	movs	r1, #0
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 f965 	bl	8004b74 <USB_SetDevSpeed>
 80048aa:	e008      	b.n	80048be <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80048ac:	2101      	movs	r1, #1
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f960 	bl	8004b74 <USB_SetDevSpeed>
 80048b4:	e003      	b.n	80048be <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80048b6:	2103      	movs	r1, #3
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f95b 	bl	8004b74 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80048be:	2110      	movs	r1, #16
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 f8f3 	bl	8004aac <USB_FlushTxFifo>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f91f 	bl	8004b14 <USB_FlushRxFifo>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048e6:	461a      	mov	r2, r3
 80048e8:	2300      	movs	r3, #0
 80048ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f2:	461a      	mov	r2, r3
 80048f4:	2300      	movs	r3, #0
 80048f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048fe:	461a      	mov	r2, r3
 8004900:	2300      	movs	r3, #0
 8004902:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004904:	2300      	movs	r3, #0
 8004906:	613b      	str	r3, [r7, #16]
 8004908:	e043      	b.n	8004992 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	015a      	lsls	r2, r3, #5
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	4413      	add	r3, r2
 8004912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800491c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004920:	d118      	bne.n	8004954 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10a      	bne.n	800493e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4413      	add	r3, r2
 8004930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004934:	461a      	mov	r2, r3
 8004936:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800493a:	6013      	str	r3, [r2, #0]
 800493c:	e013      	b.n	8004966 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	015a      	lsls	r2, r3, #5
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	4413      	add	r3, r2
 8004946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800494a:	461a      	mov	r2, r3
 800494c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004950:	6013      	str	r3, [r2, #0]
 8004952:	e008      	b.n	8004966 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4413      	add	r3, r2
 800495c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004960:	461a      	mov	r2, r3
 8004962:	2300      	movs	r3, #0
 8004964:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	4413      	add	r3, r2
 800496e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004972:	461a      	mov	r2, r3
 8004974:	2300      	movs	r3, #0
 8004976:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	015a      	lsls	r2, r3, #5
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4413      	add	r3, r2
 8004980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004984:	461a      	mov	r2, r3
 8004986:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800498a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	3301      	adds	r3, #1
 8004990:	613b      	str	r3, [r7, #16]
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	429a      	cmp	r2, r3
 8004998:	d3b7      	bcc.n	800490a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800499a:	2300      	movs	r3, #0
 800499c:	613b      	str	r3, [r7, #16]
 800499e:	e043      	b.n	8004a28 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049b6:	d118      	bne.n	80049ea <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10a      	bne.n	80049d4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	015a      	lsls	r2, r3, #5
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	4413      	add	r3, r2
 80049c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ca:	461a      	mov	r2, r3
 80049cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049d0:	6013      	str	r3, [r2, #0]
 80049d2:	e013      	b.n	80049fc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e0:	461a      	mov	r2, r3
 80049e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049e6:	6013      	str	r3, [r2, #0]
 80049e8:	e008      	b.n	80049fc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	015a      	lsls	r2, r3, #5
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	4413      	add	r3, r2
 80049f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f6:	461a      	mov	r2, r3
 80049f8:	2300      	movs	r3, #0
 80049fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	015a      	lsls	r2, r3, #5
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4413      	add	r3, r2
 8004a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a08:	461a      	mov	r2, r3
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	015a      	lsls	r2, r3, #5
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	4413      	add	r3, r2
 8004a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a20:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	3301      	adds	r3, #1
 8004a26:	613b      	str	r3, [r7, #16]
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d3b7      	bcc.n	80049a0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a42:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004a50:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d105      	bne.n	8004a64 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	f043 0210 	orr.w	r2, r3, #16
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	699a      	ldr	r2, [r3, #24]
 8004a68:	4b0e      	ldr	r3, [pc, #56]	; (8004aa4 <USB_DevInit+0x2b4>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d005      	beq.n	8004a82 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	f043 0208 	orr.w	r2, r3, #8
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d105      	bne.n	8004a94 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	699a      	ldr	r2, [r3, #24]
 8004a8c:	4b06      	ldr	r3, [pc, #24]	; (8004aa8 <USB_DevInit+0x2b8>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004a94:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3718      	adds	r7, #24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004aa0:	b004      	add	sp, #16
 8004aa2:	4770      	bx	lr
 8004aa4:	803c3800 	.word	0x803c3800
 8004aa8:	40000004 	.word	0x40000004

08004aac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	3301      	adds	r3, #1
 8004abe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4a13      	ldr	r2, [pc, #76]	; (8004b10 <USB_FlushTxFifo+0x64>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d901      	bls.n	8004acc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e01b      	b.n	8004b04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	daf2      	bge.n	8004aba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	019b      	lsls	r3, r3, #6
 8004adc:	f043 0220 	orr.w	r2, r3, #32
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	4a08      	ldr	r2, [pc, #32]	; (8004b10 <USB_FlushTxFifo+0x64>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d901      	bls.n	8004af6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e006      	b.n	8004b04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	f003 0320 	and.w	r3, r3, #32
 8004afe:	2b20      	cmp	r3, #32
 8004b00:	d0f0      	beq.n	8004ae4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	00030d40 	.word	0x00030d40

08004b14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	3301      	adds	r3, #1
 8004b24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	4a11      	ldr	r2, [pc, #68]	; (8004b70 <USB_FlushRxFifo+0x5c>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d901      	bls.n	8004b32 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e018      	b.n	8004b64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	daf2      	bge.n	8004b20 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2210      	movs	r2, #16
 8004b42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	3301      	adds	r3, #1
 8004b48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	4a08      	ldr	r2, [pc, #32]	; (8004b70 <USB_FlushRxFifo+0x5c>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d901      	bls.n	8004b56 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e006      	b.n	8004b64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	f003 0310 	and.w	r3, r3, #16
 8004b5e:	2b10      	cmp	r3, #16
 8004b60:	d0f0      	beq.n	8004b44 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr
 8004b70:	00030d40 	.word	0x00030d40

08004b74 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	78fb      	ldrb	r3, [r7, #3]
 8004b8e:	68f9      	ldr	r1, [r7, #12]
 8004b90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b94:	4313      	orrs	r3, r2
 8004b96:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b085      	sub	sp, #20
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004bc0:	f023 0303 	bic.w	r3, r3, #3
 8004bc4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bd4:	f043 0302 	orr.w	r3, r3, #2
 8004bd8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3714      	adds	r7, #20
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	f003 0301 	and.w	r3, r3, #1
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	3301      	adds	r3, #1
 8004c14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	4a13      	ldr	r2, [pc, #76]	; (8004c68 <USB_CoreReset+0x64>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d901      	bls.n	8004c22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e01b      	b.n	8004c5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	daf2      	bge.n	8004c10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	f043 0201 	orr.w	r2, r3, #1
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4a09      	ldr	r2, [pc, #36]	; (8004c68 <USB_CoreReset+0x64>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d901      	bls.n	8004c4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e006      	b.n	8004c5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d0f0      	beq.n	8004c3a <USB_CoreReset+0x36>

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3714      	adds	r7, #20
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	00030d40 	.word	0x00030d40

08004c6c <siprintf>:
 8004c6c:	b40e      	push	{r1, r2, r3}
 8004c6e:	b500      	push	{lr}
 8004c70:	b09c      	sub	sp, #112	; 0x70
 8004c72:	ab1d      	add	r3, sp, #116	; 0x74
 8004c74:	9002      	str	r0, [sp, #8]
 8004c76:	9006      	str	r0, [sp, #24]
 8004c78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c7c:	4809      	ldr	r0, [pc, #36]	; (8004ca4 <siprintf+0x38>)
 8004c7e:	9107      	str	r1, [sp, #28]
 8004c80:	9104      	str	r1, [sp, #16]
 8004c82:	4909      	ldr	r1, [pc, #36]	; (8004ca8 <siprintf+0x3c>)
 8004c84:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c88:	9105      	str	r1, [sp, #20]
 8004c8a:	6800      	ldr	r0, [r0, #0]
 8004c8c:	9301      	str	r3, [sp, #4]
 8004c8e:	a902      	add	r1, sp, #8
 8004c90:	f000 f992 	bl	8004fb8 <_svfiprintf_r>
 8004c94:	9b02      	ldr	r3, [sp, #8]
 8004c96:	2200      	movs	r2, #0
 8004c98:	701a      	strb	r2, [r3, #0]
 8004c9a:	b01c      	add	sp, #112	; 0x70
 8004c9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ca0:	b003      	add	sp, #12
 8004ca2:	4770      	bx	lr
 8004ca4:	20000058 	.word	0x20000058
 8004ca8:	ffff0208 	.word	0xffff0208

08004cac <memset>:
 8004cac:	4402      	add	r2, r0
 8004cae:	4603      	mov	r3, r0
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d100      	bne.n	8004cb6 <memset+0xa>
 8004cb4:	4770      	bx	lr
 8004cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8004cba:	e7f9      	b.n	8004cb0 <memset+0x4>

08004cbc <__errno>:
 8004cbc:	4b01      	ldr	r3, [pc, #4]	; (8004cc4 <__errno+0x8>)
 8004cbe:	6818      	ldr	r0, [r3, #0]
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	20000058 	.word	0x20000058

08004cc8 <__libc_init_array>:
 8004cc8:	b570      	push	{r4, r5, r6, lr}
 8004cca:	4d0d      	ldr	r5, [pc, #52]	; (8004d00 <__libc_init_array+0x38>)
 8004ccc:	4c0d      	ldr	r4, [pc, #52]	; (8004d04 <__libc_init_array+0x3c>)
 8004cce:	1b64      	subs	r4, r4, r5
 8004cd0:	10a4      	asrs	r4, r4, #2
 8004cd2:	2600      	movs	r6, #0
 8004cd4:	42a6      	cmp	r6, r4
 8004cd6:	d109      	bne.n	8004cec <__libc_init_array+0x24>
 8004cd8:	4d0b      	ldr	r5, [pc, #44]	; (8004d08 <__libc_init_array+0x40>)
 8004cda:	4c0c      	ldr	r4, [pc, #48]	; (8004d0c <__libc_init_array+0x44>)
 8004cdc:	f000 fc6a 	bl	80055b4 <_init>
 8004ce0:	1b64      	subs	r4, r4, r5
 8004ce2:	10a4      	asrs	r4, r4, #2
 8004ce4:	2600      	movs	r6, #0
 8004ce6:	42a6      	cmp	r6, r4
 8004ce8:	d105      	bne.n	8004cf6 <__libc_init_array+0x2e>
 8004cea:	bd70      	pop	{r4, r5, r6, pc}
 8004cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cf0:	4798      	blx	r3
 8004cf2:	3601      	adds	r6, #1
 8004cf4:	e7ee      	b.n	8004cd4 <__libc_init_array+0xc>
 8004cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cfa:	4798      	blx	r3
 8004cfc:	3601      	adds	r6, #1
 8004cfe:	e7f2      	b.n	8004ce6 <__libc_init_array+0x1e>
 8004d00:	08005630 	.word	0x08005630
 8004d04:	08005630 	.word	0x08005630
 8004d08:	08005630 	.word	0x08005630
 8004d0c:	08005634 	.word	0x08005634

08004d10 <__retarget_lock_acquire_recursive>:
 8004d10:	4770      	bx	lr

08004d12 <__retarget_lock_release_recursive>:
 8004d12:	4770      	bx	lr

08004d14 <_free_r>:
 8004d14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d16:	2900      	cmp	r1, #0
 8004d18:	d044      	beq.n	8004da4 <_free_r+0x90>
 8004d1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d1e:	9001      	str	r0, [sp, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f1a1 0404 	sub.w	r4, r1, #4
 8004d26:	bfb8      	it	lt
 8004d28:	18e4      	addlt	r4, r4, r3
 8004d2a:	f000 f8df 	bl	8004eec <__malloc_lock>
 8004d2e:	4a1e      	ldr	r2, [pc, #120]	; (8004da8 <_free_r+0x94>)
 8004d30:	9801      	ldr	r0, [sp, #4]
 8004d32:	6813      	ldr	r3, [r2, #0]
 8004d34:	b933      	cbnz	r3, 8004d44 <_free_r+0x30>
 8004d36:	6063      	str	r3, [r4, #4]
 8004d38:	6014      	str	r4, [r2, #0]
 8004d3a:	b003      	add	sp, #12
 8004d3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d40:	f000 b8da 	b.w	8004ef8 <__malloc_unlock>
 8004d44:	42a3      	cmp	r3, r4
 8004d46:	d908      	bls.n	8004d5a <_free_r+0x46>
 8004d48:	6825      	ldr	r5, [r4, #0]
 8004d4a:	1961      	adds	r1, r4, r5
 8004d4c:	428b      	cmp	r3, r1
 8004d4e:	bf01      	itttt	eq
 8004d50:	6819      	ldreq	r1, [r3, #0]
 8004d52:	685b      	ldreq	r3, [r3, #4]
 8004d54:	1949      	addeq	r1, r1, r5
 8004d56:	6021      	streq	r1, [r4, #0]
 8004d58:	e7ed      	b.n	8004d36 <_free_r+0x22>
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	b10b      	cbz	r3, 8004d64 <_free_r+0x50>
 8004d60:	42a3      	cmp	r3, r4
 8004d62:	d9fa      	bls.n	8004d5a <_free_r+0x46>
 8004d64:	6811      	ldr	r1, [r2, #0]
 8004d66:	1855      	adds	r5, r2, r1
 8004d68:	42a5      	cmp	r5, r4
 8004d6a:	d10b      	bne.n	8004d84 <_free_r+0x70>
 8004d6c:	6824      	ldr	r4, [r4, #0]
 8004d6e:	4421      	add	r1, r4
 8004d70:	1854      	adds	r4, r2, r1
 8004d72:	42a3      	cmp	r3, r4
 8004d74:	6011      	str	r1, [r2, #0]
 8004d76:	d1e0      	bne.n	8004d3a <_free_r+0x26>
 8004d78:	681c      	ldr	r4, [r3, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	6053      	str	r3, [r2, #4]
 8004d7e:	440c      	add	r4, r1
 8004d80:	6014      	str	r4, [r2, #0]
 8004d82:	e7da      	b.n	8004d3a <_free_r+0x26>
 8004d84:	d902      	bls.n	8004d8c <_free_r+0x78>
 8004d86:	230c      	movs	r3, #12
 8004d88:	6003      	str	r3, [r0, #0]
 8004d8a:	e7d6      	b.n	8004d3a <_free_r+0x26>
 8004d8c:	6825      	ldr	r5, [r4, #0]
 8004d8e:	1961      	adds	r1, r4, r5
 8004d90:	428b      	cmp	r3, r1
 8004d92:	bf04      	itt	eq
 8004d94:	6819      	ldreq	r1, [r3, #0]
 8004d96:	685b      	ldreq	r3, [r3, #4]
 8004d98:	6063      	str	r3, [r4, #4]
 8004d9a:	bf04      	itt	eq
 8004d9c:	1949      	addeq	r1, r1, r5
 8004d9e:	6021      	streq	r1, [r4, #0]
 8004da0:	6054      	str	r4, [r2, #4]
 8004da2:	e7ca      	b.n	8004d3a <_free_r+0x26>
 8004da4:	b003      	add	sp, #12
 8004da6:	bd30      	pop	{r4, r5, pc}
 8004da8:	200009d0 	.word	0x200009d0

08004dac <sbrk_aligned>:
 8004dac:	b570      	push	{r4, r5, r6, lr}
 8004dae:	4e0e      	ldr	r6, [pc, #56]	; (8004de8 <sbrk_aligned+0x3c>)
 8004db0:	460c      	mov	r4, r1
 8004db2:	6831      	ldr	r1, [r6, #0]
 8004db4:	4605      	mov	r5, r0
 8004db6:	b911      	cbnz	r1, 8004dbe <sbrk_aligned+0x12>
 8004db8:	f000 fba6 	bl	8005508 <_sbrk_r>
 8004dbc:	6030      	str	r0, [r6, #0]
 8004dbe:	4621      	mov	r1, r4
 8004dc0:	4628      	mov	r0, r5
 8004dc2:	f000 fba1 	bl	8005508 <_sbrk_r>
 8004dc6:	1c43      	adds	r3, r0, #1
 8004dc8:	d00a      	beq.n	8004de0 <sbrk_aligned+0x34>
 8004dca:	1cc4      	adds	r4, r0, #3
 8004dcc:	f024 0403 	bic.w	r4, r4, #3
 8004dd0:	42a0      	cmp	r0, r4
 8004dd2:	d007      	beq.n	8004de4 <sbrk_aligned+0x38>
 8004dd4:	1a21      	subs	r1, r4, r0
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	f000 fb96 	bl	8005508 <_sbrk_r>
 8004ddc:	3001      	adds	r0, #1
 8004dde:	d101      	bne.n	8004de4 <sbrk_aligned+0x38>
 8004de0:	f04f 34ff 	mov.w	r4, #4294967295
 8004de4:	4620      	mov	r0, r4
 8004de6:	bd70      	pop	{r4, r5, r6, pc}
 8004de8:	200009d4 	.word	0x200009d4

08004dec <_malloc_r>:
 8004dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004df0:	1ccd      	adds	r5, r1, #3
 8004df2:	f025 0503 	bic.w	r5, r5, #3
 8004df6:	3508      	adds	r5, #8
 8004df8:	2d0c      	cmp	r5, #12
 8004dfa:	bf38      	it	cc
 8004dfc:	250c      	movcc	r5, #12
 8004dfe:	2d00      	cmp	r5, #0
 8004e00:	4607      	mov	r7, r0
 8004e02:	db01      	blt.n	8004e08 <_malloc_r+0x1c>
 8004e04:	42a9      	cmp	r1, r5
 8004e06:	d905      	bls.n	8004e14 <_malloc_r+0x28>
 8004e08:	230c      	movs	r3, #12
 8004e0a:	603b      	str	r3, [r7, #0]
 8004e0c:	2600      	movs	r6, #0
 8004e0e:	4630      	mov	r0, r6
 8004e10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e14:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004ee8 <_malloc_r+0xfc>
 8004e18:	f000 f868 	bl	8004eec <__malloc_lock>
 8004e1c:	f8d8 3000 	ldr.w	r3, [r8]
 8004e20:	461c      	mov	r4, r3
 8004e22:	bb5c      	cbnz	r4, 8004e7c <_malloc_r+0x90>
 8004e24:	4629      	mov	r1, r5
 8004e26:	4638      	mov	r0, r7
 8004e28:	f7ff ffc0 	bl	8004dac <sbrk_aligned>
 8004e2c:	1c43      	adds	r3, r0, #1
 8004e2e:	4604      	mov	r4, r0
 8004e30:	d155      	bne.n	8004ede <_malloc_r+0xf2>
 8004e32:	f8d8 4000 	ldr.w	r4, [r8]
 8004e36:	4626      	mov	r6, r4
 8004e38:	2e00      	cmp	r6, #0
 8004e3a:	d145      	bne.n	8004ec8 <_malloc_r+0xdc>
 8004e3c:	2c00      	cmp	r4, #0
 8004e3e:	d048      	beq.n	8004ed2 <_malloc_r+0xe6>
 8004e40:	6823      	ldr	r3, [r4, #0]
 8004e42:	4631      	mov	r1, r6
 8004e44:	4638      	mov	r0, r7
 8004e46:	eb04 0903 	add.w	r9, r4, r3
 8004e4a:	f000 fb5d 	bl	8005508 <_sbrk_r>
 8004e4e:	4581      	cmp	r9, r0
 8004e50:	d13f      	bne.n	8004ed2 <_malloc_r+0xe6>
 8004e52:	6821      	ldr	r1, [r4, #0]
 8004e54:	1a6d      	subs	r5, r5, r1
 8004e56:	4629      	mov	r1, r5
 8004e58:	4638      	mov	r0, r7
 8004e5a:	f7ff ffa7 	bl	8004dac <sbrk_aligned>
 8004e5e:	3001      	adds	r0, #1
 8004e60:	d037      	beq.n	8004ed2 <_malloc_r+0xe6>
 8004e62:	6823      	ldr	r3, [r4, #0]
 8004e64:	442b      	add	r3, r5
 8004e66:	6023      	str	r3, [r4, #0]
 8004e68:	f8d8 3000 	ldr.w	r3, [r8]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d038      	beq.n	8004ee2 <_malloc_r+0xf6>
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	42a2      	cmp	r2, r4
 8004e74:	d12b      	bne.n	8004ece <_malloc_r+0xe2>
 8004e76:	2200      	movs	r2, #0
 8004e78:	605a      	str	r2, [r3, #4]
 8004e7a:	e00f      	b.n	8004e9c <_malloc_r+0xb0>
 8004e7c:	6822      	ldr	r2, [r4, #0]
 8004e7e:	1b52      	subs	r2, r2, r5
 8004e80:	d41f      	bmi.n	8004ec2 <_malloc_r+0xd6>
 8004e82:	2a0b      	cmp	r2, #11
 8004e84:	d917      	bls.n	8004eb6 <_malloc_r+0xca>
 8004e86:	1961      	adds	r1, r4, r5
 8004e88:	42a3      	cmp	r3, r4
 8004e8a:	6025      	str	r5, [r4, #0]
 8004e8c:	bf18      	it	ne
 8004e8e:	6059      	strne	r1, [r3, #4]
 8004e90:	6863      	ldr	r3, [r4, #4]
 8004e92:	bf08      	it	eq
 8004e94:	f8c8 1000 	streq.w	r1, [r8]
 8004e98:	5162      	str	r2, [r4, r5]
 8004e9a:	604b      	str	r3, [r1, #4]
 8004e9c:	4638      	mov	r0, r7
 8004e9e:	f104 060b 	add.w	r6, r4, #11
 8004ea2:	f000 f829 	bl	8004ef8 <__malloc_unlock>
 8004ea6:	f026 0607 	bic.w	r6, r6, #7
 8004eaa:	1d23      	adds	r3, r4, #4
 8004eac:	1af2      	subs	r2, r6, r3
 8004eae:	d0ae      	beq.n	8004e0e <_malloc_r+0x22>
 8004eb0:	1b9b      	subs	r3, r3, r6
 8004eb2:	50a3      	str	r3, [r4, r2]
 8004eb4:	e7ab      	b.n	8004e0e <_malloc_r+0x22>
 8004eb6:	42a3      	cmp	r3, r4
 8004eb8:	6862      	ldr	r2, [r4, #4]
 8004eba:	d1dd      	bne.n	8004e78 <_malloc_r+0x8c>
 8004ebc:	f8c8 2000 	str.w	r2, [r8]
 8004ec0:	e7ec      	b.n	8004e9c <_malloc_r+0xb0>
 8004ec2:	4623      	mov	r3, r4
 8004ec4:	6864      	ldr	r4, [r4, #4]
 8004ec6:	e7ac      	b.n	8004e22 <_malloc_r+0x36>
 8004ec8:	4634      	mov	r4, r6
 8004eca:	6876      	ldr	r6, [r6, #4]
 8004ecc:	e7b4      	b.n	8004e38 <_malloc_r+0x4c>
 8004ece:	4613      	mov	r3, r2
 8004ed0:	e7cc      	b.n	8004e6c <_malloc_r+0x80>
 8004ed2:	230c      	movs	r3, #12
 8004ed4:	603b      	str	r3, [r7, #0]
 8004ed6:	4638      	mov	r0, r7
 8004ed8:	f000 f80e 	bl	8004ef8 <__malloc_unlock>
 8004edc:	e797      	b.n	8004e0e <_malloc_r+0x22>
 8004ede:	6025      	str	r5, [r4, #0]
 8004ee0:	e7dc      	b.n	8004e9c <_malloc_r+0xb0>
 8004ee2:	605b      	str	r3, [r3, #4]
 8004ee4:	deff      	udf	#255	; 0xff
 8004ee6:	bf00      	nop
 8004ee8:	200009d0 	.word	0x200009d0

08004eec <__malloc_lock>:
 8004eec:	4801      	ldr	r0, [pc, #4]	; (8004ef4 <__malloc_lock+0x8>)
 8004eee:	f7ff bf0f 	b.w	8004d10 <__retarget_lock_acquire_recursive>
 8004ef2:	bf00      	nop
 8004ef4:	200009cc 	.word	0x200009cc

08004ef8 <__malloc_unlock>:
 8004ef8:	4801      	ldr	r0, [pc, #4]	; (8004f00 <__malloc_unlock+0x8>)
 8004efa:	f7ff bf0a 	b.w	8004d12 <__retarget_lock_release_recursive>
 8004efe:	bf00      	nop
 8004f00:	200009cc 	.word	0x200009cc

08004f04 <__ssputs_r>:
 8004f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f08:	688e      	ldr	r6, [r1, #8]
 8004f0a:	461f      	mov	r7, r3
 8004f0c:	42be      	cmp	r6, r7
 8004f0e:	680b      	ldr	r3, [r1, #0]
 8004f10:	4682      	mov	sl, r0
 8004f12:	460c      	mov	r4, r1
 8004f14:	4690      	mov	r8, r2
 8004f16:	d82c      	bhi.n	8004f72 <__ssputs_r+0x6e>
 8004f18:	898a      	ldrh	r2, [r1, #12]
 8004f1a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f1e:	d026      	beq.n	8004f6e <__ssputs_r+0x6a>
 8004f20:	6965      	ldr	r5, [r4, #20]
 8004f22:	6909      	ldr	r1, [r1, #16]
 8004f24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f28:	eba3 0901 	sub.w	r9, r3, r1
 8004f2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f30:	1c7b      	adds	r3, r7, #1
 8004f32:	444b      	add	r3, r9
 8004f34:	106d      	asrs	r5, r5, #1
 8004f36:	429d      	cmp	r5, r3
 8004f38:	bf38      	it	cc
 8004f3a:	461d      	movcc	r5, r3
 8004f3c:	0553      	lsls	r3, r2, #21
 8004f3e:	d527      	bpl.n	8004f90 <__ssputs_r+0x8c>
 8004f40:	4629      	mov	r1, r5
 8004f42:	f7ff ff53 	bl	8004dec <_malloc_r>
 8004f46:	4606      	mov	r6, r0
 8004f48:	b360      	cbz	r0, 8004fa4 <__ssputs_r+0xa0>
 8004f4a:	6921      	ldr	r1, [r4, #16]
 8004f4c:	464a      	mov	r2, r9
 8004f4e:	f000 faeb 	bl	8005528 <memcpy>
 8004f52:	89a3      	ldrh	r3, [r4, #12]
 8004f54:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f5c:	81a3      	strh	r3, [r4, #12]
 8004f5e:	6126      	str	r6, [r4, #16]
 8004f60:	6165      	str	r5, [r4, #20]
 8004f62:	444e      	add	r6, r9
 8004f64:	eba5 0509 	sub.w	r5, r5, r9
 8004f68:	6026      	str	r6, [r4, #0]
 8004f6a:	60a5      	str	r5, [r4, #8]
 8004f6c:	463e      	mov	r6, r7
 8004f6e:	42be      	cmp	r6, r7
 8004f70:	d900      	bls.n	8004f74 <__ssputs_r+0x70>
 8004f72:	463e      	mov	r6, r7
 8004f74:	6820      	ldr	r0, [r4, #0]
 8004f76:	4632      	mov	r2, r6
 8004f78:	4641      	mov	r1, r8
 8004f7a:	f000 faab 	bl	80054d4 <memmove>
 8004f7e:	68a3      	ldr	r3, [r4, #8]
 8004f80:	1b9b      	subs	r3, r3, r6
 8004f82:	60a3      	str	r3, [r4, #8]
 8004f84:	6823      	ldr	r3, [r4, #0]
 8004f86:	4433      	add	r3, r6
 8004f88:	6023      	str	r3, [r4, #0]
 8004f8a:	2000      	movs	r0, #0
 8004f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f90:	462a      	mov	r2, r5
 8004f92:	f000 fad7 	bl	8005544 <_realloc_r>
 8004f96:	4606      	mov	r6, r0
 8004f98:	2800      	cmp	r0, #0
 8004f9a:	d1e0      	bne.n	8004f5e <__ssputs_r+0x5a>
 8004f9c:	6921      	ldr	r1, [r4, #16]
 8004f9e:	4650      	mov	r0, sl
 8004fa0:	f7ff feb8 	bl	8004d14 <_free_r>
 8004fa4:	230c      	movs	r3, #12
 8004fa6:	f8ca 3000 	str.w	r3, [sl]
 8004faa:	89a3      	ldrh	r3, [r4, #12]
 8004fac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fb0:	81a3      	strh	r3, [r4, #12]
 8004fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb6:	e7e9      	b.n	8004f8c <__ssputs_r+0x88>

08004fb8 <_svfiprintf_r>:
 8004fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fbc:	4698      	mov	r8, r3
 8004fbe:	898b      	ldrh	r3, [r1, #12]
 8004fc0:	061b      	lsls	r3, r3, #24
 8004fc2:	b09d      	sub	sp, #116	; 0x74
 8004fc4:	4607      	mov	r7, r0
 8004fc6:	460d      	mov	r5, r1
 8004fc8:	4614      	mov	r4, r2
 8004fca:	d50e      	bpl.n	8004fea <_svfiprintf_r+0x32>
 8004fcc:	690b      	ldr	r3, [r1, #16]
 8004fce:	b963      	cbnz	r3, 8004fea <_svfiprintf_r+0x32>
 8004fd0:	2140      	movs	r1, #64	; 0x40
 8004fd2:	f7ff ff0b 	bl	8004dec <_malloc_r>
 8004fd6:	6028      	str	r0, [r5, #0]
 8004fd8:	6128      	str	r0, [r5, #16]
 8004fda:	b920      	cbnz	r0, 8004fe6 <_svfiprintf_r+0x2e>
 8004fdc:	230c      	movs	r3, #12
 8004fde:	603b      	str	r3, [r7, #0]
 8004fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe4:	e0d0      	b.n	8005188 <_svfiprintf_r+0x1d0>
 8004fe6:	2340      	movs	r3, #64	; 0x40
 8004fe8:	616b      	str	r3, [r5, #20]
 8004fea:	2300      	movs	r3, #0
 8004fec:	9309      	str	r3, [sp, #36]	; 0x24
 8004fee:	2320      	movs	r3, #32
 8004ff0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ff4:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ff8:	2330      	movs	r3, #48	; 0x30
 8004ffa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80051a0 <_svfiprintf_r+0x1e8>
 8004ffe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005002:	f04f 0901 	mov.w	r9, #1
 8005006:	4623      	mov	r3, r4
 8005008:	469a      	mov	sl, r3
 800500a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800500e:	b10a      	cbz	r2, 8005014 <_svfiprintf_r+0x5c>
 8005010:	2a25      	cmp	r2, #37	; 0x25
 8005012:	d1f9      	bne.n	8005008 <_svfiprintf_r+0x50>
 8005014:	ebba 0b04 	subs.w	fp, sl, r4
 8005018:	d00b      	beq.n	8005032 <_svfiprintf_r+0x7a>
 800501a:	465b      	mov	r3, fp
 800501c:	4622      	mov	r2, r4
 800501e:	4629      	mov	r1, r5
 8005020:	4638      	mov	r0, r7
 8005022:	f7ff ff6f 	bl	8004f04 <__ssputs_r>
 8005026:	3001      	adds	r0, #1
 8005028:	f000 80a9 	beq.w	800517e <_svfiprintf_r+0x1c6>
 800502c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800502e:	445a      	add	r2, fp
 8005030:	9209      	str	r2, [sp, #36]	; 0x24
 8005032:	f89a 3000 	ldrb.w	r3, [sl]
 8005036:	2b00      	cmp	r3, #0
 8005038:	f000 80a1 	beq.w	800517e <_svfiprintf_r+0x1c6>
 800503c:	2300      	movs	r3, #0
 800503e:	f04f 32ff 	mov.w	r2, #4294967295
 8005042:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005046:	f10a 0a01 	add.w	sl, sl, #1
 800504a:	9304      	str	r3, [sp, #16]
 800504c:	9307      	str	r3, [sp, #28]
 800504e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005052:	931a      	str	r3, [sp, #104]	; 0x68
 8005054:	4654      	mov	r4, sl
 8005056:	2205      	movs	r2, #5
 8005058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800505c:	4850      	ldr	r0, [pc, #320]	; (80051a0 <_svfiprintf_r+0x1e8>)
 800505e:	f7fb f8f7 	bl	8000250 <memchr>
 8005062:	9a04      	ldr	r2, [sp, #16]
 8005064:	b9d8      	cbnz	r0, 800509e <_svfiprintf_r+0xe6>
 8005066:	06d0      	lsls	r0, r2, #27
 8005068:	bf44      	itt	mi
 800506a:	2320      	movmi	r3, #32
 800506c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005070:	0711      	lsls	r1, r2, #28
 8005072:	bf44      	itt	mi
 8005074:	232b      	movmi	r3, #43	; 0x2b
 8005076:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800507a:	f89a 3000 	ldrb.w	r3, [sl]
 800507e:	2b2a      	cmp	r3, #42	; 0x2a
 8005080:	d015      	beq.n	80050ae <_svfiprintf_r+0xf6>
 8005082:	9a07      	ldr	r2, [sp, #28]
 8005084:	4654      	mov	r4, sl
 8005086:	2000      	movs	r0, #0
 8005088:	f04f 0c0a 	mov.w	ip, #10
 800508c:	4621      	mov	r1, r4
 800508e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005092:	3b30      	subs	r3, #48	; 0x30
 8005094:	2b09      	cmp	r3, #9
 8005096:	d94d      	bls.n	8005134 <_svfiprintf_r+0x17c>
 8005098:	b1b0      	cbz	r0, 80050c8 <_svfiprintf_r+0x110>
 800509a:	9207      	str	r2, [sp, #28]
 800509c:	e014      	b.n	80050c8 <_svfiprintf_r+0x110>
 800509e:	eba0 0308 	sub.w	r3, r0, r8
 80050a2:	fa09 f303 	lsl.w	r3, r9, r3
 80050a6:	4313      	orrs	r3, r2
 80050a8:	9304      	str	r3, [sp, #16]
 80050aa:	46a2      	mov	sl, r4
 80050ac:	e7d2      	b.n	8005054 <_svfiprintf_r+0x9c>
 80050ae:	9b03      	ldr	r3, [sp, #12]
 80050b0:	1d19      	adds	r1, r3, #4
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	9103      	str	r1, [sp, #12]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	bfbb      	ittet	lt
 80050ba:	425b      	neglt	r3, r3
 80050bc:	f042 0202 	orrlt.w	r2, r2, #2
 80050c0:	9307      	strge	r3, [sp, #28]
 80050c2:	9307      	strlt	r3, [sp, #28]
 80050c4:	bfb8      	it	lt
 80050c6:	9204      	strlt	r2, [sp, #16]
 80050c8:	7823      	ldrb	r3, [r4, #0]
 80050ca:	2b2e      	cmp	r3, #46	; 0x2e
 80050cc:	d10c      	bne.n	80050e8 <_svfiprintf_r+0x130>
 80050ce:	7863      	ldrb	r3, [r4, #1]
 80050d0:	2b2a      	cmp	r3, #42	; 0x2a
 80050d2:	d134      	bne.n	800513e <_svfiprintf_r+0x186>
 80050d4:	9b03      	ldr	r3, [sp, #12]
 80050d6:	1d1a      	adds	r2, r3, #4
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	9203      	str	r2, [sp, #12]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	bfb8      	it	lt
 80050e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80050e4:	3402      	adds	r4, #2
 80050e6:	9305      	str	r3, [sp, #20]
 80050e8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80051b0 <_svfiprintf_r+0x1f8>
 80050ec:	7821      	ldrb	r1, [r4, #0]
 80050ee:	2203      	movs	r2, #3
 80050f0:	4650      	mov	r0, sl
 80050f2:	f7fb f8ad 	bl	8000250 <memchr>
 80050f6:	b138      	cbz	r0, 8005108 <_svfiprintf_r+0x150>
 80050f8:	9b04      	ldr	r3, [sp, #16]
 80050fa:	eba0 000a 	sub.w	r0, r0, sl
 80050fe:	2240      	movs	r2, #64	; 0x40
 8005100:	4082      	lsls	r2, r0
 8005102:	4313      	orrs	r3, r2
 8005104:	3401      	adds	r4, #1
 8005106:	9304      	str	r3, [sp, #16]
 8005108:	f814 1b01 	ldrb.w	r1, [r4], #1
 800510c:	4825      	ldr	r0, [pc, #148]	; (80051a4 <_svfiprintf_r+0x1ec>)
 800510e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005112:	2206      	movs	r2, #6
 8005114:	f7fb f89c 	bl	8000250 <memchr>
 8005118:	2800      	cmp	r0, #0
 800511a:	d038      	beq.n	800518e <_svfiprintf_r+0x1d6>
 800511c:	4b22      	ldr	r3, [pc, #136]	; (80051a8 <_svfiprintf_r+0x1f0>)
 800511e:	bb1b      	cbnz	r3, 8005168 <_svfiprintf_r+0x1b0>
 8005120:	9b03      	ldr	r3, [sp, #12]
 8005122:	3307      	adds	r3, #7
 8005124:	f023 0307 	bic.w	r3, r3, #7
 8005128:	3308      	adds	r3, #8
 800512a:	9303      	str	r3, [sp, #12]
 800512c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800512e:	4433      	add	r3, r6
 8005130:	9309      	str	r3, [sp, #36]	; 0x24
 8005132:	e768      	b.n	8005006 <_svfiprintf_r+0x4e>
 8005134:	fb0c 3202 	mla	r2, ip, r2, r3
 8005138:	460c      	mov	r4, r1
 800513a:	2001      	movs	r0, #1
 800513c:	e7a6      	b.n	800508c <_svfiprintf_r+0xd4>
 800513e:	2300      	movs	r3, #0
 8005140:	3401      	adds	r4, #1
 8005142:	9305      	str	r3, [sp, #20]
 8005144:	4619      	mov	r1, r3
 8005146:	f04f 0c0a 	mov.w	ip, #10
 800514a:	4620      	mov	r0, r4
 800514c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005150:	3a30      	subs	r2, #48	; 0x30
 8005152:	2a09      	cmp	r2, #9
 8005154:	d903      	bls.n	800515e <_svfiprintf_r+0x1a6>
 8005156:	2b00      	cmp	r3, #0
 8005158:	d0c6      	beq.n	80050e8 <_svfiprintf_r+0x130>
 800515a:	9105      	str	r1, [sp, #20]
 800515c:	e7c4      	b.n	80050e8 <_svfiprintf_r+0x130>
 800515e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005162:	4604      	mov	r4, r0
 8005164:	2301      	movs	r3, #1
 8005166:	e7f0      	b.n	800514a <_svfiprintf_r+0x192>
 8005168:	ab03      	add	r3, sp, #12
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	462a      	mov	r2, r5
 800516e:	4b0f      	ldr	r3, [pc, #60]	; (80051ac <_svfiprintf_r+0x1f4>)
 8005170:	a904      	add	r1, sp, #16
 8005172:	4638      	mov	r0, r7
 8005174:	f3af 8000 	nop.w
 8005178:	1c42      	adds	r2, r0, #1
 800517a:	4606      	mov	r6, r0
 800517c:	d1d6      	bne.n	800512c <_svfiprintf_r+0x174>
 800517e:	89ab      	ldrh	r3, [r5, #12]
 8005180:	065b      	lsls	r3, r3, #25
 8005182:	f53f af2d 	bmi.w	8004fe0 <_svfiprintf_r+0x28>
 8005186:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005188:	b01d      	add	sp, #116	; 0x74
 800518a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800518e:	ab03      	add	r3, sp, #12
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	462a      	mov	r2, r5
 8005194:	4b05      	ldr	r3, [pc, #20]	; (80051ac <_svfiprintf_r+0x1f4>)
 8005196:	a904      	add	r1, sp, #16
 8005198:	4638      	mov	r0, r7
 800519a:	f000 f879 	bl	8005290 <_printf_i>
 800519e:	e7eb      	b.n	8005178 <_svfiprintf_r+0x1c0>
 80051a0:	080055f4 	.word	0x080055f4
 80051a4:	080055fe 	.word	0x080055fe
 80051a8:	00000000 	.word	0x00000000
 80051ac:	08004f05 	.word	0x08004f05
 80051b0:	080055fa 	.word	0x080055fa

080051b4 <_printf_common>:
 80051b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051b8:	4616      	mov	r6, r2
 80051ba:	4699      	mov	r9, r3
 80051bc:	688a      	ldr	r2, [r1, #8]
 80051be:	690b      	ldr	r3, [r1, #16]
 80051c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051c4:	4293      	cmp	r3, r2
 80051c6:	bfb8      	it	lt
 80051c8:	4613      	movlt	r3, r2
 80051ca:	6033      	str	r3, [r6, #0]
 80051cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051d0:	4607      	mov	r7, r0
 80051d2:	460c      	mov	r4, r1
 80051d4:	b10a      	cbz	r2, 80051da <_printf_common+0x26>
 80051d6:	3301      	adds	r3, #1
 80051d8:	6033      	str	r3, [r6, #0]
 80051da:	6823      	ldr	r3, [r4, #0]
 80051dc:	0699      	lsls	r1, r3, #26
 80051de:	bf42      	ittt	mi
 80051e0:	6833      	ldrmi	r3, [r6, #0]
 80051e2:	3302      	addmi	r3, #2
 80051e4:	6033      	strmi	r3, [r6, #0]
 80051e6:	6825      	ldr	r5, [r4, #0]
 80051e8:	f015 0506 	ands.w	r5, r5, #6
 80051ec:	d106      	bne.n	80051fc <_printf_common+0x48>
 80051ee:	f104 0a19 	add.w	sl, r4, #25
 80051f2:	68e3      	ldr	r3, [r4, #12]
 80051f4:	6832      	ldr	r2, [r6, #0]
 80051f6:	1a9b      	subs	r3, r3, r2
 80051f8:	42ab      	cmp	r3, r5
 80051fa:	dc26      	bgt.n	800524a <_printf_common+0x96>
 80051fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005200:	1e13      	subs	r3, r2, #0
 8005202:	6822      	ldr	r2, [r4, #0]
 8005204:	bf18      	it	ne
 8005206:	2301      	movne	r3, #1
 8005208:	0692      	lsls	r2, r2, #26
 800520a:	d42b      	bmi.n	8005264 <_printf_common+0xb0>
 800520c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005210:	4649      	mov	r1, r9
 8005212:	4638      	mov	r0, r7
 8005214:	47c0      	blx	r8
 8005216:	3001      	adds	r0, #1
 8005218:	d01e      	beq.n	8005258 <_printf_common+0xa4>
 800521a:	6823      	ldr	r3, [r4, #0]
 800521c:	6922      	ldr	r2, [r4, #16]
 800521e:	f003 0306 	and.w	r3, r3, #6
 8005222:	2b04      	cmp	r3, #4
 8005224:	bf02      	ittt	eq
 8005226:	68e5      	ldreq	r5, [r4, #12]
 8005228:	6833      	ldreq	r3, [r6, #0]
 800522a:	1aed      	subeq	r5, r5, r3
 800522c:	68a3      	ldr	r3, [r4, #8]
 800522e:	bf0c      	ite	eq
 8005230:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005234:	2500      	movne	r5, #0
 8005236:	4293      	cmp	r3, r2
 8005238:	bfc4      	itt	gt
 800523a:	1a9b      	subgt	r3, r3, r2
 800523c:	18ed      	addgt	r5, r5, r3
 800523e:	2600      	movs	r6, #0
 8005240:	341a      	adds	r4, #26
 8005242:	42b5      	cmp	r5, r6
 8005244:	d11a      	bne.n	800527c <_printf_common+0xc8>
 8005246:	2000      	movs	r0, #0
 8005248:	e008      	b.n	800525c <_printf_common+0xa8>
 800524a:	2301      	movs	r3, #1
 800524c:	4652      	mov	r2, sl
 800524e:	4649      	mov	r1, r9
 8005250:	4638      	mov	r0, r7
 8005252:	47c0      	blx	r8
 8005254:	3001      	adds	r0, #1
 8005256:	d103      	bne.n	8005260 <_printf_common+0xac>
 8005258:	f04f 30ff 	mov.w	r0, #4294967295
 800525c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005260:	3501      	adds	r5, #1
 8005262:	e7c6      	b.n	80051f2 <_printf_common+0x3e>
 8005264:	18e1      	adds	r1, r4, r3
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	2030      	movs	r0, #48	; 0x30
 800526a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800526e:	4422      	add	r2, r4
 8005270:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005274:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005278:	3302      	adds	r3, #2
 800527a:	e7c7      	b.n	800520c <_printf_common+0x58>
 800527c:	2301      	movs	r3, #1
 800527e:	4622      	mov	r2, r4
 8005280:	4649      	mov	r1, r9
 8005282:	4638      	mov	r0, r7
 8005284:	47c0      	blx	r8
 8005286:	3001      	adds	r0, #1
 8005288:	d0e6      	beq.n	8005258 <_printf_common+0xa4>
 800528a:	3601      	adds	r6, #1
 800528c:	e7d9      	b.n	8005242 <_printf_common+0x8e>
	...

08005290 <_printf_i>:
 8005290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005294:	7e0f      	ldrb	r7, [r1, #24]
 8005296:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005298:	2f78      	cmp	r7, #120	; 0x78
 800529a:	4691      	mov	r9, r2
 800529c:	4680      	mov	r8, r0
 800529e:	460c      	mov	r4, r1
 80052a0:	469a      	mov	sl, r3
 80052a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80052a6:	d807      	bhi.n	80052b8 <_printf_i+0x28>
 80052a8:	2f62      	cmp	r7, #98	; 0x62
 80052aa:	d80a      	bhi.n	80052c2 <_printf_i+0x32>
 80052ac:	2f00      	cmp	r7, #0
 80052ae:	f000 80d4 	beq.w	800545a <_printf_i+0x1ca>
 80052b2:	2f58      	cmp	r7, #88	; 0x58
 80052b4:	f000 80c0 	beq.w	8005438 <_printf_i+0x1a8>
 80052b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052c0:	e03a      	b.n	8005338 <_printf_i+0xa8>
 80052c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052c6:	2b15      	cmp	r3, #21
 80052c8:	d8f6      	bhi.n	80052b8 <_printf_i+0x28>
 80052ca:	a101      	add	r1, pc, #4	; (adr r1, 80052d0 <_printf_i+0x40>)
 80052cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052d0:	08005329 	.word	0x08005329
 80052d4:	0800533d 	.word	0x0800533d
 80052d8:	080052b9 	.word	0x080052b9
 80052dc:	080052b9 	.word	0x080052b9
 80052e0:	080052b9 	.word	0x080052b9
 80052e4:	080052b9 	.word	0x080052b9
 80052e8:	0800533d 	.word	0x0800533d
 80052ec:	080052b9 	.word	0x080052b9
 80052f0:	080052b9 	.word	0x080052b9
 80052f4:	080052b9 	.word	0x080052b9
 80052f8:	080052b9 	.word	0x080052b9
 80052fc:	08005441 	.word	0x08005441
 8005300:	08005369 	.word	0x08005369
 8005304:	080053fb 	.word	0x080053fb
 8005308:	080052b9 	.word	0x080052b9
 800530c:	080052b9 	.word	0x080052b9
 8005310:	08005463 	.word	0x08005463
 8005314:	080052b9 	.word	0x080052b9
 8005318:	08005369 	.word	0x08005369
 800531c:	080052b9 	.word	0x080052b9
 8005320:	080052b9 	.word	0x080052b9
 8005324:	08005403 	.word	0x08005403
 8005328:	682b      	ldr	r3, [r5, #0]
 800532a:	1d1a      	adds	r2, r3, #4
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	602a      	str	r2, [r5, #0]
 8005330:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005334:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005338:	2301      	movs	r3, #1
 800533a:	e09f      	b.n	800547c <_printf_i+0x1ec>
 800533c:	6820      	ldr	r0, [r4, #0]
 800533e:	682b      	ldr	r3, [r5, #0]
 8005340:	0607      	lsls	r7, r0, #24
 8005342:	f103 0104 	add.w	r1, r3, #4
 8005346:	6029      	str	r1, [r5, #0]
 8005348:	d501      	bpl.n	800534e <_printf_i+0xbe>
 800534a:	681e      	ldr	r6, [r3, #0]
 800534c:	e003      	b.n	8005356 <_printf_i+0xc6>
 800534e:	0646      	lsls	r6, r0, #25
 8005350:	d5fb      	bpl.n	800534a <_printf_i+0xba>
 8005352:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005356:	2e00      	cmp	r6, #0
 8005358:	da03      	bge.n	8005362 <_printf_i+0xd2>
 800535a:	232d      	movs	r3, #45	; 0x2d
 800535c:	4276      	negs	r6, r6
 800535e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005362:	485a      	ldr	r0, [pc, #360]	; (80054cc <_printf_i+0x23c>)
 8005364:	230a      	movs	r3, #10
 8005366:	e012      	b.n	800538e <_printf_i+0xfe>
 8005368:	682b      	ldr	r3, [r5, #0]
 800536a:	6820      	ldr	r0, [r4, #0]
 800536c:	1d19      	adds	r1, r3, #4
 800536e:	6029      	str	r1, [r5, #0]
 8005370:	0605      	lsls	r5, r0, #24
 8005372:	d501      	bpl.n	8005378 <_printf_i+0xe8>
 8005374:	681e      	ldr	r6, [r3, #0]
 8005376:	e002      	b.n	800537e <_printf_i+0xee>
 8005378:	0641      	lsls	r1, r0, #25
 800537a:	d5fb      	bpl.n	8005374 <_printf_i+0xe4>
 800537c:	881e      	ldrh	r6, [r3, #0]
 800537e:	4853      	ldr	r0, [pc, #332]	; (80054cc <_printf_i+0x23c>)
 8005380:	2f6f      	cmp	r7, #111	; 0x6f
 8005382:	bf0c      	ite	eq
 8005384:	2308      	moveq	r3, #8
 8005386:	230a      	movne	r3, #10
 8005388:	2100      	movs	r1, #0
 800538a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800538e:	6865      	ldr	r5, [r4, #4]
 8005390:	60a5      	str	r5, [r4, #8]
 8005392:	2d00      	cmp	r5, #0
 8005394:	bfa2      	ittt	ge
 8005396:	6821      	ldrge	r1, [r4, #0]
 8005398:	f021 0104 	bicge.w	r1, r1, #4
 800539c:	6021      	strge	r1, [r4, #0]
 800539e:	b90e      	cbnz	r6, 80053a4 <_printf_i+0x114>
 80053a0:	2d00      	cmp	r5, #0
 80053a2:	d04b      	beq.n	800543c <_printf_i+0x1ac>
 80053a4:	4615      	mov	r5, r2
 80053a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80053aa:	fb03 6711 	mls	r7, r3, r1, r6
 80053ae:	5dc7      	ldrb	r7, [r0, r7]
 80053b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80053b4:	4637      	mov	r7, r6
 80053b6:	42bb      	cmp	r3, r7
 80053b8:	460e      	mov	r6, r1
 80053ba:	d9f4      	bls.n	80053a6 <_printf_i+0x116>
 80053bc:	2b08      	cmp	r3, #8
 80053be:	d10b      	bne.n	80053d8 <_printf_i+0x148>
 80053c0:	6823      	ldr	r3, [r4, #0]
 80053c2:	07de      	lsls	r6, r3, #31
 80053c4:	d508      	bpl.n	80053d8 <_printf_i+0x148>
 80053c6:	6923      	ldr	r3, [r4, #16]
 80053c8:	6861      	ldr	r1, [r4, #4]
 80053ca:	4299      	cmp	r1, r3
 80053cc:	bfde      	ittt	le
 80053ce:	2330      	movle	r3, #48	; 0x30
 80053d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80053d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80053d8:	1b52      	subs	r2, r2, r5
 80053da:	6122      	str	r2, [r4, #16]
 80053dc:	f8cd a000 	str.w	sl, [sp]
 80053e0:	464b      	mov	r3, r9
 80053e2:	aa03      	add	r2, sp, #12
 80053e4:	4621      	mov	r1, r4
 80053e6:	4640      	mov	r0, r8
 80053e8:	f7ff fee4 	bl	80051b4 <_printf_common>
 80053ec:	3001      	adds	r0, #1
 80053ee:	d14a      	bne.n	8005486 <_printf_i+0x1f6>
 80053f0:	f04f 30ff 	mov.w	r0, #4294967295
 80053f4:	b004      	add	sp, #16
 80053f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053fa:	6823      	ldr	r3, [r4, #0]
 80053fc:	f043 0320 	orr.w	r3, r3, #32
 8005400:	6023      	str	r3, [r4, #0]
 8005402:	4833      	ldr	r0, [pc, #204]	; (80054d0 <_printf_i+0x240>)
 8005404:	2778      	movs	r7, #120	; 0x78
 8005406:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800540a:	6823      	ldr	r3, [r4, #0]
 800540c:	6829      	ldr	r1, [r5, #0]
 800540e:	061f      	lsls	r7, r3, #24
 8005410:	f851 6b04 	ldr.w	r6, [r1], #4
 8005414:	d402      	bmi.n	800541c <_printf_i+0x18c>
 8005416:	065f      	lsls	r7, r3, #25
 8005418:	bf48      	it	mi
 800541a:	b2b6      	uxthmi	r6, r6
 800541c:	07df      	lsls	r7, r3, #31
 800541e:	bf48      	it	mi
 8005420:	f043 0320 	orrmi.w	r3, r3, #32
 8005424:	6029      	str	r1, [r5, #0]
 8005426:	bf48      	it	mi
 8005428:	6023      	strmi	r3, [r4, #0]
 800542a:	b91e      	cbnz	r6, 8005434 <_printf_i+0x1a4>
 800542c:	6823      	ldr	r3, [r4, #0]
 800542e:	f023 0320 	bic.w	r3, r3, #32
 8005432:	6023      	str	r3, [r4, #0]
 8005434:	2310      	movs	r3, #16
 8005436:	e7a7      	b.n	8005388 <_printf_i+0xf8>
 8005438:	4824      	ldr	r0, [pc, #144]	; (80054cc <_printf_i+0x23c>)
 800543a:	e7e4      	b.n	8005406 <_printf_i+0x176>
 800543c:	4615      	mov	r5, r2
 800543e:	e7bd      	b.n	80053bc <_printf_i+0x12c>
 8005440:	682b      	ldr	r3, [r5, #0]
 8005442:	6826      	ldr	r6, [r4, #0]
 8005444:	6961      	ldr	r1, [r4, #20]
 8005446:	1d18      	adds	r0, r3, #4
 8005448:	6028      	str	r0, [r5, #0]
 800544a:	0635      	lsls	r5, r6, #24
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	d501      	bpl.n	8005454 <_printf_i+0x1c4>
 8005450:	6019      	str	r1, [r3, #0]
 8005452:	e002      	b.n	800545a <_printf_i+0x1ca>
 8005454:	0670      	lsls	r0, r6, #25
 8005456:	d5fb      	bpl.n	8005450 <_printf_i+0x1c0>
 8005458:	8019      	strh	r1, [r3, #0]
 800545a:	2300      	movs	r3, #0
 800545c:	6123      	str	r3, [r4, #16]
 800545e:	4615      	mov	r5, r2
 8005460:	e7bc      	b.n	80053dc <_printf_i+0x14c>
 8005462:	682b      	ldr	r3, [r5, #0]
 8005464:	1d1a      	adds	r2, r3, #4
 8005466:	602a      	str	r2, [r5, #0]
 8005468:	681d      	ldr	r5, [r3, #0]
 800546a:	6862      	ldr	r2, [r4, #4]
 800546c:	2100      	movs	r1, #0
 800546e:	4628      	mov	r0, r5
 8005470:	f7fa feee 	bl	8000250 <memchr>
 8005474:	b108      	cbz	r0, 800547a <_printf_i+0x1ea>
 8005476:	1b40      	subs	r0, r0, r5
 8005478:	6060      	str	r0, [r4, #4]
 800547a:	6863      	ldr	r3, [r4, #4]
 800547c:	6123      	str	r3, [r4, #16]
 800547e:	2300      	movs	r3, #0
 8005480:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005484:	e7aa      	b.n	80053dc <_printf_i+0x14c>
 8005486:	6923      	ldr	r3, [r4, #16]
 8005488:	462a      	mov	r2, r5
 800548a:	4649      	mov	r1, r9
 800548c:	4640      	mov	r0, r8
 800548e:	47d0      	blx	sl
 8005490:	3001      	adds	r0, #1
 8005492:	d0ad      	beq.n	80053f0 <_printf_i+0x160>
 8005494:	6823      	ldr	r3, [r4, #0]
 8005496:	079b      	lsls	r3, r3, #30
 8005498:	d413      	bmi.n	80054c2 <_printf_i+0x232>
 800549a:	68e0      	ldr	r0, [r4, #12]
 800549c:	9b03      	ldr	r3, [sp, #12]
 800549e:	4298      	cmp	r0, r3
 80054a0:	bfb8      	it	lt
 80054a2:	4618      	movlt	r0, r3
 80054a4:	e7a6      	b.n	80053f4 <_printf_i+0x164>
 80054a6:	2301      	movs	r3, #1
 80054a8:	4632      	mov	r2, r6
 80054aa:	4649      	mov	r1, r9
 80054ac:	4640      	mov	r0, r8
 80054ae:	47d0      	blx	sl
 80054b0:	3001      	adds	r0, #1
 80054b2:	d09d      	beq.n	80053f0 <_printf_i+0x160>
 80054b4:	3501      	adds	r5, #1
 80054b6:	68e3      	ldr	r3, [r4, #12]
 80054b8:	9903      	ldr	r1, [sp, #12]
 80054ba:	1a5b      	subs	r3, r3, r1
 80054bc:	42ab      	cmp	r3, r5
 80054be:	dcf2      	bgt.n	80054a6 <_printf_i+0x216>
 80054c0:	e7eb      	b.n	800549a <_printf_i+0x20a>
 80054c2:	2500      	movs	r5, #0
 80054c4:	f104 0619 	add.w	r6, r4, #25
 80054c8:	e7f5      	b.n	80054b6 <_printf_i+0x226>
 80054ca:	bf00      	nop
 80054cc:	08005605 	.word	0x08005605
 80054d0:	08005616 	.word	0x08005616

080054d4 <memmove>:
 80054d4:	4288      	cmp	r0, r1
 80054d6:	b510      	push	{r4, lr}
 80054d8:	eb01 0402 	add.w	r4, r1, r2
 80054dc:	d902      	bls.n	80054e4 <memmove+0x10>
 80054de:	4284      	cmp	r4, r0
 80054e0:	4623      	mov	r3, r4
 80054e2:	d807      	bhi.n	80054f4 <memmove+0x20>
 80054e4:	1e43      	subs	r3, r0, #1
 80054e6:	42a1      	cmp	r1, r4
 80054e8:	d008      	beq.n	80054fc <memmove+0x28>
 80054ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80054f2:	e7f8      	b.n	80054e6 <memmove+0x12>
 80054f4:	4402      	add	r2, r0
 80054f6:	4601      	mov	r1, r0
 80054f8:	428a      	cmp	r2, r1
 80054fa:	d100      	bne.n	80054fe <memmove+0x2a>
 80054fc:	bd10      	pop	{r4, pc}
 80054fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005502:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005506:	e7f7      	b.n	80054f8 <memmove+0x24>

08005508 <_sbrk_r>:
 8005508:	b538      	push	{r3, r4, r5, lr}
 800550a:	4d06      	ldr	r5, [pc, #24]	; (8005524 <_sbrk_r+0x1c>)
 800550c:	2300      	movs	r3, #0
 800550e:	4604      	mov	r4, r0
 8005510:	4608      	mov	r0, r1
 8005512:	602b      	str	r3, [r5, #0]
 8005514:	f7fb fd1e 	bl	8000f54 <_sbrk>
 8005518:	1c43      	adds	r3, r0, #1
 800551a:	d102      	bne.n	8005522 <_sbrk_r+0x1a>
 800551c:	682b      	ldr	r3, [r5, #0]
 800551e:	b103      	cbz	r3, 8005522 <_sbrk_r+0x1a>
 8005520:	6023      	str	r3, [r4, #0]
 8005522:	bd38      	pop	{r3, r4, r5, pc}
 8005524:	200009c8 	.word	0x200009c8

08005528 <memcpy>:
 8005528:	440a      	add	r2, r1
 800552a:	4291      	cmp	r1, r2
 800552c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005530:	d100      	bne.n	8005534 <memcpy+0xc>
 8005532:	4770      	bx	lr
 8005534:	b510      	push	{r4, lr}
 8005536:	f811 4b01 	ldrb.w	r4, [r1], #1
 800553a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800553e:	4291      	cmp	r1, r2
 8005540:	d1f9      	bne.n	8005536 <memcpy+0xe>
 8005542:	bd10      	pop	{r4, pc}

08005544 <_realloc_r>:
 8005544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005548:	4680      	mov	r8, r0
 800554a:	4614      	mov	r4, r2
 800554c:	460e      	mov	r6, r1
 800554e:	b921      	cbnz	r1, 800555a <_realloc_r+0x16>
 8005550:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005554:	4611      	mov	r1, r2
 8005556:	f7ff bc49 	b.w	8004dec <_malloc_r>
 800555a:	b92a      	cbnz	r2, 8005568 <_realloc_r+0x24>
 800555c:	f7ff fbda 	bl	8004d14 <_free_r>
 8005560:	4625      	mov	r5, r4
 8005562:	4628      	mov	r0, r5
 8005564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005568:	f000 f81b 	bl	80055a2 <_malloc_usable_size_r>
 800556c:	4284      	cmp	r4, r0
 800556e:	4607      	mov	r7, r0
 8005570:	d802      	bhi.n	8005578 <_realloc_r+0x34>
 8005572:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005576:	d812      	bhi.n	800559e <_realloc_r+0x5a>
 8005578:	4621      	mov	r1, r4
 800557a:	4640      	mov	r0, r8
 800557c:	f7ff fc36 	bl	8004dec <_malloc_r>
 8005580:	4605      	mov	r5, r0
 8005582:	2800      	cmp	r0, #0
 8005584:	d0ed      	beq.n	8005562 <_realloc_r+0x1e>
 8005586:	42bc      	cmp	r4, r7
 8005588:	4622      	mov	r2, r4
 800558a:	4631      	mov	r1, r6
 800558c:	bf28      	it	cs
 800558e:	463a      	movcs	r2, r7
 8005590:	f7ff ffca 	bl	8005528 <memcpy>
 8005594:	4631      	mov	r1, r6
 8005596:	4640      	mov	r0, r8
 8005598:	f7ff fbbc 	bl	8004d14 <_free_r>
 800559c:	e7e1      	b.n	8005562 <_realloc_r+0x1e>
 800559e:	4635      	mov	r5, r6
 80055a0:	e7df      	b.n	8005562 <_realloc_r+0x1e>

080055a2 <_malloc_usable_size_r>:
 80055a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055a6:	1f18      	subs	r0, r3, #4
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	bfbc      	itt	lt
 80055ac:	580b      	ldrlt	r3, [r1, r0]
 80055ae:	18c0      	addlt	r0, r0, r3
 80055b0:	4770      	bx	lr
	...

080055b4 <_init>:
 80055b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055b6:	bf00      	nop
 80055b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ba:	bc08      	pop	{r3}
 80055bc:	469e      	mov	lr, r3
 80055be:	4770      	bx	lr

080055c0 <_fini>:
 80055c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055c2:	bf00      	nop
 80055c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055c6:	bc08      	pop	{r3}
 80055c8:	469e      	mov	lr, r3
 80055ca:	4770      	bx	lr
