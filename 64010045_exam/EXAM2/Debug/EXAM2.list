
EXAM2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f18  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08004118  08004118  00014118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004174  08004174  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08004174  08004174  00014174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800417c  0800417c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800417c  0800417c  0001417c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004180  08004180  00014180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004184  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000060  080041e4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  080041e4  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f274  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021ad  00000000  00000000  0002f345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d10  00000000  00000000  000314f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a39  00000000  00000000  00032208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002807c  00000000  00000000  00032c41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011511  00000000  00000000  0005acbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fad33  00000000  00000000  0006c1ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ae4  00000000  00000000  00166f04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  0016a9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000060 	.word	0x20000060
 800021c:	00000000 	.word	0x00000000
 8000220:	08004100 	.word	0x08004100

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000064 	.word	0x20000064
 800023c:	08004100 	.word	0x08004100

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 030c 	add.w	r3, r7, #12
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000602:	4b25      	ldr	r3, [pc, #148]	; (8000698 <MX_GPIO_Init+0xac>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a24      	ldr	r2, [pc, #144]	; (8000698 <MX_GPIO_Init+0xac>)
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b22      	ldr	r3, [pc, #136]	; (8000698 <MX_GPIO_Init+0xac>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0304 	and.w	r3, r3, #4
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061a:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <MX_GPIO_Init+0xac>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a1e      	ldr	r2, [pc, #120]	; (8000698 <MX_GPIO_Init+0xac>)
 8000620:	f043 0302 	orr.w	r3, r3, #2
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b1c      	ldr	r3, [pc, #112]	; (8000698 <MX_GPIO_Init+0xac>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0302 	and.w	r3, r3, #2
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000632:	4b19      	ldr	r3, [pc, #100]	; (8000698 <MX_GPIO_Init+0xac>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a18      	ldr	r2, [pc, #96]	; (8000698 <MX_GPIO_Init+0xac>)
 8000638:	f043 0308 	orr.w	r3, r3, #8
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b16      	ldr	r3, [pc, #88]	; (8000698 <MX_GPIO_Init+0xac>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0308 	and.w	r3, r3, #8
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000650:	4812      	ldr	r0, [pc, #72]	; (800069c <MX_GPIO_Init+0xb0>)
 8000652:	f000 fe47 	bl	80012e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000656:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800065a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800065c:	2300      	movs	r3, #0
 800065e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	4619      	mov	r1, r3
 800066a:	480d      	ldr	r0, [pc, #52]	; (80006a0 <MX_GPIO_Init+0xb4>)
 800066c:	f000 fc76 	bl	8000f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 8000670:	f244 0381 	movw	r3, #16513	; 0x4081
 8000674:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000676:	2301      	movs	r3, #1
 8000678:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	2300      	movs	r3, #0
 8000680:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	4619      	mov	r1, r3
 8000688:	4804      	ldr	r0, [pc, #16]	; (800069c <MX_GPIO_Init+0xb0>)
 800068a:	f000 fc67 	bl	8000f5c <HAL_GPIO_Init>

}
 800068e:	bf00      	nop
 8000690:	3720      	adds	r7, #32
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800
 800069c:	40020400 	.word	0x40020400
 80006a0:	40020800 	.word	0x40020800

080006a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b088      	sub	sp, #32
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006aa:	f000 fac4 	bl	8000c36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ae:	f000 f87f 	bl	80007b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b2:	f7ff ff9b 	bl	80005ec <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006b6:	f000 fa05 	bl	8000ac4 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80006ba:	f000 f991 	bl	80009e0 <MX_TIM2_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 if(!isPressed){
 80006be:	4b33      	ldr	r3, [pc, #204]	; (800078c <main+0xe8>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d13f      	bne.n	8000746 <main+0xa2>
		 if(toggle){
 80006c6:	4b32      	ldr	r3, [pc, #200]	; (8000790 <main+0xec>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d03b      	beq.n	8000746 <main+0xa2>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2101      	movs	r1, #1
 80006d2:	4830      	ldr	r0, [pc, #192]	; (8000794 <main+0xf0>)
 80006d4:	f000 fe06 	bl	80012e4 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 80006d8:	2200      	movs	r2, #0
 80006da:	2180      	movs	r1, #128	; 0x80
 80006dc:	482d      	ldr	r0, [pc, #180]	; (8000794 <main+0xf0>)
 80006de:	f000 fe01 	bl	80012e4 <HAL_GPIO_WritePin>
			 if(a < 3000){
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <main+0xf4>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80006ea:	4293      	cmp	r3, r2
 80006ec:	dc08      	bgt.n	8000700 <main+0x5c>
			 	print("STOP");
 80006ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006f2:	2204      	movs	r2, #4
 80006f4:	4929      	ldr	r1, [pc, #164]	; (800079c <main+0xf8>)
 80006f6:	482a      	ldr	r0, [pc, #168]	; (80007a0 <main+0xfc>)
 80006f8:	f002 fbc0 	bl	8002e7c <HAL_UART_Transmit>
 80006fc:	2300      	movs	r3, #0
 80006fe:	e040      	b.n	8000782 <main+0xde>
			 	break;
			 }
			 	char buffer[30];
			 	sprintf(buffer, "%d", a);
 8000700:	4b25      	ldr	r3, [pc, #148]	; (8000798 <main+0xf4>)
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	463b      	mov	r3, r7
 8000706:	4927      	ldr	r1, [pc, #156]	; (80007a4 <main+0x100>)
 8000708:	4618      	mov	r0, r3
 800070a:	f003 f855 	bl	80037b8 <siprintf>
			 	print(buffer);
 800070e:	463b      	mov	r3, r7
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff fd95 	bl	8000240 <strlen>
 8000716:	4603      	mov	r3, r0
 8000718:	b29a      	uxth	r2, r3
 800071a:	4639      	mov	r1, r7
 800071c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000720:	481f      	ldr	r0, [pc, #124]	; (80007a0 <main+0xfc>)
 8000722:	f002 fbab 	bl	8002e7c <HAL_UART_Transmit>
			 	print("\n\r");
 8000726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800072a:	2202      	movs	r2, #2
 800072c:	491e      	ldr	r1, [pc, #120]	; (80007a8 <main+0x104>)
 800072e:	481c      	ldr	r0, [pc, #112]	; (80007a0 <main+0xfc>)
 8000730:	f002 fba4 	bl	8002e7c <HAL_UART_Transmit>
			 	a -= 2;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <main+0xf4>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	3b02      	subs	r3, #2
 800073a:	4a17      	ldr	r2, [pc, #92]	; (8000798 <main+0xf4>)
 800073c:	6013      	str	r3, [r2, #0]
			 HAL_Delay(1000);
 800073e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000742:	f000 fad5 	bl	8000cf0 <HAL_Delay>
		 }
	 }
	 if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET){
 8000746:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800074a:	4818      	ldr	r0, [pc, #96]	; (80007ac <main+0x108>)
 800074c:	f000 fdb2 	bl	80012b4 <HAL_GPIO_ReadPin>
 8000750:	4603      	mov	r3, r0
 8000752:	2b01      	cmp	r3, #1
 8000754:	d1b3      	bne.n	80006be <main+0x1a>
		 isPressed = 1;
 8000756:	4b0d      	ldr	r3, [pc, #52]	; (800078c <main+0xe8>)
 8000758:	2201      	movs	r2, #1
 800075a:	601a      	str	r2, [r3, #0]
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 800075c:	2201      	movs	r2, #1
 800075e:	2101      	movs	r1, #1
 8000760:	480c      	ldr	r0, [pc, #48]	; (8000794 <main+0xf0>)
 8000762:	f000 fdbf 	bl	80012e4 <HAL_GPIO_WritePin>
		 HAL_Delay(1000);
 8000766:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800076a:	f000 fac1 	bl	8000cf0 <HAL_Delay>
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 800076e:	2201      	movs	r2, #1
 8000770:	2180      	movs	r1, #128	; 0x80
 8000772:	4808      	ldr	r0, [pc, #32]	; (8000794 <main+0xf0>)
 8000774:	f000 fdb6 	bl	80012e4 <HAL_GPIO_WritePin>
		 HAL_Delay(1000);
 8000778:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800077c:	f000 fab8 	bl	8000cf0 <HAL_Delay>
	 if(!isPressed){
 8000780:	e79d      	b.n	80006be <main+0x1a>
	 }
  }
  /* USER CODE END 3 */
}
 8000782:	4618      	mov	r0, r3
 8000784:	3720      	adds	r7, #32
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	2000007c 	.word	0x2000007c
 8000790:	20000080 	.word	0x20000080
 8000794:	40020400 	.word	0x40020400
 8000798:	20000000 	.word	0x20000000
 800079c:	08004118 	.word	0x08004118
 80007a0:	200000d4 	.word	0x200000d4
 80007a4:	08004120 	.word	0x08004120
 80007a8:	08004124 	.word	0x08004124
 80007ac:	40020800 	.word	0x40020800

080007b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b094      	sub	sp, #80	; 0x50
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	2234      	movs	r2, #52	; 0x34
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f003 f81a 	bl	80037f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	f107 0308 	add.w	r3, r7, #8
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d4:	4b2b      	ldr	r3, [pc, #172]	; (8000884 <SystemClock_Config+0xd4>)
 80007d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d8:	4a2a      	ldr	r2, [pc, #168]	; (8000884 <SystemClock_Config+0xd4>)
 80007da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007de:	6413      	str	r3, [r2, #64]	; 0x40
 80007e0:	4b28      	ldr	r3, [pc, #160]	; (8000884 <SystemClock_Config+0xd4>)
 80007e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ec:	4b26      	ldr	r3, [pc, #152]	; (8000888 <SystemClock_Config+0xd8>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a25      	ldr	r2, [pc, #148]	; (8000888 <SystemClock_Config+0xd8>)
 80007f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007f6:	6013      	str	r3, [r2, #0]
 80007f8:	4b23      	ldr	r3, [pc, #140]	; (8000888 <SystemClock_Config+0xd8>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000804:	2302      	movs	r3, #2
 8000806:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000808:	2301      	movs	r3, #1
 800080a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800080c:	2310      	movs	r3, #16
 800080e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000810:	2302      	movs	r3, #2
 8000812:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000814:	2300      	movs	r3, #0
 8000816:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000818:	2308      	movs	r3, #8
 800081a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800081c:	23d8      	movs	r3, #216	; 0xd8
 800081e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000820:	2302      	movs	r3, #2
 8000822:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000824:	2302      	movs	r3, #2
 8000826:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000828:	2302      	movs	r3, #2
 800082a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4618      	mov	r0, r3
 8000832:	f000 fdc1 	bl	80013b8 <HAL_RCC_OscConfig>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800083c:	f000 f826 	bl	800088c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000840:	f000 fd6a 	bl	8001318 <HAL_PWREx_EnableOverDrive>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800084a:	f000 f81f 	bl	800088c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084e:	230f      	movs	r3, #15
 8000850:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000852:	2302      	movs	r3, #2
 8000854:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800085a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800085e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000864:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000866:	f107 0308 	add.w	r3, r7, #8
 800086a:	2107      	movs	r1, #7
 800086c:	4618      	mov	r0, r3
 800086e:	f001 f851 	bl	8001914 <HAL_RCC_ClockConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000878:	f000 f808 	bl	800088c <Error_Handler>
  }
}
 800087c:	bf00      	nop
 800087e:	3750      	adds	r7, #80	; 0x50
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40023800 	.word	0x40023800
 8000888:	40007000 	.word	0x40007000

0800088c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000890:	b672      	cpsid	i
}
 8000892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000894:	e7fe      	b.n	8000894 <Error_Handler+0x8>
	...

08000898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800089e:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <HAL_MspInit+0x44>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a2:	4a0e      	ldr	r2, [pc, #56]	; (80008dc <HAL_MspInit+0x44>)
 80008a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a8:	6413      	str	r3, [r2, #64]	; 0x40
 80008aa:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <HAL_MspInit+0x44>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <HAL_MspInit+0x44>)
 80008b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ba:	4a08      	ldr	r2, [pc, #32]	; (80008dc <HAL_MspInit+0x44>)
 80008bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c0:	6453      	str	r3, [r2, #68]	; 0x44
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <HAL_MspInit+0x44>)
 80008c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ce:	bf00      	nop
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	40023800 	.word	0x40023800

080008e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <NMI_Handler+0x4>

080008e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <HardFault_Handler+0x4>

080008ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <MemManage_Handler+0x4>

080008f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <BusFault_Handler+0x4>

080008f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <UsageFault_Handler+0x4>

080008fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800092c:	f000 f9c0 	bl	8000cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}

08000934 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000938:	4803      	ldr	r0, [pc, #12]	; (8000948 <TIM2_IRQHandler+0x14>)
 800093a:	f001 fe50 	bl	80025de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  toggle = 1;
 800093e:	4b03      	ldr	r3, [pc, #12]	; (800094c <TIM2_IRQHandler+0x18>)
 8000940:	2201      	movs	r2, #1
 8000942:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 1 */
}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000088 	.word	0x20000088
 800094c:	20000080 	.word	0x20000080

08000950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000958:	4a14      	ldr	r2, [pc, #80]	; (80009ac <_sbrk+0x5c>)
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <_sbrk+0x60>)
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <_sbrk+0x64>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d102      	bne.n	8000972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <_sbrk+0x64>)
 800096e:	4a12      	ldr	r2, [pc, #72]	; (80009b8 <_sbrk+0x68>)
 8000970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <_sbrk+0x64>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	429a      	cmp	r2, r3
 800097e:	d207      	bcs.n	8000990 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000980:	f002 ff42 	bl	8003808 <__errno>
 8000984:	4603      	mov	r3, r0
 8000986:	220c      	movs	r2, #12
 8000988:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800098a:	f04f 33ff 	mov.w	r3, #4294967295
 800098e:	e009      	b.n	80009a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <_sbrk+0x64>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000996:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <_sbrk+0x64>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4413      	add	r3, r2
 800099e:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <_sbrk+0x64>)
 80009a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009a2:	68fb      	ldr	r3, [r7, #12]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3718      	adds	r7, #24
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20080000 	.word	0x20080000
 80009b0:	00000400 	.word	0x00000400
 80009b4:	20000084 	.word	0x20000084
 80009b8:	200002a8 	.word	0x200002a8

080009bc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <SystemInit+0x20>)
 80009c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009c6:	4a05      	ldr	r2, [pc, #20]	; (80009dc <SystemInit+0x20>)
 80009c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b088      	sub	sp, #32
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009e6:	f107 0310 	add.w	r3, r7, #16
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009fe:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <MX_TIM2_Init+0x94>)
 8000a00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a04:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108-1;
 8000a06:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <MX_TIM2_Init+0x94>)
 8000a08:	226b      	movs	r2, #107	; 0x6b
 8000a0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0c:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <MX_TIM2_Init+0x94>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000-1;
 8000a12:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <MX_TIM2_Init+0x94>)
 8000a14:	4a18      	ldr	r2, [pc, #96]	; (8000a78 <MX_TIM2_Init+0x98>)
 8000a16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a18:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <MX_TIM2_Init+0x94>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1e:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <MX_TIM2_Init+0x94>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a24:	4813      	ldr	r0, [pc, #76]	; (8000a74 <MX_TIM2_Init+0x94>)
 8000a26:	f001 fd83 	bl	8002530 <HAL_TIM_Base_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a30:	f7ff ff2c 	bl	800088c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a3a:	f107 0310 	add.w	r3, r7, #16
 8000a3e:	4619      	mov	r1, r3
 8000a40:	480c      	ldr	r0, [pc, #48]	; (8000a74 <MX_TIM2_Init+0x94>)
 8000a42:	f001 feeb 	bl	800281c <HAL_TIM_ConfigClockSource>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a4c:	f7ff ff1e 	bl	800088c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a50:	2300      	movs	r3, #0
 8000a52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4805      	ldr	r0, [pc, #20]	; (8000a74 <MX_TIM2_Init+0x94>)
 8000a5e:	f002 f913 	bl	8002c88 <HAL_TIMEx_MasterConfigSynchronization>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a68:	f7ff ff10 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a6c:	bf00      	nop
 8000a6e:	3720      	adds	r7, #32
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000088 	.word	0x20000088
 8000a78:	000f423f 	.word	0x000f423f

08000a7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a8c:	d113      	bne.n	8000ab6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <HAL_TIM_Base_MspInit+0x44>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	4a0b      	ldr	r2, [pc, #44]	; (8000ac0 <HAL_TIM_Base_MspInit+0x44>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9a:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <HAL_TIM_Base_MspInit+0x44>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	201c      	movs	r0, #28
 8000aac:	f000 fa1f 	bl	8000eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ab0:	201c      	movs	r0, #28
 8000ab2:	f000 fa38 	bl	8000f26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000ab6:	bf00      	nop
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40023800 	.word	0x40023800

08000ac4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ac8:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <MX_USART3_UART_Init+0x58>)
 8000aca:	4a15      	ldr	r2, [pc, #84]	; (8000b20 <MX_USART3_UART_Init+0x5c>)
 8000acc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ace:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <MX_USART3_UART_Init+0x58>)
 8000ad0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ad4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <MX_USART3_UART_Init+0x58>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <MX_USART3_UART_Init+0x58>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <MX_USART3_UART_Init+0x58>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <MX_USART3_UART_Init+0x58>)
 8000aea:	220c      	movs	r2, #12
 8000aec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <MX_USART3_UART_Init+0x58>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af4:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <MX_USART3_UART_Init+0x58>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <MX_USART3_UART_Init+0x58>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <MX_USART3_UART_Init+0x58>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b06:	4805      	ldr	r0, [pc, #20]	; (8000b1c <MX_USART3_UART_Init+0x58>)
 8000b08:	f002 f96a 	bl	8002de0 <HAL_UART_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b12:	f7ff febb 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	200000d4 	.word	0x200000d4
 8000b20:	40004800 	.word	0x40004800

08000b24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b0ae      	sub	sp, #184	; 0xb8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	2290      	movs	r2, #144	; 0x90
 8000b42:	2100      	movs	r1, #0
 8000b44:	4618      	mov	r0, r3
 8000b46:	f002 fe57 	bl	80037f8 <memset>
  if(uartHandle->Instance==USART3)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a22      	ldr	r2, [pc, #136]	; (8000bd8 <HAL_UART_MspInit+0xb4>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d13c      	bne.n	8000bce <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b58:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	4618      	mov	r0, r3
 8000b64:	f001 f8bc 	bl	8001ce0 <HAL_RCCEx_PeriphCLKConfig>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b6e:	f7ff fe8d 	bl	800088c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b72:	4b1a      	ldr	r3, [pc, #104]	; (8000bdc <HAL_UART_MspInit+0xb8>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	4a19      	ldr	r2, [pc, #100]	; (8000bdc <HAL_UART_MspInit+0xb8>)
 8000b78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7e:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <HAL_UART_MspInit+0xb8>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8a:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <HAL_UART_MspInit+0xb8>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a13      	ldr	r2, [pc, #76]	; (8000bdc <HAL_UART_MspInit+0xb8>)
 8000b90:	f043 0308 	orr.w	r3, r3, #8
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <HAL_UART_MspInit+0xb8>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0308 	and.w	r3, r3, #8
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ba2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ba6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	2302      	movs	r3, #2
 8000bac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bbc:	2307      	movs	r3, #7
 8000bbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bc2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4805      	ldr	r0, [pc, #20]	; (8000be0 <HAL_UART_MspInit+0xbc>)
 8000bca:	f000 f9c7 	bl	8000f5c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000bce:	bf00      	nop
 8000bd0:	37b8      	adds	r7, #184	; 0xb8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40004800 	.word	0x40004800
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020c00 	.word	0x40020c00

08000be4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000be4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000be8:	480d      	ldr	r0, [pc, #52]	; (8000c20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bea:	490e      	ldr	r1, [pc, #56]	; (8000c24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bec:	4a0e      	ldr	r2, [pc, #56]	; (8000c28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf0:	e002      	b.n	8000bf8 <LoopCopyDataInit>

08000bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf6:	3304      	adds	r3, #4

08000bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bfc:	d3f9      	bcc.n	8000bf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfe:	4a0b      	ldr	r2, [pc, #44]	; (8000c2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c00:	4c0b      	ldr	r4, [pc, #44]	; (8000c30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c04:	e001      	b.n	8000c0a <LoopFillZerobss>

08000c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c08:	3204      	adds	r2, #4

08000c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c0c:	d3fb      	bcc.n	8000c06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c0e:	f7ff fed5 	bl	80009bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c12:	f002 fdff 	bl	8003814 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c16:	f7ff fd45 	bl	80006a4 <main>
  bx  lr    
 8000c1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c1c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c24:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c28:	08004184 	.word	0x08004184
  ldr r2, =_sbss
 8000c2c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c30:	200002a8 	.word	0x200002a8

08000c34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c34:	e7fe      	b.n	8000c34 <ADC_IRQHandler>

08000c36 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c3a:	2003      	movs	r0, #3
 8000c3c:	f000 f94c 	bl	8000ed8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c40:	200f      	movs	r0, #15
 8000c42:	f000 f805 	bl	8000c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c46:	f7ff fe27 	bl	8000898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c4a:	2300      	movs	r3, #0
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <HAL_InitTick+0x54>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <HAL_InitTick+0x58>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	4619      	mov	r1, r3
 8000c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 f967 	bl	8000f42 <HAL_SYSTICK_Config>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e00e      	b.n	8000c9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2b0f      	cmp	r3, #15
 8000c82:	d80a      	bhi.n	8000c9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c84:	2200      	movs	r2, #0
 8000c86:	6879      	ldr	r1, [r7, #4]
 8000c88:	f04f 30ff 	mov.w	r0, #4294967295
 8000c8c:	f000 f92f 	bl	8000eee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c90:	4a06      	ldr	r2, [pc, #24]	; (8000cac <HAL_InitTick+0x5c>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c96:	2300      	movs	r3, #0
 8000c98:	e000      	b.n	8000c9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000004 	.word	0x20000004
 8000ca8:	2000000c 	.word	0x2000000c
 8000cac:	20000008 	.word	0x20000008

08000cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_IncTick+0x20>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_IncTick+0x24>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <HAL_IncTick+0x24>)
 8000cc2:	6013      	str	r3, [r2, #0]
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	2000000c 	.word	0x2000000c
 8000cd4:	2000015c 	.word	0x2000015c

08000cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return uwTick;
 8000cdc:	4b03      	ldr	r3, [pc, #12]	; (8000cec <HAL_GetTick+0x14>)
 8000cde:	681b      	ldr	r3, [r3, #0]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	2000015c 	.word	0x2000015c

08000cf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cf8:	f7ff ffee 	bl	8000cd8 <HAL_GetTick>
 8000cfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d08:	d005      	beq.n	8000d16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <HAL_Delay+0x44>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	461a      	mov	r2, r3
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	4413      	add	r3, r2
 8000d14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d16:	bf00      	nop
 8000d18:	f7ff ffde 	bl	8000cd8 <HAL_GetTick>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	68fa      	ldr	r2, [r7, #12]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d8f7      	bhi.n	8000d18 <HAL_Delay+0x28>
  {
  }
}
 8000d28:	bf00      	nop
 8000d2a:	bf00      	nop
 8000d2c:	3710      	adds	r7, #16
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	2000000c 	.word	0x2000000c

08000d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d48:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <__NVIC_SetPriorityGrouping+0x40>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d54:	4013      	ands	r3, r2
 8000d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d62:	4313      	orrs	r3, r2
 8000d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d66:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <__NVIC_SetPriorityGrouping+0x40>)
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	60d3      	str	r3, [r2, #12]
}
 8000d6c:	bf00      	nop
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00
 8000d7c:	05fa0000 	.word	0x05fa0000

08000d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d84:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <__NVIC_GetPriorityGrouping+0x18>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	0a1b      	lsrs	r3, r3, #8
 8000d8a:	f003 0307 	and.w	r3, r3, #7
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	db0b      	blt.n	8000dc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	f003 021f 	and.w	r2, r3, #31
 8000db4:	4907      	ldr	r1, [pc, #28]	; (8000dd4 <__NVIC_EnableIRQ+0x38>)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	095b      	lsrs	r3, r3, #5
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000e100 	.word	0xe000e100

08000dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	6039      	str	r1, [r7, #0]
 8000de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	db0a      	blt.n	8000e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	490c      	ldr	r1, [pc, #48]	; (8000e24 <__NVIC_SetPriority+0x4c>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	0112      	lsls	r2, r2, #4
 8000df8:	b2d2      	uxtb	r2, r2
 8000dfa:	440b      	add	r3, r1
 8000dfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e00:	e00a      	b.n	8000e18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4908      	ldr	r1, [pc, #32]	; (8000e28 <__NVIC_SetPriority+0x50>)
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	f003 030f 	and.w	r3, r3, #15
 8000e0e:	3b04      	subs	r3, #4
 8000e10:	0112      	lsls	r2, r2, #4
 8000e12:	b2d2      	uxtb	r2, r2
 8000e14:	440b      	add	r3, r1
 8000e16:	761a      	strb	r2, [r3, #24]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000e100 	.word	0xe000e100
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b089      	sub	sp, #36	; 0x24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	f1c3 0307 	rsb	r3, r3, #7
 8000e46:	2b04      	cmp	r3, #4
 8000e48:	bf28      	it	cs
 8000e4a:	2304      	movcs	r3, #4
 8000e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3304      	adds	r3, #4
 8000e52:	2b06      	cmp	r3, #6
 8000e54:	d902      	bls.n	8000e5c <NVIC_EncodePriority+0x30>
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3b03      	subs	r3, #3
 8000e5a:	e000      	b.n	8000e5e <NVIC_EncodePriority+0x32>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	f04f 32ff 	mov.w	r2, #4294967295
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43da      	mvns	r2, r3
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	401a      	ands	r2, r3
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e74:	f04f 31ff 	mov.w	r1, #4294967295
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7e:	43d9      	mvns	r1, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	4313      	orrs	r3, r2
         );
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3724      	adds	r7, #36	; 0x24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
	...

08000e94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ea4:	d301      	bcc.n	8000eaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e00f      	b.n	8000eca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <SysTick_Config+0x40>)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eb2:	210f      	movs	r1, #15
 8000eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb8:	f7ff ff8e 	bl	8000dd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ebc:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <SysTick_Config+0x40>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ec2:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <SysTick_Config+0x40>)
 8000ec4:	2207      	movs	r2, #7
 8000ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	e000e010 	.word	0xe000e010

08000ed8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f7ff ff29 	bl	8000d38 <__NVIC_SetPriorityGrouping>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b086      	sub	sp, #24
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	60b9      	str	r1, [r7, #8]
 8000ef8:	607a      	str	r2, [r7, #4]
 8000efa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f00:	f7ff ff3e 	bl	8000d80 <__NVIC_GetPriorityGrouping>
 8000f04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	68b9      	ldr	r1, [r7, #8]
 8000f0a:	6978      	ldr	r0, [r7, #20]
 8000f0c:	f7ff ff8e 	bl	8000e2c <NVIC_EncodePriority>
 8000f10:	4602      	mov	r2, r0
 8000f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f16:	4611      	mov	r1, r2
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ff5d 	bl	8000dd8 <__NVIC_SetPriority>
}
 8000f1e:	bf00      	nop
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ff31 	bl	8000d9c <__NVIC_EnableIRQ>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f7ff ffa2 	bl	8000e94 <SysTick_Config>
 8000f50:	4603      	mov	r3, r0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	; 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
 8000f7a:	e175      	b.n	8001268 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	697a      	ldr	r2, [r7, #20]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	f040 8164 	bne.w	8001262 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d005      	beq.n	8000fb2 <HAL_GPIO_Init+0x56>
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 0303 	and.w	r3, r3, #3
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d130      	bne.n	8001014 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	68da      	ldr	r2, [r3, #12]
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fe8:	2201      	movs	r2, #1
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	091b      	lsrs	r3, r3, #4
 8000ffe:	f003 0201 	and.w	r2, r3, #1
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 0303 	and.w	r3, r3, #3
 800101c:	2b03      	cmp	r3, #3
 800101e:	d017      	beq.n	8001050 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	2203      	movs	r2, #3
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d123      	bne.n	80010a4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	08da      	lsrs	r2, r3, #3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3208      	adds	r2, #8
 8001064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	f003 0307 	and.w	r3, r3, #7
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	220f      	movs	r2, #15
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	691a      	ldr	r2, [r3, #16]
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	08da      	lsrs	r2, r3, #3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3208      	adds	r2, #8
 800109e:	69b9      	ldr	r1, [r7, #24]
 80010a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	2203      	movs	r2, #3
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 0203 	and.w	r2, r3, #3
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	f000 80be 	beq.w	8001262 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e6:	4b66      	ldr	r3, [pc, #408]	; (8001280 <HAL_GPIO_Init+0x324>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	4a65      	ldr	r2, [pc, #404]	; (8001280 <HAL_GPIO_Init+0x324>)
 80010ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f0:	6453      	str	r3, [r2, #68]	; 0x44
 80010f2:	4b63      	ldr	r3, [pc, #396]	; (8001280 <HAL_GPIO_Init+0x324>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80010fe:	4a61      	ldr	r2, [pc, #388]	; (8001284 <HAL_GPIO_Init+0x328>)
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	089b      	lsrs	r3, r3, #2
 8001104:	3302      	adds	r3, #2
 8001106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	f003 0303 	and.w	r3, r3, #3
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	220f      	movs	r2, #15
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4013      	ands	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a58      	ldr	r2, [pc, #352]	; (8001288 <HAL_GPIO_Init+0x32c>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d037      	beq.n	800119a <HAL_GPIO_Init+0x23e>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a57      	ldr	r2, [pc, #348]	; (800128c <HAL_GPIO_Init+0x330>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d031      	beq.n	8001196 <HAL_GPIO_Init+0x23a>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a56      	ldr	r2, [pc, #344]	; (8001290 <HAL_GPIO_Init+0x334>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d02b      	beq.n	8001192 <HAL_GPIO_Init+0x236>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a55      	ldr	r2, [pc, #340]	; (8001294 <HAL_GPIO_Init+0x338>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d025      	beq.n	800118e <HAL_GPIO_Init+0x232>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a54      	ldr	r2, [pc, #336]	; (8001298 <HAL_GPIO_Init+0x33c>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d01f      	beq.n	800118a <HAL_GPIO_Init+0x22e>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a53      	ldr	r2, [pc, #332]	; (800129c <HAL_GPIO_Init+0x340>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d019      	beq.n	8001186 <HAL_GPIO_Init+0x22a>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a52      	ldr	r2, [pc, #328]	; (80012a0 <HAL_GPIO_Init+0x344>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d013      	beq.n	8001182 <HAL_GPIO_Init+0x226>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a51      	ldr	r2, [pc, #324]	; (80012a4 <HAL_GPIO_Init+0x348>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d00d      	beq.n	800117e <HAL_GPIO_Init+0x222>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a50      	ldr	r2, [pc, #320]	; (80012a8 <HAL_GPIO_Init+0x34c>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d007      	beq.n	800117a <HAL_GPIO_Init+0x21e>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a4f      	ldr	r2, [pc, #316]	; (80012ac <HAL_GPIO_Init+0x350>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d101      	bne.n	8001176 <HAL_GPIO_Init+0x21a>
 8001172:	2309      	movs	r3, #9
 8001174:	e012      	b.n	800119c <HAL_GPIO_Init+0x240>
 8001176:	230a      	movs	r3, #10
 8001178:	e010      	b.n	800119c <HAL_GPIO_Init+0x240>
 800117a:	2308      	movs	r3, #8
 800117c:	e00e      	b.n	800119c <HAL_GPIO_Init+0x240>
 800117e:	2307      	movs	r3, #7
 8001180:	e00c      	b.n	800119c <HAL_GPIO_Init+0x240>
 8001182:	2306      	movs	r3, #6
 8001184:	e00a      	b.n	800119c <HAL_GPIO_Init+0x240>
 8001186:	2305      	movs	r3, #5
 8001188:	e008      	b.n	800119c <HAL_GPIO_Init+0x240>
 800118a:	2304      	movs	r3, #4
 800118c:	e006      	b.n	800119c <HAL_GPIO_Init+0x240>
 800118e:	2303      	movs	r3, #3
 8001190:	e004      	b.n	800119c <HAL_GPIO_Init+0x240>
 8001192:	2302      	movs	r3, #2
 8001194:	e002      	b.n	800119c <HAL_GPIO_Init+0x240>
 8001196:	2301      	movs	r3, #1
 8001198:	e000      	b.n	800119c <HAL_GPIO_Init+0x240>
 800119a:	2300      	movs	r3, #0
 800119c:	69fa      	ldr	r2, [r7, #28]
 800119e:	f002 0203 	and.w	r2, r2, #3
 80011a2:	0092      	lsls	r2, r2, #2
 80011a4:	4093      	lsls	r3, r2
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80011ac:	4935      	ldr	r1, [pc, #212]	; (8001284 <HAL_GPIO_Init+0x328>)
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	089b      	lsrs	r3, r3, #2
 80011b2:	3302      	adds	r3, #2
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ba:	4b3d      	ldr	r3, [pc, #244]	; (80012b0 <HAL_GPIO_Init+0x354>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	43db      	mvns	r3, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4013      	ands	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011de:	4a34      	ldr	r2, [pc, #208]	; (80012b0 <HAL_GPIO_Init+0x354>)
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011e4:	4b32      	ldr	r3, [pc, #200]	; (80012b0 <HAL_GPIO_Init+0x354>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001208:	4a29      	ldr	r2, [pc, #164]	; (80012b0 <HAL_GPIO_Init+0x354>)
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800120e:	4b28      	ldr	r3, [pc, #160]	; (80012b0 <HAL_GPIO_Init+0x354>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	43db      	mvns	r3, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4013      	ands	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001232:	4a1f      	ldr	r2, [pc, #124]	; (80012b0 <HAL_GPIO_Init+0x354>)
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001238:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <HAL_GPIO_Init+0x354>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	43db      	mvns	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d003      	beq.n	800125c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	4313      	orrs	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800125c:	4a14      	ldr	r2, [pc, #80]	; (80012b0 <HAL_GPIO_Init+0x354>)
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3301      	adds	r3, #1
 8001266:	61fb      	str	r3, [r7, #28]
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	2b0f      	cmp	r3, #15
 800126c:	f67f ae86 	bls.w	8000f7c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001270:	bf00      	nop
 8001272:	bf00      	nop
 8001274:	3724      	adds	r7, #36	; 0x24
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	40023800 	.word	0x40023800
 8001284:	40013800 	.word	0x40013800
 8001288:	40020000 	.word	0x40020000
 800128c:	40020400 	.word	0x40020400
 8001290:	40020800 	.word	0x40020800
 8001294:	40020c00 	.word	0x40020c00
 8001298:	40021000 	.word	0x40021000
 800129c:	40021400 	.word	0x40021400
 80012a0:	40021800 	.word	0x40021800
 80012a4:	40021c00 	.word	0x40021c00
 80012a8:	40022000 	.word	0x40022000
 80012ac:	40022400 	.word	0x40022400
 80012b0:	40013c00 	.word	0x40013c00

080012b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	691a      	ldr	r2, [r3, #16]
 80012c4:	887b      	ldrh	r3, [r7, #2]
 80012c6:	4013      	ands	r3, r2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d002      	beq.n	80012d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012cc:	2301      	movs	r3, #1
 80012ce:	73fb      	strb	r3, [r7, #15]
 80012d0:	e001      	b.n	80012d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012d2:	2300      	movs	r3, #0
 80012d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	807b      	strh	r3, [r7, #2]
 80012f0:	4613      	mov	r3, r2
 80012f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012f4:	787b      	ldrb	r3, [r7, #1]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012fa:	887a      	ldrh	r2, [r7, #2]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001300:	e003      	b.n	800130a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001302:	887b      	ldrh	r3, [r7, #2]
 8001304:	041a      	lsls	r2, r3, #16
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	619a      	str	r2, [r3, #24]
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
	...

08001318 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001322:	4b23      	ldr	r3, [pc, #140]	; (80013b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	4a22      	ldr	r2, [pc, #136]	; (80013b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800132c:	6413      	str	r3, [r2, #64]	; 0x40
 800132e:	4b20      	ldr	r3, [pc, #128]	; (80013b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001336:	603b      	str	r3, [r7, #0]
 8001338:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800133a:	4b1e      	ldr	r3, [pc, #120]	; (80013b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a1d      	ldr	r2, [pc, #116]	; (80013b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001344:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001346:	f7ff fcc7 	bl	8000cd8 <HAL_GetTick>
 800134a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800134c:	e009      	b.n	8001362 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800134e:	f7ff fcc3 	bl	8000cd8 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800135c:	d901      	bls.n	8001362 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e022      	b.n	80013a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001362:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800136a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800136e:	d1ee      	bne.n	800134e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001370:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a0f      	ldr	r2, [pc, #60]	; (80013b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001376:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800137a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800137c:	f7ff fcac 	bl	8000cd8 <HAL_GetTick>
 8001380:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001382:	e009      	b.n	8001398 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001384:	f7ff fca8 	bl	8000cd8 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001392:	d901      	bls.n	8001398 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e007      	b.n	80013a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80013a4:	d1ee      	bne.n	8001384 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40007000 	.word	0x40007000

080013b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80013c0:	2300      	movs	r3, #0
 80013c2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e29b      	b.n	8001906 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 8087 	beq.w	80014ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013dc:	4b96      	ldr	r3, [pc, #600]	; (8001638 <HAL_RCC_OscConfig+0x280>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f003 030c 	and.w	r3, r3, #12
 80013e4:	2b04      	cmp	r3, #4
 80013e6:	d00c      	beq.n	8001402 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013e8:	4b93      	ldr	r3, [pc, #588]	; (8001638 <HAL_RCC_OscConfig+0x280>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f003 030c 	and.w	r3, r3, #12
 80013f0:	2b08      	cmp	r3, #8
 80013f2:	d112      	bne.n	800141a <HAL_RCC_OscConfig+0x62>
 80013f4:	4b90      	ldr	r3, [pc, #576]	; (8001638 <HAL_RCC_OscConfig+0x280>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001400:	d10b      	bne.n	800141a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001402:	4b8d      	ldr	r3, [pc, #564]	; (8001638 <HAL_RCC_OscConfig+0x280>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d06c      	beq.n	80014e8 <HAL_RCC_OscConfig+0x130>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d168      	bne.n	80014e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e275      	b.n	8001906 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001422:	d106      	bne.n	8001432 <HAL_RCC_OscConfig+0x7a>
 8001424:	4b84      	ldr	r3, [pc, #528]	; (8001638 <HAL_RCC_OscConfig+0x280>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a83      	ldr	r2, [pc, #524]	; (8001638 <HAL_RCC_OscConfig+0x280>)
 800142a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800142e:	6013      	str	r3, [r2, #0]
 8001430:	e02e      	b.n	8001490 <HAL_RCC_OscConfig+0xd8>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d10c      	bne.n	8001454 <HAL_RCC_OscConfig+0x9c>
 800143a:	4b7f      	ldr	r3, [pc, #508]	; (8001638 <HAL_RCC_OscConfig+0x280>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a7e      	ldr	r2, [pc, #504]	; (8001638 <HAL_RCC_OscConfig+0x280>)
 8001440:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	4b7c      	ldr	r3, [pc, #496]	; (8001638 <HAL_RCC_OscConfig+0x280>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a7b      	ldr	r2, [pc, #492]	; (8001638 <HAL_RCC_OscConfig+0x280>)
 800144c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	e01d      	b.n	8001490 <HAL_RCC_OscConfig+0xd8>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800145c:	d10c      	bne.n	8001478 <HAL_RCC_OscConfig+0xc0>
 800145e:	4b76      	ldr	r3, [pc, #472]	; (8001638 <HAL_RCC_OscConfig+0x280>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a75      	ldr	r2, [pc, #468]	; (8001638 <HAL_RCC_OscConfig+0x280>)
 8001464:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	4b73      	ldr	r3, [pc, #460]	; (8001638 <HAL_RCC_OscConfig+0x280>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a72      	ldr	r2, [pc, #456]	; (8001638 <HAL_RCC_OscConfig+0x280>)
 8001470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	e00b      	b.n	8001490 <HAL_RCC_OscConfig+0xd8>
 8001478:	4b6f      	ldr	r3, [pc, #444]	; (8001638 <HAL_RCC_OscConfig+0x280>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a6e      	ldr	r2, [pc, #440]	; (8001638 <HAL_RCC_OscConfig+0x280>)
 800147e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	4b6c      	ldr	r3, [pc, #432]	; (8001638 <HAL_RCC_OscConfig+0x280>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a6b      	ldr	r2, [pc, #428]	; (8001638 <HAL_RCC_OscConfig+0x280>)
 800148a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800148e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d013      	beq.n	80014c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001498:	f7ff fc1e 	bl	8000cd8 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a0:	f7ff fc1a 	bl	8000cd8 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b64      	cmp	r3, #100	; 0x64
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e229      	b.n	8001906 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b2:	4b61      	ldr	r3, [pc, #388]	; (8001638 <HAL_RCC_OscConfig+0x280>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f0      	beq.n	80014a0 <HAL_RCC_OscConfig+0xe8>
 80014be:	e014      	b.n	80014ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c0:	f7ff fc0a 	bl	8000cd8 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c8:	f7ff fc06 	bl	8000cd8 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b64      	cmp	r3, #100	; 0x64
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e215      	b.n	8001906 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014da:	4b57      	ldr	r3, [pc, #348]	; (8001638 <HAL_RCC_OscConfig+0x280>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f0      	bne.n	80014c8 <HAL_RCC_OscConfig+0x110>
 80014e6:	e000      	b.n	80014ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d069      	beq.n	80015ca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014f6:	4b50      	ldr	r3, [pc, #320]	; (8001638 <HAL_RCC_OscConfig+0x280>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 030c 	and.w	r3, r3, #12
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d00b      	beq.n	800151a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001502:	4b4d      	ldr	r3, [pc, #308]	; (8001638 <HAL_RCC_OscConfig+0x280>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 030c 	and.w	r3, r3, #12
 800150a:	2b08      	cmp	r3, #8
 800150c:	d11c      	bne.n	8001548 <HAL_RCC_OscConfig+0x190>
 800150e:	4b4a      	ldr	r3, [pc, #296]	; (8001638 <HAL_RCC_OscConfig+0x280>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d116      	bne.n	8001548 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800151a:	4b47      	ldr	r3, [pc, #284]	; (8001638 <HAL_RCC_OscConfig+0x280>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d005      	beq.n	8001532 <HAL_RCC_OscConfig+0x17a>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d001      	beq.n	8001532 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e1e9      	b.n	8001906 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001532:	4b41      	ldr	r3, [pc, #260]	; (8001638 <HAL_RCC_OscConfig+0x280>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	493d      	ldr	r1, [pc, #244]	; (8001638 <HAL_RCC_OscConfig+0x280>)
 8001542:	4313      	orrs	r3, r2
 8001544:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001546:	e040      	b.n	80015ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d023      	beq.n	8001598 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001550:	4b39      	ldr	r3, [pc, #228]	; (8001638 <HAL_RCC_OscConfig+0x280>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a38      	ldr	r2, [pc, #224]	; (8001638 <HAL_RCC_OscConfig+0x280>)
 8001556:	f043 0301 	orr.w	r3, r3, #1
 800155a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155c:	f7ff fbbc 	bl	8000cd8 <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001564:	f7ff fbb8 	bl	8000cd8 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e1c7      	b.n	8001906 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001576:	4b30      	ldr	r3, [pc, #192]	; (8001638 <HAL_RCC_OscConfig+0x280>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d0f0      	beq.n	8001564 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001582:	4b2d      	ldr	r3, [pc, #180]	; (8001638 <HAL_RCC_OscConfig+0x280>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	4929      	ldr	r1, [pc, #164]	; (8001638 <HAL_RCC_OscConfig+0x280>)
 8001592:	4313      	orrs	r3, r2
 8001594:	600b      	str	r3, [r1, #0]
 8001596:	e018      	b.n	80015ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001598:	4b27      	ldr	r3, [pc, #156]	; (8001638 <HAL_RCC_OscConfig+0x280>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a26      	ldr	r2, [pc, #152]	; (8001638 <HAL_RCC_OscConfig+0x280>)
 800159e:	f023 0301 	bic.w	r3, r3, #1
 80015a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a4:	f7ff fb98 	bl	8000cd8 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ac:	f7ff fb94 	bl	8000cd8 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e1a3      	b.n	8001906 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015be:	4b1e      	ldr	r3, [pc, #120]	; (8001638 <HAL_RCC_OscConfig+0x280>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f0      	bne.n	80015ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0308 	and.w	r3, r3, #8
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d038      	beq.n	8001648 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d019      	beq.n	8001612 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015de:	4b16      	ldr	r3, [pc, #88]	; (8001638 <HAL_RCC_OscConfig+0x280>)
 80015e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015e2:	4a15      	ldr	r2, [pc, #84]	; (8001638 <HAL_RCC_OscConfig+0x280>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ea:	f7ff fb75 	bl	8000cd8 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015f2:	f7ff fb71 	bl	8000cd8 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e180      	b.n	8001906 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <HAL_RCC_OscConfig+0x280>)
 8001606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0f0      	beq.n	80015f2 <HAL_RCC_OscConfig+0x23a>
 8001610:	e01a      	b.n	8001648 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001612:	4b09      	ldr	r3, [pc, #36]	; (8001638 <HAL_RCC_OscConfig+0x280>)
 8001614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001616:	4a08      	ldr	r2, [pc, #32]	; (8001638 <HAL_RCC_OscConfig+0x280>)
 8001618:	f023 0301 	bic.w	r3, r3, #1
 800161c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161e:	f7ff fb5b 	bl	8000cd8 <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001624:	e00a      	b.n	800163c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001626:	f7ff fb57 	bl	8000cd8 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d903      	bls.n	800163c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e166      	b.n	8001906 <HAL_RCC_OscConfig+0x54e>
 8001638:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800163c:	4b92      	ldr	r3, [pc, #584]	; (8001888 <HAL_RCC_OscConfig+0x4d0>)
 800163e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d1ee      	bne.n	8001626 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	2b00      	cmp	r3, #0
 8001652:	f000 80a4 	beq.w	800179e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001656:	4b8c      	ldr	r3, [pc, #560]	; (8001888 <HAL_RCC_OscConfig+0x4d0>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d10d      	bne.n	800167e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001662:	4b89      	ldr	r3, [pc, #548]	; (8001888 <HAL_RCC_OscConfig+0x4d0>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	4a88      	ldr	r2, [pc, #544]	; (8001888 <HAL_RCC_OscConfig+0x4d0>)
 8001668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800166c:	6413      	str	r3, [r2, #64]	; 0x40
 800166e:	4b86      	ldr	r3, [pc, #536]	; (8001888 <HAL_RCC_OscConfig+0x4d0>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800167a:	2301      	movs	r3, #1
 800167c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800167e:	4b83      	ldr	r3, [pc, #524]	; (800188c <HAL_RCC_OscConfig+0x4d4>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001686:	2b00      	cmp	r3, #0
 8001688:	d118      	bne.n	80016bc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800168a:	4b80      	ldr	r3, [pc, #512]	; (800188c <HAL_RCC_OscConfig+0x4d4>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a7f      	ldr	r2, [pc, #508]	; (800188c <HAL_RCC_OscConfig+0x4d4>)
 8001690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001694:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001696:	f7ff fb1f 	bl	8000cd8 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800169e:	f7ff fb1b 	bl	8000cd8 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b64      	cmp	r3, #100	; 0x64
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e12a      	b.n	8001906 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016b0:	4b76      	ldr	r3, [pc, #472]	; (800188c <HAL_RCC_OscConfig+0x4d4>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f0      	beq.n	800169e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d106      	bne.n	80016d2 <HAL_RCC_OscConfig+0x31a>
 80016c4:	4b70      	ldr	r3, [pc, #448]	; (8001888 <HAL_RCC_OscConfig+0x4d0>)
 80016c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c8:	4a6f      	ldr	r2, [pc, #444]	; (8001888 <HAL_RCC_OscConfig+0x4d0>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	6713      	str	r3, [r2, #112]	; 0x70
 80016d0:	e02d      	b.n	800172e <HAL_RCC_OscConfig+0x376>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d10c      	bne.n	80016f4 <HAL_RCC_OscConfig+0x33c>
 80016da:	4b6b      	ldr	r3, [pc, #428]	; (8001888 <HAL_RCC_OscConfig+0x4d0>)
 80016dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016de:	4a6a      	ldr	r2, [pc, #424]	; (8001888 <HAL_RCC_OscConfig+0x4d0>)
 80016e0:	f023 0301 	bic.w	r3, r3, #1
 80016e4:	6713      	str	r3, [r2, #112]	; 0x70
 80016e6:	4b68      	ldr	r3, [pc, #416]	; (8001888 <HAL_RCC_OscConfig+0x4d0>)
 80016e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ea:	4a67      	ldr	r2, [pc, #412]	; (8001888 <HAL_RCC_OscConfig+0x4d0>)
 80016ec:	f023 0304 	bic.w	r3, r3, #4
 80016f0:	6713      	str	r3, [r2, #112]	; 0x70
 80016f2:	e01c      	b.n	800172e <HAL_RCC_OscConfig+0x376>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	2b05      	cmp	r3, #5
 80016fa:	d10c      	bne.n	8001716 <HAL_RCC_OscConfig+0x35e>
 80016fc:	4b62      	ldr	r3, [pc, #392]	; (8001888 <HAL_RCC_OscConfig+0x4d0>)
 80016fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001700:	4a61      	ldr	r2, [pc, #388]	; (8001888 <HAL_RCC_OscConfig+0x4d0>)
 8001702:	f043 0304 	orr.w	r3, r3, #4
 8001706:	6713      	str	r3, [r2, #112]	; 0x70
 8001708:	4b5f      	ldr	r3, [pc, #380]	; (8001888 <HAL_RCC_OscConfig+0x4d0>)
 800170a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800170c:	4a5e      	ldr	r2, [pc, #376]	; (8001888 <HAL_RCC_OscConfig+0x4d0>)
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	6713      	str	r3, [r2, #112]	; 0x70
 8001714:	e00b      	b.n	800172e <HAL_RCC_OscConfig+0x376>
 8001716:	4b5c      	ldr	r3, [pc, #368]	; (8001888 <HAL_RCC_OscConfig+0x4d0>)
 8001718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171a:	4a5b      	ldr	r2, [pc, #364]	; (8001888 <HAL_RCC_OscConfig+0x4d0>)
 800171c:	f023 0301 	bic.w	r3, r3, #1
 8001720:	6713      	str	r3, [r2, #112]	; 0x70
 8001722:	4b59      	ldr	r3, [pc, #356]	; (8001888 <HAL_RCC_OscConfig+0x4d0>)
 8001724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001726:	4a58      	ldr	r2, [pc, #352]	; (8001888 <HAL_RCC_OscConfig+0x4d0>)
 8001728:	f023 0304 	bic.w	r3, r3, #4
 800172c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d015      	beq.n	8001762 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001736:	f7ff facf 	bl	8000cd8 <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800173c:	e00a      	b.n	8001754 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800173e:	f7ff facb 	bl	8000cd8 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	f241 3288 	movw	r2, #5000	; 0x1388
 800174c:	4293      	cmp	r3, r2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e0d8      	b.n	8001906 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001754:	4b4c      	ldr	r3, [pc, #304]	; (8001888 <HAL_RCC_OscConfig+0x4d0>)
 8001756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0ee      	beq.n	800173e <HAL_RCC_OscConfig+0x386>
 8001760:	e014      	b.n	800178c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001762:	f7ff fab9 	bl	8000cd8 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001768:	e00a      	b.n	8001780 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800176a:	f7ff fab5 	bl	8000cd8 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	f241 3288 	movw	r2, #5000	; 0x1388
 8001778:	4293      	cmp	r3, r2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e0c2      	b.n	8001906 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001780:	4b41      	ldr	r3, [pc, #260]	; (8001888 <HAL_RCC_OscConfig+0x4d0>)
 8001782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1ee      	bne.n	800176a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800178c:	7dfb      	ldrb	r3, [r7, #23]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d105      	bne.n	800179e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001792:	4b3d      	ldr	r3, [pc, #244]	; (8001888 <HAL_RCC_OscConfig+0x4d0>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	4a3c      	ldr	r2, [pc, #240]	; (8001888 <HAL_RCC_OscConfig+0x4d0>)
 8001798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800179c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f000 80ae 	beq.w	8001904 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017a8:	4b37      	ldr	r3, [pc, #220]	; (8001888 <HAL_RCC_OscConfig+0x4d0>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f003 030c 	and.w	r3, r3, #12
 80017b0:	2b08      	cmp	r3, #8
 80017b2:	d06d      	beq.n	8001890 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d14b      	bne.n	8001854 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017bc:	4b32      	ldr	r3, [pc, #200]	; (8001888 <HAL_RCC_OscConfig+0x4d0>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a31      	ldr	r2, [pc, #196]	; (8001888 <HAL_RCC_OscConfig+0x4d0>)
 80017c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c8:	f7ff fa86 	bl	8000cd8 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d0:	f7ff fa82 	bl	8000cd8 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e091      	b.n	8001906 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e2:	4b29      	ldr	r3, [pc, #164]	; (8001888 <HAL_RCC_OscConfig+0x4d0>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1f0      	bne.n	80017d0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69da      	ldr	r2, [r3, #28]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	431a      	orrs	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fc:	019b      	lsls	r3, r3, #6
 80017fe:	431a      	orrs	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001804:	085b      	lsrs	r3, r3, #1
 8001806:	3b01      	subs	r3, #1
 8001808:	041b      	lsls	r3, r3, #16
 800180a:	431a      	orrs	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001810:	061b      	lsls	r3, r3, #24
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001818:	071b      	lsls	r3, r3, #28
 800181a:	491b      	ldr	r1, [pc, #108]	; (8001888 <HAL_RCC_OscConfig+0x4d0>)
 800181c:	4313      	orrs	r3, r2
 800181e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001820:	4b19      	ldr	r3, [pc, #100]	; (8001888 <HAL_RCC_OscConfig+0x4d0>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a18      	ldr	r2, [pc, #96]	; (8001888 <HAL_RCC_OscConfig+0x4d0>)
 8001826:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800182a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800182c:	f7ff fa54 	bl	8000cd8 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001834:	f7ff fa50 	bl	8000cd8 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e05f      	b.n	8001906 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001846:	4b10      	ldr	r3, [pc, #64]	; (8001888 <HAL_RCC_OscConfig+0x4d0>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0f0      	beq.n	8001834 <HAL_RCC_OscConfig+0x47c>
 8001852:	e057      	b.n	8001904 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <HAL_RCC_OscConfig+0x4d0>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a0b      	ldr	r2, [pc, #44]	; (8001888 <HAL_RCC_OscConfig+0x4d0>)
 800185a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800185e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001860:	f7ff fa3a 	bl	8000cd8 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001868:	f7ff fa36 	bl	8000cd8 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e045      	b.n	8001906 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800187a:	4b03      	ldr	r3, [pc, #12]	; (8001888 <HAL_RCC_OscConfig+0x4d0>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x4b0>
 8001886:	e03d      	b.n	8001904 <HAL_RCC_OscConfig+0x54c>
 8001888:	40023800 	.word	0x40023800
 800188c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001890:	4b1f      	ldr	r3, [pc, #124]	; (8001910 <HAL_RCC_OscConfig+0x558>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d030      	beq.n	8001900 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d129      	bne.n	8001900 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d122      	bne.n	8001900 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018c0:	4013      	ands	r3, r2
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018c6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d119      	bne.n	8001900 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d6:	085b      	lsrs	r3, r3, #1
 80018d8:	3b01      	subs	r3, #1
 80018da:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018dc:	429a      	cmp	r2, r3
 80018de:	d10f      	bne.n	8001900 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d107      	bne.n	8001900 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d001      	beq.n	8001904 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e000      	b.n	8001906 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800

08001914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e0d0      	b.n	8001ace <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800192c:	4b6a      	ldr	r3, [pc, #424]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 030f 	and.w	r3, r3, #15
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	429a      	cmp	r2, r3
 8001938:	d910      	bls.n	800195c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193a:	4b67      	ldr	r3, [pc, #412]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f023 020f 	bic.w	r2, r3, #15
 8001942:	4965      	ldr	r1, [pc, #404]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	4313      	orrs	r3, r2
 8001948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800194a:	4b63      	ldr	r3, [pc, #396]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	d001      	beq.n	800195c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e0b8      	b.n	8001ace <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d020      	beq.n	80019aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	2b00      	cmp	r3, #0
 8001972:	d005      	beq.n	8001980 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001974:	4b59      	ldr	r3, [pc, #356]	; (8001adc <HAL_RCC_ClockConfig+0x1c8>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	4a58      	ldr	r2, [pc, #352]	; (8001adc <HAL_RCC_ClockConfig+0x1c8>)
 800197a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800197e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0308 	and.w	r3, r3, #8
 8001988:	2b00      	cmp	r3, #0
 800198a:	d005      	beq.n	8001998 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800198c:	4b53      	ldr	r3, [pc, #332]	; (8001adc <HAL_RCC_ClockConfig+0x1c8>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	4a52      	ldr	r2, [pc, #328]	; (8001adc <HAL_RCC_ClockConfig+0x1c8>)
 8001992:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001996:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001998:	4b50      	ldr	r3, [pc, #320]	; (8001adc <HAL_RCC_ClockConfig+0x1c8>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	494d      	ldr	r1, [pc, #308]	; (8001adc <HAL_RCC_ClockConfig+0x1c8>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d040      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d107      	bne.n	80019ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019be:	4b47      	ldr	r3, [pc, #284]	; (8001adc <HAL_RCC_ClockConfig+0x1c8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d115      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e07f      	b.n	8001ace <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d107      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d6:	4b41      	ldr	r3, [pc, #260]	; (8001adc <HAL_RCC_ClockConfig+0x1c8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d109      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e073      	b.n	8001ace <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e6:	4b3d      	ldr	r3, [pc, #244]	; (8001adc <HAL_RCC_ClockConfig+0x1c8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e06b      	b.n	8001ace <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019f6:	4b39      	ldr	r3, [pc, #228]	; (8001adc <HAL_RCC_ClockConfig+0x1c8>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f023 0203 	bic.w	r2, r3, #3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	4936      	ldr	r1, [pc, #216]	; (8001adc <HAL_RCC_ClockConfig+0x1c8>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a08:	f7ff f966 	bl	8000cd8 <HAL_GetTick>
 8001a0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0e:	e00a      	b.n	8001a26 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a10:	f7ff f962 	bl	8000cd8 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e053      	b.n	8001ace <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a26:	4b2d      	ldr	r3, [pc, #180]	; (8001adc <HAL_RCC_ClockConfig+0x1c8>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 020c 	and.w	r2, r3, #12
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d1eb      	bne.n	8001a10 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a38:	4b27      	ldr	r3, [pc, #156]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 030f 	and.w	r3, r3, #15
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d210      	bcs.n	8001a68 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a46:	4b24      	ldr	r3, [pc, #144]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f023 020f 	bic.w	r2, r3, #15
 8001a4e:	4922      	ldr	r1, [pc, #136]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a56:	4b20      	ldr	r3, [pc, #128]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d001      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e032      	b.n	8001ace <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d008      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a74:	4b19      	ldr	r3, [pc, #100]	; (8001adc <HAL_RCC_ClockConfig+0x1c8>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	4916      	ldr	r1, [pc, #88]	; (8001adc <HAL_RCC_ClockConfig+0x1c8>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d009      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a92:	4b12      	ldr	r3, [pc, #72]	; (8001adc <HAL_RCC_ClockConfig+0x1c8>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	490e      	ldr	r1, [pc, #56]	; (8001adc <HAL_RCC_ClockConfig+0x1c8>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001aa6:	f000 f821 	bl	8001aec <HAL_RCC_GetSysClockFreq>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <HAL_RCC_ClockConfig+0x1c8>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	091b      	lsrs	r3, r3, #4
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	490a      	ldr	r1, [pc, #40]	; (8001ae0 <HAL_RCC_ClockConfig+0x1cc>)
 8001ab8:	5ccb      	ldrb	r3, [r1, r3]
 8001aba:	fa22 f303 	lsr.w	r3, r2, r3
 8001abe:	4a09      	ldr	r2, [pc, #36]	; (8001ae4 <HAL_RCC_ClockConfig+0x1d0>)
 8001ac0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ac2:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <HAL_RCC_ClockConfig+0x1d4>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff f8c2 	bl	8000c50 <HAL_InitTick>

  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40023c00 	.word	0x40023c00
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	08004128 	.word	0x08004128
 8001ae4:	20000004 	.word	0x20000004
 8001ae8:	20000008 	.word	0x20000008

08001aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001af0:	b090      	sub	sp, #64	; 0x40
 8001af2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	637b      	str	r3, [r7, #52]	; 0x34
 8001af8:	2300      	movs	r3, #0
 8001afa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001afc:	2300      	movs	r3, #0
 8001afe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b04:	4b59      	ldr	r3, [pc, #356]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x180>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 030c 	and.w	r3, r3, #12
 8001b0c:	2b08      	cmp	r3, #8
 8001b0e:	d00d      	beq.n	8001b2c <HAL_RCC_GetSysClockFreq+0x40>
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	f200 80a1 	bhi.w	8001c58 <HAL_RCC_GetSysClockFreq+0x16c>
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d002      	beq.n	8001b20 <HAL_RCC_GetSysClockFreq+0x34>
 8001b1a:	2b04      	cmp	r3, #4
 8001b1c:	d003      	beq.n	8001b26 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b1e:	e09b      	b.n	8001c58 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b20:	4b53      	ldr	r3, [pc, #332]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b22:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b24:	e09b      	b.n	8001c5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b26:	4b53      	ldr	r3, [pc, #332]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b28:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b2a:	e098      	b.n	8001c5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b2c:	4b4f      	ldr	r3, [pc, #316]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x180>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b34:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001b36:	4b4d      	ldr	r3, [pc, #308]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x180>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d028      	beq.n	8001b94 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b42:	4b4a      	ldr	r3, [pc, #296]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x180>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	099b      	lsrs	r3, r3, #6
 8001b48:	2200      	movs	r2, #0
 8001b4a:	623b      	str	r3, [r7, #32]
 8001b4c:	627a      	str	r2, [r7, #36]	; 0x24
 8001b4e:	6a3b      	ldr	r3, [r7, #32]
 8001b50:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b54:	2100      	movs	r1, #0
 8001b56:	4b47      	ldr	r3, [pc, #284]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b58:	fb03 f201 	mul.w	r2, r3, r1
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	fb00 f303 	mul.w	r3, r0, r3
 8001b62:	4413      	add	r3, r2
 8001b64:	4a43      	ldr	r2, [pc, #268]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b66:	fba0 1202 	umull	r1, r2, r0, r2
 8001b6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b6c:	460a      	mov	r2, r1
 8001b6e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001b70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b72:	4413      	add	r3, r2
 8001b74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b78:	2200      	movs	r2, #0
 8001b7a:	61bb      	str	r3, [r7, #24]
 8001b7c:	61fa      	str	r2, [r7, #28]
 8001b7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b82:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b86:	f7fe fbb3 	bl	80002f0 <__aeabi_uldivmod>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	4613      	mov	r3, r2
 8001b90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b92:	e053      	b.n	8001c3c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b94:	4b35      	ldr	r3, [pc, #212]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x180>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	099b      	lsrs	r3, r3, #6
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	613b      	str	r3, [r7, #16]
 8001b9e:	617a      	str	r2, [r7, #20]
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001ba6:	f04f 0b00 	mov.w	fp, #0
 8001baa:	4652      	mov	r2, sl
 8001bac:	465b      	mov	r3, fp
 8001bae:	f04f 0000 	mov.w	r0, #0
 8001bb2:	f04f 0100 	mov.w	r1, #0
 8001bb6:	0159      	lsls	r1, r3, #5
 8001bb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bbc:	0150      	lsls	r0, r2, #5
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	ebb2 080a 	subs.w	r8, r2, sl
 8001bc6:	eb63 090b 	sbc.w	r9, r3, fp
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	f04f 0300 	mov.w	r3, #0
 8001bd2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001bd6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001bda:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001bde:	ebb2 0408 	subs.w	r4, r2, r8
 8001be2:	eb63 0509 	sbc.w	r5, r3, r9
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	f04f 0300 	mov.w	r3, #0
 8001bee:	00eb      	lsls	r3, r5, #3
 8001bf0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bf4:	00e2      	lsls	r2, r4, #3
 8001bf6:	4614      	mov	r4, r2
 8001bf8:	461d      	mov	r5, r3
 8001bfa:	eb14 030a 	adds.w	r3, r4, sl
 8001bfe:	603b      	str	r3, [r7, #0]
 8001c00:	eb45 030b 	adc.w	r3, r5, fp
 8001c04:	607b      	str	r3, [r7, #4]
 8001c06:	f04f 0200 	mov.w	r2, #0
 8001c0a:	f04f 0300 	mov.w	r3, #0
 8001c0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c12:	4629      	mov	r1, r5
 8001c14:	028b      	lsls	r3, r1, #10
 8001c16:	4621      	mov	r1, r4
 8001c18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c1c:	4621      	mov	r1, r4
 8001c1e:	028a      	lsls	r2, r1, #10
 8001c20:	4610      	mov	r0, r2
 8001c22:	4619      	mov	r1, r3
 8001c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c26:	2200      	movs	r2, #0
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	60fa      	str	r2, [r7, #12]
 8001c2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c30:	f7fe fb5e 	bl	80002f0 <__aeabi_uldivmod>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	4613      	mov	r3, r2
 8001c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x180>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	0c1b      	lsrs	r3, r3, #16
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	3301      	adds	r3, #1
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001c4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c54:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c56:	e002      	b.n	8001c5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c58:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c5a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3740      	adds	r7, #64	; 0x40
 8001c64:	46bd      	mov	sp, r7
 8001c66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	00f42400 	.word	0x00f42400
 8001c74:	017d7840 	.word	0x017d7840

08001c78 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c7c:	4b03      	ldr	r3, [pc, #12]	; (8001c8c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	20000004 	.word	0x20000004

08001c90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c94:	f7ff fff0 	bl	8001c78 <HAL_RCC_GetHCLKFreq>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	0a9b      	lsrs	r3, r3, #10
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	4903      	ldr	r1, [pc, #12]	; (8001cb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ca6:	5ccb      	ldrb	r3, [r1, r3]
 8001ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	08004138 	.word	0x08004138

08001cb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cbc:	f7ff ffdc 	bl	8001c78 <HAL_RCC_GetHCLKFreq>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	0b5b      	lsrs	r3, r3, #13
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	4903      	ldr	r1, [pc, #12]	; (8001cdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cce:	5ccb      	ldrb	r3, [r1, r3]
 8001cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	08004138 	.word	0x08004138

08001ce0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b088      	sub	sp, #32
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d012      	beq.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001d08:	4b69      	ldr	r3, [pc, #420]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	4a68      	ldr	r2, [pc, #416]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d0e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d12:	6093      	str	r3, [r2, #8]
 8001d14:	4b66      	ldr	r3, [pc, #408]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d1c:	4964      	ldr	r1, [pc, #400]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d017      	beq.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d3a:	4b5d      	ldr	r3, [pc, #372]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d48:	4959      	ldr	r1, [pc, #356]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d58:	d101      	bne.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001d66:	2301      	movs	r3, #1
 8001d68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d017      	beq.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d76:	4b4e      	ldr	r3, [pc, #312]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	494a      	ldr	r1, [pc, #296]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d94:	d101      	bne.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001d96:	2301      	movs	r3, #1
 8001d98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001da2:	2301      	movs	r3, #1
 8001da4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001db2:	2301      	movs	r3, #1
 8001db4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0320 	and.w	r3, r3, #32
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 808b 	beq.w	8001eda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001dc4:	4b3a      	ldr	r3, [pc, #232]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	4a39      	ldr	r2, [pc, #228]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dce:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd0:	4b37      	ldr	r3, [pc, #220]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ddc:	4b35      	ldr	r3, [pc, #212]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a34      	ldr	r2, [pc, #208]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001de8:	f7fe ff76 	bl	8000cd8 <HAL_GetTick>
 8001dec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df0:	f7fe ff72 	bl	8000cd8 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b64      	cmp	r3, #100	; 0x64
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e38f      	b.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e02:	4b2c      	ldr	r3, [pc, #176]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0f0      	beq.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e0e:	4b28      	ldr	r3, [pc, #160]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e16:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d035      	beq.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d02e      	beq.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e2c:	4b20      	ldr	r3, [pc, #128]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e34:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e36:	4b1e      	ldr	r3, [pc, #120]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e3a:	4a1d      	ldr	r2, [pc, #116]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e40:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e42:	4b1b      	ldr	r3, [pc, #108]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e46:	4a1a      	ldr	r2, [pc, #104]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e4c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001e4e:	4a18      	ldr	r2, [pc, #96]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e54:	4b16      	ldr	r3, [pc, #88]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d114      	bne.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e60:	f7fe ff3a 	bl	8000cd8 <HAL_GetTick>
 8001e64:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e66:	e00a      	b.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e68:	f7fe ff36 	bl	8000cd8 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e351      	b.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e7e:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0ee      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001e96:	d111      	bne.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001e98:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ea4:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001ea6:	400b      	ands	r3, r1
 8001ea8:	4901      	ldr	r1, [pc, #4]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	608b      	str	r3, [r1, #8]
 8001eae:	e00b      	b.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40007000 	.word	0x40007000
 8001eb8:	0ffffcff 	.word	0x0ffffcff
 8001ebc:	4bac      	ldr	r3, [pc, #688]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	4aab      	ldr	r2, [pc, #684]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ec2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001ec6:	6093      	str	r3, [r2, #8]
 8001ec8:	4ba9      	ldr	r3, [pc, #676]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed4:	49a6      	ldr	r1, [pc, #664]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0310 	and.w	r3, r3, #16
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d010      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001ee6:	4ba2      	ldr	r3, [pc, #648]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ee8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001eec:	4aa0      	ldr	r2, [pc, #640]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ef2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001ef6:	4b9e      	ldr	r3, [pc, #632]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ef8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f00:	499b      	ldr	r1, [pc, #620]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00a      	beq.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f14:	4b96      	ldr	r3, [pc, #600]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f1a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f22:	4993      	ldr	r1, [pc, #588]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00a      	beq.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f36:	4b8e      	ldr	r3, [pc, #568]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f44:	498a      	ldr	r1, [pc, #552]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00a      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f58:	4b85      	ldr	r3, [pc, #532]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f66:	4982      	ldr	r1, [pc, #520]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00a      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001f7a:	4b7d      	ldr	r3, [pc, #500]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f88:	4979      	ldr	r1, [pc, #484]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00a      	beq.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f9c:	4b74      	ldr	r3, [pc, #464]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa2:	f023 0203 	bic.w	r2, r3, #3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	4971      	ldr	r1, [pc, #452]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00a      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fbe:	4b6c      	ldr	r3, [pc, #432]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc4:	f023 020c 	bic.w	r2, r3, #12
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fcc:	4968      	ldr	r1, [pc, #416]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00a      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001fe0:	4b63      	ldr	r3, [pc, #396]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fee:	4960      	ldr	r1, [pc, #384]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00a      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002002:	4b5b      	ldr	r3, [pc, #364]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002008:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002010:	4957      	ldr	r1, [pc, #348]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002012:	4313      	orrs	r3, r2
 8002014:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00a      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002024:	4b52      	ldr	r3, [pc, #328]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800202a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002032:	494f      	ldr	r1, [pc, #316]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002034:	4313      	orrs	r3, r2
 8002036:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00a      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002046:	4b4a      	ldr	r3, [pc, #296]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800204c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002054:	4946      	ldr	r1, [pc, #280]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002056:	4313      	orrs	r3, r2
 8002058:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00a      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002068:	4b41      	ldr	r3, [pc, #260]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800206a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002076:	493e      	ldr	r1, [pc, #248]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002078:	4313      	orrs	r3, r2
 800207a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00a      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800208a:	4b39      	ldr	r3, [pc, #228]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800208c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002090:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002098:	4935      	ldr	r1, [pc, #212]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800209a:	4313      	orrs	r3, r2
 800209c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00a      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80020ac:	4b30      	ldr	r3, [pc, #192]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020ba:	492d      	ldr	r1, [pc, #180]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d011      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80020ce:	4b28      	ldr	r3, [pc, #160]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020dc:	4924      	ldr	r1, [pc, #144]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020ec:	d101      	bne.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80020ee:	2301      	movs	r3, #1
 80020f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0308 	and.w	r3, r3, #8
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80020fe:	2301      	movs	r3, #1
 8002100:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00a      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800210e:	4b18      	ldr	r3, [pc, #96]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002114:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800211c:	4914      	ldr	r1, [pc, #80]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800211e:	4313      	orrs	r3, r2
 8002120:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00b      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002130:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002136:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002140:	490b      	ldr	r1, [pc, #44]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002142:	4313      	orrs	r3, r2
 8002144:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00f      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002154:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800215a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002164:	4902      	ldr	r1, [pc, #8]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002166:	4313      	orrs	r3, r2
 8002168:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800216c:	e002      	b.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800216e:	bf00      	nop
 8002170:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00b      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002180:	4b8a      	ldr	r3, [pc, #552]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002182:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002186:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002190:	4986      	ldr	r1, [pc, #536]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002192:	4313      	orrs	r3, r2
 8002194:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00b      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80021a4:	4b81      	ldr	r3, [pc, #516]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021aa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021b4:	497d      	ldr	r1, [pc, #500]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d006      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f000 80d6 	beq.w	800237c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80021d0:	4b76      	ldr	r3, [pc, #472]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a75      	ldr	r2, [pc, #468]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80021da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021dc:	f7fe fd7c 	bl	8000cd8 <HAL_GetTick>
 80021e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80021e2:	e008      	b.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80021e4:	f7fe fd78 	bl	8000cd8 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b64      	cmp	r3, #100	; 0x64
 80021f0:	d901      	bls.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e195      	b.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80021f6:	4b6d      	ldr	r3, [pc, #436]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f0      	bne.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d021      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002212:	2b00      	cmp	r3, #0
 8002214:	d11d      	bne.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002216:	4b65      	ldr	r3, [pc, #404]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800221c:	0c1b      	lsrs	r3, r3, #16
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002224:	4b61      	ldr	r3, [pc, #388]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002226:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800222a:	0e1b      	lsrs	r3, r3, #24
 800222c:	f003 030f 	and.w	r3, r3, #15
 8002230:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	019a      	lsls	r2, r3, #6
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	041b      	lsls	r3, r3, #16
 800223c:	431a      	orrs	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	061b      	lsls	r3, r3, #24
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	071b      	lsls	r3, r3, #28
 800224a:	4958      	ldr	r1, [pc, #352]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800224c:	4313      	orrs	r3, r2
 800224e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d004      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002262:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002266:	d00a      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002270:	2b00      	cmp	r3, #0
 8002272:	d02e      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800227c:	d129      	bne.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800227e:	4b4b      	ldr	r3, [pc, #300]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002280:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002284:	0c1b      	lsrs	r3, r3, #16
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800228c:	4b47      	ldr	r3, [pc, #284]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800228e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002292:	0f1b      	lsrs	r3, r3, #28
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	019a      	lsls	r2, r3, #6
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	041b      	lsls	r3, r3, #16
 80022a4:	431a      	orrs	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	061b      	lsls	r3, r3, #24
 80022ac:	431a      	orrs	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	071b      	lsls	r3, r3, #28
 80022b2:	493e      	ldr	r1, [pc, #248]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80022ba:	4b3c      	ldr	r3, [pc, #240]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022c0:	f023 021f 	bic.w	r2, r3, #31
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	3b01      	subs	r3, #1
 80022ca:	4938      	ldr	r1, [pc, #224]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d01d      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80022de:	4b33      	ldr	r3, [pc, #204]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022e4:	0e1b      	lsrs	r3, r3, #24
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80022ec:	4b2f      	ldr	r3, [pc, #188]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022f2:	0f1b      	lsrs	r3, r3, #28
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	019a      	lsls	r2, r3, #6
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	041b      	lsls	r3, r3, #16
 8002306:	431a      	orrs	r2, r3
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	061b      	lsls	r3, r3, #24
 800230c:	431a      	orrs	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	071b      	lsls	r3, r3, #28
 8002312:	4926      	ldr	r1, [pc, #152]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002314:	4313      	orrs	r3, r2
 8002316:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d011      	beq.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	019a      	lsls	r2, r3, #6
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	041b      	lsls	r3, r3, #16
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	061b      	lsls	r3, r3, #24
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	071b      	lsls	r3, r3, #28
 8002342:	491a      	ldr	r1, [pc, #104]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002344:	4313      	orrs	r3, r2
 8002346:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800234a:	4b18      	ldr	r3, [pc, #96]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a17      	ldr	r2, [pc, #92]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002350:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002354:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002356:	f7fe fcbf 	bl	8000cd8 <HAL_GetTick>
 800235a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800235c:	e008      	b.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800235e:	f7fe fcbb 	bl	8000cd8 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b64      	cmp	r3, #100	; 0x64
 800236a:	d901      	bls.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e0d8      	b.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002370:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0f0      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	2b01      	cmp	r3, #1
 8002380:	f040 80ce 	bne.w	8002520 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002384:	4b09      	ldr	r3, [pc, #36]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a08      	ldr	r2, [pc, #32]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800238a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800238e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002390:	f7fe fca2 	bl	8000cd8 <HAL_GetTick>
 8002394:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002396:	e00b      	b.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002398:	f7fe fc9e 	bl	8000cd8 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b64      	cmp	r3, #100	; 0x64
 80023a4:	d904      	bls.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e0bb      	b.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80023aa:	bf00      	nop
 80023ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80023b0:	4b5e      	ldr	r3, [pc, #376]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023bc:	d0ec      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d009      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d02e      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d12a      	bne.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80023e6:	4b51      	ldr	r3, [pc, #324]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ec:	0c1b      	lsrs	r3, r3, #16
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80023f4:	4b4d      	ldr	r3, [pc, #308]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fa:	0f1b      	lsrs	r3, r3, #28
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	019a      	lsls	r2, r3, #6
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	041b      	lsls	r3, r3, #16
 800240c:	431a      	orrs	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	061b      	lsls	r3, r3, #24
 8002414:	431a      	orrs	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	071b      	lsls	r3, r3, #28
 800241a:	4944      	ldr	r1, [pc, #272]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800241c:	4313      	orrs	r3, r2
 800241e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002422:	4b42      	ldr	r3, [pc, #264]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002424:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002428:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002430:	3b01      	subs	r3, #1
 8002432:	021b      	lsls	r3, r3, #8
 8002434:	493d      	ldr	r1, [pc, #244]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002436:	4313      	orrs	r3, r2
 8002438:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d022      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800244c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002450:	d11d      	bne.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002452:	4b36      	ldr	r3, [pc, #216]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002458:	0e1b      	lsrs	r3, r3, #24
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002460:	4b32      	ldr	r3, [pc, #200]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002466:	0f1b      	lsrs	r3, r3, #28
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	019a      	lsls	r2, r3, #6
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	041b      	lsls	r3, r3, #16
 800247a:	431a      	orrs	r2, r3
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	061b      	lsls	r3, r3, #24
 8002480:	431a      	orrs	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	071b      	lsls	r3, r3, #28
 8002486:	4929      	ldr	r1, [pc, #164]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002488:	4313      	orrs	r3, r2
 800248a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	2b00      	cmp	r3, #0
 8002498:	d028      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800249a:	4b24      	ldr	r3, [pc, #144]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800249c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a0:	0e1b      	lsrs	r3, r3, #24
 80024a2:	f003 030f 	and.w	r3, r3, #15
 80024a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80024a8:	4b20      	ldr	r3, [pc, #128]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ae:	0c1b      	lsrs	r3, r3, #16
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	019a      	lsls	r2, r3, #6
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	041b      	lsls	r3, r3, #16
 80024c0:	431a      	orrs	r2, r3
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	061b      	lsls	r3, r3, #24
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	071b      	lsls	r3, r3, #28
 80024ce:	4917      	ldr	r1, [pc, #92]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80024d6:	4b15      	ldr	r3, [pc, #84]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e4:	4911      	ldr	r1, [pc, #68]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80024ec:	4b0f      	ldr	r3, [pc, #60]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a0e      	ldr	r2, [pc, #56]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024f8:	f7fe fbee 	bl	8000cd8 <HAL_GetTick>
 80024fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002500:	f7fe fbea 	bl	8000cd8 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b64      	cmp	r3, #100	; 0x64
 800250c:	d901      	bls.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e007      	b.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002512:	4b06      	ldr	r3, [pc, #24]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800251a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800251e:	d1ef      	bne.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3720      	adds	r7, #32
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40023800 	.word	0x40023800

08002530 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e049      	b.n	80025d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d106      	bne.n	800255c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7fe fa90 	bl	8000a7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2202      	movs	r2, #2
 8002560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3304      	adds	r3, #4
 800256c:	4619      	mov	r1, r3
 800256e:	4610      	mov	r0, r2
 8002570:	f000 fa50 	bl	8002a14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d122      	bne.n	800263a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d11b      	bne.n	800263a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f06f 0202 	mvn.w	r2, #2
 800260a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	f003 0303 	and.w	r3, r3, #3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 f9d9 	bl	80029d8 <HAL_TIM_IC_CaptureCallback>
 8002626:	e005      	b.n	8002634 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 f9cb 	bl	80029c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f9dc 	bl	80029ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b04      	cmp	r3, #4
 8002646:	d122      	bne.n	800268e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	f003 0304 	and.w	r3, r3, #4
 8002652:	2b04      	cmp	r3, #4
 8002654:	d11b      	bne.n	800268e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f06f 0204 	mvn.w	r2, #4
 800265e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2202      	movs	r2, #2
 8002664:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002670:	2b00      	cmp	r3, #0
 8002672:	d003      	beq.n	800267c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 f9af 	bl	80029d8 <HAL_TIM_IC_CaptureCallback>
 800267a:	e005      	b.n	8002688 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 f9a1 	bl	80029c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f9b2 	bl	80029ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	f003 0308 	and.w	r3, r3, #8
 8002698:	2b08      	cmp	r3, #8
 800269a:	d122      	bne.n	80026e2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	2b08      	cmp	r3, #8
 80026a8:	d11b      	bne.n	80026e2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f06f 0208 	mvn.w	r2, #8
 80026b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2204      	movs	r2, #4
 80026b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	f003 0303 	and.w	r3, r3, #3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 f985 	bl	80029d8 <HAL_TIM_IC_CaptureCallback>
 80026ce:	e005      	b.n	80026dc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 f977 	bl	80029c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f988 	bl	80029ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	f003 0310 	and.w	r3, r3, #16
 80026ec:	2b10      	cmp	r3, #16
 80026ee:	d122      	bne.n	8002736 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	f003 0310 	and.w	r3, r3, #16
 80026fa:	2b10      	cmp	r3, #16
 80026fc:	d11b      	bne.n	8002736 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f06f 0210 	mvn.w	r2, #16
 8002706:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2208      	movs	r2, #8
 800270c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 f95b 	bl	80029d8 <HAL_TIM_IC_CaptureCallback>
 8002722:	e005      	b.n	8002730 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 f94d 	bl	80029c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f95e 	bl	80029ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b01      	cmp	r3, #1
 8002742:	d10e      	bne.n	8002762 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b01      	cmp	r3, #1
 8002750:	d107      	bne.n	8002762 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f06f 0201 	mvn.w	r2, #1
 800275a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 f927 	bl	80029b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800276c:	2b80      	cmp	r3, #128	; 0x80
 800276e:	d10e      	bne.n	800278e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277a:	2b80      	cmp	r3, #128	; 0x80
 800277c:	d107      	bne.n	800278e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002786:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 fb15 	bl	8002db8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002798:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800279c:	d10e      	bne.n	80027bc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a8:	2b80      	cmp	r3, #128	; 0x80
 80027aa:	d107      	bne.n	80027bc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80027b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 fb08 	bl	8002dcc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c6:	2b40      	cmp	r3, #64	; 0x40
 80027c8:	d10e      	bne.n	80027e8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d4:	2b40      	cmp	r3, #64	; 0x40
 80027d6:	d107      	bne.n	80027e8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f90c 	bl	8002a00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	f003 0320 	and.w	r3, r3, #32
 80027f2:	2b20      	cmp	r3, #32
 80027f4:	d10e      	bne.n	8002814 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	f003 0320 	and.w	r3, r3, #32
 8002800:	2b20      	cmp	r3, #32
 8002802:	d107      	bne.n	8002814 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f06f 0220 	mvn.w	r2, #32
 800280c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 fac8 	bl	8002da4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002814:	bf00      	nop
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002826:	2300      	movs	r3, #0
 8002828:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002830:	2b01      	cmp	r3, #1
 8002832:	d101      	bne.n	8002838 <HAL_TIM_ConfigClockSource+0x1c>
 8002834:	2302      	movs	r3, #2
 8002836:	e0b4      	b.n	80029a2 <HAL_TIM_ConfigClockSource+0x186>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2202      	movs	r2, #2
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	4b56      	ldr	r3, [pc, #344]	; (80029ac <HAL_TIM_ConfigClockSource+0x190>)
 8002854:	4013      	ands	r3, r2
 8002856:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800285e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002870:	d03e      	beq.n	80028f0 <HAL_TIM_ConfigClockSource+0xd4>
 8002872:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002876:	f200 8087 	bhi.w	8002988 <HAL_TIM_ConfigClockSource+0x16c>
 800287a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800287e:	f000 8086 	beq.w	800298e <HAL_TIM_ConfigClockSource+0x172>
 8002882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002886:	d87f      	bhi.n	8002988 <HAL_TIM_ConfigClockSource+0x16c>
 8002888:	2b70      	cmp	r3, #112	; 0x70
 800288a:	d01a      	beq.n	80028c2 <HAL_TIM_ConfigClockSource+0xa6>
 800288c:	2b70      	cmp	r3, #112	; 0x70
 800288e:	d87b      	bhi.n	8002988 <HAL_TIM_ConfigClockSource+0x16c>
 8002890:	2b60      	cmp	r3, #96	; 0x60
 8002892:	d050      	beq.n	8002936 <HAL_TIM_ConfigClockSource+0x11a>
 8002894:	2b60      	cmp	r3, #96	; 0x60
 8002896:	d877      	bhi.n	8002988 <HAL_TIM_ConfigClockSource+0x16c>
 8002898:	2b50      	cmp	r3, #80	; 0x50
 800289a:	d03c      	beq.n	8002916 <HAL_TIM_ConfigClockSource+0xfa>
 800289c:	2b50      	cmp	r3, #80	; 0x50
 800289e:	d873      	bhi.n	8002988 <HAL_TIM_ConfigClockSource+0x16c>
 80028a0:	2b40      	cmp	r3, #64	; 0x40
 80028a2:	d058      	beq.n	8002956 <HAL_TIM_ConfigClockSource+0x13a>
 80028a4:	2b40      	cmp	r3, #64	; 0x40
 80028a6:	d86f      	bhi.n	8002988 <HAL_TIM_ConfigClockSource+0x16c>
 80028a8:	2b30      	cmp	r3, #48	; 0x30
 80028aa:	d064      	beq.n	8002976 <HAL_TIM_ConfigClockSource+0x15a>
 80028ac:	2b30      	cmp	r3, #48	; 0x30
 80028ae:	d86b      	bhi.n	8002988 <HAL_TIM_ConfigClockSource+0x16c>
 80028b0:	2b20      	cmp	r3, #32
 80028b2:	d060      	beq.n	8002976 <HAL_TIM_ConfigClockSource+0x15a>
 80028b4:	2b20      	cmp	r3, #32
 80028b6:	d867      	bhi.n	8002988 <HAL_TIM_ConfigClockSource+0x16c>
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d05c      	beq.n	8002976 <HAL_TIM_ConfigClockSource+0x15a>
 80028bc:	2b10      	cmp	r3, #16
 80028be:	d05a      	beq.n	8002976 <HAL_TIM_ConfigClockSource+0x15a>
 80028c0:	e062      	b.n	8002988 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028d2:	f000 f9b9 	bl	8002c48 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	609a      	str	r2, [r3, #8]
      break;
 80028ee:	e04f      	b.n	8002990 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002900:	f000 f9a2 	bl	8002c48 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002912:	609a      	str	r2, [r3, #8]
      break;
 8002914:	e03c      	b.n	8002990 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002922:	461a      	mov	r2, r3
 8002924:	f000 f916 	bl	8002b54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2150      	movs	r1, #80	; 0x50
 800292e:	4618      	mov	r0, r3
 8002930:	f000 f96f 	bl	8002c12 <TIM_ITRx_SetConfig>
      break;
 8002934:	e02c      	b.n	8002990 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002942:	461a      	mov	r2, r3
 8002944:	f000 f935 	bl	8002bb2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2160      	movs	r1, #96	; 0x60
 800294e:	4618      	mov	r0, r3
 8002950:	f000 f95f 	bl	8002c12 <TIM_ITRx_SetConfig>
      break;
 8002954:	e01c      	b.n	8002990 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002962:	461a      	mov	r2, r3
 8002964:	f000 f8f6 	bl	8002b54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2140      	movs	r1, #64	; 0x40
 800296e:	4618      	mov	r0, r3
 8002970:	f000 f94f 	bl	8002c12 <TIM_ITRx_SetConfig>
      break;
 8002974:	e00c      	b.n	8002990 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4619      	mov	r1, r3
 8002980:	4610      	mov	r0, r2
 8002982:	f000 f946 	bl	8002c12 <TIM_ITRx_SetConfig>
      break;
 8002986:	e003      	b.n	8002990 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	73fb      	strb	r3, [r7, #15]
      break;
 800298c:	e000      	b.n	8002990 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800298e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	fffeff88 	.word	0xfffeff88

080029b0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a40      	ldr	r2, [pc, #256]	; (8002b28 <TIM_Base_SetConfig+0x114>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d013      	beq.n	8002a54 <TIM_Base_SetConfig+0x40>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a32:	d00f      	beq.n	8002a54 <TIM_Base_SetConfig+0x40>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a3d      	ldr	r2, [pc, #244]	; (8002b2c <TIM_Base_SetConfig+0x118>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d00b      	beq.n	8002a54 <TIM_Base_SetConfig+0x40>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a3c      	ldr	r2, [pc, #240]	; (8002b30 <TIM_Base_SetConfig+0x11c>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d007      	beq.n	8002a54 <TIM_Base_SetConfig+0x40>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a3b      	ldr	r2, [pc, #236]	; (8002b34 <TIM_Base_SetConfig+0x120>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d003      	beq.n	8002a54 <TIM_Base_SetConfig+0x40>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a3a      	ldr	r2, [pc, #232]	; (8002b38 <TIM_Base_SetConfig+0x124>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d108      	bne.n	8002a66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a2f      	ldr	r2, [pc, #188]	; (8002b28 <TIM_Base_SetConfig+0x114>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d02b      	beq.n	8002ac6 <TIM_Base_SetConfig+0xb2>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a74:	d027      	beq.n	8002ac6 <TIM_Base_SetConfig+0xb2>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a2c      	ldr	r2, [pc, #176]	; (8002b2c <TIM_Base_SetConfig+0x118>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d023      	beq.n	8002ac6 <TIM_Base_SetConfig+0xb2>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a2b      	ldr	r2, [pc, #172]	; (8002b30 <TIM_Base_SetConfig+0x11c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d01f      	beq.n	8002ac6 <TIM_Base_SetConfig+0xb2>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a2a      	ldr	r2, [pc, #168]	; (8002b34 <TIM_Base_SetConfig+0x120>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d01b      	beq.n	8002ac6 <TIM_Base_SetConfig+0xb2>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a29      	ldr	r2, [pc, #164]	; (8002b38 <TIM_Base_SetConfig+0x124>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d017      	beq.n	8002ac6 <TIM_Base_SetConfig+0xb2>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a28      	ldr	r2, [pc, #160]	; (8002b3c <TIM_Base_SetConfig+0x128>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d013      	beq.n	8002ac6 <TIM_Base_SetConfig+0xb2>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a27      	ldr	r2, [pc, #156]	; (8002b40 <TIM_Base_SetConfig+0x12c>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d00f      	beq.n	8002ac6 <TIM_Base_SetConfig+0xb2>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a26      	ldr	r2, [pc, #152]	; (8002b44 <TIM_Base_SetConfig+0x130>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d00b      	beq.n	8002ac6 <TIM_Base_SetConfig+0xb2>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a25      	ldr	r2, [pc, #148]	; (8002b48 <TIM_Base_SetConfig+0x134>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d007      	beq.n	8002ac6 <TIM_Base_SetConfig+0xb2>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a24      	ldr	r2, [pc, #144]	; (8002b4c <TIM_Base_SetConfig+0x138>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d003      	beq.n	8002ac6 <TIM_Base_SetConfig+0xb2>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a23      	ldr	r2, [pc, #140]	; (8002b50 <TIM_Base_SetConfig+0x13c>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d108      	bne.n	8002ad8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002acc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a0a      	ldr	r2, [pc, #40]	; (8002b28 <TIM_Base_SetConfig+0x114>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d003      	beq.n	8002b0c <TIM_Base_SetConfig+0xf8>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a0c      	ldr	r2, [pc, #48]	; (8002b38 <TIM_Base_SetConfig+0x124>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d103      	bne.n	8002b14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	691a      	ldr	r2, [r3, #16]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	615a      	str	r2, [r3, #20]
}
 8002b1a:	bf00      	nop
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40010000 	.word	0x40010000
 8002b2c:	40000400 	.word	0x40000400
 8002b30:	40000800 	.word	0x40000800
 8002b34:	40000c00 	.word	0x40000c00
 8002b38:	40010400 	.word	0x40010400
 8002b3c:	40014000 	.word	0x40014000
 8002b40:	40014400 	.word	0x40014400
 8002b44:	40014800 	.word	0x40014800
 8002b48:	40001800 	.word	0x40001800
 8002b4c:	40001c00 	.word	0x40001c00
 8002b50:	40002000 	.word	0x40002000

08002b54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b087      	sub	sp, #28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	f023 0201 	bic.w	r2, r3, #1
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	011b      	lsls	r3, r3, #4
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f023 030a 	bic.w	r3, r3, #10
 8002b90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	621a      	str	r2, [r3, #32]
}
 8002ba6:	bf00      	nop
 8002ba8:	371c      	adds	r7, #28
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b087      	sub	sp, #28
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	60f8      	str	r0, [r7, #12]
 8002bba:	60b9      	str	r1, [r7, #8]
 8002bbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	f023 0210 	bic.w	r2, r3, #16
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	031b      	lsls	r3, r3, #12
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002bee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	011b      	lsls	r3, r3, #4
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	621a      	str	r2, [r3, #32]
}
 8002c06:	bf00      	nop
 8002c08:	371c      	adds	r7, #28
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b085      	sub	sp, #20
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
 8002c1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f043 0307 	orr.w	r3, r3, #7
 8002c34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	609a      	str	r2, [r3, #8]
}
 8002c3c:	bf00      	nop
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b087      	sub	sp, #28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
 8002c54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	021a      	lsls	r2, r3, #8
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	609a      	str	r2, [r3, #8]
}
 8002c7c:	bf00      	nop
 8002c7e:	371c      	adds	r7, #28
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d101      	bne.n	8002ca0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	e06d      	b.n	8002d7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2202      	movs	r2, #2
 8002cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a30      	ldr	r2, [pc, #192]	; (8002d88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d004      	beq.n	8002cd4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a2f      	ldr	r2, [pc, #188]	; (8002d8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d108      	bne.n	8002ce6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002cda:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a20      	ldr	r2, [pc, #128]	; (8002d88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d022      	beq.n	8002d50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d12:	d01d      	beq.n	8002d50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a1d      	ldr	r2, [pc, #116]	; (8002d90 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d018      	beq.n	8002d50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a1c      	ldr	r2, [pc, #112]	; (8002d94 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d013      	beq.n	8002d50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a1a      	ldr	r2, [pc, #104]	; (8002d98 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d00e      	beq.n	8002d50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a15      	ldr	r2, [pc, #84]	; (8002d8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d009      	beq.n	8002d50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a16      	ldr	r2, [pc, #88]	; (8002d9c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d004      	beq.n	8002d50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a15      	ldr	r2, [pc, #84]	; (8002da0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d10c      	bne.n	8002d6a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3714      	adds	r7, #20
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	40010000 	.word	0x40010000
 8002d8c:	40010400 	.word	0x40010400
 8002d90:	40000400 	.word	0x40000400
 8002d94:	40000800 	.word	0x40000800
 8002d98:	40000c00 	.word	0x40000c00
 8002d9c:	40014000 	.word	0x40014000
 8002da0:	40001800 	.word	0x40001800

08002da4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e040      	b.n	8002e74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d106      	bne.n	8002e08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7fd fe8e 	bl	8000b24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2224      	movs	r2, #36	; 0x24
 8002e0c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0201 	bic.w	r2, r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f8b0 	bl	8002f84 <UART_SetConfig>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d101      	bne.n	8002e2e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e022      	b.n	8002e74 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d002      	beq.n	8002e3c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 fb08 	bl	800344c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0201 	orr.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 fb8f 	bl	8003590 <UART_CheckIdleState>
 8002e72:	4603      	mov	r3, r0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b08a      	sub	sp, #40	; 0x28
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e90:	2b20      	cmp	r3, #32
 8002e92:	d171      	bne.n	8002f78 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d002      	beq.n	8002ea0 <HAL_UART_Transmit+0x24>
 8002e9a:	88fb      	ldrh	r3, [r7, #6]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e06a      	b.n	8002f7a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2221      	movs	r2, #33	; 0x21
 8002eb0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eb2:	f7fd ff11 	bl	8000cd8 <HAL_GetTick>
 8002eb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	88fa      	ldrh	r2, [r7, #6]
 8002ebc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	88fa      	ldrh	r2, [r7, #6]
 8002ec4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed0:	d108      	bne.n	8002ee4 <HAL_UART_Transmit+0x68>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d104      	bne.n	8002ee4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002eda:	2300      	movs	r3, #0
 8002edc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	61bb      	str	r3, [r7, #24]
 8002ee2:	e003      	b.n	8002eec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002eec:	e02c      	b.n	8002f48 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	2180      	movs	r1, #128	; 0x80
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f000 fb96 	bl	800362a <UART_WaitOnFlagUntilTimeout>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e038      	b.n	8002f7a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10b      	bne.n	8002f26 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	881b      	ldrh	r3, [r3, #0]
 8002f12:	461a      	mov	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f1c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	3302      	adds	r3, #2
 8002f22:	61bb      	str	r3, [r7, #24]
 8002f24:	e007      	b.n	8002f36 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	781a      	ldrb	r2, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	3301      	adds	r3, #1
 8002f34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1cc      	bne.n	8002eee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	2140      	movs	r1, #64	; 0x40
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 fb63 	bl	800362a <UART_WaitOnFlagUntilTimeout>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e005      	b.n	8002f7a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2220      	movs	r2, #32
 8002f72:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002f74:	2300      	movs	r3, #0
 8002f76:	e000      	b.n	8002f7a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002f78:	2302      	movs	r3, #2
  }
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3720      	adds	r7, #32
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
	...

08002f84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b088      	sub	sp, #32
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	4ba6      	ldr	r3, [pc, #664]	; (8003248 <UART_SetConfig+0x2c4>)
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6812      	ldr	r2, [r2, #0]
 8002fb6:	6979      	ldr	r1, [r7, #20]
 8002fb8:	430b      	orrs	r3, r1
 8002fba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68da      	ldr	r2, [r3, #12]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a94      	ldr	r2, [pc, #592]	; (800324c <UART_SetConfig+0x2c8>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d120      	bne.n	8003042 <UART_SetConfig+0xbe>
 8003000:	4b93      	ldr	r3, [pc, #588]	; (8003250 <UART_SetConfig+0x2cc>)
 8003002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	2b03      	cmp	r3, #3
 800300c:	d816      	bhi.n	800303c <UART_SetConfig+0xb8>
 800300e:	a201      	add	r2, pc, #4	; (adr r2, 8003014 <UART_SetConfig+0x90>)
 8003010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003014:	08003025 	.word	0x08003025
 8003018:	08003031 	.word	0x08003031
 800301c:	0800302b 	.word	0x0800302b
 8003020:	08003037 	.word	0x08003037
 8003024:	2301      	movs	r3, #1
 8003026:	77fb      	strb	r3, [r7, #31]
 8003028:	e150      	b.n	80032cc <UART_SetConfig+0x348>
 800302a:	2302      	movs	r3, #2
 800302c:	77fb      	strb	r3, [r7, #31]
 800302e:	e14d      	b.n	80032cc <UART_SetConfig+0x348>
 8003030:	2304      	movs	r3, #4
 8003032:	77fb      	strb	r3, [r7, #31]
 8003034:	e14a      	b.n	80032cc <UART_SetConfig+0x348>
 8003036:	2308      	movs	r3, #8
 8003038:	77fb      	strb	r3, [r7, #31]
 800303a:	e147      	b.n	80032cc <UART_SetConfig+0x348>
 800303c:	2310      	movs	r3, #16
 800303e:	77fb      	strb	r3, [r7, #31]
 8003040:	e144      	b.n	80032cc <UART_SetConfig+0x348>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a83      	ldr	r2, [pc, #524]	; (8003254 <UART_SetConfig+0x2d0>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d132      	bne.n	80030b2 <UART_SetConfig+0x12e>
 800304c:	4b80      	ldr	r3, [pc, #512]	; (8003250 <UART_SetConfig+0x2cc>)
 800304e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003052:	f003 030c 	and.w	r3, r3, #12
 8003056:	2b0c      	cmp	r3, #12
 8003058:	d828      	bhi.n	80030ac <UART_SetConfig+0x128>
 800305a:	a201      	add	r2, pc, #4	; (adr r2, 8003060 <UART_SetConfig+0xdc>)
 800305c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003060:	08003095 	.word	0x08003095
 8003064:	080030ad 	.word	0x080030ad
 8003068:	080030ad 	.word	0x080030ad
 800306c:	080030ad 	.word	0x080030ad
 8003070:	080030a1 	.word	0x080030a1
 8003074:	080030ad 	.word	0x080030ad
 8003078:	080030ad 	.word	0x080030ad
 800307c:	080030ad 	.word	0x080030ad
 8003080:	0800309b 	.word	0x0800309b
 8003084:	080030ad 	.word	0x080030ad
 8003088:	080030ad 	.word	0x080030ad
 800308c:	080030ad 	.word	0x080030ad
 8003090:	080030a7 	.word	0x080030a7
 8003094:	2300      	movs	r3, #0
 8003096:	77fb      	strb	r3, [r7, #31]
 8003098:	e118      	b.n	80032cc <UART_SetConfig+0x348>
 800309a:	2302      	movs	r3, #2
 800309c:	77fb      	strb	r3, [r7, #31]
 800309e:	e115      	b.n	80032cc <UART_SetConfig+0x348>
 80030a0:	2304      	movs	r3, #4
 80030a2:	77fb      	strb	r3, [r7, #31]
 80030a4:	e112      	b.n	80032cc <UART_SetConfig+0x348>
 80030a6:	2308      	movs	r3, #8
 80030a8:	77fb      	strb	r3, [r7, #31]
 80030aa:	e10f      	b.n	80032cc <UART_SetConfig+0x348>
 80030ac:	2310      	movs	r3, #16
 80030ae:	77fb      	strb	r3, [r7, #31]
 80030b0:	e10c      	b.n	80032cc <UART_SetConfig+0x348>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a68      	ldr	r2, [pc, #416]	; (8003258 <UART_SetConfig+0x2d4>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d120      	bne.n	80030fe <UART_SetConfig+0x17a>
 80030bc:	4b64      	ldr	r3, [pc, #400]	; (8003250 <UART_SetConfig+0x2cc>)
 80030be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80030c6:	2b30      	cmp	r3, #48	; 0x30
 80030c8:	d013      	beq.n	80030f2 <UART_SetConfig+0x16e>
 80030ca:	2b30      	cmp	r3, #48	; 0x30
 80030cc:	d814      	bhi.n	80030f8 <UART_SetConfig+0x174>
 80030ce:	2b20      	cmp	r3, #32
 80030d0:	d009      	beq.n	80030e6 <UART_SetConfig+0x162>
 80030d2:	2b20      	cmp	r3, #32
 80030d4:	d810      	bhi.n	80030f8 <UART_SetConfig+0x174>
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d002      	beq.n	80030e0 <UART_SetConfig+0x15c>
 80030da:	2b10      	cmp	r3, #16
 80030dc:	d006      	beq.n	80030ec <UART_SetConfig+0x168>
 80030de:	e00b      	b.n	80030f8 <UART_SetConfig+0x174>
 80030e0:	2300      	movs	r3, #0
 80030e2:	77fb      	strb	r3, [r7, #31]
 80030e4:	e0f2      	b.n	80032cc <UART_SetConfig+0x348>
 80030e6:	2302      	movs	r3, #2
 80030e8:	77fb      	strb	r3, [r7, #31]
 80030ea:	e0ef      	b.n	80032cc <UART_SetConfig+0x348>
 80030ec:	2304      	movs	r3, #4
 80030ee:	77fb      	strb	r3, [r7, #31]
 80030f0:	e0ec      	b.n	80032cc <UART_SetConfig+0x348>
 80030f2:	2308      	movs	r3, #8
 80030f4:	77fb      	strb	r3, [r7, #31]
 80030f6:	e0e9      	b.n	80032cc <UART_SetConfig+0x348>
 80030f8:	2310      	movs	r3, #16
 80030fa:	77fb      	strb	r3, [r7, #31]
 80030fc:	e0e6      	b.n	80032cc <UART_SetConfig+0x348>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a56      	ldr	r2, [pc, #344]	; (800325c <UART_SetConfig+0x2d8>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d120      	bne.n	800314a <UART_SetConfig+0x1c6>
 8003108:	4b51      	ldr	r3, [pc, #324]	; (8003250 <UART_SetConfig+0x2cc>)
 800310a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003112:	2bc0      	cmp	r3, #192	; 0xc0
 8003114:	d013      	beq.n	800313e <UART_SetConfig+0x1ba>
 8003116:	2bc0      	cmp	r3, #192	; 0xc0
 8003118:	d814      	bhi.n	8003144 <UART_SetConfig+0x1c0>
 800311a:	2b80      	cmp	r3, #128	; 0x80
 800311c:	d009      	beq.n	8003132 <UART_SetConfig+0x1ae>
 800311e:	2b80      	cmp	r3, #128	; 0x80
 8003120:	d810      	bhi.n	8003144 <UART_SetConfig+0x1c0>
 8003122:	2b00      	cmp	r3, #0
 8003124:	d002      	beq.n	800312c <UART_SetConfig+0x1a8>
 8003126:	2b40      	cmp	r3, #64	; 0x40
 8003128:	d006      	beq.n	8003138 <UART_SetConfig+0x1b4>
 800312a:	e00b      	b.n	8003144 <UART_SetConfig+0x1c0>
 800312c:	2300      	movs	r3, #0
 800312e:	77fb      	strb	r3, [r7, #31]
 8003130:	e0cc      	b.n	80032cc <UART_SetConfig+0x348>
 8003132:	2302      	movs	r3, #2
 8003134:	77fb      	strb	r3, [r7, #31]
 8003136:	e0c9      	b.n	80032cc <UART_SetConfig+0x348>
 8003138:	2304      	movs	r3, #4
 800313a:	77fb      	strb	r3, [r7, #31]
 800313c:	e0c6      	b.n	80032cc <UART_SetConfig+0x348>
 800313e:	2308      	movs	r3, #8
 8003140:	77fb      	strb	r3, [r7, #31]
 8003142:	e0c3      	b.n	80032cc <UART_SetConfig+0x348>
 8003144:	2310      	movs	r3, #16
 8003146:	77fb      	strb	r3, [r7, #31]
 8003148:	e0c0      	b.n	80032cc <UART_SetConfig+0x348>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a44      	ldr	r2, [pc, #272]	; (8003260 <UART_SetConfig+0x2dc>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d125      	bne.n	80031a0 <UART_SetConfig+0x21c>
 8003154:	4b3e      	ldr	r3, [pc, #248]	; (8003250 <UART_SetConfig+0x2cc>)
 8003156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800315e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003162:	d017      	beq.n	8003194 <UART_SetConfig+0x210>
 8003164:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003168:	d817      	bhi.n	800319a <UART_SetConfig+0x216>
 800316a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800316e:	d00b      	beq.n	8003188 <UART_SetConfig+0x204>
 8003170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003174:	d811      	bhi.n	800319a <UART_SetConfig+0x216>
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <UART_SetConfig+0x1fe>
 800317a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800317e:	d006      	beq.n	800318e <UART_SetConfig+0x20a>
 8003180:	e00b      	b.n	800319a <UART_SetConfig+0x216>
 8003182:	2300      	movs	r3, #0
 8003184:	77fb      	strb	r3, [r7, #31]
 8003186:	e0a1      	b.n	80032cc <UART_SetConfig+0x348>
 8003188:	2302      	movs	r3, #2
 800318a:	77fb      	strb	r3, [r7, #31]
 800318c:	e09e      	b.n	80032cc <UART_SetConfig+0x348>
 800318e:	2304      	movs	r3, #4
 8003190:	77fb      	strb	r3, [r7, #31]
 8003192:	e09b      	b.n	80032cc <UART_SetConfig+0x348>
 8003194:	2308      	movs	r3, #8
 8003196:	77fb      	strb	r3, [r7, #31]
 8003198:	e098      	b.n	80032cc <UART_SetConfig+0x348>
 800319a:	2310      	movs	r3, #16
 800319c:	77fb      	strb	r3, [r7, #31]
 800319e:	e095      	b.n	80032cc <UART_SetConfig+0x348>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a2f      	ldr	r2, [pc, #188]	; (8003264 <UART_SetConfig+0x2e0>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d125      	bne.n	80031f6 <UART_SetConfig+0x272>
 80031aa:	4b29      	ldr	r3, [pc, #164]	; (8003250 <UART_SetConfig+0x2cc>)
 80031ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80031b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031b8:	d017      	beq.n	80031ea <UART_SetConfig+0x266>
 80031ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031be:	d817      	bhi.n	80031f0 <UART_SetConfig+0x26c>
 80031c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031c4:	d00b      	beq.n	80031de <UART_SetConfig+0x25a>
 80031c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031ca:	d811      	bhi.n	80031f0 <UART_SetConfig+0x26c>
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <UART_SetConfig+0x254>
 80031d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031d4:	d006      	beq.n	80031e4 <UART_SetConfig+0x260>
 80031d6:	e00b      	b.n	80031f0 <UART_SetConfig+0x26c>
 80031d8:	2301      	movs	r3, #1
 80031da:	77fb      	strb	r3, [r7, #31]
 80031dc:	e076      	b.n	80032cc <UART_SetConfig+0x348>
 80031de:	2302      	movs	r3, #2
 80031e0:	77fb      	strb	r3, [r7, #31]
 80031e2:	e073      	b.n	80032cc <UART_SetConfig+0x348>
 80031e4:	2304      	movs	r3, #4
 80031e6:	77fb      	strb	r3, [r7, #31]
 80031e8:	e070      	b.n	80032cc <UART_SetConfig+0x348>
 80031ea:	2308      	movs	r3, #8
 80031ec:	77fb      	strb	r3, [r7, #31]
 80031ee:	e06d      	b.n	80032cc <UART_SetConfig+0x348>
 80031f0:	2310      	movs	r3, #16
 80031f2:	77fb      	strb	r3, [r7, #31]
 80031f4:	e06a      	b.n	80032cc <UART_SetConfig+0x348>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a1b      	ldr	r2, [pc, #108]	; (8003268 <UART_SetConfig+0x2e4>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d138      	bne.n	8003272 <UART_SetConfig+0x2ee>
 8003200:	4b13      	ldr	r3, [pc, #76]	; (8003250 <UART_SetConfig+0x2cc>)
 8003202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003206:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800320a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800320e:	d017      	beq.n	8003240 <UART_SetConfig+0x2bc>
 8003210:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003214:	d82a      	bhi.n	800326c <UART_SetConfig+0x2e8>
 8003216:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800321a:	d00b      	beq.n	8003234 <UART_SetConfig+0x2b0>
 800321c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003220:	d824      	bhi.n	800326c <UART_SetConfig+0x2e8>
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <UART_SetConfig+0x2aa>
 8003226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800322a:	d006      	beq.n	800323a <UART_SetConfig+0x2b6>
 800322c:	e01e      	b.n	800326c <UART_SetConfig+0x2e8>
 800322e:	2300      	movs	r3, #0
 8003230:	77fb      	strb	r3, [r7, #31]
 8003232:	e04b      	b.n	80032cc <UART_SetConfig+0x348>
 8003234:	2302      	movs	r3, #2
 8003236:	77fb      	strb	r3, [r7, #31]
 8003238:	e048      	b.n	80032cc <UART_SetConfig+0x348>
 800323a:	2304      	movs	r3, #4
 800323c:	77fb      	strb	r3, [r7, #31]
 800323e:	e045      	b.n	80032cc <UART_SetConfig+0x348>
 8003240:	2308      	movs	r3, #8
 8003242:	77fb      	strb	r3, [r7, #31]
 8003244:	e042      	b.n	80032cc <UART_SetConfig+0x348>
 8003246:	bf00      	nop
 8003248:	efff69f3 	.word	0xefff69f3
 800324c:	40011000 	.word	0x40011000
 8003250:	40023800 	.word	0x40023800
 8003254:	40004400 	.word	0x40004400
 8003258:	40004800 	.word	0x40004800
 800325c:	40004c00 	.word	0x40004c00
 8003260:	40005000 	.word	0x40005000
 8003264:	40011400 	.word	0x40011400
 8003268:	40007800 	.word	0x40007800
 800326c:	2310      	movs	r3, #16
 800326e:	77fb      	strb	r3, [r7, #31]
 8003270:	e02c      	b.n	80032cc <UART_SetConfig+0x348>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a72      	ldr	r2, [pc, #456]	; (8003440 <UART_SetConfig+0x4bc>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d125      	bne.n	80032c8 <UART_SetConfig+0x344>
 800327c:	4b71      	ldr	r3, [pc, #452]	; (8003444 <UART_SetConfig+0x4c0>)
 800327e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003282:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003286:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800328a:	d017      	beq.n	80032bc <UART_SetConfig+0x338>
 800328c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003290:	d817      	bhi.n	80032c2 <UART_SetConfig+0x33e>
 8003292:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003296:	d00b      	beq.n	80032b0 <UART_SetConfig+0x32c>
 8003298:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800329c:	d811      	bhi.n	80032c2 <UART_SetConfig+0x33e>
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <UART_SetConfig+0x326>
 80032a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032a6:	d006      	beq.n	80032b6 <UART_SetConfig+0x332>
 80032a8:	e00b      	b.n	80032c2 <UART_SetConfig+0x33e>
 80032aa:	2300      	movs	r3, #0
 80032ac:	77fb      	strb	r3, [r7, #31]
 80032ae:	e00d      	b.n	80032cc <UART_SetConfig+0x348>
 80032b0:	2302      	movs	r3, #2
 80032b2:	77fb      	strb	r3, [r7, #31]
 80032b4:	e00a      	b.n	80032cc <UART_SetConfig+0x348>
 80032b6:	2304      	movs	r3, #4
 80032b8:	77fb      	strb	r3, [r7, #31]
 80032ba:	e007      	b.n	80032cc <UART_SetConfig+0x348>
 80032bc:	2308      	movs	r3, #8
 80032be:	77fb      	strb	r3, [r7, #31]
 80032c0:	e004      	b.n	80032cc <UART_SetConfig+0x348>
 80032c2:	2310      	movs	r3, #16
 80032c4:	77fb      	strb	r3, [r7, #31]
 80032c6:	e001      	b.n	80032cc <UART_SetConfig+0x348>
 80032c8:	2310      	movs	r3, #16
 80032ca:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	69db      	ldr	r3, [r3, #28]
 80032d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032d4:	d15b      	bne.n	800338e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80032d6:	7ffb      	ldrb	r3, [r7, #31]
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d828      	bhi.n	800332e <UART_SetConfig+0x3aa>
 80032dc:	a201      	add	r2, pc, #4	; (adr r2, 80032e4 <UART_SetConfig+0x360>)
 80032de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e2:	bf00      	nop
 80032e4:	08003309 	.word	0x08003309
 80032e8:	08003311 	.word	0x08003311
 80032ec:	08003319 	.word	0x08003319
 80032f0:	0800332f 	.word	0x0800332f
 80032f4:	0800331f 	.word	0x0800331f
 80032f8:	0800332f 	.word	0x0800332f
 80032fc:	0800332f 	.word	0x0800332f
 8003300:	0800332f 	.word	0x0800332f
 8003304:	08003327 	.word	0x08003327
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003308:	f7fe fcc2 	bl	8001c90 <HAL_RCC_GetPCLK1Freq>
 800330c:	61b8      	str	r0, [r7, #24]
        break;
 800330e:	e013      	b.n	8003338 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003310:	f7fe fcd2 	bl	8001cb8 <HAL_RCC_GetPCLK2Freq>
 8003314:	61b8      	str	r0, [r7, #24]
        break;
 8003316:	e00f      	b.n	8003338 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003318:	4b4b      	ldr	r3, [pc, #300]	; (8003448 <UART_SetConfig+0x4c4>)
 800331a:	61bb      	str	r3, [r7, #24]
        break;
 800331c:	e00c      	b.n	8003338 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800331e:	f7fe fbe5 	bl	8001aec <HAL_RCC_GetSysClockFreq>
 8003322:	61b8      	str	r0, [r7, #24]
        break;
 8003324:	e008      	b.n	8003338 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003326:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800332a:	61bb      	str	r3, [r7, #24]
        break;
 800332c:	e004      	b.n	8003338 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800332e:	2300      	movs	r3, #0
 8003330:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	77bb      	strb	r3, [r7, #30]
        break;
 8003336:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d074      	beq.n	8003428 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	005a      	lsls	r2, r3, #1
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	085b      	lsrs	r3, r3, #1
 8003348:	441a      	add	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003352:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	2b0f      	cmp	r3, #15
 8003358:	d916      	bls.n	8003388 <UART_SetConfig+0x404>
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003360:	d212      	bcs.n	8003388 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	b29b      	uxth	r3, r3
 8003366:	f023 030f 	bic.w	r3, r3, #15
 800336a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	085b      	lsrs	r3, r3, #1
 8003370:	b29b      	uxth	r3, r3
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	b29a      	uxth	r2, r3
 8003378:	89fb      	ldrh	r3, [r7, #14]
 800337a:	4313      	orrs	r3, r2
 800337c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	89fa      	ldrh	r2, [r7, #14]
 8003384:	60da      	str	r2, [r3, #12]
 8003386:	e04f      	b.n	8003428 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	77bb      	strb	r3, [r7, #30]
 800338c:	e04c      	b.n	8003428 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800338e:	7ffb      	ldrb	r3, [r7, #31]
 8003390:	2b08      	cmp	r3, #8
 8003392:	d828      	bhi.n	80033e6 <UART_SetConfig+0x462>
 8003394:	a201      	add	r2, pc, #4	; (adr r2, 800339c <UART_SetConfig+0x418>)
 8003396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800339a:	bf00      	nop
 800339c:	080033c1 	.word	0x080033c1
 80033a0:	080033c9 	.word	0x080033c9
 80033a4:	080033d1 	.word	0x080033d1
 80033a8:	080033e7 	.word	0x080033e7
 80033ac:	080033d7 	.word	0x080033d7
 80033b0:	080033e7 	.word	0x080033e7
 80033b4:	080033e7 	.word	0x080033e7
 80033b8:	080033e7 	.word	0x080033e7
 80033bc:	080033df 	.word	0x080033df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033c0:	f7fe fc66 	bl	8001c90 <HAL_RCC_GetPCLK1Freq>
 80033c4:	61b8      	str	r0, [r7, #24]
        break;
 80033c6:	e013      	b.n	80033f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033c8:	f7fe fc76 	bl	8001cb8 <HAL_RCC_GetPCLK2Freq>
 80033cc:	61b8      	str	r0, [r7, #24]
        break;
 80033ce:	e00f      	b.n	80033f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033d0:	4b1d      	ldr	r3, [pc, #116]	; (8003448 <UART_SetConfig+0x4c4>)
 80033d2:	61bb      	str	r3, [r7, #24]
        break;
 80033d4:	e00c      	b.n	80033f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033d6:	f7fe fb89 	bl	8001aec <HAL_RCC_GetSysClockFreq>
 80033da:	61b8      	str	r0, [r7, #24]
        break;
 80033dc:	e008      	b.n	80033f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033e2:	61bb      	str	r3, [r7, #24]
        break;
 80033e4:	e004      	b.n	80033f0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80033e6:	2300      	movs	r3, #0
 80033e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	77bb      	strb	r3, [r7, #30]
        break;
 80033ee:	bf00      	nop
    }

    if (pclk != 0U)
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d018      	beq.n	8003428 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	085a      	lsrs	r2, r3, #1
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	441a      	add	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	fbb2 f3f3 	udiv	r3, r2, r3
 8003408:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	2b0f      	cmp	r3, #15
 800340e:	d909      	bls.n	8003424 <UART_SetConfig+0x4a0>
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003416:	d205      	bcs.n	8003424 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	b29a      	uxth	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	60da      	str	r2, [r3, #12]
 8003422:	e001      	b.n	8003428 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003434:	7fbb      	ldrb	r3, [r7, #30]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3720      	adds	r7, #32
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40007c00 	.word	0x40007c00
 8003444:	40023800 	.word	0x40023800
 8003448:	00f42400 	.word	0x00f42400

0800344c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00a      	beq.n	8003476 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00a      	beq.n	8003498 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00a      	beq.n	80034ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	f003 0308 	and.w	r3, r3, #8
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00a      	beq.n	80034dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	f003 0310 	and.w	r3, r3, #16
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00a      	beq.n	80034fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	f003 0320 	and.w	r3, r3, #32
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00a      	beq.n	8003520 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003528:	2b00      	cmp	r3, #0
 800352a:	d01a      	beq.n	8003562 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800354a:	d10a      	bne.n	8003562 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00a      	beq.n	8003584 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	605a      	str	r2, [r3, #4]
  }
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af02      	add	r7, sp, #8
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035a0:	f7fd fb9a 	bl	8000cd8 <HAL_GetTick>
 80035a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0308 	and.w	r3, r3, #8
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d10e      	bne.n	80035d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f831 	bl	800362a <UART_WaitOnFlagUntilTimeout>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e027      	b.n	8003622 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b04      	cmp	r3, #4
 80035de:	d10e      	bne.n	80035fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 f81b 	bl	800362a <UART_WaitOnFlagUntilTimeout>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e011      	b.n	8003622 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2220      	movs	r2, #32
 8003602:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2220      	movs	r2, #32
 8003608:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b09c      	sub	sp, #112	; 0x70
 800362e:	af00      	add	r7, sp, #0
 8003630:	60f8      	str	r0, [r7, #12]
 8003632:	60b9      	str	r1, [r7, #8]
 8003634:	603b      	str	r3, [r7, #0]
 8003636:	4613      	mov	r3, r2
 8003638:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800363a:	e0a7      	b.n	800378c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800363c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800363e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003642:	f000 80a3 	beq.w	800378c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003646:	f7fd fb47 	bl	8000cd8 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003652:	429a      	cmp	r2, r3
 8003654:	d302      	bcc.n	800365c <UART_WaitOnFlagUntilTimeout+0x32>
 8003656:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003658:	2b00      	cmp	r3, #0
 800365a:	d13f      	bne.n	80036dc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003664:	e853 3f00 	ldrex	r3, [r3]
 8003668:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800366a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800366c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003670:	667b      	str	r3, [r7, #100]	; 0x64
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	461a      	mov	r2, r3
 8003678:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800367a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800367c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003680:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003682:	e841 2300 	strex	r3, r2, [r1]
 8003686:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1e6      	bne.n	800365c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	3308      	adds	r3, #8
 8003694:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003698:	e853 3f00 	ldrex	r3, [r3]
 800369c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800369e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a0:	f023 0301 	bic.w	r3, r3, #1
 80036a4:	663b      	str	r3, [r7, #96]	; 0x60
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	3308      	adds	r3, #8
 80036ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80036ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80036b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80036b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036b6:	e841 2300 	strex	r3, r2, [r1]
 80036ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80036bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1e5      	bne.n	800368e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2220      	movs	r2, #32
 80036c6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e068      	b.n	80037ae <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0304 	and.w	r3, r3, #4
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d050      	beq.n	800378c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036f8:	d148      	bne.n	800378c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003702:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370c:	e853 3f00 	ldrex	r3, [r3]
 8003710:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003714:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003718:	66fb      	str	r3, [r7, #108]	; 0x6c
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	461a      	mov	r2, r3
 8003720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003722:	637b      	str	r3, [r7, #52]	; 0x34
 8003724:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003726:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003728:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800372a:	e841 2300 	strex	r3, r2, [r1]
 800372e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1e6      	bne.n	8003704 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	3308      	adds	r3, #8
 800373c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	e853 3f00 	ldrex	r3, [r3]
 8003744:	613b      	str	r3, [r7, #16]
   return(result);
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	f023 0301 	bic.w	r3, r3, #1
 800374c:	66bb      	str	r3, [r7, #104]	; 0x68
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	3308      	adds	r3, #8
 8003754:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003756:	623a      	str	r2, [r7, #32]
 8003758:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800375a:	69f9      	ldr	r1, [r7, #28]
 800375c:	6a3a      	ldr	r2, [r7, #32]
 800375e:	e841 2300 	strex	r3, r2, [r1]
 8003762:	61bb      	str	r3, [r7, #24]
   return(result);
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1e5      	bne.n	8003736 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2220      	movs	r2, #32
 800376e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2220      	movs	r2, #32
 8003774:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2220      	movs	r2, #32
 800377c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e010      	b.n	80037ae <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	69da      	ldr	r2, [r3, #28]
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	4013      	ands	r3, r2
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	429a      	cmp	r2, r3
 800379a:	bf0c      	ite	eq
 800379c:	2301      	moveq	r3, #1
 800379e:	2300      	movne	r3, #0
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	461a      	mov	r2, r3
 80037a4:	79fb      	ldrb	r3, [r7, #7]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	f43f af48 	beq.w	800363c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3770      	adds	r7, #112	; 0x70
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
	...

080037b8 <siprintf>:
 80037b8:	b40e      	push	{r1, r2, r3}
 80037ba:	b500      	push	{lr}
 80037bc:	b09c      	sub	sp, #112	; 0x70
 80037be:	ab1d      	add	r3, sp, #116	; 0x74
 80037c0:	9002      	str	r0, [sp, #8]
 80037c2:	9006      	str	r0, [sp, #24]
 80037c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80037c8:	4809      	ldr	r0, [pc, #36]	; (80037f0 <siprintf+0x38>)
 80037ca:	9107      	str	r1, [sp, #28]
 80037cc:	9104      	str	r1, [sp, #16]
 80037ce:	4909      	ldr	r1, [pc, #36]	; (80037f4 <siprintf+0x3c>)
 80037d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80037d4:	9105      	str	r1, [sp, #20]
 80037d6:	6800      	ldr	r0, [r0, #0]
 80037d8:	9301      	str	r3, [sp, #4]
 80037da:	a902      	add	r1, sp, #8
 80037dc:	f000 f992 	bl	8003b04 <_svfiprintf_r>
 80037e0:	9b02      	ldr	r3, [sp, #8]
 80037e2:	2200      	movs	r2, #0
 80037e4:	701a      	strb	r2, [r3, #0]
 80037e6:	b01c      	add	sp, #112	; 0x70
 80037e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80037ec:	b003      	add	sp, #12
 80037ee:	4770      	bx	lr
 80037f0:	2000005c 	.word	0x2000005c
 80037f4:	ffff0208 	.word	0xffff0208

080037f8 <memset>:
 80037f8:	4402      	add	r2, r0
 80037fa:	4603      	mov	r3, r0
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d100      	bne.n	8003802 <memset+0xa>
 8003800:	4770      	bx	lr
 8003802:	f803 1b01 	strb.w	r1, [r3], #1
 8003806:	e7f9      	b.n	80037fc <memset+0x4>

08003808 <__errno>:
 8003808:	4b01      	ldr	r3, [pc, #4]	; (8003810 <__errno+0x8>)
 800380a:	6818      	ldr	r0, [r3, #0]
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	2000005c 	.word	0x2000005c

08003814 <__libc_init_array>:
 8003814:	b570      	push	{r4, r5, r6, lr}
 8003816:	4d0d      	ldr	r5, [pc, #52]	; (800384c <__libc_init_array+0x38>)
 8003818:	4c0d      	ldr	r4, [pc, #52]	; (8003850 <__libc_init_array+0x3c>)
 800381a:	1b64      	subs	r4, r4, r5
 800381c:	10a4      	asrs	r4, r4, #2
 800381e:	2600      	movs	r6, #0
 8003820:	42a6      	cmp	r6, r4
 8003822:	d109      	bne.n	8003838 <__libc_init_array+0x24>
 8003824:	4d0b      	ldr	r5, [pc, #44]	; (8003854 <__libc_init_array+0x40>)
 8003826:	4c0c      	ldr	r4, [pc, #48]	; (8003858 <__libc_init_array+0x44>)
 8003828:	f000 fc6a 	bl	8004100 <_init>
 800382c:	1b64      	subs	r4, r4, r5
 800382e:	10a4      	asrs	r4, r4, #2
 8003830:	2600      	movs	r6, #0
 8003832:	42a6      	cmp	r6, r4
 8003834:	d105      	bne.n	8003842 <__libc_init_array+0x2e>
 8003836:	bd70      	pop	{r4, r5, r6, pc}
 8003838:	f855 3b04 	ldr.w	r3, [r5], #4
 800383c:	4798      	blx	r3
 800383e:	3601      	adds	r6, #1
 8003840:	e7ee      	b.n	8003820 <__libc_init_array+0xc>
 8003842:	f855 3b04 	ldr.w	r3, [r5], #4
 8003846:	4798      	blx	r3
 8003848:	3601      	adds	r6, #1
 800384a:	e7f2      	b.n	8003832 <__libc_init_array+0x1e>
 800384c:	0800417c 	.word	0x0800417c
 8003850:	0800417c 	.word	0x0800417c
 8003854:	0800417c 	.word	0x0800417c
 8003858:	08004180 	.word	0x08004180

0800385c <__retarget_lock_acquire_recursive>:
 800385c:	4770      	bx	lr

0800385e <__retarget_lock_release_recursive>:
 800385e:	4770      	bx	lr

08003860 <_free_r>:
 8003860:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003862:	2900      	cmp	r1, #0
 8003864:	d044      	beq.n	80038f0 <_free_r+0x90>
 8003866:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800386a:	9001      	str	r0, [sp, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	f1a1 0404 	sub.w	r4, r1, #4
 8003872:	bfb8      	it	lt
 8003874:	18e4      	addlt	r4, r4, r3
 8003876:	f000 f8df 	bl	8003a38 <__malloc_lock>
 800387a:	4a1e      	ldr	r2, [pc, #120]	; (80038f4 <_free_r+0x94>)
 800387c:	9801      	ldr	r0, [sp, #4]
 800387e:	6813      	ldr	r3, [r2, #0]
 8003880:	b933      	cbnz	r3, 8003890 <_free_r+0x30>
 8003882:	6063      	str	r3, [r4, #4]
 8003884:	6014      	str	r4, [r2, #0]
 8003886:	b003      	add	sp, #12
 8003888:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800388c:	f000 b8da 	b.w	8003a44 <__malloc_unlock>
 8003890:	42a3      	cmp	r3, r4
 8003892:	d908      	bls.n	80038a6 <_free_r+0x46>
 8003894:	6825      	ldr	r5, [r4, #0]
 8003896:	1961      	adds	r1, r4, r5
 8003898:	428b      	cmp	r3, r1
 800389a:	bf01      	itttt	eq
 800389c:	6819      	ldreq	r1, [r3, #0]
 800389e:	685b      	ldreq	r3, [r3, #4]
 80038a0:	1949      	addeq	r1, r1, r5
 80038a2:	6021      	streq	r1, [r4, #0]
 80038a4:	e7ed      	b.n	8003882 <_free_r+0x22>
 80038a6:	461a      	mov	r2, r3
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	b10b      	cbz	r3, 80038b0 <_free_r+0x50>
 80038ac:	42a3      	cmp	r3, r4
 80038ae:	d9fa      	bls.n	80038a6 <_free_r+0x46>
 80038b0:	6811      	ldr	r1, [r2, #0]
 80038b2:	1855      	adds	r5, r2, r1
 80038b4:	42a5      	cmp	r5, r4
 80038b6:	d10b      	bne.n	80038d0 <_free_r+0x70>
 80038b8:	6824      	ldr	r4, [r4, #0]
 80038ba:	4421      	add	r1, r4
 80038bc:	1854      	adds	r4, r2, r1
 80038be:	42a3      	cmp	r3, r4
 80038c0:	6011      	str	r1, [r2, #0]
 80038c2:	d1e0      	bne.n	8003886 <_free_r+0x26>
 80038c4:	681c      	ldr	r4, [r3, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	6053      	str	r3, [r2, #4]
 80038ca:	440c      	add	r4, r1
 80038cc:	6014      	str	r4, [r2, #0]
 80038ce:	e7da      	b.n	8003886 <_free_r+0x26>
 80038d0:	d902      	bls.n	80038d8 <_free_r+0x78>
 80038d2:	230c      	movs	r3, #12
 80038d4:	6003      	str	r3, [r0, #0]
 80038d6:	e7d6      	b.n	8003886 <_free_r+0x26>
 80038d8:	6825      	ldr	r5, [r4, #0]
 80038da:	1961      	adds	r1, r4, r5
 80038dc:	428b      	cmp	r3, r1
 80038de:	bf04      	itt	eq
 80038e0:	6819      	ldreq	r1, [r3, #0]
 80038e2:	685b      	ldreq	r3, [r3, #4]
 80038e4:	6063      	str	r3, [r4, #4]
 80038e6:	bf04      	itt	eq
 80038e8:	1949      	addeq	r1, r1, r5
 80038ea:	6021      	streq	r1, [r4, #0]
 80038ec:	6054      	str	r4, [r2, #4]
 80038ee:	e7ca      	b.n	8003886 <_free_r+0x26>
 80038f0:	b003      	add	sp, #12
 80038f2:	bd30      	pop	{r4, r5, pc}
 80038f4:	200002a0 	.word	0x200002a0

080038f8 <sbrk_aligned>:
 80038f8:	b570      	push	{r4, r5, r6, lr}
 80038fa:	4e0e      	ldr	r6, [pc, #56]	; (8003934 <sbrk_aligned+0x3c>)
 80038fc:	460c      	mov	r4, r1
 80038fe:	6831      	ldr	r1, [r6, #0]
 8003900:	4605      	mov	r5, r0
 8003902:	b911      	cbnz	r1, 800390a <sbrk_aligned+0x12>
 8003904:	f000 fba6 	bl	8004054 <_sbrk_r>
 8003908:	6030      	str	r0, [r6, #0]
 800390a:	4621      	mov	r1, r4
 800390c:	4628      	mov	r0, r5
 800390e:	f000 fba1 	bl	8004054 <_sbrk_r>
 8003912:	1c43      	adds	r3, r0, #1
 8003914:	d00a      	beq.n	800392c <sbrk_aligned+0x34>
 8003916:	1cc4      	adds	r4, r0, #3
 8003918:	f024 0403 	bic.w	r4, r4, #3
 800391c:	42a0      	cmp	r0, r4
 800391e:	d007      	beq.n	8003930 <sbrk_aligned+0x38>
 8003920:	1a21      	subs	r1, r4, r0
 8003922:	4628      	mov	r0, r5
 8003924:	f000 fb96 	bl	8004054 <_sbrk_r>
 8003928:	3001      	adds	r0, #1
 800392a:	d101      	bne.n	8003930 <sbrk_aligned+0x38>
 800392c:	f04f 34ff 	mov.w	r4, #4294967295
 8003930:	4620      	mov	r0, r4
 8003932:	bd70      	pop	{r4, r5, r6, pc}
 8003934:	200002a4 	.word	0x200002a4

08003938 <_malloc_r>:
 8003938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800393c:	1ccd      	adds	r5, r1, #3
 800393e:	f025 0503 	bic.w	r5, r5, #3
 8003942:	3508      	adds	r5, #8
 8003944:	2d0c      	cmp	r5, #12
 8003946:	bf38      	it	cc
 8003948:	250c      	movcc	r5, #12
 800394a:	2d00      	cmp	r5, #0
 800394c:	4607      	mov	r7, r0
 800394e:	db01      	blt.n	8003954 <_malloc_r+0x1c>
 8003950:	42a9      	cmp	r1, r5
 8003952:	d905      	bls.n	8003960 <_malloc_r+0x28>
 8003954:	230c      	movs	r3, #12
 8003956:	603b      	str	r3, [r7, #0]
 8003958:	2600      	movs	r6, #0
 800395a:	4630      	mov	r0, r6
 800395c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003960:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003a34 <_malloc_r+0xfc>
 8003964:	f000 f868 	bl	8003a38 <__malloc_lock>
 8003968:	f8d8 3000 	ldr.w	r3, [r8]
 800396c:	461c      	mov	r4, r3
 800396e:	bb5c      	cbnz	r4, 80039c8 <_malloc_r+0x90>
 8003970:	4629      	mov	r1, r5
 8003972:	4638      	mov	r0, r7
 8003974:	f7ff ffc0 	bl	80038f8 <sbrk_aligned>
 8003978:	1c43      	adds	r3, r0, #1
 800397a:	4604      	mov	r4, r0
 800397c:	d155      	bne.n	8003a2a <_malloc_r+0xf2>
 800397e:	f8d8 4000 	ldr.w	r4, [r8]
 8003982:	4626      	mov	r6, r4
 8003984:	2e00      	cmp	r6, #0
 8003986:	d145      	bne.n	8003a14 <_malloc_r+0xdc>
 8003988:	2c00      	cmp	r4, #0
 800398a:	d048      	beq.n	8003a1e <_malloc_r+0xe6>
 800398c:	6823      	ldr	r3, [r4, #0]
 800398e:	4631      	mov	r1, r6
 8003990:	4638      	mov	r0, r7
 8003992:	eb04 0903 	add.w	r9, r4, r3
 8003996:	f000 fb5d 	bl	8004054 <_sbrk_r>
 800399a:	4581      	cmp	r9, r0
 800399c:	d13f      	bne.n	8003a1e <_malloc_r+0xe6>
 800399e:	6821      	ldr	r1, [r4, #0]
 80039a0:	1a6d      	subs	r5, r5, r1
 80039a2:	4629      	mov	r1, r5
 80039a4:	4638      	mov	r0, r7
 80039a6:	f7ff ffa7 	bl	80038f8 <sbrk_aligned>
 80039aa:	3001      	adds	r0, #1
 80039ac:	d037      	beq.n	8003a1e <_malloc_r+0xe6>
 80039ae:	6823      	ldr	r3, [r4, #0]
 80039b0:	442b      	add	r3, r5
 80039b2:	6023      	str	r3, [r4, #0]
 80039b4:	f8d8 3000 	ldr.w	r3, [r8]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d038      	beq.n	8003a2e <_malloc_r+0xf6>
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	42a2      	cmp	r2, r4
 80039c0:	d12b      	bne.n	8003a1a <_malloc_r+0xe2>
 80039c2:	2200      	movs	r2, #0
 80039c4:	605a      	str	r2, [r3, #4]
 80039c6:	e00f      	b.n	80039e8 <_malloc_r+0xb0>
 80039c8:	6822      	ldr	r2, [r4, #0]
 80039ca:	1b52      	subs	r2, r2, r5
 80039cc:	d41f      	bmi.n	8003a0e <_malloc_r+0xd6>
 80039ce:	2a0b      	cmp	r2, #11
 80039d0:	d917      	bls.n	8003a02 <_malloc_r+0xca>
 80039d2:	1961      	adds	r1, r4, r5
 80039d4:	42a3      	cmp	r3, r4
 80039d6:	6025      	str	r5, [r4, #0]
 80039d8:	bf18      	it	ne
 80039da:	6059      	strne	r1, [r3, #4]
 80039dc:	6863      	ldr	r3, [r4, #4]
 80039de:	bf08      	it	eq
 80039e0:	f8c8 1000 	streq.w	r1, [r8]
 80039e4:	5162      	str	r2, [r4, r5]
 80039e6:	604b      	str	r3, [r1, #4]
 80039e8:	4638      	mov	r0, r7
 80039ea:	f104 060b 	add.w	r6, r4, #11
 80039ee:	f000 f829 	bl	8003a44 <__malloc_unlock>
 80039f2:	f026 0607 	bic.w	r6, r6, #7
 80039f6:	1d23      	adds	r3, r4, #4
 80039f8:	1af2      	subs	r2, r6, r3
 80039fa:	d0ae      	beq.n	800395a <_malloc_r+0x22>
 80039fc:	1b9b      	subs	r3, r3, r6
 80039fe:	50a3      	str	r3, [r4, r2]
 8003a00:	e7ab      	b.n	800395a <_malloc_r+0x22>
 8003a02:	42a3      	cmp	r3, r4
 8003a04:	6862      	ldr	r2, [r4, #4]
 8003a06:	d1dd      	bne.n	80039c4 <_malloc_r+0x8c>
 8003a08:	f8c8 2000 	str.w	r2, [r8]
 8003a0c:	e7ec      	b.n	80039e8 <_malloc_r+0xb0>
 8003a0e:	4623      	mov	r3, r4
 8003a10:	6864      	ldr	r4, [r4, #4]
 8003a12:	e7ac      	b.n	800396e <_malloc_r+0x36>
 8003a14:	4634      	mov	r4, r6
 8003a16:	6876      	ldr	r6, [r6, #4]
 8003a18:	e7b4      	b.n	8003984 <_malloc_r+0x4c>
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	e7cc      	b.n	80039b8 <_malloc_r+0x80>
 8003a1e:	230c      	movs	r3, #12
 8003a20:	603b      	str	r3, [r7, #0]
 8003a22:	4638      	mov	r0, r7
 8003a24:	f000 f80e 	bl	8003a44 <__malloc_unlock>
 8003a28:	e797      	b.n	800395a <_malloc_r+0x22>
 8003a2a:	6025      	str	r5, [r4, #0]
 8003a2c:	e7dc      	b.n	80039e8 <_malloc_r+0xb0>
 8003a2e:	605b      	str	r3, [r3, #4]
 8003a30:	deff      	udf	#255	; 0xff
 8003a32:	bf00      	nop
 8003a34:	200002a0 	.word	0x200002a0

08003a38 <__malloc_lock>:
 8003a38:	4801      	ldr	r0, [pc, #4]	; (8003a40 <__malloc_lock+0x8>)
 8003a3a:	f7ff bf0f 	b.w	800385c <__retarget_lock_acquire_recursive>
 8003a3e:	bf00      	nop
 8003a40:	2000029c 	.word	0x2000029c

08003a44 <__malloc_unlock>:
 8003a44:	4801      	ldr	r0, [pc, #4]	; (8003a4c <__malloc_unlock+0x8>)
 8003a46:	f7ff bf0a 	b.w	800385e <__retarget_lock_release_recursive>
 8003a4a:	bf00      	nop
 8003a4c:	2000029c 	.word	0x2000029c

08003a50 <__ssputs_r>:
 8003a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a54:	688e      	ldr	r6, [r1, #8]
 8003a56:	461f      	mov	r7, r3
 8003a58:	42be      	cmp	r6, r7
 8003a5a:	680b      	ldr	r3, [r1, #0]
 8003a5c:	4682      	mov	sl, r0
 8003a5e:	460c      	mov	r4, r1
 8003a60:	4690      	mov	r8, r2
 8003a62:	d82c      	bhi.n	8003abe <__ssputs_r+0x6e>
 8003a64:	898a      	ldrh	r2, [r1, #12]
 8003a66:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a6a:	d026      	beq.n	8003aba <__ssputs_r+0x6a>
 8003a6c:	6965      	ldr	r5, [r4, #20]
 8003a6e:	6909      	ldr	r1, [r1, #16]
 8003a70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a74:	eba3 0901 	sub.w	r9, r3, r1
 8003a78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a7c:	1c7b      	adds	r3, r7, #1
 8003a7e:	444b      	add	r3, r9
 8003a80:	106d      	asrs	r5, r5, #1
 8003a82:	429d      	cmp	r5, r3
 8003a84:	bf38      	it	cc
 8003a86:	461d      	movcc	r5, r3
 8003a88:	0553      	lsls	r3, r2, #21
 8003a8a:	d527      	bpl.n	8003adc <__ssputs_r+0x8c>
 8003a8c:	4629      	mov	r1, r5
 8003a8e:	f7ff ff53 	bl	8003938 <_malloc_r>
 8003a92:	4606      	mov	r6, r0
 8003a94:	b360      	cbz	r0, 8003af0 <__ssputs_r+0xa0>
 8003a96:	6921      	ldr	r1, [r4, #16]
 8003a98:	464a      	mov	r2, r9
 8003a9a:	f000 faeb 	bl	8004074 <memcpy>
 8003a9e:	89a3      	ldrh	r3, [r4, #12]
 8003aa0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aa8:	81a3      	strh	r3, [r4, #12]
 8003aaa:	6126      	str	r6, [r4, #16]
 8003aac:	6165      	str	r5, [r4, #20]
 8003aae:	444e      	add	r6, r9
 8003ab0:	eba5 0509 	sub.w	r5, r5, r9
 8003ab4:	6026      	str	r6, [r4, #0]
 8003ab6:	60a5      	str	r5, [r4, #8]
 8003ab8:	463e      	mov	r6, r7
 8003aba:	42be      	cmp	r6, r7
 8003abc:	d900      	bls.n	8003ac0 <__ssputs_r+0x70>
 8003abe:	463e      	mov	r6, r7
 8003ac0:	6820      	ldr	r0, [r4, #0]
 8003ac2:	4632      	mov	r2, r6
 8003ac4:	4641      	mov	r1, r8
 8003ac6:	f000 faab 	bl	8004020 <memmove>
 8003aca:	68a3      	ldr	r3, [r4, #8]
 8003acc:	1b9b      	subs	r3, r3, r6
 8003ace:	60a3      	str	r3, [r4, #8]
 8003ad0:	6823      	ldr	r3, [r4, #0]
 8003ad2:	4433      	add	r3, r6
 8003ad4:	6023      	str	r3, [r4, #0]
 8003ad6:	2000      	movs	r0, #0
 8003ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003adc:	462a      	mov	r2, r5
 8003ade:	f000 fad7 	bl	8004090 <_realloc_r>
 8003ae2:	4606      	mov	r6, r0
 8003ae4:	2800      	cmp	r0, #0
 8003ae6:	d1e0      	bne.n	8003aaa <__ssputs_r+0x5a>
 8003ae8:	6921      	ldr	r1, [r4, #16]
 8003aea:	4650      	mov	r0, sl
 8003aec:	f7ff feb8 	bl	8003860 <_free_r>
 8003af0:	230c      	movs	r3, #12
 8003af2:	f8ca 3000 	str.w	r3, [sl]
 8003af6:	89a3      	ldrh	r3, [r4, #12]
 8003af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003afc:	81a3      	strh	r3, [r4, #12]
 8003afe:	f04f 30ff 	mov.w	r0, #4294967295
 8003b02:	e7e9      	b.n	8003ad8 <__ssputs_r+0x88>

08003b04 <_svfiprintf_r>:
 8003b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b08:	4698      	mov	r8, r3
 8003b0a:	898b      	ldrh	r3, [r1, #12]
 8003b0c:	061b      	lsls	r3, r3, #24
 8003b0e:	b09d      	sub	sp, #116	; 0x74
 8003b10:	4607      	mov	r7, r0
 8003b12:	460d      	mov	r5, r1
 8003b14:	4614      	mov	r4, r2
 8003b16:	d50e      	bpl.n	8003b36 <_svfiprintf_r+0x32>
 8003b18:	690b      	ldr	r3, [r1, #16]
 8003b1a:	b963      	cbnz	r3, 8003b36 <_svfiprintf_r+0x32>
 8003b1c:	2140      	movs	r1, #64	; 0x40
 8003b1e:	f7ff ff0b 	bl	8003938 <_malloc_r>
 8003b22:	6028      	str	r0, [r5, #0]
 8003b24:	6128      	str	r0, [r5, #16]
 8003b26:	b920      	cbnz	r0, 8003b32 <_svfiprintf_r+0x2e>
 8003b28:	230c      	movs	r3, #12
 8003b2a:	603b      	str	r3, [r7, #0]
 8003b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b30:	e0d0      	b.n	8003cd4 <_svfiprintf_r+0x1d0>
 8003b32:	2340      	movs	r3, #64	; 0x40
 8003b34:	616b      	str	r3, [r5, #20]
 8003b36:	2300      	movs	r3, #0
 8003b38:	9309      	str	r3, [sp, #36]	; 0x24
 8003b3a:	2320      	movs	r3, #32
 8003b3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b40:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b44:	2330      	movs	r3, #48	; 0x30
 8003b46:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003cec <_svfiprintf_r+0x1e8>
 8003b4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b4e:	f04f 0901 	mov.w	r9, #1
 8003b52:	4623      	mov	r3, r4
 8003b54:	469a      	mov	sl, r3
 8003b56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b5a:	b10a      	cbz	r2, 8003b60 <_svfiprintf_r+0x5c>
 8003b5c:	2a25      	cmp	r2, #37	; 0x25
 8003b5e:	d1f9      	bne.n	8003b54 <_svfiprintf_r+0x50>
 8003b60:	ebba 0b04 	subs.w	fp, sl, r4
 8003b64:	d00b      	beq.n	8003b7e <_svfiprintf_r+0x7a>
 8003b66:	465b      	mov	r3, fp
 8003b68:	4622      	mov	r2, r4
 8003b6a:	4629      	mov	r1, r5
 8003b6c:	4638      	mov	r0, r7
 8003b6e:	f7ff ff6f 	bl	8003a50 <__ssputs_r>
 8003b72:	3001      	adds	r0, #1
 8003b74:	f000 80a9 	beq.w	8003cca <_svfiprintf_r+0x1c6>
 8003b78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b7a:	445a      	add	r2, fp
 8003b7c:	9209      	str	r2, [sp, #36]	; 0x24
 8003b7e:	f89a 3000 	ldrb.w	r3, [sl]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 80a1 	beq.w	8003cca <_svfiprintf_r+0x1c6>
 8003b88:	2300      	movs	r3, #0
 8003b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b92:	f10a 0a01 	add.w	sl, sl, #1
 8003b96:	9304      	str	r3, [sp, #16]
 8003b98:	9307      	str	r3, [sp, #28]
 8003b9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b9e:	931a      	str	r3, [sp, #104]	; 0x68
 8003ba0:	4654      	mov	r4, sl
 8003ba2:	2205      	movs	r2, #5
 8003ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ba8:	4850      	ldr	r0, [pc, #320]	; (8003cec <_svfiprintf_r+0x1e8>)
 8003baa:	f7fc fb51 	bl	8000250 <memchr>
 8003bae:	9a04      	ldr	r2, [sp, #16]
 8003bb0:	b9d8      	cbnz	r0, 8003bea <_svfiprintf_r+0xe6>
 8003bb2:	06d0      	lsls	r0, r2, #27
 8003bb4:	bf44      	itt	mi
 8003bb6:	2320      	movmi	r3, #32
 8003bb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bbc:	0711      	lsls	r1, r2, #28
 8003bbe:	bf44      	itt	mi
 8003bc0:	232b      	movmi	r3, #43	; 0x2b
 8003bc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bc6:	f89a 3000 	ldrb.w	r3, [sl]
 8003bca:	2b2a      	cmp	r3, #42	; 0x2a
 8003bcc:	d015      	beq.n	8003bfa <_svfiprintf_r+0xf6>
 8003bce:	9a07      	ldr	r2, [sp, #28]
 8003bd0:	4654      	mov	r4, sl
 8003bd2:	2000      	movs	r0, #0
 8003bd4:	f04f 0c0a 	mov.w	ip, #10
 8003bd8:	4621      	mov	r1, r4
 8003bda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bde:	3b30      	subs	r3, #48	; 0x30
 8003be0:	2b09      	cmp	r3, #9
 8003be2:	d94d      	bls.n	8003c80 <_svfiprintf_r+0x17c>
 8003be4:	b1b0      	cbz	r0, 8003c14 <_svfiprintf_r+0x110>
 8003be6:	9207      	str	r2, [sp, #28]
 8003be8:	e014      	b.n	8003c14 <_svfiprintf_r+0x110>
 8003bea:	eba0 0308 	sub.w	r3, r0, r8
 8003bee:	fa09 f303 	lsl.w	r3, r9, r3
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	9304      	str	r3, [sp, #16]
 8003bf6:	46a2      	mov	sl, r4
 8003bf8:	e7d2      	b.n	8003ba0 <_svfiprintf_r+0x9c>
 8003bfa:	9b03      	ldr	r3, [sp, #12]
 8003bfc:	1d19      	adds	r1, r3, #4
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	9103      	str	r1, [sp, #12]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	bfbb      	ittet	lt
 8003c06:	425b      	neglt	r3, r3
 8003c08:	f042 0202 	orrlt.w	r2, r2, #2
 8003c0c:	9307      	strge	r3, [sp, #28]
 8003c0e:	9307      	strlt	r3, [sp, #28]
 8003c10:	bfb8      	it	lt
 8003c12:	9204      	strlt	r2, [sp, #16]
 8003c14:	7823      	ldrb	r3, [r4, #0]
 8003c16:	2b2e      	cmp	r3, #46	; 0x2e
 8003c18:	d10c      	bne.n	8003c34 <_svfiprintf_r+0x130>
 8003c1a:	7863      	ldrb	r3, [r4, #1]
 8003c1c:	2b2a      	cmp	r3, #42	; 0x2a
 8003c1e:	d134      	bne.n	8003c8a <_svfiprintf_r+0x186>
 8003c20:	9b03      	ldr	r3, [sp, #12]
 8003c22:	1d1a      	adds	r2, r3, #4
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	9203      	str	r2, [sp, #12]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	bfb8      	it	lt
 8003c2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c30:	3402      	adds	r4, #2
 8003c32:	9305      	str	r3, [sp, #20]
 8003c34:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003cfc <_svfiprintf_r+0x1f8>
 8003c38:	7821      	ldrb	r1, [r4, #0]
 8003c3a:	2203      	movs	r2, #3
 8003c3c:	4650      	mov	r0, sl
 8003c3e:	f7fc fb07 	bl	8000250 <memchr>
 8003c42:	b138      	cbz	r0, 8003c54 <_svfiprintf_r+0x150>
 8003c44:	9b04      	ldr	r3, [sp, #16]
 8003c46:	eba0 000a 	sub.w	r0, r0, sl
 8003c4a:	2240      	movs	r2, #64	; 0x40
 8003c4c:	4082      	lsls	r2, r0
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	3401      	adds	r4, #1
 8003c52:	9304      	str	r3, [sp, #16]
 8003c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c58:	4825      	ldr	r0, [pc, #148]	; (8003cf0 <_svfiprintf_r+0x1ec>)
 8003c5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c5e:	2206      	movs	r2, #6
 8003c60:	f7fc faf6 	bl	8000250 <memchr>
 8003c64:	2800      	cmp	r0, #0
 8003c66:	d038      	beq.n	8003cda <_svfiprintf_r+0x1d6>
 8003c68:	4b22      	ldr	r3, [pc, #136]	; (8003cf4 <_svfiprintf_r+0x1f0>)
 8003c6a:	bb1b      	cbnz	r3, 8003cb4 <_svfiprintf_r+0x1b0>
 8003c6c:	9b03      	ldr	r3, [sp, #12]
 8003c6e:	3307      	adds	r3, #7
 8003c70:	f023 0307 	bic.w	r3, r3, #7
 8003c74:	3308      	adds	r3, #8
 8003c76:	9303      	str	r3, [sp, #12]
 8003c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c7a:	4433      	add	r3, r6
 8003c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8003c7e:	e768      	b.n	8003b52 <_svfiprintf_r+0x4e>
 8003c80:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c84:	460c      	mov	r4, r1
 8003c86:	2001      	movs	r0, #1
 8003c88:	e7a6      	b.n	8003bd8 <_svfiprintf_r+0xd4>
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	3401      	adds	r4, #1
 8003c8e:	9305      	str	r3, [sp, #20]
 8003c90:	4619      	mov	r1, r3
 8003c92:	f04f 0c0a 	mov.w	ip, #10
 8003c96:	4620      	mov	r0, r4
 8003c98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c9c:	3a30      	subs	r2, #48	; 0x30
 8003c9e:	2a09      	cmp	r2, #9
 8003ca0:	d903      	bls.n	8003caa <_svfiprintf_r+0x1a6>
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0c6      	beq.n	8003c34 <_svfiprintf_r+0x130>
 8003ca6:	9105      	str	r1, [sp, #20]
 8003ca8:	e7c4      	b.n	8003c34 <_svfiprintf_r+0x130>
 8003caa:	fb0c 2101 	mla	r1, ip, r1, r2
 8003cae:	4604      	mov	r4, r0
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e7f0      	b.n	8003c96 <_svfiprintf_r+0x192>
 8003cb4:	ab03      	add	r3, sp, #12
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	462a      	mov	r2, r5
 8003cba:	4b0f      	ldr	r3, [pc, #60]	; (8003cf8 <_svfiprintf_r+0x1f4>)
 8003cbc:	a904      	add	r1, sp, #16
 8003cbe:	4638      	mov	r0, r7
 8003cc0:	f3af 8000 	nop.w
 8003cc4:	1c42      	adds	r2, r0, #1
 8003cc6:	4606      	mov	r6, r0
 8003cc8:	d1d6      	bne.n	8003c78 <_svfiprintf_r+0x174>
 8003cca:	89ab      	ldrh	r3, [r5, #12]
 8003ccc:	065b      	lsls	r3, r3, #25
 8003cce:	f53f af2d 	bmi.w	8003b2c <_svfiprintf_r+0x28>
 8003cd2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003cd4:	b01d      	add	sp, #116	; 0x74
 8003cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cda:	ab03      	add	r3, sp, #12
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	462a      	mov	r2, r5
 8003ce0:	4b05      	ldr	r3, [pc, #20]	; (8003cf8 <_svfiprintf_r+0x1f4>)
 8003ce2:	a904      	add	r1, sp, #16
 8003ce4:	4638      	mov	r0, r7
 8003ce6:	f000 f879 	bl	8003ddc <_printf_i>
 8003cea:	e7eb      	b.n	8003cc4 <_svfiprintf_r+0x1c0>
 8003cec:	08004140 	.word	0x08004140
 8003cf0:	0800414a 	.word	0x0800414a
 8003cf4:	00000000 	.word	0x00000000
 8003cf8:	08003a51 	.word	0x08003a51
 8003cfc:	08004146 	.word	0x08004146

08003d00 <_printf_common>:
 8003d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d04:	4616      	mov	r6, r2
 8003d06:	4699      	mov	r9, r3
 8003d08:	688a      	ldr	r2, [r1, #8]
 8003d0a:	690b      	ldr	r3, [r1, #16]
 8003d0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d10:	4293      	cmp	r3, r2
 8003d12:	bfb8      	it	lt
 8003d14:	4613      	movlt	r3, r2
 8003d16:	6033      	str	r3, [r6, #0]
 8003d18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d1c:	4607      	mov	r7, r0
 8003d1e:	460c      	mov	r4, r1
 8003d20:	b10a      	cbz	r2, 8003d26 <_printf_common+0x26>
 8003d22:	3301      	adds	r3, #1
 8003d24:	6033      	str	r3, [r6, #0]
 8003d26:	6823      	ldr	r3, [r4, #0]
 8003d28:	0699      	lsls	r1, r3, #26
 8003d2a:	bf42      	ittt	mi
 8003d2c:	6833      	ldrmi	r3, [r6, #0]
 8003d2e:	3302      	addmi	r3, #2
 8003d30:	6033      	strmi	r3, [r6, #0]
 8003d32:	6825      	ldr	r5, [r4, #0]
 8003d34:	f015 0506 	ands.w	r5, r5, #6
 8003d38:	d106      	bne.n	8003d48 <_printf_common+0x48>
 8003d3a:	f104 0a19 	add.w	sl, r4, #25
 8003d3e:	68e3      	ldr	r3, [r4, #12]
 8003d40:	6832      	ldr	r2, [r6, #0]
 8003d42:	1a9b      	subs	r3, r3, r2
 8003d44:	42ab      	cmp	r3, r5
 8003d46:	dc26      	bgt.n	8003d96 <_printf_common+0x96>
 8003d48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d4c:	1e13      	subs	r3, r2, #0
 8003d4e:	6822      	ldr	r2, [r4, #0]
 8003d50:	bf18      	it	ne
 8003d52:	2301      	movne	r3, #1
 8003d54:	0692      	lsls	r2, r2, #26
 8003d56:	d42b      	bmi.n	8003db0 <_printf_common+0xb0>
 8003d58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d5c:	4649      	mov	r1, r9
 8003d5e:	4638      	mov	r0, r7
 8003d60:	47c0      	blx	r8
 8003d62:	3001      	adds	r0, #1
 8003d64:	d01e      	beq.n	8003da4 <_printf_common+0xa4>
 8003d66:	6823      	ldr	r3, [r4, #0]
 8003d68:	6922      	ldr	r2, [r4, #16]
 8003d6a:	f003 0306 	and.w	r3, r3, #6
 8003d6e:	2b04      	cmp	r3, #4
 8003d70:	bf02      	ittt	eq
 8003d72:	68e5      	ldreq	r5, [r4, #12]
 8003d74:	6833      	ldreq	r3, [r6, #0]
 8003d76:	1aed      	subeq	r5, r5, r3
 8003d78:	68a3      	ldr	r3, [r4, #8]
 8003d7a:	bf0c      	ite	eq
 8003d7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d80:	2500      	movne	r5, #0
 8003d82:	4293      	cmp	r3, r2
 8003d84:	bfc4      	itt	gt
 8003d86:	1a9b      	subgt	r3, r3, r2
 8003d88:	18ed      	addgt	r5, r5, r3
 8003d8a:	2600      	movs	r6, #0
 8003d8c:	341a      	adds	r4, #26
 8003d8e:	42b5      	cmp	r5, r6
 8003d90:	d11a      	bne.n	8003dc8 <_printf_common+0xc8>
 8003d92:	2000      	movs	r0, #0
 8003d94:	e008      	b.n	8003da8 <_printf_common+0xa8>
 8003d96:	2301      	movs	r3, #1
 8003d98:	4652      	mov	r2, sl
 8003d9a:	4649      	mov	r1, r9
 8003d9c:	4638      	mov	r0, r7
 8003d9e:	47c0      	blx	r8
 8003da0:	3001      	adds	r0, #1
 8003da2:	d103      	bne.n	8003dac <_printf_common+0xac>
 8003da4:	f04f 30ff 	mov.w	r0, #4294967295
 8003da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dac:	3501      	adds	r5, #1
 8003dae:	e7c6      	b.n	8003d3e <_printf_common+0x3e>
 8003db0:	18e1      	adds	r1, r4, r3
 8003db2:	1c5a      	adds	r2, r3, #1
 8003db4:	2030      	movs	r0, #48	; 0x30
 8003db6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003dba:	4422      	add	r2, r4
 8003dbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003dc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003dc4:	3302      	adds	r3, #2
 8003dc6:	e7c7      	b.n	8003d58 <_printf_common+0x58>
 8003dc8:	2301      	movs	r3, #1
 8003dca:	4622      	mov	r2, r4
 8003dcc:	4649      	mov	r1, r9
 8003dce:	4638      	mov	r0, r7
 8003dd0:	47c0      	blx	r8
 8003dd2:	3001      	adds	r0, #1
 8003dd4:	d0e6      	beq.n	8003da4 <_printf_common+0xa4>
 8003dd6:	3601      	adds	r6, #1
 8003dd8:	e7d9      	b.n	8003d8e <_printf_common+0x8e>
	...

08003ddc <_printf_i>:
 8003ddc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003de0:	7e0f      	ldrb	r7, [r1, #24]
 8003de2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003de4:	2f78      	cmp	r7, #120	; 0x78
 8003de6:	4691      	mov	r9, r2
 8003de8:	4680      	mov	r8, r0
 8003dea:	460c      	mov	r4, r1
 8003dec:	469a      	mov	sl, r3
 8003dee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003df2:	d807      	bhi.n	8003e04 <_printf_i+0x28>
 8003df4:	2f62      	cmp	r7, #98	; 0x62
 8003df6:	d80a      	bhi.n	8003e0e <_printf_i+0x32>
 8003df8:	2f00      	cmp	r7, #0
 8003dfa:	f000 80d4 	beq.w	8003fa6 <_printf_i+0x1ca>
 8003dfe:	2f58      	cmp	r7, #88	; 0x58
 8003e00:	f000 80c0 	beq.w	8003f84 <_printf_i+0x1a8>
 8003e04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e0c:	e03a      	b.n	8003e84 <_printf_i+0xa8>
 8003e0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e12:	2b15      	cmp	r3, #21
 8003e14:	d8f6      	bhi.n	8003e04 <_printf_i+0x28>
 8003e16:	a101      	add	r1, pc, #4	; (adr r1, 8003e1c <_printf_i+0x40>)
 8003e18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e1c:	08003e75 	.word	0x08003e75
 8003e20:	08003e89 	.word	0x08003e89
 8003e24:	08003e05 	.word	0x08003e05
 8003e28:	08003e05 	.word	0x08003e05
 8003e2c:	08003e05 	.word	0x08003e05
 8003e30:	08003e05 	.word	0x08003e05
 8003e34:	08003e89 	.word	0x08003e89
 8003e38:	08003e05 	.word	0x08003e05
 8003e3c:	08003e05 	.word	0x08003e05
 8003e40:	08003e05 	.word	0x08003e05
 8003e44:	08003e05 	.word	0x08003e05
 8003e48:	08003f8d 	.word	0x08003f8d
 8003e4c:	08003eb5 	.word	0x08003eb5
 8003e50:	08003f47 	.word	0x08003f47
 8003e54:	08003e05 	.word	0x08003e05
 8003e58:	08003e05 	.word	0x08003e05
 8003e5c:	08003faf 	.word	0x08003faf
 8003e60:	08003e05 	.word	0x08003e05
 8003e64:	08003eb5 	.word	0x08003eb5
 8003e68:	08003e05 	.word	0x08003e05
 8003e6c:	08003e05 	.word	0x08003e05
 8003e70:	08003f4f 	.word	0x08003f4f
 8003e74:	682b      	ldr	r3, [r5, #0]
 8003e76:	1d1a      	adds	r2, r3, #4
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	602a      	str	r2, [r5, #0]
 8003e7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e84:	2301      	movs	r3, #1
 8003e86:	e09f      	b.n	8003fc8 <_printf_i+0x1ec>
 8003e88:	6820      	ldr	r0, [r4, #0]
 8003e8a:	682b      	ldr	r3, [r5, #0]
 8003e8c:	0607      	lsls	r7, r0, #24
 8003e8e:	f103 0104 	add.w	r1, r3, #4
 8003e92:	6029      	str	r1, [r5, #0]
 8003e94:	d501      	bpl.n	8003e9a <_printf_i+0xbe>
 8003e96:	681e      	ldr	r6, [r3, #0]
 8003e98:	e003      	b.n	8003ea2 <_printf_i+0xc6>
 8003e9a:	0646      	lsls	r6, r0, #25
 8003e9c:	d5fb      	bpl.n	8003e96 <_printf_i+0xba>
 8003e9e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003ea2:	2e00      	cmp	r6, #0
 8003ea4:	da03      	bge.n	8003eae <_printf_i+0xd2>
 8003ea6:	232d      	movs	r3, #45	; 0x2d
 8003ea8:	4276      	negs	r6, r6
 8003eaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003eae:	485a      	ldr	r0, [pc, #360]	; (8004018 <_printf_i+0x23c>)
 8003eb0:	230a      	movs	r3, #10
 8003eb2:	e012      	b.n	8003eda <_printf_i+0xfe>
 8003eb4:	682b      	ldr	r3, [r5, #0]
 8003eb6:	6820      	ldr	r0, [r4, #0]
 8003eb8:	1d19      	adds	r1, r3, #4
 8003eba:	6029      	str	r1, [r5, #0]
 8003ebc:	0605      	lsls	r5, r0, #24
 8003ebe:	d501      	bpl.n	8003ec4 <_printf_i+0xe8>
 8003ec0:	681e      	ldr	r6, [r3, #0]
 8003ec2:	e002      	b.n	8003eca <_printf_i+0xee>
 8003ec4:	0641      	lsls	r1, r0, #25
 8003ec6:	d5fb      	bpl.n	8003ec0 <_printf_i+0xe4>
 8003ec8:	881e      	ldrh	r6, [r3, #0]
 8003eca:	4853      	ldr	r0, [pc, #332]	; (8004018 <_printf_i+0x23c>)
 8003ecc:	2f6f      	cmp	r7, #111	; 0x6f
 8003ece:	bf0c      	ite	eq
 8003ed0:	2308      	moveq	r3, #8
 8003ed2:	230a      	movne	r3, #10
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003eda:	6865      	ldr	r5, [r4, #4]
 8003edc:	60a5      	str	r5, [r4, #8]
 8003ede:	2d00      	cmp	r5, #0
 8003ee0:	bfa2      	ittt	ge
 8003ee2:	6821      	ldrge	r1, [r4, #0]
 8003ee4:	f021 0104 	bicge.w	r1, r1, #4
 8003ee8:	6021      	strge	r1, [r4, #0]
 8003eea:	b90e      	cbnz	r6, 8003ef0 <_printf_i+0x114>
 8003eec:	2d00      	cmp	r5, #0
 8003eee:	d04b      	beq.n	8003f88 <_printf_i+0x1ac>
 8003ef0:	4615      	mov	r5, r2
 8003ef2:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ef6:	fb03 6711 	mls	r7, r3, r1, r6
 8003efa:	5dc7      	ldrb	r7, [r0, r7]
 8003efc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f00:	4637      	mov	r7, r6
 8003f02:	42bb      	cmp	r3, r7
 8003f04:	460e      	mov	r6, r1
 8003f06:	d9f4      	bls.n	8003ef2 <_printf_i+0x116>
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	d10b      	bne.n	8003f24 <_printf_i+0x148>
 8003f0c:	6823      	ldr	r3, [r4, #0]
 8003f0e:	07de      	lsls	r6, r3, #31
 8003f10:	d508      	bpl.n	8003f24 <_printf_i+0x148>
 8003f12:	6923      	ldr	r3, [r4, #16]
 8003f14:	6861      	ldr	r1, [r4, #4]
 8003f16:	4299      	cmp	r1, r3
 8003f18:	bfde      	ittt	le
 8003f1a:	2330      	movle	r3, #48	; 0x30
 8003f1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f24:	1b52      	subs	r2, r2, r5
 8003f26:	6122      	str	r2, [r4, #16]
 8003f28:	f8cd a000 	str.w	sl, [sp]
 8003f2c:	464b      	mov	r3, r9
 8003f2e:	aa03      	add	r2, sp, #12
 8003f30:	4621      	mov	r1, r4
 8003f32:	4640      	mov	r0, r8
 8003f34:	f7ff fee4 	bl	8003d00 <_printf_common>
 8003f38:	3001      	adds	r0, #1
 8003f3a:	d14a      	bne.n	8003fd2 <_printf_i+0x1f6>
 8003f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f40:	b004      	add	sp, #16
 8003f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f46:	6823      	ldr	r3, [r4, #0]
 8003f48:	f043 0320 	orr.w	r3, r3, #32
 8003f4c:	6023      	str	r3, [r4, #0]
 8003f4e:	4833      	ldr	r0, [pc, #204]	; (800401c <_printf_i+0x240>)
 8003f50:	2778      	movs	r7, #120	; 0x78
 8003f52:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003f56:	6823      	ldr	r3, [r4, #0]
 8003f58:	6829      	ldr	r1, [r5, #0]
 8003f5a:	061f      	lsls	r7, r3, #24
 8003f5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f60:	d402      	bmi.n	8003f68 <_printf_i+0x18c>
 8003f62:	065f      	lsls	r7, r3, #25
 8003f64:	bf48      	it	mi
 8003f66:	b2b6      	uxthmi	r6, r6
 8003f68:	07df      	lsls	r7, r3, #31
 8003f6a:	bf48      	it	mi
 8003f6c:	f043 0320 	orrmi.w	r3, r3, #32
 8003f70:	6029      	str	r1, [r5, #0]
 8003f72:	bf48      	it	mi
 8003f74:	6023      	strmi	r3, [r4, #0]
 8003f76:	b91e      	cbnz	r6, 8003f80 <_printf_i+0x1a4>
 8003f78:	6823      	ldr	r3, [r4, #0]
 8003f7a:	f023 0320 	bic.w	r3, r3, #32
 8003f7e:	6023      	str	r3, [r4, #0]
 8003f80:	2310      	movs	r3, #16
 8003f82:	e7a7      	b.n	8003ed4 <_printf_i+0xf8>
 8003f84:	4824      	ldr	r0, [pc, #144]	; (8004018 <_printf_i+0x23c>)
 8003f86:	e7e4      	b.n	8003f52 <_printf_i+0x176>
 8003f88:	4615      	mov	r5, r2
 8003f8a:	e7bd      	b.n	8003f08 <_printf_i+0x12c>
 8003f8c:	682b      	ldr	r3, [r5, #0]
 8003f8e:	6826      	ldr	r6, [r4, #0]
 8003f90:	6961      	ldr	r1, [r4, #20]
 8003f92:	1d18      	adds	r0, r3, #4
 8003f94:	6028      	str	r0, [r5, #0]
 8003f96:	0635      	lsls	r5, r6, #24
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	d501      	bpl.n	8003fa0 <_printf_i+0x1c4>
 8003f9c:	6019      	str	r1, [r3, #0]
 8003f9e:	e002      	b.n	8003fa6 <_printf_i+0x1ca>
 8003fa0:	0670      	lsls	r0, r6, #25
 8003fa2:	d5fb      	bpl.n	8003f9c <_printf_i+0x1c0>
 8003fa4:	8019      	strh	r1, [r3, #0]
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	6123      	str	r3, [r4, #16]
 8003faa:	4615      	mov	r5, r2
 8003fac:	e7bc      	b.n	8003f28 <_printf_i+0x14c>
 8003fae:	682b      	ldr	r3, [r5, #0]
 8003fb0:	1d1a      	adds	r2, r3, #4
 8003fb2:	602a      	str	r2, [r5, #0]
 8003fb4:	681d      	ldr	r5, [r3, #0]
 8003fb6:	6862      	ldr	r2, [r4, #4]
 8003fb8:	2100      	movs	r1, #0
 8003fba:	4628      	mov	r0, r5
 8003fbc:	f7fc f948 	bl	8000250 <memchr>
 8003fc0:	b108      	cbz	r0, 8003fc6 <_printf_i+0x1ea>
 8003fc2:	1b40      	subs	r0, r0, r5
 8003fc4:	6060      	str	r0, [r4, #4]
 8003fc6:	6863      	ldr	r3, [r4, #4]
 8003fc8:	6123      	str	r3, [r4, #16]
 8003fca:	2300      	movs	r3, #0
 8003fcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fd0:	e7aa      	b.n	8003f28 <_printf_i+0x14c>
 8003fd2:	6923      	ldr	r3, [r4, #16]
 8003fd4:	462a      	mov	r2, r5
 8003fd6:	4649      	mov	r1, r9
 8003fd8:	4640      	mov	r0, r8
 8003fda:	47d0      	blx	sl
 8003fdc:	3001      	adds	r0, #1
 8003fde:	d0ad      	beq.n	8003f3c <_printf_i+0x160>
 8003fe0:	6823      	ldr	r3, [r4, #0]
 8003fe2:	079b      	lsls	r3, r3, #30
 8003fe4:	d413      	bmi.n	800400e <_printf_i+0x232>
 8003fe6:	68e0      	ldr	r0, [r4, #12]
 8003fe8:	9b03      	ldr	r3, [sp, #12]
 8003fea:	4298      	cmp	r0, r3
 8003fec:	bfb8      	it	lt
 8003fee:	4618      	movlt	r0, r3
 8003ff0:	e7a6      	b.n	8003f40 <_printf_i+0x164>
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	4632      	mov	r2, r6
 8003ff6:	4649      	mov	r1, r9
 8003ff8:	4640      	mov	r0, r8
 8003ffa:	47d0      	blx	sl
 8003ffc:	3001      	adds	r0, #1
 8003ffe:	d09d      	beq.n	8003f3c <_printf_i+0x160>
 8004000:	3501      	adds	r5, #1
 8004002:	68e3      	ldr	r3, [r4, #12]
 8004004:	9903      	ldr	r1, [sp, #12]
 8004006:	1a5b      	subs	r3, r3, r1
 8004008:	42ab      	cmp	r3, r5
 800400a:	dcf2      	bgt.n	8003ff2 <_printf_i+0x216>
 800400c:	e7eb      	b.n	8003fe6 <_printf_i+0x20a>
 800400e:	2500      	movs	r5, #0
 8004010:	f104 0619 	add.w	r6, r4, #25
 8004014:	e7f5      	b.n	8004002 <_printf_i+0x226>
 8004016:	bf00      	nop
 8004018:	08004151 	.word	0x08004151
 800401c:	08004162 	.word	0x08004162

08004020 <memmove>:
 8004020:	4288      	cmp	r0, r1
 8004022:	b510      	push	{r4, lr}
 8004024:	eb01 0402 	add.w	r4, r1, r2
 8004028:	d902      	bls.n	8004030 <memmove+0x10>
 800402a:	4284      	cmp	r4, r0
 800402c:	4623      	mov	r3, r4
 800402e:	d807      	bhi.n	8004040 <memmove+0x20>
 8004030:	1e43      	subs	r3, r0, #1
 8004032:	42a1      	cmp	r1, r4
 8004034:	d008      	beq.n	8004048 <memmove+0x28>
 8004036:	f811 2b01 	ldrb.w	r2, [r1], #1
 800403a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800403e:	e7f8      	b.n	8004032 <memmove+0x12>
 8004040:	4402      	add	r2, r0
 8004042:	4601      	mov	r1, r0
 8004044:	428a      	cmp	r2, r1
 8004046:	d100      	bne.n	800404a <memmove+0x2a>
 8004048:	bd10      	pop	{r4, pc}
 800404a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800404e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004052:	e7f7      	b.n	8004044 <memmove+0x24>

08004054 <_sbrk_r>:
 8004054:	b538      	push	{r3, r4, r5, lr}
 8004056:	4d06      	ldr	r5, [pc, #24]	; (8004070 <_sbrk_r+0x1c>)
 8004058:	2300      	movs	r3, #0
 800405a:	4604      	mov	r4, r0
 800405c:	4608      	mov	r0, r1
 800405e:	602b      	str	r3, [r5, #0]
 8004060:	f7fc fc76 	bl	8000950 <_sbrk>
 8004064:	1c43      	adds	r3, r0, #1
 8004066:	d102      	bne.n	800406e <_sbrk_r+0x1a>
 8004068:	682b      	ldr	r3, [r5, #0]
 800406a:	b103      	cbz	r3, 800406e <_sbrk_r+0x1a>
 800406c:	6023      	str	r3, [r4, #0]
 800406e:	bd38      	pop	{r3, r4, r5, pc}
 8004070:	20000298 	.word	0x20000298

08004074 <memcpy>:
 8004074:	440a      	add	r2, r1
 8004076:	4291      	cmp	r1, r2
 8004078:	f100 33ff 	add.w	r3, r0, #4294967295
 800407c:	d100      	bne.n	8004080 <memcpy+0xc>
 800407e:	4770      	bx	lr
 8004080:	b510      	push	{r4, lr}
 8004082:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004086:	f803 4f01 	strb.w	r4, [r3, #1]!
 800408a:	4291      	cmp	r1, r2
 800408c:	d1f9      	bne.n	8004082 <memcpy+0xe>
 800408e:	bd10      	pop	{r4, pc}

08004090 <_realloc_r>:
 8004090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004094:	4680      	mov	r8, r0
 8004096:	4614      	mov	r4, r2
 8004098:	460e      	mov	r6, r1
 800409a:	b921      	cbnz	r1, 80040a6 <_realloc_r+0x16>
 800409c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040a0:	4611      	mov	r1, r2
 80040a2:	f7ff bc49 	b.w	8003938 <_malloc_r>
 80040a6:	b92a      	cbnz	r2, 80040b4 <_realloc_r+0x24>
 80040a8:	f7ff fbda 	bl	8003860 <_free_r>
 80040ac:	4625      	mov	r5, r4
 80040ae:	4628      	mov	r0, r5
 80040b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040b4:	f000 f81b 	bl	80040ee <_malloc_usable_size_r>
 80040b8:	4284      	cmp	r4, r0
 80040ba:	4607      	mov	r7, r0
 80040bc:	d802      	bhi.n	80040c4 <_realloc_r+0x34>
 80040be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80040c2:	d812      	bhi.n	80040ea <_realloc_r+0x5a>
 80040c4:	4621      	mov	r1, r4
 80040c6:	4640      	mov	r0, r8
 80040c8:	f7ff fc36 	bl	8003938 <_malloc_r>
 80040cc:	4605      	mov	r5, r0
 80040ce:	2800      	cmp	r0, #0
 80040d0:	d0ed      	beq.n	80040ae <_realloc_r+0x1e>
 80040d2:	42bc      	cmp	r4, r7
 80040d4:	4622      	mov	r2, r4
 80040d6:	4631      	mov	r1, r6
 80040d8:	bf28      	it	cs
 80040da:	463a      	movcs	r2, r7
 80040dc:	f7ff ffca 	bl	8004074 <memcpy>
 80040e0:	4631      	mov	r1, r6
 80040e2:	4640      	mov	r0, r8
 80040e4:	f7ff fbbc 	bl	8003860 <_free_r>
 80040e8:	e7e1      	b.n	80040ae <_realloc_r+0x1e>
 80040ea:	4635      	mov	r5, r6
 80040ec:	e7df      	b.n	80040ae <_realloc_r+0x1e>

080040ee <_malloc_usable_size_r>:
 80040ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040f2:	1f18      	subs	r0, r3, #4
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	bfbc      	itt	lt
 80040f8:	580b      	ldrlt	r3, [r1, r0]
 80040fa:	18c0      	addlt	r0, r0, r3
 80040fc:	4770      	bx	lr
	...

08004100 <_init>:
 8004100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004102:	bf00      	nop
 8004104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004106:	bc08      	pop	{r3}
 8004108:	469e      	mov	lr, r3
 800410a:	4770      	bx	lr

0800410c <_fini>:
 800410c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800410e:	bf00      	nop
 8004110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004112:	bc08      	pop	{r3}
 8004114:	469e      	mov	lr, r3
 8004116:	4770      	bx	lr
