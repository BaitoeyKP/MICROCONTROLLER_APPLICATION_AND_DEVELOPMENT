
lab7_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000533c  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005534  08005534  00015534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800554c  0800554c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800554c  0800554c  0001554c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005554  08005554  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005554  08005554  00015554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005558  08005558  00015558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800555c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000610  2000000c  08005568  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000061c  08005568  0002061c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013e77  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002979  00000000  00000000  00033ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001138  00000000  00000000  00036870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d74  00000000  00000000  000379a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027e80  00000000  00000000  0003871c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000150a0  00000000  00000000  0006059c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fa45d  00000000  00000000  0007563c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004948  00000000  00000000  0016fa9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001743e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800551c 	.word	0x0800551c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	0800551c 	.word	0x0800551c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b970 	b.w	8000530 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	460f      	mov	r7, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4694      	mov	ip, r2
 800027c:	d965      	bls.n	800034a <__udivmoddi4+0xe2>
 800027e:	fab2 f382 	clz	r3, r2
 8000282:	b143      	cbz	r3, 8000296 <__udivmoddi4+0x2e>
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	f1c3 0220 	rsb	r2, r3, #32
 800028c:	409f      	lsls	r7, r3
 800028e:	fa20 f202 	lsr.w	r2, r0, r2
 8000292:	4317      	orrs	r7, r2
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800029a:	fa1f f58c 	uxth.w	r5, ip
 800029e:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a2:	0c22      	lsrs	r2, r4, #16
 80002a4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	fb01 f005 	mul.w	r0, r1, r5
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002bc:	f080 811c 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8119 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	b2a4      	uxth	r4, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	fb00 f505 	mul.w	r5, r0, r5
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x90>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ea:	f080 8107 	bcs.w	80004fc <__udivmoddi4+0x294>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8104 	bls.w	80004fc <__udivmoddi4+0x294>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	1b64      	subs	r4, r4, r5
 80002fe:	2100      	movs	r1, #0
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa2>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xbc>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ed 	beq.w	80004f2 <__udivmoddi4+0x28a>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d149      	bne.n	80003c0 <__udivmoddi4+0x158>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xce>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2be>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4617      	mov	r7, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa2>
 8000344:	e9c6 4700 	strd	r4, r7, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa2>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xe6>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 8090 	bne.w	8000478 <__udivmoddi4+0x210>
 8000358:	1a8a      	subs	r2, r1, r2
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb2 f5f7 	udiv	r5, r2, r7
 8000368:	fb07 2015 	mls	r0, r7, r5, r2
 800036c:	0c22      	lsrs	r2, r4, #16
 800036e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000372:	fb0e f005 	mul.w	r0, lr, r5
 8000376:	4290      	cmp	r0, r2
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x124>
 800037a:	eb1c 0202 	adds.w	r2, ip, r2
 800037e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4290      	cmp	r0, r2
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2b8>
 800038a:	4645      	mov	r5, r8
 800038c:	1a12      	subs	r2, r2, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb2 f0f7 	udiv	r0, r2, r7
 8000394:	fb07 2210 	mls	r2, r7, r0, r2
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x14e>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x14c>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2c2>
 80003b4:	4610      	mov	r0, r2
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003be:	e79f      	b.n	8000300 <__udivmoddi4+0x98>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa05 f401 	lsl.w	r4, r5, r1
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	40fd      	lsrs	r5, r7
 80003d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003dc:	4323      	orrs	r3, r4
 80003de:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ea:	0c1c      	lsrs	r4, r3, #16
 80003ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f0:	fb08 f50e 	mul.w	r5, r8, lr
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	fa00 f001 	lsl.w	r0, r0, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2b4>
 800040c:	42a5      	cmp	r5, r4
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2b4>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4464      	add	r4, ip
 8000418:	1b64      	subs	r4, r4, r5
 800041a:	b29d      	uxth	r5, r3
 800041c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000420:	fb09 4413 	mls	r4, r9, r3, r4
 8000424:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000428:	fb03 fe0e 	mul.w	lr, r3, lr
 800042c:	45a6      	cmp	lr, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f103 35ff 	add.w	r5, r3, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2ac>
 800043a:	45a6      	cmp	lr, r4
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2ac>
 800043e:	3b02      	subs	r3, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000446:	fba3 9502 	umull	r9, r5, r3, r2
 800044a:	eba4 040e 	sub.w	r4, r4, lr
 800044e:	42ac      	cmp	r4, r5
 8000450:	46c8      	mov	r8, r9
 8000452:	46ae      	mov	lr, r5
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x29c>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x298>
 8000458:	b156      	cbz	r6, 8000470 <__udivmoddi4+0x208>
 800045a:	ebb0 0208 	subs.w	r2, r0, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	40ca      	lsrs	r2, r1
 8000468:	40cc      	lsrs	r4, r1
 800046a:	4317      	orrs	r7, r2
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	4618      	mov	r0, r3
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c3 0120 	rsb	r1, r3, #32
 800047c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000480:	fa20 f201 	lsr.w	r2, r0, r1
 8000484:	fa25 f101 	lsr.w	r1, r5, r1
 8000488:	409d      	lsls	r5, r3
 800048a:	432a      	orrs	r2, r5
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb1 f0f7 	udiv	r0, r1, r7
 8000498:	fb07 1510 	mls	r5, r7, r0, r1
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004a2:	fb00 f50e 	mul.w	r5, r0, lr
 80004a6:	428d      	cmp	r5, r1
 80004a8:	fa04 f403 	lsl.w	r4, r4, r3
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x258>
 80004ae:	eb1c 0101 	adds.w	r1, ip, r1
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004b8:	428d      	cmp	r5, r1
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1b49      	subs	r1, r1, r5
 80004c2:	b292      	uxth	r2, r2
 80004c4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c8:	fb07 1115 	mls	r1, r7, r5, r1
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	fb05 f10e 	mul.w	r1, r5, lr
 80004d4:	4291      	cmp	r1, r2
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x282>
 80004d8:	eb1c 0202 	adds.w	r2, ip, r2
 80004dc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 80004e2:	4291      	cmp	r1, r2
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2a8>
 80004e6:	3d02      	subs	r5, #2
 80004e8:	4462      	add	r2, ip
 80004ea:	1a52      	subs	r2, r2, r1
 80004ec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0xfc>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xa2>
 80004f8:	4639      	mov	r1, r7
 80004fa:	e6e6      	b.n	80002ca <__udivmoddi4+0x62>
 80004fc:	4610      	mov	r0, r2
 80004fe:	e6fb      	b.n	80002f8 <__udivmoddi4+0x90>
 8000500:	4548      	cmp	r0, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb65 0e0c 	sbc.w	lr, r5, ip
 800050c:	3b01      	subs	r3, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f0>
 8000510:	4645      	mov	r5, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x282>
 8000514:	462b      	mov	r3, r5
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1da>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x258>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b0>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x124>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xd8>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x14e>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000538:	f000 fd17 	bl	8000f6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053c:	f000 f84c 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000540:	f000 f98a 	bl	8000858 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000544:	f000 f92a 	bl	800079c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000548:	f000 f958 	bl	80007fc <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 800054c:	f000 f8b6 	bl	80006bc <MX_TIM2_Init>

    /* USER CODE BEGIN 3 */
	  //char ch1  = HAL_UART_Receive(&huart3, (uint8_t*) &ch1, 1 , 1000);


	  pwm0 = (GPIOA->IDR & GPIO_PIN_0) >> 0; //red
 8000550:	4b1a      	ldr	r3, [pc, #104]	; (80005bc <main+0x88>)
 8000552:	691b      	ldr	r3, [r3, #16]
 8000554:	b2db      	uxtb	r3, r3
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	b2da      	uxtb	r2, r3
 800055c:	4b18      	ldr	r3, [pc, #96]	; (80005c0 <main+0x8c>)
 800055e:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(100);
 8000560:	2064      	movs	r0, #100	; 0x64
 8000562:	f000 fd5f 	bl	8001024 <HAL_Delay>
	  pwm1 = (GPIOA->IDR & GPIO_PIN_3) >> 3; //blue
 8000566:	4b15      	ldr	r3, [pc, #84]	; (80005bc <main+0x88>)
 8000568:	691b      	ldr	r3, [r3, #16]
 800056a:	08db      	lsrs	r3, r3, #3
 800056c:	b2db      	uxtb	r3, r3
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	b2da      	uxtb	r2, r3
 8000574:	4b13      	ldr	r3, [pc, #76]	; (80005c4 <main+0x90>)
 8000576:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(100);
 8000578:	2064      	movs	r0, #100	; 0x64
 800057a:	f000 fd53 	bl	8001024 <HAL_Delay>
	  pwm2 = (GPIOB->IDR & GPIO_PIN_10) >> 10; //green
 800057e:	4b12      	ldr	r3, [pc, #72]	; (80005c8 <main+0x94>)
 8000580:	691b      	ldr	r3, [r3, #16]
 8000582:	0a9b      	lsrs	r3, r3, #10
 8000584:	b2db      	uxtb	r3, r3
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	b2da      	uxtb	r2, r3
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <main+0x98>)
 800058e:	701a      	strb	r2, [r3, #0]

	  //while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_RXNE)== RESET){}
	  HAL_UART_Receive_IT(&huart3, (uint8_t*) &ch1, 1);
 8000590:	2201      	movs	r2, #1
 8000592:	490f      	ldr	r1, [pc, #60]	; (80005d0 <main+0x9c>)
 8000594:	480f      	ldr	r0, [pc, #60]	; (80005d4 <main+0xa0>)
 8000596:	f003 fa60 	bl	8003a5a <HAL_UART_Receive_IT>
	  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 800059a:	bf00      	nop
 800059c:	4b0d      	ldr	r3, [pc, #52]	; (80005d4 <main+0xa0>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	69db      	ldr	r3, [r3, #28]
 80005a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005a6:	2b40      	cmp	r3, #64	; 0x40
 80005a8:	d1f8      	bne.n	800059c <main+0x68>
	  HAL_UART_Transmit(&huart3, (uint8_t *) &ch1 , 1 , 1000);
 80005aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ae:	2201      	movs	r2, #1
 80005b0:	4907      	ldr	r1, [pc, #28]	; (80005d0 <main+0x9c>)
 80005b2:	4808      	ldr	r0, [pc, #32]	; (80005d4 <main+0xa0>)
 80005b4:	f003 f9ce 	bl	8003954 <HAL_UART_Transmit>
	  pwm0 = (GPIOA->IDR & GPIO_PIN_0) >> 0; //red
 80005b8:	e7ca      	b.n	8000550 <main+0x1c>
 80005ba:	bf00      	nop
 80005bc:	40020000 	.word	0x40020000
 80005c0:	20000028 	.word	0x20000028
 80005c4:	20000029 	.word	0x20000029
 80005c8:	40020400 	.word	0x40020400
 80005cc:	2000002a 	.word	0x2000002a
 80005d0:	20000038 	.word	0x20000038
 80005d4:	20000088 	.word	0x20000088

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	; 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	2234      	movs	r2, #52	; 0x34
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f004 ff6c 	bl	80054c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005fc:	f001 f9e8 	bl	80019d0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000600:	4b2c      	ldr	r3, [pc, #176]	; (80006b4 <SystemClock_Config+0xdc>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	4a2b      	ldr	r2, [pc, #172]	; (80006b4 <SystemClock_Config+0xdc>)
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	; 0x40
 800060c:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <SystemClock_Config+0xdc>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000618:	4b27      	ldr	r3, [pc, #156]	; (80006b8 <SystemClock_Config+0xe0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000620:	4a25      	ldr	r2, [pc, #148]	; (80006b8 <SystemClock_Config+0xe0>)
 8000622:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <SystemClock_Config+0xe0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000630:	603b      	str	r3, [r7, #0]
 8000632:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000634:	2301      	movs	r3, #1
 8000636:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000638:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800063c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063e:	2302      	movs	r3, #2
 8000640:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000642:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000646:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000648:	2304      	movs	r3, #4
 800064a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800064c:	2360      	movs	r3, #96	; 0x60
 800064e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000650:	2302      	movs	r3, #2
 8000652:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000654:	2304      	movs	r3, #4
 8000656:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000658:	2302      	movs	r3, #2
 800065a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	f107 031c 	add.w	r3, r7, #28
 8000660:	4618      	mov	r0, r3
 8000662:	f001 fa15 	bl	8001a90 <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800066c:	f000 fa90 	bl	8000b90 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000670:	f001 f9be 	bl	80019f0 <HAL_PWREx_EnableOverDrive>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800067a:	f000 fa89 	bl	8000b90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067e:	230f      	movs	r3, #15
 8000680:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000682:	2302      	movs	r3, #2
 8000684:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800068a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000694:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000696:	f107 0308 	add.w	r3, r7, #8
 800069a:	2103      	movs	r1, #3
 800069c:	4618      	mov	r0, r3
 800069e:	f001 fca5 	bl	8001fec <HAL_RCC_ClockConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006a8:	f000 fa72 	bl	8000b90 <Error_Handler>
  }
}
 80006ac:	bf00      	nop
 80006ae:	3750      	adds	r7, #80	; 0x50
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08a      	sub	sp, #40	; 0x28
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006ce:	463b      	mov	r3, r7
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
 80006dc:	615a      	str	r2, [r3, #20]
 80006de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006e0:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <MX_TIM2_Init+0xdc>)
 80006e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108-1;
 80006e8:	4b2b      	ldr	r3, [pc, #172]	; (8000798 <MX_TIM2_Init+0xdc>)
 80006ea:	226b      	movs	r2, #107	; 0x6b
 80006ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ee:	4b2a      	ldr	r3, [pc, #168]	; (8000798 <MX_TIM2_Init+0xdc>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80006f4:	4b28      	ldr	r3, [pc, #160]	; (8000798 <MX_TIM2_Init+0xdc>)
 80006f6:	f242 720f 	movw	r2, #9999	; 0x270f
 80006fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006fc:	4b26      	ldr	r3, [pc, #152]	; (8000798 <MX_TIM2_Init+0xdc>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000702:	4b25      	ldr	r3, [pc, #148]	; (8000798 <MX_TIM2_Init+0xdc>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000708:	4823      	ldr	r0, [pc, #140]	; (8000798 <MX_TIM2_Init+0xdc>)
 800070a:	f002 fabd 	bl	8002c88 <HAL_TIM_PWM_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000714:	f000 fa3c 	bl	8000b90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000718:	2300      	movs	r3, #0
 800071a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800071c:	2300      	movs	r3, #0
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000720:	f107 031c 	add.w	r3, r7, #28
 8000724:	4619      	mov	r1, r3
 8000726:	481c      	ldr	r0, [pc, #112]	; (8000798 <MX_TIM2_Init+0xdc>)
 8000728:	f003 f838 	bl	800379c <HAL_TIMEx_MasterConfigSynchronization>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000732:	f000 fa2d 	bl	8000b90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000736:	2360      	movs	r3, #96	; 0x60
 8000738:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000746:	463b      	mov	r3, r7
 8000748:	2200      	movs	r2, #0
 800074a:	4619      	mov	r1, r3
 800074c:	4812      	ldr	r0, [pc, #72]	; (8000798 <MX_TIM2_Init+0xdc>)
 800074e:	f002 fbed 	bl	8002f2c <HAL_TIM_PWM_ConfigChannel>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000758:	f000 fa1a 	bl	8000b90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800075c:	463b      	mov	r3, r7
 800075e:	2208      	movs	r2, #8
 8000760:	4619      	mov	r1, r3
 8000762:	480d      	ldr	r0, [pc, #52]	; (8000798 <MX_TIM2_Init+0xdc>)
 8000764:	f002 fbe2 	bl	8002f2c <HAL_TIM_PWM_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800076e:	f000 fa0f 	bl	8000b90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000772:	463b      	mov	r3, r7
 8000774:	220c      	movs	r2, #12
 8000776:	4619      	mov	r1, r3
 8000778:	4807      	ldr	r0, [pc, #28]	; (8000798 <MX_TIM2_Init+0xdc>)
 800077a:	f002 fbd7 	bl	8002f2c <HAL_TIM_PWM_ConfigChannel>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000784:	f000 fa04 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000788:	4803      	ldr	r0, [pc, #12]	; (8000798 <MX_TIM2_Init+0xdc>)
 800078a:	f000 fa49 	bl	8000c20 <HAL_TIM_MspPostInit>

}
 800078e:	bf00      	nop
 8000790:	3728      	adds	r7, #40	; 0x28
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	2000003c 	.word	0x2000003c

0800079c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007a0:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_USART3_UART_Init+0x58>)
 80007a2:	4a15      	ldr	r2, [pc, #84]	; (80007f8 <MX_USART3_UART_Init+0x5c>)
 80007a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007a6:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <MX_USART3_UART_Init+0x58>)
 80007a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ae:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_USART3_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_USART3_UART_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <MX_USART3_UART_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <MX_USART3_UART_Init+0x58>)
 80007c2:	220c      	movs	r2, #12
 80007c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c6:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <MX_USART3_UART_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <MX_USART3_UART_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d2:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <MX_USART3_UART_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <MX_USART3_UART_Init+0x58>)
 80007da:	2200      	movs	r2, #0
 80007dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_USART3_UART_Init+0x58>)
 80007e0:	f003 f86a 	bl	80038b8 <HAL_UART_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007ea:	f000 f9d1 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000088 	.word	0x20000088
 80007f8:	40004800 	.word	0x40004800

080007fc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000800:	4b14      	ldr	r3, [pc, #80]	; (8000854 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000802:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000806:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000808:	4b12      	ldr	r3, [pc, #72]	; (8000854 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080a:	2206      	movs	r2, #6
 800080c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000810:	2202      	movs	r2, #2
 8000812:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800081c:	2202      	movs	r2, #2
 800081e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000822:	2201      	movs	r2, #1
 8000824:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000828:	2200      	movs	r2, #0
 800082a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082e:	2200      	movs	r2, #0
 8000830:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000834:	2201      	movs	r2, #1
 8000836:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000840:	f000 ff7d 	bl	800173e <HAL_PCD_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800084a:	f000 f9a1 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000110 	.word	0x20000110

08000858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08c      	sub	sp, #48	; 0x30
 800085c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	4b68      	ldr	r3, [pc, #416]	; (8000a10 <MX_GPIO_Init+0x1b8>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a67      	ldr	r2, [pc, #412]	; (8000a10 <MX_GPIO_Init+0x1b8>)
 8000874:	f043 0304 	orr.w	r3, r3, #4
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b65      	ldr	r3, [pc, #404]	; (8000a10 <MX_GPIO_Init+0x1b8>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0304 	and.w	r3, r3, #4
 8000882:	61bb      	str	r3, [r7, #24]
 8000884:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000886:	4b62      	ldr	r3, [pc, #392]	; (8000a10 <MX_GPIO_Init+0x1b8>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a61      	ldr	r2, [pc, #388]	; (8000a10 <MX_GPIO_Init+0x1b8>)
 800088c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b5f      	ldr	r3, [pc, #380]	; (8000a10 <MX_GPIO_Init+0x1b8>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800089a:	617b      	str	r3, [r7, #20]
 800089c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	4b5c      	ldr	r3, [pc, #368]	; (8000a10 <MX_GPIO_Init+0x1b8>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a5b      	ldr	r2, [pc, #364]	; (8000a10 <MX_GPIO_Init+0x1b8>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b59      	ldr	r3, [pc, #356]	; (8000a10 <MX_GPIO_Init+0x1b8>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	4b56      	ldr	r3, [pc, #344]	; (8000a10 <MX_GPIO_Init+0x1b8>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a55      	ldr	r2, [pc, #340]	; (8000a10 <MX_GPIO_Init+0x1b8>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b53      	ldr	r3, [pc, #332]	; (8000a10 <MX_GPIO_Init+0x1b8>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ce:	4b50      	ldr	r3, [pc, #320]	; (8000a10 <MX_GPIO_Init+0x1b8>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a4f      	ldr	r2, [pc, #316]	; (8000a10 <MX_GPIO_Init+0x1b8>)
 80008d4:	f043 0308 	orr.w	r3, r3, #8
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b4d      	ldr	r3, [pc, #308]	; (8000a10 <MX_GPIO_Init+0x1b8>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0308 	and.w	r3, r3, #8
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008e6:	4b4a      	ldr	r3, [pc, #296]	; (8000a10 <MX_GPIO_Init+0x1b8>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a49      	ldr	r2, [pc, #292]	; (8000a10 <MX_GPIO_Init+0x1b8>)
 80008ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b47      	ldr	r3, [pc, #284]	; (8000a10 <MX_GPIO_Init+0x1b8>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	f244 0181 	movw	r1, #16513	; 0x4081
 8000904:	4843      	ldr	r0, [pc, #268]	; (8000a14 <MX_GPIO_Init+0x1bc>)
 8000906:	f000 ff01 	bl	800170c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	2140      	movs	r1, #64	; 0x40
 800090e:	4842      	ldr	r0, [pc, #264]	; (8000a18 <MX_GPIO_Init+0x1c0>)
 8000910:	f000 fefc 	bl	800170c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000914:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800091a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	483c      	ldr	r0, [pc, #240]	; (8000a1c <MX_GPIO_Init+0x1c4>)
 800092c:	f000 fd42 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000930:	2332      	movs	r3, #50	; 0x32
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000934:	2302      	movs	r3, #2
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093c:	2303      	movs	r3, #3
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000940:	230b      	movs	r3, #11
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	4834      	ldr	r0, [pc, #208]	; (8000a1c <MX_GPIO_Init+0x1c4>)
 800094c:	f000 fd32 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000950:	2386      	movs	r3, #134	; 0x86
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	2302      	movs	r3, #2
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095c:	2303      	movs	r3, #3
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000960:	230b      	movs	r3, #11
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	4619      	mov	r1, r3
 800096a:	482d      	ldr	r0, [pc, #180]	; (8000a20 <MX_GPIO_Init+0x1c8>)
 800096c:	f000 fd22 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000970:	f244 0381 	movw	r3, #16513	; 0x4081
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	4822      	ldr	r0, [pc, #136]	; (8000a14 <MX_GPIO_Init+0x1bc>)
 800098a:	f000 fd13 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800098e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000994:	2302      	movs	r3, #2
 8000996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099c:	2303      	movs	r3, #3
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009a0:	230b      	movs	r3, #11
 80009a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	4619      	mov	r1, r3
 80009aa:	481a      	ldr	r0, [pc, #104]	; (8000a14 <MX_GPIO_Init+0x1bc>)
 80009ac:	f000 fd02 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009b0:	2340      	movs	r3, #64	; 0x40
 80009b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b4:	2301      	movs	r3, #1
 80009b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	4619      	mov	r1, r3
 80009c6:	4814      	ldr	r0, [pc, #80]	; (8000a18 <MX_GPIO_Init+0x1c0>)
 80009c8:	f000 fcf4 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009cc:	2380      	movs	r3, #128	; 0x80
 80009ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d0:	2300      	movs	r3, #0
 80009d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	480e      	ldr	r0, [pc, #56]	; (8000a18 <MX_GPIO_Init+0x1c0>)
 80009e0:	f000 fce8 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80009e4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f2:	2303      	movs	r3, #3
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009f6:	230b      	movs	r3, #11
 80009f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_GPIO_Init+0x1c0>)
 8000a02:	f000 fcd7 	bl	80013b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a06:	bf00      	nop
 8000a08:	3730      	adds	r7, #48	; 0x30
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020400 	.word	0x40020400
 8000a18:	40021800 	.word	0x40021800
 8000a1c:	40020800 	.word	0x40020800
 8000a20:	40020000 	.word	0x40020000
 8000a24:	00000000 	.word	0x00000000

08000a28 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart3){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]

	if (ch1 == 'r'){
 8000a30:	4b51      	ldr	r3, [pc, #324]	; (8000b78 <HAL_UART_RxCpltCallback+0x150>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b72      	cmp	r3, #114	; 0x72
 8000a36:	d12f      	bne.n	8000a98 <HAL_UART_RxCpltCallback+0x70>
	   if (r >= 1.0){
 8000a38:	4b50      	ldr	r3, [pc, #320]	; (8000b7c <HAL_UART_RxCpltCallback+0x154>)
 8000a3a:	edd3 7a00 	vldr	s15, [r3]
 8000a3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000a42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a4a:	db04      	blt.n	8000a56 <HAL_UART_RxCpltCallback+0x2e>
		  r = 0 ;
 8000a4c:	4b4b      	ldr	r3, [pc, #300]	; (8000b7c <HAL_UART_RxCpltCallback+0x154>)
 8000a4e:	f04f 0200 	mov.w	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	e00d      	b.n	8000a72 <HAL_UART_RxCpltCallback+0x4a>
	   } else{
		  r += 0.2;
 8000a56:	4b49      	ldr	r3, [pc, #292]	; (8000b7c <HAL_UART_RxCpltCallback+0x154>)
 8000a58:	edd3 7a00 	vldr	s15, [r3]
 8000a5c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a60:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8000b70 <HAL_UART_RxCpltCallback+0x148>
 8000a64:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000a68:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a6c:	4b43      	ldr	r3, [pc, #268]	; (8000b7c <HAL_UART_RxCpltCallback+0x154>)
 8000a6e:	edc3 7a00 	vstr	s15, [r3]
	   }
	   htim2.Instance -> CCR1 = (10000-1) * r;
 8000a72:	4b42      	ldr	r3, [pc, #264]	; (8000b7c <HAL_UART_RxCpltCallback+0x154>)
 8000a74:	edd3 7a00 	vldr	s15, [r3]
 8000a78:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8000b80 <HAL_UART_RxCpltCallback+0x158>
 8000a7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a80:	4b40      	ldr	r3, [pc, #256]	; (8000b84 <HAL_UART_RxCpltCallback+0x15c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a88:	ee17 2a90 	vmov	r2, s15
 8000a8c:	635a      	str	r2, [r3, #52]	; 0x34
	   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //PA0
 8000a8e:	2100      	movs	r1, #0
 8000a90:	483c      	ldr	r0, [pc, #240]	; (8000b84 <HAL_UART_RxCpltCallback+0x15c>)
 8000a92:	f002 f951 	bl	8002d38 <HAL_TIM_PWM_Start>
			b += 0.2;
		}
		htim2.Instance -> CCR4 = (10000-1) * b;
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4); //PA3
	}
}
 8000a96:	e066      	b.n	8000b66 <HAL_UART_RxCpltCallback+0x13e>
	}else if (ch1 == 'g'){
 8000a98:	4b37      	ldr	r3, [pc, #220]	; (8000b78 <HAL_UART_RxCpltCallback+0x150>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b67      	cmp	r3, #103	; 0x67
 8000a9e:	d12f      	bne.n	8000b00 <HAL_UART_RxCpltCallback+0xd8>
		if (g >= 1.0){
 8000aa0:	4b39      	ldr	r3, [pc, #228]	; (8000b88 <HAL_UART_RxCpltCallback+0x160>)
 8000aa2:	edd3 7a00 	vldr	s15, [r3]
 8000aa6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000aaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ab2:	db04      	blt.n	8000abe <HAL_UART_RxCpltCallback+0x96>
			g = 0;
 8000ab4:	4b34      	ldr	r3, [pc, #208]	; (8000b88 <HAL_UART_RxCpltCallback+0x160>)
 8000ab6:	f04f 0200 	mov.w	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	e00d      	b.n	8000ada <HAL_UART_RxCpltCallback+0xb2>
			g += 0.2;
 8000abe:	4b32      	ldr	r3, [pc, #200]	; (8000b88 <HAL_UART_RxCpltCallback+0x160>)
 8000ac0:	edd3 7a00 	vldr	s15, [r3]
 8000ac4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ac8:	ed9f 6b29 	vldr	d6, [pc, #164]	; 8000b70 <HAL_UART_RxCpltCallback+0x148>
 8000acc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ad0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ad4:	4b2c      	ldr	r3, [pc, #176]	; (8000b88 <HAL_UART_RxCpltCallback+0x160>)
 8000ad6:	edc3 7a00 	vstr	s15, [r3]
		htim2.Instance -> CCR3 = (10000-1) * g;
 8000ada:	4b2b      	ldr	r3, [pc, #172]	; (8000b88 <HAL_UART_RxCpltCallback+0x160>)
 8000adc:	edd3 7a00 	vldr	s15, [r3]
 8000ae0:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8000b80 <HAL_UART_RxCpltCallback+0x158>
 8000ae4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ae8:	4b26      	ldr	r3, [pc, #152]	; (8000b84 <HAL_UART_RxCpltCallback+0x15c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000af0:	ee17 2a90 	vmov	r2, s15
 8000af4:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); //PB10
 8000af6:	2108      	movs	r1, #8
 8000af8:	4822      	ldr	r0, [pc, #136]	; (8000b84 <HAL_UART_RxCpltCallback+0x15c>)
 8000afa:	f002 f91d 	bl	8002d38 <HAL_TIM_PWM_Start>
}
 8000afe:	e032      	b.n	8000b66 <HAL_UART_RxCpltCallback+0x13e>
	}else if (ch1 == 'b'){
 8000b00:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_UART_RxCpltCallback+0x150>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b62      	cmp	r3, #98	; 0x62
 8000b06:	d12e      	bne.n	8000b66 <HAL_UART_RxCpltCallback+0x13e>
		if (b >= 1.0){
 8000b08:	4b20      	ldr	r3, [pc, #128]	; (8000b8c <HAL_UART_RxCpltCallback+0x164>)
 8000b0a:	edd3 7a00 	vldr	s15, [r3]
 8000b0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000b12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b1a:	db04      	blt.n	8000b26 <HAL_UART_RxCpltCallback+0xfe>
			b = 0;
 8000b1c:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <HAL_UART_RxCpltCallback+0x164>)
 8000b1e:	f04f 0200 	mov.w	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	e00d      	b.n	8000b42 <HAL_UART_RxCpltCallback+0x11a>
			b += 0.2;
 8000b26:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <HAL_UART_RxCpltCallback+0x164>)
 8000b28:	edd3 7a00 	vldr	s15, [r3]
 8000b2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b30:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8000b70 <HAL_UART_RxCpltCallback+0x148>
 8000b34:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b38:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b3c:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <HAL_UART_RxCpltCallback+0x164>)
 8000b3e:	edc3 7a00 	vstr	s15, [r3]
		htim2.Instance -> CCR4 = (10000-1) * b;
 8000b42:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <HAL_UART_RxCpltCallback+0x164>)
 8000b44:	edd3 7a00 	vldr	s15, [r3]
 8000b48:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000b80 <HAL_UART_RxCpltCallback+0x158>
 8000b4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <HAL_UART_RxCpltCallback+0x15c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b58:	ee17 2a90 	vmov	r2, s15
 8000b5c:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4); //PA3
 8000b5e:	210c      	movs	r1, #12
 8000b60:	4808      	ldr	r0, [pc, #32]	; (8000b84 <HAL_UART_RxCpltCallback+0x15c>)
 8000b62:	f002 f8e9 	bl	8002d38 <HAL_TIM_PWM_Start>
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	9999999a 	.word	0x9999999a
 8000b74:	3fc99999 	.word	0x3fc99999
 8000b78:	20000038 	.word	0x20000038
 8000b7c:	2000002c 	.word	0x2000002c
 8000b80:	461c3c00 	.word	0x461c3c00
 8000b84:	2000003c 	.word	0x2000003c
 8000b88:	20000030 	.word	0x20000030
 8000b8c:	20000034 	.word	0x20000034

08000b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b94:	b672      	cpsid	i
}
 8000b96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <Error_Handler+0x8>
	...

08000b9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <HAL_MspInit+0x44>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	4a0e      	ldr	r2, [pc, #56]	; (8000be0 <HAL_MspInit+0x44>)
 8000ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bac:	6413      	str	r3, [r2, #64]	; 0x40
 8000bae:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <HAL_MspInit+0x44>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <HAL_MspInit+0x44>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbe:	4a08      	ldr	r2, [pc, #32]	; (8000be0 <HAL_MspInit+0x44>)
 8000bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <HAL_MspInit+0x44>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	40023800 	.word	0x40023800

08000be4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bf4:	d10b      	bne.n	8000c0e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <HAL_TIM_PWM_MspInit+0x38>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	4a08      	ldr	r2, [pc, #32]	; (8000c1c <HAL_TIM_PWM_MspInit+0x38>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6413      	str	r3, [r2, #64]	; 0x40
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_TIM_PWM_MspInit+0x38>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c0e:	bf00      	nop
 8000c10:	3714      	adds	r7, #20
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	40023800 	.word	0x40023800

08000c20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c40:	d138      	bne.n	8000cb4 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	4b1e      	ldr	r3, [pc, #120]	; (8000cbc <HAL_TIM_MspPostInit+0x9c>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a1d      	ldr	r2, [pc, #116]	; (8000cbc <HAL_TIM_MspPostInit+0x9c>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <HAL_TIM_MspPostInit+0x9c>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5a:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <HAL_TIM_MspPostInit+0x9c>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a17      	ldr	r2, [pc, #92]	; (8000cbc <HAL_TIM_MspPostInit+0x9c>)
 8000c60:	f043 0302 	orr.w	r3, r3, #2
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <HAL_TIM_MspPostInit+0x9c>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    PA3     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000c72:	2309      	movs	r3, #9
 8000c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c82:	2301      	movs	r3, #1
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	480c      	ldr	r0, [pc, #48]	; (8000cc0 <HAL_TIM_MspPostInit+0xa0>)
 8000c8e:	f000 fb91 	bl	80013b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4619      	mov	r1, r3
 8000cae:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <HAL_TIM_MspPostInit+0xa4>)
 8000cb0:	f000 fb80 	bl	80013b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000cb4:	bf00      	nop
 8000cb6:	3728      	adds	r7, #40	; 0x28
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40020000 	.word	0x40020000
 8000cc4:	40020400 	.word	0x40020400

08000cc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b0ae      	sub	sp, #184	; 0xb8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	2290      	movs	r2, #144	; 0x90
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f004 fbeb 	bl	80054c4 <memset>
  if(huart->Instance==USART3)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a26      	ldr	r2, [pc, #152]	; (8000d8c <HAL_UART_MspInit+0xc4>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d144      	bne.n	8000d82 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cfc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4618      	mov	r0, r3
 8000d08:	f001 fb96 	bl	8002438 <HAL_RCCEx_PeriphCLKConfig>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d12:	f7ff ff3d 	bl	8000b90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d16:	4b1e      	ldr	r3, [pc, #120]	; (8000d90 <HAL_UART_MspInit+0xc8>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1a:	4a1d      	ldr	r2, [pc, #116]	; (8000d90 <HAL_UART_MspInit+0xc8>)
 8000d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d20:	6413      	str	r3, [r2, #64]	; 0x40
 8000d22:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <HAL_UART_MspInit+0xc8>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2e:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <HAL_UART_MspInit+0xc8>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a17      	ldr	r2, [pc, #92]	; (8000d90 <HAL_UART_MspInit+0xc8>)
 8000d34:	f043 0308 	orr.w	r3, r3, #8
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <HAL_UART_MspInit+0xc8>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0308 	and.w	r3, r3, #8
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d60:	2307      	movs	r3, #7
 8000d62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d66:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4809      	ldr	r0, [pc, #36]	; (8000d94 <HAL_UART_MspInit+0xcc>)
 8000d6e:	f000 fb21 	bl	80013b4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2100      	movs	r1, #0
 8000d76:	2027      	movs	r0, #39	; 0x27
 8000d78:	f000 fa53 	bl	8001222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d7c:	2027      	movs	r0, #39	; 0x27
 8000d7e:	f000 fa6c 	bl	800125a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d82:	bf00      	nop
 8000d84:	37b8      	adds	r7, #184	; 0xb8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40004800 	.word	0x40004800
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40020c00 	.word	0x40020c00

08000d98 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b0ae      	sub	sp, #184	; 0xb8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	2290      	movs	r2, #144	; 0x90
 8000db6:	2100      	movs	r1, #0
 8000db8:	4618      	mov	r0, r3
 8000dba:	f004 fb83 	bl	80054c4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000dc6:	d159      	bne.n	8000e7c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000dc8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000dcc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f001 fb2d 	bl	8002438 <HAL_RCCEx_PeriphCLKConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000de4:	f7ff fed4 	bl	8000b90 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de8:	4b26      	ldr	r3, [pc, #152]	; (8000e84 <HAL_PCD_MspInit+0xec>)
 8000dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dec:	4a25      	ldr	r2, [pc, #148]	; (8000e84 <HAL_PCD_MspInit+0xec>)
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	6313      	str	r3, [r2, #48]	; 0x30
 8000df4:	4b23      	ldr	r3, [pc, #140]	; (8000e84 <HAL_PCD_MspInit+0xec>)
 8000df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df8:	f003 0301 	and.w	r3, r3, #1
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e00:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e14:	2303      	movs	r3, #3
 8000e16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e1a:	230a      	movs	r3, #10
 8000e1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e20:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e24:	4619      	mov	r1, r3
 8000e26:	4818      	ldr	r0, [pc, #96]	; (8000e88 <HAL_PCD_MspInit+0xf0>)
 8000e28:	f000 fac4 	bl	80013b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e34:	2300      	movs	r3, #0
 8000e36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e40:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e44:	4619      	mov	r1, r3
 8000e46:	4810      	ldr	r0, [pc, #64]	; (8000e88 <HAL_PCD_MspInit+0xf0>)
 8000e48:	f000 fab4 	bl	80013b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e4c:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <HAL_PCD_MspInit+0xec>)
 8000e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e50:	4a0c      	ldr	r2, [pc, #48]	; (8000e84 <HAL_PCD_MspInit+0xec>)
 8000e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e56:	6353      	str	r3, [r2, #52]	; 0x34
 8000e58:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <HAL_PCD_MspInit+0xec>)
 8000e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <HAL_PCD_MspInit+0xec>)
 8000e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e68:	4a06      	ldr	r2, [pc, #24]	; (8000e84 <HAL_PCD_MspInit+0xec>)
 8000e6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e6e:	6453      	str	r3, [r2, #68]	; 0x44
 8000e70:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <HAL_PCD_MspInit+0xec>)
 8000e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e7c:	bf00      	nop
 8000e7e:	37b8      	adds	r7, #184	; 0xb8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40020000 	.word	0x40020000

08000e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <NMI_Handler+0x4>

08000e92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <HardFault_Handler+0x4>

08000e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <MemManage_Handler+0x4>

08000e9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <BusFault_Handler+0x4>

08000ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <UsageFault_Handler+0x4>

08000eaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed8:	f000 f884 	bl	8000fe4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ee4:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <USART3_IRQHandler+0x10>)
 8000ee6:	f002 fdfd 	bl	8003ae4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000088 	.word	0x20000088

08000ef4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <SystemInit+0x20>)
 8000efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000efe:	4a05      	ldr	r2, [pc, #20]	; (8000f14 <SystemInit+0x20>)
 8000f00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f1c:	480d      	ldr	r0, [pc, #52]	; (8000f54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f1e:	490e      	ldr	r1, [pc, #56]	; (8000f58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f20:	4a0e      	ldr	r2, [pc, #56]	; (8000f5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f24:	e002      	b.n	8000f2c <LoopCopyDataInit>

08000f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2a:	3304      	adds	r3, #4

08000f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f30:	d3f9      	bcc.n	8000f26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f32:	4a0b      	ldr	r2, [pc, #44]	; (8000f60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f34:	4c0b      	ldr	r4, [pc, #44]	; (8000f64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f38:	e001      	b.n	8000f3e <LoopFillZerobss>

08000f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f3c:	3204      	adds	r2, #4

08000f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f40:	d3fb      	bcc.n	8000f3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f42:	f7ff ffd7 	bl	8000ef4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f46:	f004 fac5 	bl	80054d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f4a:	f7ff faf3 	bl	8000534 <main>
  bx  lr    
 8000f4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f50:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f58:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f5c:	0800555c 	.word	0x0800555c
  ldr r2, =_sbss
 8000f60:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f64:	2000061c 	.word	0x2000061c

08000f68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f68:	e7fe      	b.n	8000f68 <ADC_IRQHandler>

08000f6a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6e:	2003      	movs	r0, #3
 8000f70:	f000 f94c 	bl	800120c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f74:	2000      	movs	r0, #0
 8000f76:	f000 f805 	bl	8000f84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f7a:	f7ff fe0f 	bl	8000b9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f7e:	2300      	movs	r3, #0
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <HAL_InitTick+0x54>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <HAL_InitTick+0x58>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4619      	mov	r1, r3
 8000f96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 f967 	bl	8001276 <HAL_SYSTICK_Config>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e00e      	b.n	8000fd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2b0f      	cmp	r3, #15
 8000fb6:	d80a      	bhi.n	8000fce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc0:	f000 f92f 	bl	8001222 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc4:	4a06      	ldr	r2, [pc, #24]	; (8000fe0 <HAL_InitTick+0x5c>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	e000      	b.n	8000fd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	20000008 	.word	0x20000008
 8000fe0:	20000004 	.word	0x20000004

08000fe4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_IncTick+0x20>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	461a      	mov	r2, r3
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_IncTick+0x24>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	4a04      	ldr	r2, [pc, #16]	; (8001008 <HAL_IncTick+0x24>)
 8000ff6:	6013      	str	r3, [r2, #0]
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	20000008 	.word	0x20000008
 8001008:	20000618 	.word	0x20000618

0800100c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return uwTick;
 8001010:	4b03      	ldr	r3, [pc, #12]	; (8001020 <HAL_GetTick+0x14>)
 8001012:	681b      	ldr	r3, [r3, #0]
}
 8001014:	4618      	mov	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	20000618 	.word	0x20000618

08001024 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800102c:	f7ff ffee 	bl	800100c <HAL_GetTick>
 8001030:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800103c:	d005      	beq.n	800104a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800103e:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <HAL_Delay+0x44>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	461a      	mov	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4413      	add	r3, r2
 8001048:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800104a:	bf00      	nop
 800104c:	f7ff ffde 	bl	800100c <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	429a      	cmp	r2, r3
 800105a:	d8f7      	bhi.n	800104c <HAL_Delay+0x28>
  {
  }
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000008 	.word	0x20000008

0800106c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800107c:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <__NVIC_SetPriorityGrouping+0x40>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001088:	4013      	ands	r3, r2
 800108a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 8001096:	4313      	orrs	r3, r2
 8001098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109a:	4a04      	ldr	r2, [pc, #16]	; (80010ac <__NVIC_SetPriorityGrouping+0x40>)
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	60d3      	str	r3, [r2, #12]
}
 80010a0:	bf00      	nop
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000ed00 	.word	0xe000ed00
 80010b0:	05fa0000 	.word	0x05fa0000

080010b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <__NVIC_GetPriorityGrouping+0x18>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	0a1b      	lsrs	r3, r3, #8
 80010be:	f003 0307 	and.w	r3, r3, #7
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	db0b      	blt.n	80010fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	f003 021f 	and.w	r2, r3, #31
 80010e8:	4907      	ldr	r1, [pc, #28]	; (8001108 <__NVIC_EnableIRQ+0x38>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	095b      	lsrs	r3, r3, #5
 80010f0:	2001      	movs	r0, #1
 80010f2:	fa00 f202 	lsl.w	r2, r0, r2
 80010f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000e100 	.word	0xe000e100

0800110c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	6039      	str	r1, [r7, #0]
 8001116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111c:	2b00      	cmp	r3, #0
 800111e:	db0a      	blt.n	8001136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	b2da      	uxtb	r2, r3
 8001124:	490c      	ldr	r1, [pc, #48]	; (8001158 <__NVIC_SetPriority+0x4c>)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	0112      	lsls	r2, r2, #4
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	440b      	add	r3, r1
 8001130:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001134:	e00a      	b.n	800114c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4908      	ldr	r1, [pc, #32]	; (800115c <__NVIC_SetPriority+0x50>)
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	f003 030f 	and.w	r3, r3, #15
 8001142:	3b04      	subs	r3, #4
 8001144:	0112      	lsls	r2, r2, #4
 8001146:	b2d2      	uxtb	r2, r2
 8001148:	440b      	add	r3, r1
 800114a:	761a      	strb	r2, [r3, #24]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000e100 	.word	0xe000e100
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001160:	b480      	push	{r7}
 8001162:	b089      	sub	sp, #36	; 0x24
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f1c3 0307 	rsb	r3, r3, #7
 800117a:	2b04      	cmp	r3, #4
 800117c:	bf28      	it	cs
 800117e:	2304      	movcs	r3, #4
 8001180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3304      	adds	r3, #4
 8001186:	2b06      	cmp	r3, #6
 8001188:	d902      	bls.n	8001190 <NVIC_EncodePriority+0x30>
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3b03      	subs	r3, #3
 800118e:	e000      	b.n	8001192 <NVIC_EncodePriority+0x32>
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	f04f 32ff 	mov.w	r2, #4294967295
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43da      	mvns	r2, r3
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	401a      	ands	r2, r3
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a8:	f04f 31ff 	mov.w	r1, #4294967295
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	fa01 f303 	lsl.w	r3, r1, r3
 80011b2:	43d9      	mvns	r1, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b8:	4313      	orrs	r3, r2
         );
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3724      	adds	r7, #36	; 0x24
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
	...

080011c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011d8:	d301      	bcc.n	80011de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011da:	2301      	movs	r3, #1
 80011dc:	e00f      	b.n	80011fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011de:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <SysTick_Config+0x40>)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e6:	210f      	movs	r1, #15
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ec:	f7ff ff8e 	bl	800110c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <SysTick_Config+0x40>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f6:	4b04      	ldr	r3, [pc, #16]	; (8001208 <SysTick_Config+0x40>)
 80011f8:	2207      	movs	r2, #7
 80011fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	e000e010 	.word	0xe000e010

0800120c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff ff29 	bl	800106c <__NVIC_SetPriorityGrouping>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001222:	b580      	push	{r7, lr}
 8001224:	b086      	sub	sp, #24
 8001226:	af00      	add	r7, sp, #0
 8001228:	4603      	mov	r3, r0
 800122a:	60b9      	str	r1, [r7, #8]
 800122c:	607a      	str	r2, [r7, #4]
 800122e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001234:	f7ff ff3e 	bl	80010b4 <__NVIC_GetPriorityGrouping>
 8001238:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	68b9      	ldr	r1, [r7, #8]
 800123e:	6978      	ldr	r0, [r7, #20]
 8001240:	f7ff ff8e 	bl	8001160 <NVIC_EncodePriority>
 8001244:	4602      	mov	r2, r0
 8001246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124a:	4611      	mov	r1, r2
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff5d 	bl	800110c <__NVIC_SetPriority>
}
 8001252:	bf00      	nop
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff31 	bl	80010d0 <__NVIC_EnableIRQ>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff ffa2 	bl	80011c8 <SysTick_Config>
 8001284:	4603      	mov	r3, r0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b084      	sub	sp, #16
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800129c:	f7ff feb6 	bl	800100c <HAL_GetTick>
 80012a0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d008      	beq.n	80012c0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2280      	movs	r2, #128	; 0x80
 80012b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e052      	b.n	8001366 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f022 0216 	bic.w	r2, r2, #22
 80012ce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	695a      	ldr	r2, [r3, #20]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012de:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d103      	bne.n	80012f0 <HAL_DMA_Abort+0x62>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d007      	beq.n	8001300 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 0208 	bic.w	r2, r2, #8
 80012fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 0201 	bic.w	r2, r2, #1
 800130e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001310:	e013      	b.n	800133a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001312:	f7ff fe7b 	bl	800100c <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b05      	cmp	r3, #5
 800131e:	d90c      	bls.n	800133a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2220      	movs	r2, #32
 8001324:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2203      	movs	r2, #3
 800132a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e015      	b.n	8001366 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1e4      	bne.n	8001312 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800134c:	223f      	movs	r2, #63	; 0x3f
 800134e:	409a      	lsls	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2201      	movs	r2, #1
 8001358:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d004      	beq.n	800138c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2280      	movs	r2, #128	; 0x80
 8001386:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e00c      	b.n	80013a6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2205      	movs	r2, #5
 8001390:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 0201 	bic.w	r2, r2, #1
 80013a2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b089      	sub	sp, #36	; 0x24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
 80013d2:	e175      	b.n	80016c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80013d4:	2201      	movs	r2, #1
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	4013      	ands	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	f040 8164 	bne.w	80016ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f003 0303 	and.w	r3, r3, #3
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d005      	beq.n	800140a <HAL_GPIO_Init+0x56>
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d130      	bne.n	800146c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	2203      	movs	r2, #3
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43db      	mvns	r3, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4013      	ands	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	68da      	ldr	r2, [r3, #12]
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4313      	orrs	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001440:	2201      	movs	r2, #1
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	091b      	lsrs	r3, r3, #4
 8001456:	f003 0201 	and.w	r2, r3, #1
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 0303 	and.w	r3, r3, #3
 8001474:	2b03      	cmp	r3, #3
 8001476:	d017      	beq.n	80014a8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	2203      	movs	r2, #3
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 0303 	and.w	r3, r3, #3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d123      	bne.n	80014fc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	08da      	lsrs	r2, r3, #3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3208      	adds	r2, #8
 80014bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	f003 0307 	and.w	r3, r3, #7
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	220f      	movs	r2, #15
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	691a      	ldr	r2, [r3, #16]
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	08da      	lsrs	r2, r3, #3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	3208      	adds	r2, #8
 80014f6:	69b9      	ldr	r1, [r7, #24]
 80014f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	2203      	movs	r2, #3
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 0203 	and.w	r2, r3, #3
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001538:	2b00      	cmp	r3, #0
 800153a:	f000 80be 	beq.w	80016ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153e:	4b66      	ldr	r3, [pc, #408]	; (80016d8 <HAL_GPIO_Init+0x324>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001542:	4a65      	ldr	r2, [pc, #404]	; (80016d8 <HAL_GPIO_Init+0x324>)
 8001544:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001548:	6453      	str	r3, [r2, #68]	; 0x44
 800154a:	4b63      	ldr	r3, [pc, #396]	; (80016d8 <HAL_GPIO_Init+0x324>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001556:	4a61      	ldr	r2, [pc, #388]	; (80016dc <HAL_GPIO_Init+0x328>)
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	089b      	lsrs	r3, r3, #2
 800155c:	3302      	adds	r3, #2
 800155e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001562:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f003 0303 	and.w	r3, r3, #3
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	220f      	movs	r2, #15
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43db      	mvns	r3, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4013      	ands	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a58      	ldr	r2, [pc, #352]	; (80016e0 <HAL_GPIO_Init+0x32c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d037      	beq.n	80015f2 <HAL_GPIO_Init+0x23e>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a57      	ldr	r2, [pc, #348]	; (80016e4 <HAL_GPIO_Init+0x330>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d031      	beq.n	80015ee <HAL_GPIO_Init+0x23a>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a56      	ldr	r2, [pc, #344]	; (80016e8 <HAL_GPIO_Init+0x334>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d02b      	beq.n	80015ea <HAL_GPIO_Init+0x236>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a55      	ldr	r2, [pc, #340]	; (80016ec <HAL_GPIO_Init+0x338>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d025      	beq.n	80015e6 <HAL_GPIO_Init+0x232>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a54      	ldr	r2, [pc, #336]	; (80016f0 <HAL_GPIO_Init+0x33c>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d01f      	beq.n	80015e2 <HAL_GPIO_Init+0x22e>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a53      	ldr	r2, [pc, #332]	; (80016f4 <HAL_GPIO_Init+0x340>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d019      	beq.n	80015de <HAL_GPIO_Init+0x22a>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a52      	ldr	r2, [pc, #328]	; (80016f8 <HAL_GPIO_Init+0x344>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d013      	beq.n	80015da <HAL_GPIO_Init+0x226>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a51      	ldr	r2, [pc, #324]	; (80016fc <HAL_GPIO_Init+0x348>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d00d      	beq.n	80015d6 <HAL_GPIO_Init+0x222>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a50      	ldr	r2, [pc, #320]	; (8001700 <HAL_GPIO_Init+0x34c>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d007      	beq.n	80015d2 <HAL_GPIO_Init+0x21e>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a4f      	ldr	r2, [pc, #316]	; (8001704 <HAL_GPIO_Init+0x350>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d101      	bne.n	80015ce <HAL_GPIO_Init+0x21a>
 80015ca:	2309      	movs	r3, #9
 80015cc:	e012      	b.n	80015f4 <HAL_GPIO_Init+0x240>
 80015ce:	230a      	movs	r3, #10
 80015d0:	e010      	b.n	80015f4 <HAL_GPIO_Init+0x240>
 80015d2:	2308      	movs	r3, #8
 80015d4:	e00e      	b.n	80015f4 <HAL_GPIO_Init+0x240>
 80015d6:	2307      	movs	r3, #7
 80015d8:	e00c      	b.n	80015f4 <HAL_GPIO_Init+0x240>
 80015da:	2306      	movs	r3, #6
 80015dc:	e00a      	b.n	80015f4 <HAL_GPIO_Init+0x240>
 80015de:	2305      	movs	r3, #5
 80015e0:	e008      	b.n	80015f4 <HAL_GPIO_Init+0x240>
 80015e2:	2304      	movs	r3, #4
 80015e4:	e006      	b.n	80015f4 <HAL_GPIO_Init+0x240>
 80015e6:	2303      	movs	r3, #3
 80015e8:	e004      	b.n	80015f4 <HAL_GPIO_Init+0x240>
 80015ea:	2302      	movs	r3, #2
 80015ec:	e002      	b.n	80015f4 <HAL_GPIO_Init+0x240>
 80015ee:	2301      	movs	r3, #1
 80015f0:	e000      	b.n	80015f4 <HAL_GPIO_Init+0x240>
 80015f2:	2300      	movs	r3, #0
 80015f4:	69fa      	ldr	r2, [r7, #28]
 80015f6:	f002 0203 	and.w	r2, r2, #3
 80015fa:	0092      	lsls	r2, r2, #2
 80015fc:	4093      	lsls	r3, r2
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4313      	orrs	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001604:	4935      	ldr	r1, [pc, #212]	; (80016dc <HAL_GPIO_Init+0x328>)
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	089b      	lsrs	r3, r3, #2
 800160a:	3302      	adds	r3, #2
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001612:	4b3d      	ldr	r3, [pc, #244]	; (8001708 <HAL_GPIO_Init+0x354>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	43db      	mvns	r3, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4013      	ands	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	4313      	orrs	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001636:	4a34      	ldr	r2, [pc, #208]	; (8001708 <HAL_GPIO_Init+0x354>)
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800163c:	4b32      	ldr	r3, [pc, #200]	; (8001708 <HAL_GPIO_Init+0x354>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	4313      	orrs	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001660:	4a29      	ldr	r2, [pc, #164]	; (8001708 <HAL_GPIO_Init+0x354>)
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001666:	4b28      	ldr	r3, [pc, #160]	; (8001708 <HAL_GPIO_Init+0x354>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	43db      	mvns	r3, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4013      	ands	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	4313      	orrs	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800168a:	4a1f      	ldr	r2, [pc, #124]	; (8001708 <HAL_GPIO_Init+0x354>)
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001690:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <HAL_GPIO_Init+0x354>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	43db      	mvns	r3, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4013      	ands	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d003      	beq.n	80016b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016b4:	4a14      	ldr	r2, [pc, #80]	; (8001708 <HAL_GPIO_Init+0x354>)
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	3301      	adds	r3, #1
 80016be:	61fb      	str	r3, [r7, #28]
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	2b0f      	cmp	r3, #15
 80016c4:	f67f ae86 	bls.w	80013d4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80016c8:	bf00      	nop
 80016ca:	bf00      	nop
 80016cc:	3724      	adds	r7, #36	; 0x24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40013800 	.word	0x40013800
 80016e0:	40020000 	.word	0x40020000
 80016e4:	40020400 	.word	0x40020400
 80016e8:	40020800 	.word	0x40020800
 80016ec:	40020c00 	.word	0x40020c00
 80016f0:	40021000 	.word	0x40021000
 80016f4:	40021400 	.word	0x40021400
 80016f8:	40021800 	.word	0x40021800
 80016fc:	40021c00 	.word	0x40021c00
 8001700:	40022000 	.word	0x40022000
 8001704:	40022400 	.word	0x40022400
 8001708:	40013c00 	.word	0x40013c00

0800170c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	460b      	mov	r3, r1
 8001716:	807b      	strh	r3, [r7, #2]
 8001718:	4613      	mov	r3, r2
 800171a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800171c:	787b      	ldrb	r3, [r7, #1]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001722:	887a      	ldrh	r2, [r7, #2]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001728:	e003      	b.n	8001732 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800172a:	887b      	ldrh	r3, [r7, #2]
 800172c:	041a      	lsls	r2, r3, #16
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	619a      	str	r2, [r3, #24]
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800173e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001740:	b08f      	sub	sp, #60	; 0x3c
 8001742:	af0a      	add	r7, sp, #40	; 0x28
 8001744:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d101      	bne.n	8001750 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e116      	b.n	800197e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d106      	bne.n	8001770 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff fb14 	bl	8000d98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2203      	movs	r2, #3
 8001774:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800177c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001780:	2b00      	cmp	r3, #0
 8001782:	d102      	bne.n	800178a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f003 fbfc 	bl	8004f8c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	603b      	str	r3, [r7, #0]
 800179a:	687e      	ldr	r6, [r7, #4]
 800179c:	466d      	mov	r5, sp
 800179e:	f106 0410 	add.w	r4, r6, #16
 80017a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80017b2:	1d33      	adds	r3, r6, #4
 80017b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017b6:	6838      	ldr	r0, [r7, #0]
 80017b8:	f003 fb90 	bl	8004edc <USB_CoreInit>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d005      	beq.n	80017ce <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2202      	movs	r2, #2
 80017c6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e0d7      	b.n	800197e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2100      	movs	r1, #0
 80017d4:	4618      	mov	r0, r3
 80017d6:	f003 fbea 	bl	8004fae <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017da:	2300      	movs	r3, #0
 80017dc:	73fb      	strb	r3, [r7, #15]
 80017de:	e04a      	b.n	8001876 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017e0:	7bfa      	ldrb	r2, [r7, #15]
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	4613      	mov	r3, r2
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	4413      	add	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	440b      	add	r3, r1
 80017ee:	333d      	adds	r3, #61	; 0x3d
 80017f0:	2201      	movs	r2, #1
 80017f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80017f4:	7bfa      	ldrb	r2, [r7, #15]
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	4613      	mov	r3, r2
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	4413      	add	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	440b      	add	r3, r1
 8001802:	333c      	adds	r3, #60	; 0x3c
 8001804:	7bfa      	ldrb	r2, [r7, #15]
 8001806:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001808:	7bfa      	ldrb	r2, [r7, #15]
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	b298      	uxth	r0, r3
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	4613      	mov	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	4413      	add	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	440b      	add	r3, r1
 800181a:	3344      	adds	r3, #68	; 0x44
 800181c:	4602      	mov	r2, r0
 800181e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001820:	7bfa      	ldrb	r2, [r7, #15]
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	4613      	mov	r3, r2
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	4413      	add	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	440b      	add	r3, r1
 800182e:	3340      	adds	r3, #64	; 0x40
 8001830:	2200      	movs	r2, #0
 8001832:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001834:	7bfa      	ldrb	r2, [r7, #15]
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	4413      	add	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	440b      	add	r3, r1
 8001842:	3348      	adds	r3, #72	; 0x48
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001848:	7bfa      	ldrb	r2, [r7, #15]
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	4613      	mov	r3, r2
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	4413      	add	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	334c      	adds	r3, #76	; 0x4c
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800185c:	7bfa      	ldrb	r2, [r7, #15]
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	4613      	mov	r3, r2
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	4413      	add	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	440b      	add	r3, r1
 800186a:	3354      	adds	r3, #84	; 0x54
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001870:	7bfb      	ldrb	r3, [r7, #15]
 8001872:	3301      	adds	r3, #1
 8001874:	73fb      	strb	r3, [r7, #15]
 8001876:	7bfa      	ldrb	r2, [r7, #15]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	429a      	cmp	r2, r3
 800187e:	d3af      	bcc.n	80017e0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001880:	2300      	movs	r3, #0
 8001882:	73fb      	strb	r3, [r7, #15]
 8001884:	e044      	b.n	8001910 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001886:	7bfa      	ldrb	r2, [r7, #15]
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	4613      	mov	r3, r2
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	4413      	add	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	440b      	add	r3, r1
 8001894:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001898:	2200      	movs	r2, #0
 800189a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800189c:	7bfa      	ldrb	r2, [r7, #15]
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	4613      	mov	r3, r2
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	4413      	add	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	440b      	add	r3, r1
 80018aa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80018ae:	7bfa      	ldrb	r2, [r7, #15]
 80018b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018b2:	7bfa      	ldrb	r2, [r7, #15]
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	4613      	mov	r3, r2
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	4413      	add	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	440b      	add	r3, r1
 80018c0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018c8:	7bfa      	ldrb	r2, [r7, #15]
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	4613      	mov	r3, r2
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	4413      	add	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	440b      	add	r3, r1
 80018d6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018de:	7bfa      	ldrb	r2, [r7, #15]
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	4413      	add	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	440b      	add	r3, r1
 80018ec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018f4:	7bfa      	ldrb	r2, [r7, #15]
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	4613      	mov	r3, r2
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	4413      	add	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800190a:	7bfb      	ldrb	r3, [r7, #15]
 800190c:	3301      	adds	r3, #1
 800190e:	73fb      	strb	r3, [r7, #15]
 8001910:	7bfa      	ldrb	r2, [r7, #15]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	429a      	cmp	r2, r3
 8001918:	d3b5      	bcc.n	8001886 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	603b      	str	r3, [r7, #0]
 8001920:	687e      	ldr	r6, [r7, #4]
 8001922:	466d      	mov	r5, sp
 8001924:	f106 0410 	add.w	r4, r6, #16
 8001928:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800192a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800192c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800192e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001930:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001934:	e885 0003 	stmia.w	r5, {r0, r1}
 8001938:	1d33      	adds	r3, r6, #4
 800193a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800193c:	6838      	ldr	r0, [r7, #0]
 800193e:	f003 fb83 	bl	8005048 <USB_DevInit>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d005      	beq.n	8001954 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2202      	movs	r2, #2
 800194c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e014      	b.n	800197e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001968:	2b01      	cmp	r3, #1
 800196a:	d102      	bne.n	8001972 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 f80b 	bl	8001988 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f003 fd41 	bl	80053fe <USB_DevDisconnect>

  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001988 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2201      	movs	r2, #1
 800199a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80019b6:	4b05      	ldr	r3, [pc, #20]	; (80019cc <HAL_PCDEx_ActivateLPM+0x44>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	10000003 	.word	0x10000003

080019d0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a04      	ldr	r2, [pc, #16]	; (80019ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019de:	6013      	str	r3, [r2, #0]
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40007000 	.word	0x40007000

080019f0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80019fa:	4b23      	ldr	r3, [pc, #140]	; (8001a88 <HAL_PWREx_EnableOverDrive+0x98>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	4a22      	ldr	r2, [pc, #136]	; (8001a88 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a04:	6413      	str	r3, [r2, #64]	; 0x40
 8001a06:	4b20      	ldr	r3, [pc, #128]	; (8001a88 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0e:	603b      	str	r3, [r7, #0]
 8001a10:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001a12:	4b1e      	ldr	r3, [pc, #120]	; (8001a8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a1d      	ldr	r2, [pc, #116]	; (8001a8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a1c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a1e:	f7ff faf5 	bl	800100c <HAL_GetTick>
 8001a22:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a24:	e009      	b.n	8001a3a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a26:	f7ff faf1 	bl	800100c <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a34:	d901      	bls.n	8001a3a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e022      	b.n	8001a80 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a3a:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a46:	d1ee      	bne.n	8001a26 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001a48:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0f      	ldr	r2, [pc, #60]	; (8001a8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a52:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a54:	f7ff fada 	bl	800100c <HAL_GetTick>
 8001a58:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a5a:	e009      	b.n	8001a70 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a5c:	f7ff fad6 	bl	800100c <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a6a:	d901      	bls.n	8001a70 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e007      	b.n	8001a80 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a7c:	d1ee      	bne.n	8001a5c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40007000 	.word	0x40007000

08001a90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e29b      	b.n	8001fde <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 8087 	beq.w	8001bc2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ab4:	4b96      	ldr	r3, [pc, #600]	; (8001d10 <HAL_RCC_OscConfig+0x280>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 030c 	and.w	r3, r3, #12
 8001abc:	2b04      	cmp	r3, #4
 8001abe:	d00c      	beq.n	8001ada <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ac0:	4b93      	ldr	r3, [pc, #588]	; (8001d10 <HAL_RCC_OscConfig+0x280>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 030c 	and.w	r3, r3, #12
 8001ac8:	2b08      	cmp	r3, #8
 8001aca:	d112      	bne.n	8001af2 <HAL_RCC_OscConfig+0x62>
 8001acc:	4b90      	ldr	r3, [pc, #576]	; (8001d10 <HAL_RCC_OscConfig+0x280>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ad4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ad8:	d10b      	bne.n	8001af2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ada:	4b8d      	ldr	r3, [pc, #564]	; (8001d10 <HAL_RCC_OscConfig+0x280>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d06c      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x130>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d168      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e275      	b.n	8001fde <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001afa:	d106      	bne.n	8001b0a <HAL_RCC_OscConfig+0x7a>
 8001afc:	4b84      	ldr	r3, [pc, #528]	; (8001d10 <HAL_RCC_OscConfig+0x280>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a83      	ldr	r2, [pc, #524]	; (8001d10 <HAL_RCC_OscConfig+0x280>)
 8001b02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b06:	6013      	str	r3, [r2, #0]
 8001b08:	e02e      	b.n	8001b68 <HAL_RCC_OscConfig+0xd8>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10c      	bne.n	8001b2c <HAL_RCC_OscConfig+0x9c>
 8001b12:	4b7f      	ldr	r3, [pc, #508]	; (8001d10 <HAL_RCC_OscConfig+0x280>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a7e      	ldr	r2, [pc, #504]	; (8001d10 <HAL_RCC_OscConfig+0x280>)
 8001b18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	4b7c      	ldr	r3, [pc, #496]	; (8001d10 <HAL_RCC_OscConfig+0x280>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a7b      	ldr	r2, [pc, #492]	; (8001d10 <HAL_RCC_OscConfig+0x280>)
 8001b24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b28:	6013      	str	r3, [r2, #0]
 8001b2a:	e01d      	b.n	8001b68 <HAL_RCC_OscConfig+0xd8>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b34:	d10c      	bne.n	8001b50 <HAL_RCC_OscConfig+0xc0>
 8001b36:	4b76      	ldr	r3, [pc, #472]	; (8001d10 <HAL_RCC_OscConfig+0x280>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a75      	ldr	r2, [pc, #468]	; (8001d10 <HAL_RCC_OscConfig+0x280>)
 8001b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	4b73      	ldr	r3, [pc, #460]	; (8001d10 <HAL_RCC_OscConfig+0x280>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a72      	ldr	r2, [pc, #456]	; (8001d10 <HAL_RCC_OscConfig+0x280>)
 8001b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	e00b      	b.n	8001b68 <HAL_RCC_OscConfig+0xd8>
 8001b50:	4b6f      	ldr	r3, [pc, #444]	; (8001d10 <HAL_RCC_OscConfig+0x280>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a6e      	ldr	r2, [pc, #440]	; (8001d10 <HAL_RCC_OscConfig+0x280>)
 8001b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b5a:	6013      	str	r3, [r2, #0]
 8001b5c:	4b6c      	ldr	r3, [pc, #432]	; (8001d10 <HAL_RCC_OscConfig+0x280>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a6b      	ldr	r2, [pc, #428]	; (8001d10 <HAL_RCC_OscConfig+0x280>)
 8001b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d013      	beq.n	8001b98 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b70:	f7ff fa4c 	bl	800100c <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b78:	f7ff fa48 	bl	800100c <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b64      	cmp	r3, #100	; 0x64
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e229      	b.n	8001fde <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8a:	4b61      	ldr	r3, [pc, #388]	; (8001d10 <HAL_RCC_OscConfig+0x280>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0f0      	beq.n	8001b78 <HAL_RCC_OscConfig+0xe8>
 8001b96:	e014      	b.n	8001bc2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b98:	f7ff fa38 	bl	800100c <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba0:	f7ff fa34 	bl	800100c <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b64      	cmp	r3, #100	; 0x64
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e215      	b.n	8001fde <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bb2:	4b57      	ldr	r3, [pc, #348]	; (8001d10 <HAL_RCC_OscConfig+0x280>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f0      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x110>
 8001bbe:	e000      	b.n	8001bc2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d069      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bce:	4b50      	ldr	r3, [pc, #320]	; (8001d10 <HAL_RCC_OscConfig+0x280>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00b      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bda:	4b4d      	ldr	r3, [pc, #308]	; (8001d10 <HAL_RCC_OscConfig+0x280>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 030c 	and.w	r3, r3, #12
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	d11c      	bne.n	8001c20 <HAL_RCC_OscConfig+0x190>
 8001be6:	4b4a      	ldr	r3, [pc, #296]	; (8001d10 <HAL_RCC_OscConfig+0x280>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d116      	bne.n	8001c20 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bf2:	4b47      	ldr	r3, [pc, #284]	; (8001d10 <HAL_RCC_OscConfig+0x280>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d005      	beq.n	8001c0a <HAL_RCC_OscConfig+0x17a>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d001      	beq.n	8001c0a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e1e9      	b.n	8001fde <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c0a:	4b41      	ldr	r3, [pc, #260]	; (8001d10 <HAL_RCC_OscConfig+0x280>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	493d      	ldr	r1, [pc, #244]	; (8001d10 <HAL_RCC_OscConfig+0x280>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c1e:	e040      	b.n	8001ca2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d023      	beq.n	8001c70 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c28:	4b39      	ldr	r3, [pc, #228]	; (8001d10 <HAL_RCC_OscConfig+0x280>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a38      	ldr	r2, [pc, #224]	; (8001d10 <HAL_RCC_OscConfig+0x280>)
 8001c2e:	f043 0301 	orr.w	r3, r3, #1
 8001c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c34:	f7ff f9ea 	bl	800100c <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c3c:	f7ff f9e6 	bl	800100c <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e1c7      	b.n	8001fde <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c4e:	4b30      	ldr	r3, [pc, #192]	; (8001d10 <HAL_RCC_OscConfig+0x280>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0f0      	beq.n	8001c3c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5a:	4b2d      	ldr	r3, [pc, #180]	; (8001d10 <HAL_RCC_OscConfig+0x280>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	4929      	ldr	r1, [pc, #164]	; (8001d10 <HAL_RCC_OscConfig+0x280>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	600b      	str	r3, [r1, #0]
 8001c6e:	e018      	b.n	8001ca2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c70:	4b27      	ldr	r3, [pc, #156]	; (8001d10 <HAL_RCC_OscConfig+0x280>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a26      	ldr	r2, [pc, #152]	; (8001d10 <HAL_RCC_OscConfig+0x280>)
 8001c76:	f023 0301 	bic.w	r3, r3, #1
 8001c7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7c:	f7ff f9c6 	bl	800100c <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c84:	f7ff f9c2 	bl	800100c <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e1a3      	b.n	8001fde <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c96:	4b1e      	ldr	r3, [pc, #120]	; (8001d10 <HAL_RCC_OscConfig+0x280>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f0      	bne.n	8001c84 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0308 	and.w	r3, r3, #8
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d038      	beq.n	8001d20 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d019      	beq.n	8001cea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cb6:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <HAL_RCC_OscConfig+0x280>)
 8001cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cba:	4a15      	ldr	r2, [pc, #84]	; (8001d10 <HAL_RCC_OscConfig+0x280>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc2:	f7ff f9a3 	bl	800100c <HAL_GetTick>
 8001cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cca:	f7ff f99f 	bl	800100c <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e180      	b.n	8001fde <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <HAL_RCC_OscConfig+0x280>)
 8001cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0f0      	beq.n	8001cca <HAL_RCC_OscConfig+0x23a>
 8001ce8:	e01a      	b.n	8001d20 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <HAL_RCC_OscConfig+0x280>)
 8001cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cee:	4a08      	ldr	r2, [pc, #32]	; (8001d10 <HAL_RCC_OscConfig+0x280>)
 8001cf0:	f023 0301 	bic.w	r3, r3, #1
 8001cf4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf6:	f7ff f989 	bl	800100c <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cfc:	e00a      	b.n	8001d14 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cfe:	f7ff f985 	bl	800100c <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d903      	bls.n	8001d14 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e166      	b.n	8001fde <HAL_RCC_OscConfig+0x54e>
 8001d10:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d14:	4b92      	ldr	r3, [pc, #584]	; (8001f60 <HAL_RCC_OscConfig+0x4d0>)
 8001d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1ee      	bne.n	8001cfe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 80a4 	beq.w	8001e76 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d2e:	4b8c      	ldr	r3, [pc, #560]	; (8001f60 <HAL_RCC_OscConfig+0x4d0>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d10d      	bne.n	8001d56 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d3a:	4b89      	ldr	r3, [pc, #548]	; (8001f60 <HAL_RCC_OscConfig+0x4d0>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	4a88      	ldr	r2, [pc, #544]	; (8001f60 <HAL_RCC_OscConfig+0x4d0>)
 8001d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d44:	6413      	str	r3, [r2, #64]	; 0x40
 8001d46:	4b86      	ldr	r3, [pc, #536]	; (8001f60 <HAL_RCC_OscConfig+0x4d0>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	60bb      	str	r3, [r7, #8]
 8001d50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d52:	2301      	movs	r3, #1
 8001d54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d56:	4b83      	ldr	r3, [pc, #524]	; (8001f64 <HAL_RCC_OscConfig+0x4d4>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d118      	bne.n	8001d94 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001d62:	4b80      	ldr	r3, [pc, #512]	; (8001f64 <HAL_RCC_OscConfig+0x4d4>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a7f      	ldr	r2, [pc, #508]	; (8001f64 <HAL_RCC_OscConfig+0x4d4>)
 8001d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d6e:	f7ff f94d 	bl	800100c <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d76:	f7ff f949 	bl	800100c <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b64      	cmp	r3, #100	; 0x64
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e12a      	b.n	8001fde <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d88:	4b76      	ldr	r3, [pc, #472]	; (8001f64 <HAL_RCC_OscConfig+0x4d4>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d106      	bne.n	8001daa <HAL_RCC_OscConfig+0x31a>
 8001d9c:	4b70      	ldr	r3, [pc, #448]	; (8001f60 <HAL_RCC_OscConfig+0x4d0>)
 8001d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da0:	4a6f      	ldr	r2, [pc, #444]	; (8001f60 <HAL_RCC_OscConfig+0x4d0>)
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	6713      	str	r3, [r2, #112]	; 0x70
 8001da8:	e02d      	b.n	8001e06 <HAL_RCC_OscConfig+0x376>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10c      	bne.n	8001dcc <HAL_RCC_OscConfig+0x33c>
 8001db2:	4b6b      	ldr	r3, [pc, #428]	; (8001f60 <HAL_RCC_OscConfig+0x4d0>)
 8001db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db6:	4a6a      	ldr	r2, [pc, #424]	; (8001f60 <HAL_RCC_OscConfig+0x4d0>)
 8001db8:	f023 0301 	bic.w	r3, r3, #1
 8001dbc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dbe:	4b68      	ldr	r3, [pc, #416]	; (8001f60 <HAL_RCC_OscConfig+0x4d0>)
 8001dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc2:	4a67      	ldr	r2, [pc, #412]	; (8001f60 <HAL_RCC_OscConfig+0x4d0>)
 8001dc4:	f023 0304 	bic.w	r3, r3, #4
 8001dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dca:	e01c      	b.n	8001e06 <HAL_RCC_OscConfig+0x376>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	2b05      	cmp	r3, #5
 8001dd2:	d10c      	bne.n	8001dee <HAL_RCC_OscConfig+0x35e>
 8001dd4:	4b62      	ldr	r3, [pc, #392]	; (8001f60 <HAL_RCC_OscConfig+0x4d0>)
 8001dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd8:	4a61      	ldr	r2, [pc, #388]	; (8001f60 <HAL_RCC_OscConfig+0x4d0>)
 8001dda:	f043 0304 	orr.w	r3, r3, #4
 8001dde:	6713      	str	r3, [r2, #112]	; 0x70
 8001de0:	4b5f      	ldr	r3, [pc, #380]	; (8001f60 <HAL_RCC_OscConfig+0x4d0>)
 8001de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de4:	4a5e      	ldr	r2, [pc, #376]	; (8001f60 <HAL_RCC_OscConfig+0x4d0>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	6713      	str	r3, [r2, #112]	; 0x70
 8001dec:	e00b      	b.n	8001e06 <HAL_RCC_OscConfig+0x376>
 8001dee:	4b5c      	ldr	r3, [pc, #368]	; (8001f60 <HAL_RCC_OscConfig+0x4d0>)
 8001df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df2:	4a5b      	ldr	r2, [pc, #364]	; (8001f60 <HAL_RCC_OscConfig+0x4d0>)
 8001df4:	f023 0301 	bic.w	r3, r3, #1
 8001df8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dfa:	4b59      	ldr	r3, [pc, #356]	; (8001f60 <HAL_RCC_OscConfig+0x4d0>)
 8001dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfe:	4a58      	ldr	r2, [pc, #352]	; (8001f60 <HAL_RCC_OscConfig+0x4d0>)
 8001e00:	f023 0304 	bic.w	r3, r3, #4
 8001e04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d015      	beq.n	8001e3a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e0e:	f7ff f8fd 	bl	800100c <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e14:	e00a      	b.n	8001e2c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e16:	f7ff f8f9 	bl	800100c <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e0d8      	b.n	8001fde <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e2c:	4b4c      	ldr	r3, [pc, #304]	; (8001f60 <HAL_RCC_OscConfig+0x4d0>)
 8001e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0ee      	beq.n	8001e16 <HAL_RCC_OscConfig+0x386>
 8001e38:	e014      	b.n	8001e64 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e3a:	f7ff f8e7 	bl	800100c <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e40:	e00a      	b.n	8001e58 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e42:	f7ff f8e3 	bl	800100c <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e0c2      	b.n	8001fde <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e58:	4b41      	ldr	r3, [pc, #260]	; (8001f60 <HAL_RCC_OscConfig+0x4d0>)
 8001e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1ee      	bne.n	8001e42 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e64:	7dfb      	ldrb	r3, [r7, #23]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d105      	bne.n	8001e76 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e6a:	4b3d      	ldr	r3, [pc, #244]	; (8001f60 <HAL_RCC_OscConfig+0x4d0>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	4a3c      	ldr	r2, [pc, #240]	; (8001f60 <HAL_RCC_OscConfig+0x4d0>)
 8001e70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 80ae 	beq.w	8001fdc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e80:	4b37      	ldr	r3, [pc, #220]	; (8001f60 <HAL_RCC_OscConfig+0x4d0>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 030c 	and.w	r3, r3, #12
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d06d      	beq.n	8001f68 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d14b      	bne.n	8001f2c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e94:	4b32      	ldr	r3, [pc, #200]	; (8001f60 <HAL_RCC_OscConfig+0x4d0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a31      	ldr	r2, [pc, #196]	; (8001f60 <HAL_RCC_OscConfig+0x4d0>)
 8001e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea0:	f7ff f8b4 	bl	800100c <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea8:	f7ff f8b0 	bl	800100c <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e091      	b.n	8001fde <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eba:	4b29      	ldr	r3, [pc, #164]	; (8001f60 <HAL_RCC_OscConfig+0x4d0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1f0      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69da      	ldr	r2, [r3, #28]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed4:	019b      	lsls	r3, r3, #6
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001edc:	085b      	lsrs	r3, r3, #1
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	041b      	lsls	r3, r3, #16
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee8:	061b      	lsls	r3, r3, #24
 8001eea:	431a      	orrs	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef0:	071b      	lsls	r3, r3, #28
 8001ef2:	491b      	ldr	r1, [pc, #108]	; (8001f60 <HAL_RCC_OscConfig+0x4d0>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ef8:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <HAL_RCC_OscConfig+0x4d0>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a18      	ldr	r2, [pc, #96]	; (8001f60 <HAL_RCC_OscConfig+0x4d0>)
 8001efe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f04:	f7ff f882 	bl	800100c <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f0c:	f7ff f87e 	bl	800100c <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e05f      	b.n	8001fde <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f1e:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <HAL_RCC_OscConfig+0x4d0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0f0      	beq.n	8001f0c <HAL_RCC_OscConfig+0x47c>
 8001f2a:	e057      	b.n	8001fdc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f2c:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <HAL_RCC_OscConfig+0x4d0>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a0b      	ldr	r2, [pc, #44]	; (8001f60 <HAL_RCC_OscConfig+0x4d0>)
 8001f32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f38:	f7ff f868 	bl	800100c <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f40:	f7ff f864 	bl	800100c <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e045      	b.n	8001fde <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f52:	4b03      	ldr	r3, [pc, #12]	; (8001f60 <HAL_RCC_OscConfig+0x4d0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1f0      	bne.n	8001f40 <HAL_RCC_OscConfig+0x4b0>
 8001f5e:	e03d      	b.n	8001fdc <HAL_RCC_OscConfig+0x54c>
 8001f60:	40023800 	.word	0x40023800
 8001f64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001f68:	4b1f      	ldr	r3, [pc, #124]	; (8001fe8 <HAL_RCC_OscConfig+0x558>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d030      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d129      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d122      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f98:	4013      	ands	r3, r2
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f9e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d119      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fae:	085b      	lsrs	r3, r3, #1
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d10f      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d107      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d001      	beq.n	8001fdc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e000      	b.n	8001fde <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40023800 	.word	0x40023800

08001fec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e0d0      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002004:	4b6a      	ldr	r3, [pc, #424]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 030f 	and.w	r3, r3, #15
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	429a      	cmp	r2, r3
 8002010:	d910      	bls.n	8002034 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002012:	4b67      	ldr	r3, [pc, #412]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f023 020f 	bic.w	r2, r3, #15
 800201a:	4965      	ldr	r1, [pc, #404]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	4313      	orrs	r3, r2
 8002020:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002022:	4b63      	ldr	r3, [pc, #396]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	429a      	cmp	r2, r3
 800202e:	d001      	beq.n	8002034 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e0b8      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d020      	beq.n	8002082 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800204c:	4b59      	ldr	r3, [pc, #356]	; (80021b4 <HAL_RCC_ClockConfig+0x1c8>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	4a58      	ldr	r2, [pc, #352]	; (80021b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002052:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002056:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0308 	and.w	r3, r3, #8
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002064:	4b53      	ldr	r3, [pc, #332]	; (80021b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	4a52      	ldr	r2, [pc, #328]	; (80021b4 <HAL_RCC_ClockConfig+0x1c8>)
 800206a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800206e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002070:	4b50      	ldr	r3, [pc, #320]	; (80021b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	494d      	ldr	r1, [pc, #308]	; (80021b4 <HAL_RCC_ClockConfig+0x1c8>)
 800207e:	4313      	orrs	r3, r2
 8002080:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	d040      	beq.n	8002110 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d107      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002096:	4b47      	ldr	r3, [pc, #284]	; (80021b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d115      	bne.n	80020ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e07f      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d107      	bne.n	80020be <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ae:	4b41      	ldr	r3, [pc, #260]	; (80021b4 <HAL_RCC_ClockConfig+0x1c8>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d109      	bne.n	80020ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e073      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020be:	4b3d      	ldr	r3, [pc, #244]	; (80021b4 <HAL_RCC_ClockConfig+0x1c8>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e06b      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ce:	4b39      	ldr	r3, [pc, #228]	; (80021b4 <HAL_RCC_ClockConfig+0x1c8>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f023 0203 	bic.w	r2, r3, #3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	4936      	ldr	r1, [pc, #216]	; (80021b4 <HAL_RCC_ClockConfig+0x1c8>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020e0:	f7fe ff94 	bl	800100c <HAL_GetTick>
 80020e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e6:	e00a      	b.n	80020fe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e8:	f7fe ff90 	bl	800100c <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e053      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fe:	4b2d      	ldr	r3, [pc, #180]	; (80021b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 020c 	and.w	r2, r3, #12
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	429a      	cmp	r2, r3
 800210e:	d1eb      	bne.n	80020e8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002110:	4b27      	ldr	r3, [pc, #156]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 030f 	and.w	r3, r3, #15
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	429a      	cmp	r2, r3
 800211c:	d210      	bcs.n	8002140 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211e:	4b24      	ldr	r3, [pc, #144]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f023 020f 	bic.w	r2, r3, #15
 8002126:	4922      	ldr	r1, [pc, #136]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	4313      	orrs	r3, r2
 800212c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800212e:	4b20      	ldr	r3, [pc, #128]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	429a      	cmp	r2, r3
 800213a:	d001      	beq.n	8002140 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e032      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b00      	cmp	r3, #0
 800214a:	d008      	beq.n	800215e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800214c:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <HAL_RCC_ClockConfig+0x1c8>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	4916      	ldr	r1, [pc, #88]	; (80021b4 <HAL_RCC_ClockConfig+0x1c8>)
 800215a:	4313      	orrs	r3, r2
 800215c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0308 	and.w	r3, r3, #8
 8002166:	2b00      	cmp	r3, #0
 8002168:	d009      	beq.n	800217e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800216a:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <HAL_RCC_ClockConfig+0x1c8>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	490e      	ldr	r1, [pc, #56]	; (80021b4 <HAL_RCC_ClockConfig+0x1c8>)
 800217a:	4313      	orrs	r3, r2
 800217c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800217e:	f000 f821 	bl	80021c4 <HAL_RCC_GetSysClockFreq>
 8002182:	4602      	mov	r2, r0
 8002184:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	091b      	lsrs	r3, r3, #4
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	490a      	ldr	r1, [pc, #40]	; (80021b8 <HAL_RCC_ClockConfig+0x1cc>)
 8002190:	5ccb      	ldrb	r3, [r1, r3]
 8002192:	fa22 f303 	lsr.w	r3, r2, r3
 8002196:	4a09      	ldr	r2, [pc, #36]	; (80021bc <HAL_RCC_ClockConfig+0x1d0>)
 8002198:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800219a:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <HAL_RCC_ClockConfig+0x1d4>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe fef0 	bl	8000f84 <HAL_InitTick>

  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40023c00 	.word	0x40023c00
 80021b4:	40023800 	.word	0x40023800
 80021b8:	08005534 	.word	0x08005534
 80021bc:	20000000 	.word	0x20000000
 80021c0:	20000004 	.word	0x20000004

080021c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021c8:	b094      	sub	sp, #80	; 0x50
 80021ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80021cc:	2300      	movs	r3, #0
 80021ce:	647b      	str	r3, [r7, #68]	; 0x44
 80021d0:	2300      	movs	r3, #0
 80021d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021d4:	2300      	movs	r3, #0
 80021d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80021d8:	2300      	movs	r3, #0
 80021da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021dc:	4b79      	ldr	r3, [pc, #484]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f003 030c 	and.w	r3, r3, #12
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	d00d      	beq.n	8002204 <HAL_RCC_GetSysClockFreq+0x40>
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	f200 80e1 	bhi.w	80023b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d002      	beq.n	80021f8 <HAL_RCC_GetSysClockFreq+0x34>
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d003      	beq.n	80021fe <HAL_RCC_GetSysClockFreq+0x3a>
 80021f6:	e0db      	b.n	80023b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021f8:	4b73      	ldr	r3, [pc, #460]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80021fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021fc:	e0db      	b.n	80023b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021fe:	4b73      	ldr	r3, [pc, #460]	; (80023cc <HAL_RCC_GetSysClockFreq+0x208>)
 8002200:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002202:	e0d8      	b.n	80023b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002204:	4b6f      	ldr	r3, [pc, #444]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800220c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800220e:	4b6d      	ldr	r3, [pc, #436]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d063      	beq.n	80022e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800221a:	4b6a      	ldr	r3, [pc, #424]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	099b      	lsrs	r3, r3, #6
 8002220:	2200      	movs	r2, #0
 8002222:	63bb      	str	r3, [r7, #56]	; 0x38
 8002224:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800222c:	633b      	str	r3, [r7, #48]	; 0x30
 800222e:	2300      	movs	r3, #0
 8002230:	637b      	str	r3, [r7, #52]	; 0x34
 8002232:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002236:	4622      	mov	r2, r4
 8002238:	462b      	mov	r3, r5
 800223a:	f04f 0000 	mov.w	r0, #0
 800223e:	f04f 0100 	mov.w	r1, #0
 8002242:	0159      	lsls	r1, r3, #5
 8002244:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002248:	0150      	lsls	r0, r2, #5
 800224a:	4602      	mov	r2, r0
 800224c:	460b      	mov	r3, r1
 800224e:	4621      	mov	r1, r4
 8002250:	1a51      	subs	r1, r2, r1
 8002252:	6139      	str	r1, [r7, #16]
 8002254:	4629      	mov	r1, r5
 8002256:	eb63 0301 	sbc.w	r3, r3, r1
 800225a:	617b      	str	r3, [r7, #20]
 800225c:	f04f 0200 	mov.w	r2, #0
 8002260:	f04f 0300 	mov.w	r3, #0
 8002264:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002268:	4659      	mov	r1, fp
 800226a:	018b      	lsls	r3, r1, #6
 800226c:	4651      	mov	r1, sl
 800226e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002272:	4651      	mov	r1, sl
 8002274:	018a      	lsls	r2, r1, #6
 8002276:	4651      	mov	r1, sl
 8002278:	ebb2 0801 	subs.w	r8, r2, r1
 800227c:	4659      	mov	r1, fp
 800227e:	eb63 0901 	sbc.w	r9, r3, r1
 8002282:	f04f 0200 	mov.w	r2, #0
 8002286:	f04f 0300 	mov.w	r3, #0
 800228a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800228e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002292:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002296:	4690      	mov	r8, r2
 8002298:	4699      	mov	r9, r3
 800229a:	4623      	mov	r3, r4
 800229c:	eb18 0303 	adds.w	r3, r8, r3
 80022a0:	60bb      	str	r3, [r7, #8]
 80022a2:	462b      	mov	r3, r5
 80022a4:	eb49 0303 	adc.w	r3, r9, r3
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	f04f 0200 	mov.w	r2, #0
 80022ae:	f04f 0300 	mov.w	r3, #0
 80022b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80022b6:	4629      	mov	r1, r5
 80022b8:	024b      	lsls	r3, r1, #9
 80022ba:	4621      	mov	r1, r4
 80022bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022c0:	4621      	mov	r1, r4
 80022c2:	024a      	lsls	r2, r1, #9
 80022c4:	4610      	mov	r0, r2
 80022c6:	4619      	mov	r1, r3
 80022c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022ca:	2200      	movs	r2, #0
 80022cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80022ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022d4:	f7fd ffb0 	bl	8000238 <__aeabi_uldivmod>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	4613      	mov	r3, r2
 80022de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022e0:	e058      	b.n	8002394 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022e2:	4b38      	ldr	r3, [pc, #224]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	099b      	lsrs	r3, r3, #6
 80022e8:	2200      	movs	r2, #0
 80022ea:	4618      	mov	r0, r3
 80022ec:	4611      	mov	r1, r2
 80022ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022f2:	623b      	str	r3, [r7, #32]
 80022f4:	2300      	movs	r3, #0
 80022f6:	627b      	str	r3, [r7, #36]	; 0x24
 80022f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80022fc:	4642      	mov	r2, r8
 80022fe:	464b      	mov	r3, r9
 8002300:	f04f 0000 	mov.w	r0, #0
 8002304:	f04f 0100 	mov.w	r1, #0
 8002308:	0159      	lsls	r1, r3, #5
 800230a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800230e:	0150      	lsls	r0, r2, #5
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	4641      	mov	r1, r8
 8002316:	ebb2 0a01 	subs.w	sl, r2, r1
 800231a:	4649      	mov	r1, r9
 800231c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002320:	f04f 0200 	mov.w	r2, #0
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800232c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002330:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002334:	ebb2 040a 	subs.w	r4, r2, sl
 8002338:	eb63 050b 	sbc.w	r5, r3, fp
 800233c:	f04f 0200 	mov.w	r2, #0
 8002340:	f04f 0300 	mov.w	r3, #0
 8002344:	00eb      	lsls	r3, r5, #3
 8002346:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800234a:	00e2      	lsls	r2, r4, #3
 800234c:	4614      	mov	r4, r2
 800234e:	461d      	mov	r5, r3
 8002350:	4643      	mov	r3, r8
 8002352:	18e3      	adds	r3, r4, r3
 8002354:	603b      	str	r3, [r7, #0]
 8002356:	464b      	mov	r3, r9
 8002358:	eb45 0303 	adc.w	r3, r5, r3
 800235c:	607b      	str	r3, [r7, #4]
 800235e:	f04f 0200 	mov.w	r2, #0
 8002362:	f04f 0300 	mov.w	r3, #0
 8002366:	e9d7 4500 	ldrd	r4, r5, [r7]
 800236a:	4629      	mov	r1, r5
 800236c:	028b      	lsls	r3, r1, #10
 800236e:	4621      	mov	r1, r4
 8002370:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002374:	4621      	mov	r1, r4
 8002376:	028a      	lsls	r2, r1, #10
 8002378:	4610      	mov	r0, r2
 800237a:	4619      	mov	r1, r3
 800237c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800237e:	2200      	movs	r2, #0
 8002380:	61bb      	str	r3, [r7, #24]
 8002382:	61fa      	str	r2, [r7, #28]
 8002384:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002388:	f7fd ff56 	bl	8000238 <__aeabi_uldivmod>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	4613      	mov	r3, r2
 8002392:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002394:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	0c1b      	lsrs	r3, r3, #16
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	3301      	adds	r3, #1
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80023a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023ae:	e002      	b.n	80023b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023b0:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80023b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3750      	adds	r7, #80	; 0x50
 80023bc:	46bd      	mov	sp, r7
 80023be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023c2:	bf00      	nop
 80023c4:	40023800 	.word	0x40023800
 80023c8:	00f42400 	.word	0x00f42400
 80023cc:	007a1200 	.word	0x007a1200

080023d0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023d4:	4b03      	ldr	r3, [pc, #12]	; (80023e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80023d6:	681b      	ldr	r3, [r3, #0]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	20000000 	.word	0x20000000

080023e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023ec:	f7ff fff0 	bl	80023d0 <HAL_RCC_GetHCLKFreq>
 80023f0:	4602      	mov	r2, r0
 80023f2:	4b05      	ldr	r3, [pc, #20]	; (8002408 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	0a9b      	lsrs	r3, r3, #10
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	4903      	ldr	r1, [pc, #12]	; (800240c <HAL_RCC_GetPCLK1Freq+0x24>)
 80023fe:	5ccb      	ldrb	r3, [r1, r3]
 8002400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002404:	4618      	mov	r0, r3
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40023800 	.word	0x40023800
 800240c:	08005544 	.word	0x08005544

08002410 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002414:	f7ff ffdc 	bl	80023d0 <HAL_RCC_GetHCLKFreq>
 8002418:	4602      	mov	r2, r0
 800241a:	4b05      	ldr	r3, [pc, #20]	; (8002430 <HAL_RCC_GetPCLK2Freq+0x20>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	0b5b      	lsrs	r3, r3, #13
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	4903      	ldr	r1, [pc, #12]	; (8002434 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002426:	5ccb      	ldrb	r3, [r1, r3]
 8002428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800242c:	4618      	mov	r0, r3
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40023800 	.word	0x40023800
 8002434:	08005544 	.word	0x08005544

08002438 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b088      	sub	sp, #32
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002444:	2300      	movs	r3, #0
 8002446:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002448:	2300      	movs	r3, #0
 800244a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800244c:	2300      	movs	r3, #0
 800244e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002450:	2300      	movs	r3, #0
 8002452:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b00      	cmp	r3, #0
 800245e:	d012      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002460:	4b69      	ldr	r3, [pc, #420]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	4a68      	ldr	r2, [pc, #416]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002466:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800246a:	6093      	str	r3, [r2, #8]
 800246c:	4b66      	ldr	r3, [pc, #408]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002474:	4964      	ldr	r1, [pc, #400]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002476:	4313      	orrs	r3, r2
 8002478:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002482:	2301      	movs	r3, #1
 8002484:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d017      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002492:	4b5d      	ldr	r3, [pc, #372]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002494:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002498:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a0:	4959      	ldr	r1, [pc, #356]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024b0:	d101      	bne.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80024b2:	2301      	movs	r3, #1
 80024b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80024be:	2301      	movs	r3, #1
 80024c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d017      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024ce:	4b4e      	ldr	r3, [pc, #312]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	494a      	ldr	r1, [pc, #296]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024ec:	d101      	bne.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80024ee:	2301      	movs	r3, #1
 80024f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80024fa:	2301      	movs	r3, #1
 80024fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800250a:	2301      	movs	r3, #1
 800250c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0320 	and.w	r3, r3, #32
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 808b 	beq.w	8002632 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800251c:	4b3a      	ldr	r3, [pc, #232]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800251e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002520:	4a39      	ldr	r2, [pc, #228]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002526:	6413      	str	r3, [r2, #64]	; 0x40
 8002528:	4b37      	ldr	r3, [pc, #220]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800252a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002530:	60bb      	str	r3, [r7, #8]
 8002532:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002534:	4b35      	ldr	r3, [pc, #212]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a34      	ldr	r2, [pc, #208]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800253a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800253e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002540:	f7fe fd64 	bl	800100c <HAL_GetTick>
 8002544:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002546:	e008      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002548:	f7fe fd60 	bl	800100c <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b64      	cmp	r3, #100	; 0x64
 8002554:	d901      	bls.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e38f      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800255a:	4b2c      	ldr	r3, [pc, #176]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0f0      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002566:	4b28      	ldr	r3, [pc, #160]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800256e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d035      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	429a      	cmp	r2, r3
 8002582:	d02e      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002584:	4b20      	ldr	r3, [pc, #128]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800258c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800258e:	4b1e      	ldr	r3, [pc, #120]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002592:	4a1d      	ldr	r2, [pc, #116]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002598:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800259a:	4b1b      	ldr	r3, [pc, #108]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800259c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259e:	4a1a      	ldr	r2, [pc, #104]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80025a6:	4a18      	ldr	r2, [pc, #96]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80025ac:	4b16      	ldr	r3, [pc, #88]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d114      	bne.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b8:	f7fe fd28 	bl	800100c <HAL_GetTick>
 80025bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025be:	e00a      	b.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025c0:	f7fe fd24 	bl	800100c <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e351      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d6:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0ee      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025ee:	d111      	bne.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80025f0:	4b05      	ldr	r3, [pc, #20]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025fc:	4b04      	ldr	r3, [pc, #16]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80025fe:	400b      	ands	r3, r1
 8002600:	4901      	ldr	r1, [pc, #4]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002602:	4313      	orrs	r3, r2
 8002604:	608b      	str	r3, [r1, #8]
 8002606:	e00b      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002608:	40023800 	.word	0x40023800
 800260c:	40007000 	.word	0x40007000
 8002610:	0ffffcff 	.word	0x0ffffcff
 8002614:	4bac      	ldr	r3, [pc, #688]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	4aab      	ldr	r2, [pc, #684]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800261a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800261e:	6093      	str	r3, [r2, #8]
 8002620:	4ba9      	ldr	r3, [pc, #676]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002622:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800262c:	49a6      	ldr	r1, [pc, #664]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800262e:	4313      	orrs	r3, r2
 8002630:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0310 	and.w	r3, r3, #16
 800263a:	2b00      	cmp	r3, #0
 800263c:	d010      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800263e:	4ba2      	ldr	r3, [pc, #648]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002640:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002644:	4aa0      	ldr	r2, [pc, #640]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002646:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800264a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800264e:	4b9e      	ldr	r3, [pc, #632]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002650:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002658:	499b      	ldr	r1, [pc, #620]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800265a:	4313      	orrs	r3, r2
 800265c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00a      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800266c:	4b96      	ldr	r3, [pc, #600]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800266e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002672:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800267a:	4993      	ldr	r1, [pc, #588]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800267c:	4313      	orrs	r3, r2
 800267e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00a      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800268e:	4b8e      	ldr	r3, [pc, #568]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002694:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800269c:	498a      	ldr	r1, [pc, #552]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00a      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026b0:	4b85      	ldr	r3, [pc, #532]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026be:	4982      	ldr	r1, [pc, #520]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00a      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80026d2:	4b7d      	ldr	r3, [pc, #500]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e0:	4979      	ldr	r1, [pc, #484]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00a      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026f4:	4b74      	ldr	r3, [pc, #464]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fa:	f023 0203 	bic.w	r2, r3, #3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	4971      	ldr	r1, [pc, #452]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00a      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002716:	4b6c      	ldr	r3, [pc, #432]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271c:	f023 020c 	bic.w	r2, r3, #12
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002724:	4968      	ldr	r1, [pc, #416]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002726:	4313      	orrs	r3, r2
 8002728:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00a      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002738:	4b63      	ldr	r3, [pc, #396]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800273a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800273e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002746:	4960      	ldr	r1, [pc, #384]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002748:	4313      	orrs	r3, r2
 800274a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00a      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800275a:	4b5b      	ldr	r3, [pc, #364]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800275c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002760:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002768:	4957      	ldr	r1, [pc, #348]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800276a:	4313      	orrs	r3, r2
 800276c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00a      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800277c:	4b52      	ldr	r3, [pc, #328]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800277e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002782:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278a:	494f      	ldr	r1, [pc, #316]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800278c:	4313      	orrs	r3, r2
 800278e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00a      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800279e:	4b4a      	ldr	r3, [pc, #296]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ac:	4946      	ldr	r1, [pc, #280]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00a      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80027c0:	4b41      	ldr	r3, [pc, #260]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ce:	493e      	ldr	r1, [pc, #248]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00a      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80027e2:	4b39      	ldr	r3, [pc, #228]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f0:	4935      	ldr	r1, [pc, #212]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00a      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002804:	4b30      	ldr	r3, [pc, #192]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800280a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002812:	492d      	ldr	r1, [pc, #180]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002814:	4313      	orrs	r3, r2
 8002816:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d011      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002826:	4b28      	ldr	r3, [pc, #160]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800282c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002834:	4924      	ldr	r1, [pc, #144]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002836:	4313      	orrs	r3, r2
 8002838:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002840:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002844:	d101      	bne.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002846:	2301      	movs	r3, #1
 8002848:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002856:	2301      	movs	r3, #1
 8002858:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00a      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002866:	4b18      	ldr	r3, [pc, #96]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002874:	4914      	ldr	r1, [pc, #80]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002876:	4313      	orrs	r3, r2
 8002878:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00b      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002888:	4b0f      	ldr	r3, [pc, #60]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800288a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002898:	490b      	ldr	r1, [pc, #44]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800289a:	4313      	orrs	r3, r2
 800289c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00f      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80028ac:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028bc:	4902      	ldr	r1, [pc, #8]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028c4:	e002      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x494>
 80028c6:	bf00      	nop
 80028c8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00b      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80028d8:	4b8a      	ldr	r3, [pc, #552]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028de:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e8:	4986      	ldr	r1, [pc, #536]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00b      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80028fc:	4b81      	ldr	r3, [pc, #516]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002902:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800290c:	497d      	ldr	r1, [pc, #500]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800290e:	4313      	orrs	r3, r2
 8002910:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d006      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 80d6 	beq.w	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002928:	4b76      	ldr	r3, [pc, #472]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a75      	ldr	r2, [pc, #468]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800292e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002932:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002934:	f7fe fb6a 	bl	800100c <HAL_GetTick>
 8002938:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800293a:	e008      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800293c:	f7fe fb66 	bl	800100c <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b64      	cmp	r3, #100	; 0x64
 8002948:	d901      	bls.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e195      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800294e:	4b6d      	ldr	r3, [pc, #436]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f0      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d021      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800296a:	2b00      	cmp	r3, #0
 800296c:	d11d      	bne.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800296e:	4b65      	ldr	r3, [pc, #404]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002970:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002974:	0c1b      	lsrs	r3, r3, #16
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800297c:	4b61      	ldr	r3, [pc, #388]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800297e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002982:	0e1b      	lsrs	r3, r3, #24
 8002984:	f003 030f 	and.w	r3, r3, #15
 8002988:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	019a      	lsls	r2, r3, #6
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	041b      	lsls	r3, r3, #16
 8002994:	431a      	orrs	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	061b      	lsls	r3, r3, #24
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	071b      	lsls	r3, r3, #28
 80029a2:	4958      	ldr	r1, [pc, #352]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d004      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029be:	d00a      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d02e      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029d4:	d129      	bne.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80029d6:	4b4b      	ldr	r3, [pc, #300]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029dc:	0c1b      	lsrs	r3, r3, #16
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80029e4:	4b47      	ldr	r3, [pc, #284]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029ea:	0f1b      	lsrs	r3, r3, #28
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	019a      	lsls	r2, r3, #6
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	041b      	lsls	r3, r3, #16
 80029fc:	431a      	orrs	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	061b      	lsls	r3, r3, #24
 8002a04:	431a      	orrs	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	071b      	lsls	r3, r3, #28
 8002a0a:	493e      	ldr	r1, [pc, #248]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002a12:	4b3c      	ldr	r3, [pc, #240]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a18:	f023 021f 	bic.w	r2, r3, #31
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a20:	3b01      	subs	r3, #1
 8002a22:	4938      	ldr	r1, [pc, #224]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d01d      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a36:	4b33      	ldr	r3, [pc, #204]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a3c:	0e1b      	lsrs	r3, r3, #24
 8002a3e:	f003 030f 	and.w	r3, r3, #15
 8002a42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a44:	4b2f      	ldr	r3, [pc, #188]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a4a:	0f1b      	lsrs	r3, r3, #28
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	019a      	lsls	r2, r3, #6
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	041b      	lsls	r3, r3, #16
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	061b      	lsls	r3, r3, #24
 8002a64:	431a      	orrs	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	071b      	lsls	r3, r3, #28
 8002a6a:	4926      	ldr	r1, [pc, #152]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d011      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	019a      	lsls	r2, r3, #6
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	041b      	lsls	r3, r3, #16
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	061b      	lsls	r3, r3, #24
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	071b      	lsls	r3, r3, #28
 8002a9a:	491a      	ldr	r1, [pc, #104]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002aa2:	4b18      	ldr	r3, [pc, #96]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a17      	ldr	r2, [pc, #92]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aa8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002aac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aae:	f7fe faad 	bl	800100c <HAL_GetTick>
 8002ab2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ab6:	f7fe faa9 	bl	800100c <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b64      	cmp	r3, #100	; 0x64
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e0d8      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ac8:	4b0e      	ldr	r3, [pc, #56]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0f0      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	f040 80ce 	bne.w	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002adc:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a08      	ldr	r2, [pc, #32]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ae2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ae6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ae8:	f7fe fa90 	bl	800100c <HAL_GetTick>
 8002aec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002aee:	e00b      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002af0:	f7fe fa8c 	bl	800100c <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b64      	cmp	r3, #100	; 0x64
 8002afc:	d904      	bls.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e0bb      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002b02:	bf00      	nop
 8002b04:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b08:	4b5e      	ldr	r3, [pc, #376]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b14:	d0ec      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d009      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d02e      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d12a      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b3e:	4b51      	ldr	r3, [pc, #324]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b44:	0c1b      	lsrs	r3, r3, #16
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b4c:	4b4d      	ldr	r3, [pc, #308]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b52:	0f1b      	lsrs	r3, r3, #28
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	019a      	lsls	r2, r3, #6
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	041b      	lsls	r3, r3, #16
 8002b64:	431a      	orrs	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	061b      	lsls	r3, r3, #24
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	071b      	lsls	r3, r3, #28
 8002b72:	4944      	ldr	r1, [pc, #272]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002b7a:	4b42      	ldr	r3, [pc, #264]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b80:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	021b      	lsls	r3, r3, #8
 8002b8c:	493d      	ldr	r1, [pc, #244]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d022      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ba4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ba8:	d11d      	bne.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002baa:	4b36      	ldr	r3, [pc, #216]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb0:	0e1b      	lsrs	r3, r3, #24
 8002bb2:	f003 030f 	and.w	r3, r3, #15
 8002bb6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002bb8:	4b32      	ldr	r3, [pc, #200]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bbe:	0f1b      	lsrs	r3, r3, #28
 8002bc0:	f003 0307 	and.w	r3, r3, #7
 8002bc4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	019a      	lsls	r2, r3, #6
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	041b      	lsls	r3, r3, #16
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	061b      	lsls	r3, r3, #24
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	071b      	lsls	r3, r3, #28
 8002bde:	4929      	ldr	r1, [pc, #164]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d028      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002bf2:	4b24      	ldr	r3, [pc, #144]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf8:	0e1b      	lsrs	r3, r3, #24
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c00:	4b20      	ldr	r3, [pc, #128]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c06:	0c1b      	lsrs	r3, r3, #16
 8002c08:	f003 0303 	and.w	r3, r3, #3
 8002c0c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	019a      	lsls	r2, r3, #6
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	041b      	lsls	r3, r3, #16
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	061b      	lsls	r3, r3, #24
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	071b      	lsls	r3, r3, #28
 8002c26:	4917      	ldr	r1, [pc, #92]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002c2e:	4b15      	ldr	r3, [pc, #84]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3c:	4911      	ldr	r1, [pc, #68]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002c44:	4b0f      	ldr	r3, [pc, #60]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a0e      	ldr	r2, [pc, #56]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c50:	f7fe f9dc 	bl	800100c <HAL_GetTick>
 8002c54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c58:	f7fe f9d8 	bl	800100c <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b64      	cmp	r3, #100	; 0x64
 8002c64:	d901      	bls.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e007      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c6a:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c76:	d1ef      	bne.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3720      	adds	r7, #32
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40023800 	.word	0x40023800

08002c88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e049      	b.n	8002d2e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d106      	bne.n	8002cb4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7fd ff98 	bl	8000be4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3304      	adds	r3, #4
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4610      	mov	r0, r2
 8002cc8:	f000 fa44 	bl	8003154 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
	...

08002d38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d109      	bne.n	8002d5c <HAL_TIM_PWM_Start+0x24>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	bf14      	ite	ne
 8002d54:	2301      	movne	r3, #1
 8002d56:	2300      	moveq	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	e03c      	b.n	8002dd6 <HAL_TIM_PWM_Start+0x9e>
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d109      	bne.n	8002d76 <HAL_TIM_PWM_Start+0x3e>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	bf14      	ite	ne
 8002d6e:	2301      	movne	r3, #1
 8002d70:	2300      	moveq	r3, #0
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	e02f      	b.n	8002dd6 <HAL_TIM_PWM_Start+0x9e>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	2b08      	cmp	r3, #8
 8002d7a:	d109      	bne.n	8002d90 <HAL_TIM_PWM_Start+0x58>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	bf14      	ite	ne
 8002d88:	2301      	movne	r3, #1
 8002d8a:	2300      	moveq	r3, #0
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	e022      	b.n	8002dd6 <HAL_TIM_PWM_Start+0x9e>
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	2b0c      	cmp	r3, #12
 8002d94:	d109      	bne.n	8002daa <HAL_TIM_PWM_Start+0x72>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	bf14      	ite	ne
 8002da2:	2301      	movne	r3, #1
 8002da4:	2300      	moveq	r3, #0
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	e015      	b.n	8002dd6 <HAL_TIM_PWM_Start+0x9e>
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	2b10      	cmp	r3, #16
 8002dae:	d109      	bne.n	8002dc4 <HAL_TIM_PWM_Start+0x8c>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	bf14      	ite	ne
 8002dbc:	2301      	movne	r3, #1
 8002dbe:	2300      	moveq	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	e008      	b.n	8002dd6 <HAL_TIM_PWM_Start+0x9e>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	bf14      	ite	ne
 8002dd0:	2301      	movne	r3, #1
 8002dd2:	2300      	moveq	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e092      	b.n	8002f04 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d104      	bne.n	8002dee <HAL_TIM_PWM_Start+0xb6>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2202      	movs	r2, #2
 8002de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dec:	e023      	b.n	8002e36 <HAL_TIM_PWM_Start+0xfe>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	2b04      	cmp	r3, #4
 8002df2:	d104      	bne.n	8002dfe <HAL_TIM_PWM_Start+0xc6>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2202      	movs	r2, #2
 8002df8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dfc:	e01b      	b.n	8002e36 <HAL_TIM_PWM_Start+0xfe>
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d104      	bne.n	8002e0e <HAL_TIM_PWM_Start+0xd6>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2202      	movs	r2, #2
 8002e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e0c:	e013      	b.n	8002e36 <HAL_TIM_PWM_Start+0xfe>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2b0c      	cmp	r3, #12
 8002e12:	d104      	bne.n	8002e1e <HAL_TIM_PWM_Start+0xe6>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2202      	movs	r2, #2
 8002e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e1c:	e00b      	b.n	8002e36 <HAL_TIM_PWM_Start+0xfe>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2b10      	cmp	r3, #16
 8002e22:	d104      	bne.n	8002e2e <HAL_TIM_PWM_Start+0xf6>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2202      	movs	r2, #2
 8002e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e2c:	e003      	b.n	8002e36 <HAL_TIM_PWM_Start+0xfe>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2202      	movs	r2, #2
 8002e32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	6839      	ldr	r1, [r7, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 fc86 	bl	8003750 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a30      	ldr	r2, [pc, #192]	; (8002f0c <HAL_TIM_PWM_Start+0x1d4>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d004      	beq.n	8002e58 <HAL_TIM_PWM_Start+0x120>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a2f      	ldr	r2, [pc, #188]	; (8002f10 <HAL_TIM_PWM_Start+0x1d8>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d101      	bne.n	8002e5c <HAL_TIM_PWM_Start+0x124>
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e000      	b.n	8002e5e <HAL_TIM_PWM_Start+0x126>
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d007      	beq.n	8002e72 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a25      	ldr	r2, [pc, #148]	; (8002f0c <HAL_TIM_PWM_Start+0x1d4>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d022      	beq.n	8002ec2 <HAL_TIM_PWM_Start+0x18a>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e84:	d01d      	beq.n	8002ec2 <HAL_TIM_PWM_Start+0x18a>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a22      	ldr	r2, [pc, #136]	; (8002f14 <HAL_TIM_PWM_Start+0x1dc>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d018      	beq.n	8002ec2 <HAL_TIM_PWM_Start+0x18a>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a20      	ldr	r2, [pc, #128]	; (8002f18 <HAL_TIM_PWM_Start+0x1e0>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d013      	beq.n	8002ec2 <HAL_TIM_PWM_Start+0x18a>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a1f      	ldr	r2, [pc, #124]	; (8002f1c <HAL_TIM_PWM_Start+0x1e4>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d00e      	beq.n	8002ec2 <HAL_TIM_PWM_Start+0x18a>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a19      	ldr	r2, [pc, #100]	; (8002f10 <HAL_TIM_PWM_Start+0x1d8>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d009      	beq.n	8002ec2 <HAL_TIM_PWM_Start+0x18a>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a1b      	ldr	r2, [pc, #108]	; (8002f20 <HAL_TIM_PWM_Start+0x1e8>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d004      	beq.n	8002ec2 <HAL_TIM_PWM_Start+0x18a>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a19      	ldr	r2, [pc, #100]	; (8002f24 <HAL_TIM_PWM_Start+0x1ec>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d115      	bne.n	8002eee <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	4b17      	ldr	r3, [pc, #92]	; (8002f28 <HAL_TIM_PWM_Start+0x1f0>)
 8002eca:	4013      	ands	r3, r2
 8002ecc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2b06      	cmp	r3, #6
 8002ed2:	d015      	beq.n	8002f00 <HAL_TIM_PWM_Start+0x1c8>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eda:	d011      	beq.n	8002f00 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0201 	orr.w	r2, r2, #1
 8002eea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eec:	e008      	b.n	8002f00 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f042 0201 	orr.w	r2, r2, #1
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	e000      	b.n	8002f02 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f00:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40010000 	.word	0x40010000
 8002f10:	40010400 	.word	0x40010400
 8002f14:	40000400 	.word	0x40000400
 8002f18:	40000800 	.word	0x40000800
 8002f1c:	40000c00 	.word	0x40000c00
 8002f20:	40014000 	.word	0x40014000
 8002f24:	40001800 	.word	0x40001800
 8002f28:	00010007 	.word	0x00010007

08002f2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d101      	bne.n	8002f4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e0ff      	b.n	800314a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b14      	cmp	r3, #20
 8002f56:	f200 80f0 	bhi.w	800313a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002f5a:	a201      	add	r2, pc, #4	; (adr r2, 8002f60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f60:	08002fb5 	.word	0x08002fb5
 8002f64:	0800313b 	.word	0x0800313b
 8002f68:	0800313b 	.word	0x0800313b
 8002f6c:	0800313b 	.word	0x0800313b
 8002f70:	08002ff5 	.word	0x08002ff5
 8002f74:	0800313b 	.word	0x0800313b
 8002f78:	0800313b 	.word	0x0800313b
 8002f7c:	0800313b 	.word	0x0800313b
 8002f80:	08003037 	.word	0x08003037
 8002f84:	0800313b 	.word	0x0800313b
 8002f88:	0800313b 	.word	0x0800313b
 8002f8c:	0800313b 	.word	0x0800313b
 8002f90:	08003077 	.word	0x08003077
 8002f94:	0800313b 	.word	0x0800313b
 8002f98:	0800313b 	.word	0x0800313b
 8002f9c:	0800313b 	.word	0x0800313b
 8002fa0:	080030b9 	.word	0x080030b9
 8002fa4:	0800313b 	.word	0x0800313b
 8002fa8:	0800313b 	.word	0x0800313b
 8002fac:	0800313b 	.word	0x0800313b
 8002fb0:	080030f9 	.word	0x080030f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68b9      	ldr	r1, [r7, #8]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 f96a 	bl	8003294 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699a      	ldr	r2, [r3, #24]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0208 	orr.w	r2, r2, #8
 8002fce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699a      	ldr	r2, [r3, #24]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0204 	bic.w	r2, r2, #4
 8002fde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6999      	ldr	r1, [r3, #24]
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	691a      	ldr	r2, [r3, #16]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	619a      	str	r2, [r3, #24]
      break;
 8002ff2:	e0a5      	b.n	8003140 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68b9      	ldr	r1, [r7, #8]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 f9bc 	bl	8003378 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699a      	ldr	r2, [r3, #24]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800300e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	699a      	ldr	r2, [r3, #24]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800301e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6999      	ldr	r1, [r3, #24]
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	021a      	lsls	r2, r3, #8
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	430a      	orrs	r2, r1
 8003032:	619a      	str	r2, [r3, #24]
      break;
 8003034:	e084      	b.n	8003140 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68b9      	ldr	r1, [r7, #8]
 800303c:	4618      	mov	r0, r3
 800303e:	f000 fa13 	bl	8003468 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	69da      	ldr	r2, [r3, #28]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f042 0208 	orr.w	r2, r2, #8
 8003050:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	69da      	ldr	r2, [r3, #28]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0204 	bic.w	r2, r2, #4
 8003060:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	69d9      	ldr	r1, [r3, #28]
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	691a      	ldr	r2, [r3, #16]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	430a      	orrs	r2, r1
 8003072:	61da      	str	r2, [r3, #28]
      break;
 8003074:	e064      	b.n	8003140 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68b9      	ldr	r1, [r7, #8]
 800307c:	4618      	mov	r0, r3
 800307e:	f000 fa69 	bl	8003554 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	69da      	ldr	r2, [r3, #28]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003090:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	69da      	ldr	r2, [r3, #28]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	69d9      	ldr	r1, [r3, #28]
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	021a      	lsls	r2, r3, #8
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	61da      	str	r2, [r3, #28]
      break;
 80030b6:	e043      	b.n	8003140 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68b9      	ldr	r1, [r7, #8]
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 faa0 	bl	8003604 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f042 0208 	orr.w	r2, r2, #8
 80030d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 0204 	bic.w	r2, r2, #4
 80030e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	691a      	ldr	r2, [r3, #16]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80030f6:	e023      	b.n	8003140 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68b9      	ldr	r1, [r7, #8]
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 fad2 	bl	80036a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003112:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003122:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	021a      	lsls	r2, r3, #8
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003138:	e002      	b.n	8003140 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	75fb      	strb	r3, [r7, #23]
      break;
 800313e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003148:	7dfb      	ldrb	r3, [r7, #23]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop

08003154 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a40      	ldr	r2, [pc, #256]	; (8003268 <TIM_Base_SetConfig+0x114>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d013      	beq.n	8003194 <TIM_Base_SetConfig+0x40>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003172:	d00f      	beq.n	8003194 <TIM_Base_SetConfig+0x40>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a3d      	ldr	r2, [pc, #244]	; (800326c <TIM_Base_SetConfig+0x118>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d00b      	beq.n	8003194 <TIM_Base_SetConfig+0x40>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a3c      	ldr	r2, [pc, #240]	; (8003270 <TIM_Base_SetConfig+0x11c>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d007      	beq.n	8003194 <TIM_Base_SetConfig+0x40>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a3b      	ldr	r2, [pc, #236]	; (8003274 <TIM_Base_SetConfig+0x120>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d003      	beq.n	8003194 <TIM_Base_SetConfig+0x40>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a3a      	ldr	r2, [pc, #232]	; (8003278 <TIM_Base_SetConfig+0x124>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d108      	bne.n	80031a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800319a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a2f      	ldr	r2, [pc, #188]	; (8003268 <TIM_Base_SetConfig+0x114>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d02b      	beq.n	8003206 <TIM_Base_SetConfig+0xb2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031b4:	d027      	beq.n	8003206 <TIM_Base_SetConfig+0xb2>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a2c      	ldr	r2, [pc, #176]	; (800326c <TIM_Base_SetConfig+0x118>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d023      	beq.n	8003206 <TIM_Base_SetConfig+0xb2>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a2b      	ldr	r2, [pc, #172]	; (8003270 <TIM_Base_SetConfig+0x11c>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d01f      	beq.n	8003206 <TIM_Base_SetConfig+0xb2>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a2a      	ldr	r2, [pc, #168]	; (8003274 <TIM_Base_SetConfig+0x120>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d01b      	beq.n	8003206 <TIM_Base_SetConfig+0xb2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a29      	ldr	r2, [pc, #164]	; (8003278 <TIM_Base_SetConfig+0x124>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d017      	beq.n	8003206 <TIM_Base_SetConfig+0xb2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a28      	ldr	r2, [pc, #160]	; (800327c <TIM_Base_SetConfig+0x128>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d013      	beq.n	8003206 <TIM_Base_SetConfig+0xb2>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a27      	ldr	r2, [pc, #156]	; (8003280 <TIM_Base_SetConfig+0x12c>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d00f      	beq.n	8003206 <TIM_Base_SetConfig+0xb2>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a26      	ldr	r2, [pc, #152]	; (8003284 <TIM_Base_SetConfig+0x130>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d00b      	beq.n	8003206 <TIM_Base_SetConfig+0xb2>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a25      	ldr	r2, [pc, #148]	; (8003288 <TIM_Base_SetConfig+0x134>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d007      	beq.n	8003206 <TIM_Base_SetConfig+0xb2>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a24      	ldr	r2, [pc, #144]	; (800328c <TIM_Base_SetConfig+0x138>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d003      	beq.n	8003206 <TIM_Base_SetConfig+0xb2>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a23      	ldr	r2, [pc, #140]	; (8003290 <TIM_Base_SetConfig+0x13c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d108      	bne.n	8003218 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800320c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	4313      	orrs	r3, r2
 8003216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	4313      	orrs	r3, r2
 8003224:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a0a      	ldr	r2, [pc, #40]	; (8003268 <TIM_Base_SetConfig+0x114>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d003      	beq.n	800324c <TIM_Base_SetConfig+0xf8>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a0c      	ldr	r2, [pc, #48]	; (8003278 <TIM_Base_SetConfig+0x124>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d103      	bne.n	8003254 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	691a      	ldr	r2, [r3, #16]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	615a      	str	r2, [r3, #20]
}
 800325a:	bf00      	nop
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	40010000 	.word	0x40010000
 800326c:	40000400 	.word	0x40000400
 8003270:	40000800 	.word	0x40000800
 8003274:	40000c00 	.word	0x40000c00
 8003278:	40010400 	.word	0x40010400
 800327c:	40014000 	.word	0x40014000
 8003280:	40014400 	.word	0x40014400
 8003284:	40014800 	.word	0x40014800
 8003288:	40001800 	.word	0x40001800
 800328c:	40001c00 	.word	0x40001c00
 8003290:	40002000 	.word	0x40002000

08003294 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003294:	b480      	push	{r7}
 8003296:	b087      	sub	sp, #28
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	f023 0201 	bic.w	r2, r3, #1
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	4b2b      	ldr	r3, [pc, #172]	; (800336c <TIM_OC1_SetConfig+0xd8>)
 80032c0:	4013      	ands	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f023 0303 	bic.w	r3, r3, #3
 80032ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f023 0302 	bic.w	r3, r3, #2
 80032dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a21      	ldr	r2, [pc, #132]	; (8003370 <TIM_OC1_SetConfig+0xdc>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d003      	beq.n	80032f8 <TIM_OC1_SetConfig+0x64>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a20      	ldr	r2, [pc, #128]	; (8003374 <TIM_OC1_SetConfig+0xe0>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d10c      	bne.n	8003312 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f023 0308 	bic.w	r3, r3, #8
 80032fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	4313      	orrs	r3, r2
 8003308:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f023 0304 	bic.w	r3, r3, #4
 8003310:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a16      	ldr	r2, [pc, #88]	; (8003370 <TIM_OC1_SetConfig+0xdc>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d003      	beq.n	8003322 <TIM_OC1_SetConfig+0x8e>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a15      	ldr	r2, [pc, #84]	; (8003374 <TIM_OC1_SetConfig+0xe0>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d111      	bne.n	8003346 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003328:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003330:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4313      	orrs	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	621a      	str	r2, [r3, #32]
}
 8003360:	bf00      	nop
 8003362:	371c      	adds	r7, #28
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	fffeff8f 	.word	0xfffeff8f
 8003370:	40010000 	.word	0x40010000
 8003374:	40010400 	.word	0x40010400

08003378 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003378:	b480      	push	{r7}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	f023 0210 	bic.w	r2, r3, #16
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	4b2e      	ldr	r3, [pc, #184]	; (800345c <TIM_OC2_SetConfig+0xe4>)
 80033a4:	4013      	ands	r3, r2
 80033a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	021b      	lsls	r3, r3, #8
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f023 0320 	bic.w	r3, r3, #32
 80033c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	011b      	lsls	r3, r3, #4
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a23      	ldr	r2, [pc, #140]	; (8003460 <TIM_OC2_SetConfig+0xe8>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d003      	beq.n	80033e0 <TIM_OC2_SetConfig+0x68>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a22      	ldr	r2, [pc, #136]	; (8003464 <TIM_OC2_SetConfig+0xec>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d10d      	bne.n	80033fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a18      	ldr	r2, [pc, #96]	; (8003460 <TIM_OC2_SetConfig+0xe8>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d003      	beq.n	800340c <TIM_OC2_SetConfig+0x94>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a17      	ldr	r2, [pc, #92]	; (8003464 <TIM_OC2_SetConfig+0xec>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d113      	bne.n	8003434 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003412:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800341a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	4313      	orrs	r3, r2
 8003426:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	4313      	orrs	r3, r2
 8003432:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	621a      	str	r2, [r3, #32]
}
 800344e:	bf00      	nop
 8003450:	371c      	adds	r7, #28
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	feff8fff 	.word	0xfeff8fff
 8003460:	40010000 	.word	0x40010000
 8003464:	40010400 	.word	0x40010400

08003468 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003468:	b480      	push	{r7}
 800346a:	b087      	sub	sp, #28
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	4b2d      	ldr	r3, [pc, #180]	; (8003548 <TIM_OC3_SetConfig+0xe0>)
 8003494:	4013      	ands	r3, r2
 8003496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f023 0303 	bic.w	r3, r3, #3
 800349e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	021b      	lsls	r3, r3, #8
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a22      	ldr	r2, [pc, #136]	; (800354c <TIM_OC3_SetConfig+0xe4>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d003      	beq.n	80034ce <TIM_OC3_SetConfig+0x66>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a21      	ldr	r2, [pc, #132]	; (8003550 <TIM_OC3_SetConfig+0xe8>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d10d      	bne.n	80034ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	021b      	lsls	r3, r3, #8
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	4313      	orrs	r3, r2
 80034e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a17      	ldr	r2, [pc, #92]	; (800354c <TIM_OC3_SetConfig+0xe4>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d003      	beq.n	80034fa <TIM_OC3_SetConfig+0x92>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a16      	ldr	r2, [pc, #88]	; (8003550 <TIM_OC3_SetConfig+0xe8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d113      	bne.n	8003522 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003500:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003508:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	4313      	orrs	r3, r2
 8003514:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	4313      	orrs	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	621a      	str	r2, [r3, #32]
}
 800353c:	bf00      	nop
 800353e:	371c      	adds	r7, #28
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	fffeff8f 	.word	0xfffeff8f
 800354c:	40010000 	.word	0x40010000
 8003550:	40010400 	.word	0x40010400

08003554 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003554:	b480      	push	{r7}
 8003556:	b087      	sub	sp, #28
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	4b1e      	ldr	r3, [pc, #120]	; (80035f8 <TIM_OC4_SetConfig+0xa4>)
 8003580:	4013      	ands	r3, r2
 8003582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800358a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	021b      	lsls	r3, r3, #8
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	4313      	orrs	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800359e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	031b      	lsls	r3, r3, #12
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a13      	ldr	r2, [pc, #76]	; (80035fc <TIM_OC4_SetConfig+0xa8>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d003      	beq.n	80035bc <TIM_OC4_SetConfig+0x68>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a12      	ldr	r2, [pc, #72]	; (8003600 <TIM_OC4_SetConfig+0xac>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d109      	bne.n	80035d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	019b      	lsls	r3, r3, #6
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	621a      	str	r2, [r3, #32]
}
 80035ea:	bf00      	nop
 80035ec:	371c      	adds	r7, #28
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	feff8fff 	.word	0xfeff8fff
 80035fc:	40010000 	.word	0x40010000
 8003600:	40010400 	.word	0x40010400

08003604 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003604:	b480      	push	{r7}
 8003606:	b087      	sub	sp, #28
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800362a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	4b1b      	ldr	r3, [pc, #108]	; (800369c <TIM_OC5_SetConfig+0x98>)
 8003630:	4013      	ands	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	4313      	orrs	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003644:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	041b      	lsls	r3, r3, #16
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	4313      	orrs	r3, r2
 8003650:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a12      	ldr	r2, [pc, #72]	; (80036a0 <TIM_OC5_SetConfig+0x9c>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d003      	beq.n	8003662 <TIM_OC5_SetConfig+0x5e>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a11      	ldr	r2, [pc, #68]	; (80036a4 <TIM_OC5_SetConfig+0xa0>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d109      	bne.n	8003676 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003668:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	021b      	lsls	r3, r3, #8
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	4313      	orrs	r3, r2
 8003674:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	621a      	str	r2, [r3, #32]
}
 8003690:	bf00      	nop
 8003692:	371c      	adds	r7, #28
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	fffeff8f 	.word	0xfffeff8f
 80036a0:	40010000 	.word	0x40010000
 80036a4:	40010400 	.word	0x40010400

080036a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b087      	sub	sp, #28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	4b1c      	ldr	r3, [pc, #112]	; (8003744 <TIM_OC6_SetConfig+0x9c>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	021b      	lsls	r3, r3, #8
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80036ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	051b      	lsls	r3, r3, #20
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a13      	ldr	r2, [pc, #76]	; (8003748 <TIM_OC6_SetConfig+0xa0>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d003      	beq.n	8003708 <TIM_OC6_SetConfig+0x60>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a12      	ldr	r2, [pc, #72]	; (800374c <TIM_OC6_SetConfig+0xa4>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d109      	bne.n	800371c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800370e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	029b      	lsls	r3, r3, #10
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	4313      	orrs	r3, r2
 800371a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	621a      	str	r2, [r3, #32]
}
 8003736:	bf00      	nop
 8003738:	371c      	adds	r7, #28
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	feff8fff 	.word	0xfeff8fff
 8003748:	40010000 	.word	0x40010000
 800374c:	40010400 	.word	0x40010400

08003750 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003750:	b480      	push	{r7}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	f003 031f 	and.w	r3, r3, #31
 8003762:	2201      	movs	r2, #1
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6a1a      	ldr	r2, [r3, #32]
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	43db      	mvns	r3, r3
 8003772:	401a      	ands	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6a1a      	ldr	r2, [r3, #32]
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	f003 031f 	and.w	r3, r3, #31
 8003782:	6879      	ldr	r1, [r7, #4]
 8003784:	fa01 f303 	lsl.w	r3, r1, r3
 8003788:	431a      	orrs	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	621a      	str	r2, [r3, #32]
}
 800378e:	bf00      	nop
 8003790:	371c      	adds	r7, #28
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
	...

0800379c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d101      	bne.n	80037b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037b0:	2302      	movs	r3, #2
 80037b2:	e06d      	b.n	8003890 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2202      	movs	r2, #2
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a30      	ldr	r2, [pc, #192]	; (800389c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d004      	beq.n	80037e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a2f      	ldr	r2, [pc, #188]	; (80038a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d108      	bne.n	80037fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80037ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003800:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4313      	orrs	r3, r2
 800380a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a20      	ldr	r2, [pc, #128]	; (800389c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d022      	beq.n	8003864 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003826:	d01d      	beq.n	8003864 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a1d      	ldr	r2, [pc, #116]	; (80038a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d018      	beq.n	8003864 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a1c      	ldr	r2, [pc, #112]	; (80038a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d013      	beq.n	8003864 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a1a      	ldr	r2, [pc, #104]	; (80038ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d00e      	beq.n	8003864 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a15      	ldr	r2, [pc, #84]	; (80038a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d009      	beq.n	8003864 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a16      	ldr	r2, [pc, #88]	; (80038b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d004      	beq.n	8003864 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a15      	ldr	r2, [pc, #84]	; (80038b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d10c      	bne.n	800387e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800386a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	4313      	orrs	r3, r2
 8003874:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3714      	adds	r7, #20
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr
 800389c:	40010000 	.word	0x40010000
 80038a0:	40010400 	.word	0x40010400
 80038a4:	40000400 	.word	0x40000400
 80038a8:	40000800 	.word	0x40000800
 80038ac:	40000c00 	.word	0x40000c00
 80038b0:	40014000 	.word	0x40014000
 80038b4:	40001800 	.word	0x40001800

080038b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e040      	b.n	800394c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d106      	bne.n	80038e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7fd f9f4 	bl	8000cc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2224      	movs	r2, #36	; 0x24
 80038e4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0201 	bic.w	r2, r2, #1
 80038f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 fc06 	bl	8004108 <UART_SetConfig>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d101      	bne.n	8003906 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e022      	b.n	800394c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	2b00      	cmp	r3, #0
 800390c:	d002      	beq.n	8003914 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 fe5e 	bl	80045d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685a      	ldr	r2, [r3, #4]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003922:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689a      	ldr	r2, [r3, #8]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003932:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0201 	orr.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 fee5 	bl	8004714 <UART_CheckIdleState>
 800394a:	4603      	mov	r3, r0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b08a      	sub	sp, #40	; 0x28
 8003958:	af02      	add	r7, sp, #8
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	603b      	str	r3, [r7, #0]
 8003960:	4613      	mov	r3, r2
 8003962:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003968:	2b20      	cmp	r3, #32
 800396a:	d171      	bne.n	8003a50 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <HAL_UART_Transmit+0x24>
 8003972:	88fb      	ldrh	r3, [r7, #6]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e06a      	b.n	8003a52 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2221      	movs	r2, #33	; 0x21
 8003988:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800398a:	f7fd fb3f 	bl	800100c <HAL_GetTick>
 800398e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	88fa      	ldrh	r2, [r7, #6]
 8003994:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	88fa      	ldrh	r2, [r7, #6]
 800399c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a8:	d108      	bne.n	80039bc <HAL_UART_Transmit+0x68>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d104      	bne.n	80039bc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80039b2:	2300      	movs	r3, #0
 80039b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	61bb      	str	r3, [r7, #24]
 80039ba:	e003      	b.n	80039c4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039c0:	2300      	movs	r3, #0
 80039c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039c4:	e02c      	b.n	8003a20 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2200      	movs	r2, #0
 80039ce:	2180      	movs	r1, #128	; 0x80
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f000 feec 	bl	80047ae <UART_WaitOnFlagUntilTimeout>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e038      	b.n	8003a52 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10b      	bne.n	80039fe <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	461a      	mov	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039f4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	3302      	adds	r3, #2
 80039fa:	61bb      	str	r3, [r7, #24]
 80039fc:	e007      	b.n	8003a0e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	781a      	ldrb	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	3b01      	subs	r3, #1
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1cc      	bne.n	80039c6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	2200      	movs	r2, #0
 8003a34:	2140      	movs	r1, #64	; 0x40
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f000 feb9 	bl	80047ae <UART_WaitOnFlagUntilTimeout>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e005      	b.n	8003a52 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	e000      	b.n	8003a52 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003a50:	2302      	movs	r3, #2
  }
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3720      	adds	r7, #32
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b08a      	sub	sp, #40	; 0x28
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	60f8      	str	r0, [r7, #12]
 8003a62:	60b9      	str	r1, [r7, #8]
 8003a64:	4613      	mov	r3, r2
 8003a66:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a6e:	2b20      	cmp	r3, #32
 8003a70:	d132      	bne.n	8003ad8 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d002      	beq.n	8003a7e <HAL_UART_Receive_IT+0x24>
 8003a78:	88fb      	ldrh	r3, [r7, #6]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e02b      	b.n	8003ada <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d018      	beq.n	8003ac8 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	e853 3f00 	ldrex	r3, [r3]
 8003aa2:	613b      	str	r3, [r7, #16]
   return(result);
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	623b      	str	r3, [r7, #32]
 8003ab6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab8:	69f9      	ldr	r1, [r7, #28]
 8003aba:	6a3a      	ldr	r2, [r7, #32]
 8003abc:	e841 2300 	strex	r3, r2, [r1]
 8003ac0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1e6      	bne.n	8003a96 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ac8:	88fb      	ldrh	r3, [r7, #6]
 8003aca:	461a      	mov	r2, r3
 8003acc:	68b9      	ldr	r1, [r7, #8]
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f000 ff34 	bl	800493c <UART_Start_Receive_IT>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	e000      	b.n	8003ada <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003ad8:	2302      	movs	r3, #2
  }
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3728      	adds	r7, #40	; 0x28
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
	...

08003ae4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b0ba      	sub	sp, #232	; 0xe8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003b0a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003b0e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003b12:	4013      	ands	r3, r2
 8003b14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003b18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d115      	bne.n	8003b4c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b24:	f003 0320 	and.w	r3, r3, #32
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00f      	beq.n	8003b4c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b30:	f003 0320 	and.w	r3, r3, #32
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d009      	beq.n	8003b4c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 82ac 	beq.w	800409a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	4798      	blx	r3
      }
      return;
 8003b4a:	e2a6      	b.n	800409a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003b4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 8117 	beq.w	8003d84 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003b56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d106      	bne.n	8003b70 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003b62:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003b66:	4b85      	ldr	r3, [pc, #532]	; (8003d7c <HAL_UART_IRQHandler+0x298>)
 8003b68:	4013      	ands	r3, r2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 810a 	beq.w	8003d84 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d011      	beq.n	8003ba0 <HAL_UART_IRQHandler+0xbc>
 8003b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00b      	beq.n	8003ba0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b96:	f043 0201 	orr.w	r2, r3, #1
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d011      	beq.n	8003bd0 <HAL_UART_IRQHandler+0xec>
 8003bac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00b      	beq.n	8003bd0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2202      	movs	r2, #2
 8003bbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bc6:	f043 0204 	orr.w	r2, r3, #4
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d011      	beq.n	8003c00 <HAL_UART_IRQHandler+0x11c>
 8003bdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00b      	beq.n	8003c00 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2204      	movs	r2, #4
 8003bee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bf6:	f043 0202 	orr.w	r2, r3, #2
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c04:	f003 0308 	and.w	r3, r3, #8
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d017      	beq.n	8003c3c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c10:	f003 0320 	and.w	r3, r3, #32
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d105      	bne.n	8003c24 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003c18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c1c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00b      	beq.n	8003c3c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2208      	movs	r2, #8
 8003c2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c32:	f043 0208 	orr.w	r2, r3, #8
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d012      	beq.n	8003c6e <HAL_UART_IRQHandler+0x18a>
 8003c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00c      	beq.n	8003c6e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c64:	f043 0220 	orr.w	r2, r3, #32
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 8212 	beq.w	800409e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c7e:	f003 0320 	and.w	r3, r3, #32
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00d      	beq.n	8003ca2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c8a:	f003 0320 	and.w	r3, r3, #32
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d007      	beq.n	8003ca2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ca8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb6:	2b40      	cmp	r3, #64	; 0x40
 8003cb8:	d005      	beq.n	8003cc6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003cba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003cbe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d04f      	beq.n	8003d66 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 fefe 	bl	8004ac8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd6:	2b40      	cmp	r3, #64	; 0x40
 8003cd8:	d141      	bne.n	8003d5e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	3308      	adds	r3, #8
 8003ce0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ce8:	e853 3f00 	ldrex	r3, [r3]
 8003cec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003cf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cf8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	3308      	adds	r3, #8
 8003d02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d06:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d16:	e841 2300 	strex	r3, r2, [r1]
 8003d1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1d9      	bne.n	8003cda <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d013      	beq.n	8003d56 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d32:	4a13      	ldr	r2, [pc, #76]	; (8003d80 <HAL_UART_IRQHandler+0x29c>)
 8003d34:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7fd fb17 	bl	800136e <HAL_DMA_Abort_IT>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d017      	beq.n	8003d76 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003d50:	4610      	mov	r0, r2
 8003d52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d54:	e00f      	b.n	8003d76 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f9b6 	bl	80040c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d5c:	e00b      	b.n	8003d76 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f9b2 	bl	80040c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d64:	e007      	b.n	8003d76 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f9ae 	bl	80040c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003d74:	e193      	b.n	800409e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d76:	bf00      	nop
    return;
 8003d78:	e191      	b.n	800409e <HAL_UART_IRQHandler+0x5ba>
 8003d7a:	bf00      	nop
 8003d7c:	04000120 	.word	0x04000120
 8003d80:	08004b91 	.word	0x08004b91

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	f040 814c 	bne.w	8004026 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d92:	f003 0310 	and.w	r3, r3, #16
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f000 8145 	beq.w	8004026 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003da0:	f003 0310 	and.w	r3, r3, #16
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f000 813e 	beq.w	8004026 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2210      	movs	r2, #16
 8003db0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbc:	2b40      	cmp	r3, #64	; 0x40
 8003dbe:	f040 80b6 	bne.w	8003f2e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003dce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f000 8165 	beq.w	80040a2 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003dde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003de2:	429a      	cmp	r2, r3
 8003de4:	f080 815d 	bcs.w	80040a2 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003dee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003df6:	69db      	ldr	r3, [r3, #28]
 8003df8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dfc:	f000 8086 	beq.w	8003f0c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e0c:	e853 3f00 	ldrex	r3, [r3]
 8003e10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	461a      	mov	r2, r3
 8003e26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003e2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e2e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e32:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e3a:	e841 2300 	strex	r3, r2, [r1]
 8003e3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1da      	bne.n	8003e00 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	3308      	adds	r3, #8
 8003e50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e54:	e853 3f00 	ldrex	r3, [r3]
 8003e58:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003e5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e5c:	f023 0301 	bic.w	r3, r3, #1
 8003e60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	3308      	adds	r3, #8
 8003e6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e6e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e72:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e74:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e7a:	e841 2300 	strex	r3, r2, [r1]
 8003e7e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1e1      	bne.n	8003e4a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	3308      	adds	r3, #8
 8003e8c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e90:	e853 3f00 	ldrex	r3, [r3]
 8003e94:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	3308      	adds	r3, #8
 8003ea6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003eaa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003eac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003eb0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003eb2:	e841 2300 	strex	r3, r2, [r1]
 8003eb6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003eb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1e3      	bne.n	8003e86 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ed4:	e853 3f00 	ldrex	r3, [r3]
 8003ed8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003eda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003edc:	f023 0310 	bic.w	r3, r3, #16
 8003ee0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	461a      	mov	r2, r3
 8003eea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003eee:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ef0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ef4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ef6:	e841 2300 	strex	r3, r2, [r1]
 8003efa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003efc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1e4      	bne.n	8003ecc <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7fd f9c1 	bl	800128e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	4619      	mov	r1, r3
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f8d8 	bl	80040dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f2c:	e0b9      	b.n	80040a2 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 80ab 	beq.w	80040a6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8003f50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 80a6 	beq.w	80040a6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f62:	e853 3f00 	ldrex	r3, [r3]
 8003f66:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	461a      	mov	r2, r3
 8003f78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003f7c:	647b      	str	r3, [r7, #68]	; 0x44
 8003f7e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f84:	e841 2300 	strex	r3, r2, [r1]
 8003f88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1e4      	bne.n	8003f5a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	3308      	adds	r3, #8
 8003f96:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	e853 3f00 	ldrex	r3, [r3]
 8003f9e:	623b      	str	r3, [r7, #32]
   return(result);
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
 8003fa2:	f023 0301 	bic.w	r3, r3, #1
 8003fa6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	3308      	adds	r3, #8
 8003fb0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003fb4:	633a      	str	r2, [r7, #48]	; 0x30
 8003fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fbc:	e841 2300 	strex	r3, r2, [r1]
 8003fc0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1e3      	bne.n	8003f90 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	e853 3f00 	ldrex	r3, [r3]
 8003fe8:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f023 0310 	bic.w	r3, r3, #16
 8003ff0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ffe:	61fb      	str	r3, [r7, #28]
 8004000:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004002:	69b9      	ldr	r1, [r7, #24]
 8004004:	69fa      	ldr	r2, [r7, #28]
 8004006:	e841 2300 	strex	r3, r2, [r1]
 800400a:	617b      	str	r3, [r7, #20]
   return(result);
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1e4      	bne.n	8003fdc <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2202      	movs	r2, #2
 8004016:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004018:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800401c:	4619      	mov	r1, r3
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f85c 	bl	80040dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004024:	e03f      	b.n	80040a6 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800402a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00e      	beq.n	8004050 <HAL_UART_IRQHandler+0x56c>
 8004032:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d008      	beq.n	8004050 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004046:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 f853 	bl	80040f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800404e:	e02d      	b.n	80040ac <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00e      	beq.n	800407a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800405c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004064:	2b00      	cmp	r3, #0
 8004066:	d008      	beq.n	800407a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800406c:	2b00      	cmp	r3, #0
 800406e:	d01c      	beq.n	80040aa <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	4798      	blx	r3
    }
    return;
 8004078:	e017      	b.n	80040aa <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800407a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800407e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004082:	2b00      	cmp	r3, #0
 8004084:	d012      	beq.n	80040ac <HAL_UART_IRQHandler+0x5c8>
 8004086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800408a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00c      	beq.n	80040ac <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 fd92 	bl	8004bbc <UART_EndTransmit_IT>
    return;
 8004098:	e008      	b.n	80040ac <HAL_UART_IRQHandler+0x5c8>
      return;
 800409a:	bf00      	nop
 800409c:	e006      	b.n	80040ac <HAL_UART_IRQHandler+0x5c8>
    return;
 800409e:	bf00      	nop
 80040a0:	e004      	b.n	80040ac <HAL_UART_IRQHandler+0x5c8>
      return;
 80040a2:	bf00      	nop
 80040a4:	e002      	b.n	80040ac <HAL_UART_IRQHandler+0x5c8>
      return;
 80040a6:	bf00      	nop
 80040a8:	e000      	b.n	80040ac <HAL_UART_IRQHandler+0x5c8>
    return;
 80040aa:	bf00      	nop
  }

}
 80040ac:	37e8      	adds	r7, #232	; 0xe8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop

080040b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	460b      	mov	r3, r1
 80040e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b088      	sub	sp, #32
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004110:	2300      	movs	r3, #0
 8004112:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	431a      	orrs	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	69db      	ldr	r3, [r3, #28]
 8004128:	4313      	orrs	r3, r2
 800412a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	4ba6      	ldr	r3, [pc, #664]	; (80043cc <UART_SetConfig+0x2c4>)
 8004134:	4013      	ands	r3, r2
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	6812      	ldr	r2, [r2, #0]
 800413a:	6979      	ldr	r1, [r7, #20]
 800413c:	430b      	orrs	r3, r1
 800413e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68da      	ldr	r2, [r3, #12]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	4313      	orrs	r3, r2
 8004164:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	430a      	orrs	r2, r1
 8004178:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a94      	ldr	r2, [pc, #592]	; (80043d0 <UART_SetConfig+0x2c8>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d120      	bne.n	80041c6 <UART_SetConfig+0xbe>
 8004184:	4b93      	ldr	r3, [pc, #588]	; (80043d4 <UART_SetConfig+0x2cc>)
 8004186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418a:	f003 0303 	and.w	r3, r3, #3
 800418e:	2b03      	cmp	r3, #3
 8004190:	d816      	bhi.n	80041c0 <UART_SetConfig+0xb8>
 8004192:	a201      	add	r2, pc, #4	; (adr r2, 8004198 <UART_SetConfig+0x90>)
 8004194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004198:	080041a9 	.word	0x080041a9
 800419c:	080041b5 	.word	0x080041b5
 80041a0:	080041af 	.word	0x080041af
 80041a4:	080041bb 	.word	0x080041bb
 80041a8:	2301      	movs	r3, #1
 80041aa:	77fb      	strb	r3, [r7, #31]
 80041ac:	e150      	b.n	8004450 <UART_SetConfig+0x348>
 80041ae:	2302      	movs	r3, #2
 80041b0:	77fb      	strb	r3, [r7, #31]
 80041b2:	e14d      	b.n	8004450 <UART_SetConfig+0x348>
 80041b4:	2304      	movs	r3, #4
 80041b6:	77fb      	strb	r3, [r7, #31]
 80041b8:	e14a      	b.n	8004450 <UART_SetConfig+0x348>
 80041ba:	2308      	movs	r3, #8
 80041bc:	77fb      	strb	r3, [r7, #31]
 80041be:	e147      	b.n	8004450 <UART_SetConfig+0x348>
 80041c0:	2310      	movs	r3, #16
 80041c2:	77fb      	strb	r3, [r7, #31]
 80041c4:	e144      	b.n	8004450 <UART_SetConfig+0x348>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a83      	ldr	r2, [pc, #524]	; (80043d8 <UART_SetConfig+0x2d0>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d132      	bne.n	8004236 <UART_SetConfig+0x12e>
 80041d0:	4b80      	ldr	r3, [pc, #512]	; (80043d4 <UART_SetConfig+0x2cc>)
 80041d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d6:	f003 030c 	and.w	r3, r3, #12
 80041da:	2b0c      	cmp	r3, #12
 80041dc:	d828      	bhi.n	8004230 <UART_SetConfig+0x128>
 80041de:	a201      	add	r2, pc, #4	; (adr r2, 80041e4 <UART_SetConfig+0xdc>)
 80041e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e4:	08004219 	.word	0x08004219
 80041e8:	08004231 	.word	0x08004231
 80041ec:	08004231 	.word	0x08004231
 80041f0:	08004231 	.word	0x08004231
 80041f4:	08004225 	.word	0x08004225
 80041f8:	08004231 	.word	0x08004231
 80041fc:	08004231 	.word	0x08004231
 8004200:	08004231 	.word	0x08004231
 8004204:	0800421f 	.word	0x0800421f
 8004208:	08004231 	.word	0x08004231
 800420c:	08004231 	.word	0x08004231
 8004210:	08004231 	.word	0x08004231
 8004214:	0800422b 	.word	0x0800422b
 8004218:	2300      	movs	r3, #0
 800421a:	77fb      	strb	r3, [r7, #31]
 800421c:	e118      	b.n	8004450 <UART_SetConfig+0x348>
 800421e:	2302      	movs	r3, #2
 8004220:	77fb      	strb	r3, [r7, #31]
 8004222:	e115      	b.n	8004450 <UART_SetConfig+0x348>
 8004224:	2304      	movs	r3, #4
 8004226:	77fb      	strb	r3, [r7, #31]
 8004228:	e112      	b.n	8004450 <UART_SetConfig+0x348>
 800422a:	2308      	movs	r3, #8
 800422c:	77fb      	strb	r3, [r7, #31]
 800422e:	e10f      	b.n	8004450 <UART_SetConfig+0x348>
 8004230:	2310      	movs	r3, #16
 8004232:	77fb      	strb	r3, [r7, #31]
 8004234:	e10c      	b.n	8004450 <UART_SetConfig+0x348>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a68      	ldr	r2, [pc, #416]	; (80043dc <UART_SetConfig+0x2d4>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d120      	bne.n	8004282 <UART_SetConfig+0x17a>
 8004240:	4b64      	ldr	r3, [pc, #400]	; (80043d4 <UART_SetConfig+0x2cc>)
 8004242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004246:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800424a:	2b30      	cmp	r3, #48	; 0x30
 800424c:	d013      	beq.n	8004276 <UART_SetConfig+0x16e>
 800424e:	2b30      	cmp	r3, #48	; 0x30
 8004250:	d814      	bhi.n	800427c <UART_SetConfig+0x174>
 8004252:	2b20      	cmp	r3, #32
 8004254:	d009      	beq.n	800426a <UART_SetConfig+0x162>
 8004256:	2b20      	cmp	r3, #32
 8004258:	d810      	bhi.n	800427c <UART_SetConfig+0x174>
 800425a:	2b00      	cmp	r3, #0
 800425c:	d002      	beq.n	8004264 <UART_SetConfig+0x15c>
 800425e:	2b10      	cmp	r3, #16
 8004260:	d006      	beq.n	8004270 <UART_SetConfig+0x168>
 8004262:	e00b      	b.n	800427c <UART_SetConfig+0x174>
 8004264:	2300      	movs	r3, #0
 8004266:	77fb      	strb	r3, [r7, #31]
 8004268:	e0f2      	b.n	8004450 <UART_SetConfig+0x348>
 800426a:	2302      	movs	r3, #2
 800426c:	77fb      	strb	r3, [r7, #31]
 800426e:	e0ef      	b.n	8004450 <UART_SetConfig+0x348>
 8004270:	2304      	movs	r3, #4
 8004272:	77fb      	strb	r3, [r7, #31]
 8004274:	e0ec      	b.n	8004450 <UART_SetConfig+0x348>
 8004276:	2308      	movs	r3, #8
 8004278:	77fb      	strb	r3, [r7, #31]
 800427a:	e0e9      	b.n	8004450 <UART_SetConfig+0x348>
 800427c:	2310      	movs	r3, #16
 800427e:	77fb      	strb	r3, [r7, #31]
 8004280:	e0e6      	b.n	8004450 <UART_SetConfig+0x348>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a56      	ldr	r2, [pc, #344]	; (80043e0 <UART_SetConfig+0x2d8>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d120      	bne.n	80042ce <UART_SetConfig+0x1c6>
 800428c:	4b51      	ldr	r3, [pc, #324]	; (80043d4 <UART_SetConfig+0x2cc>)
 800428e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004292:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004296:	2bc0      	cmp	r3, #192	; 0xc0
 8004298:	d013      	beq.n	80042c2 <UART_SetConfig+0x1ba>
 800429a:	2bc0      	cmp	r3, #192	; 0xc0
 800429c:	d814      	bhi.n	80042c8 <UART_SetConfig+0x1c0>
 800429e:	2b80      	cmp	r3, #128	; 0x80
 80042a0:	d009      	beq.n	80042b6 <UART_SetConfig+0x1ae>
 80042a2:	2b80      	cmp	r3, #128	; 0x80
 80042a4:	d810      	bhi.n	80042c8 <UART_SetConfig+0x1c0>
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d002      	beq.n	80042b0 <UART_SetConfig+0x1a8>
 80042aa:	2b40      	cmp	r3, #64	; 0x40
 80042ac:	d006      	beq.n	80042bc <UART_SetConfig+0x1b4>
 80042ae:	e00b      	b.n	80042c8 <UART_SetConfig+0x1c0>
 80042b0:	2300      	movs	r3, #0
 80042b2:	77fb      	strb	r3, [r7, #31]
 80042b4:	e0cc      	b.n	8004450 <UART_SetConfig+0x348>
 80042b6:	2302      	movs	r3, #2
 80042b8:	77fb      	strb	r3, [r7, #31]
 80042ba:	e0c9      	b.n	8004450 <UART_SetConfig+0x348>
 80042bc:	2304      	movs	r3, #4
 80042be:	77fb      	strb	r3, [r7, #31]
 80042c0:	e0c6      	b.n	8004450 <UART_SetConfig+0x348>
 80042c2:	2308      	movs	r3, #8
 80042c4:	77fb      	strb	r3, [r7, #31]
 80042c6:	e0c3      	b.n	8004450 <UART_SetConfig+0x348>
 80042c8:	2310      	movs	r3, #16
 80042ca:	77fb      	strb	r3, [r7, #31]
 80042cc:	e0c0      	b.n	8004450 <UART_SetConfig+0x348>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a44      	ldr	r2, [pc, #272]	; (80043e4 <UART_SetConfig+0x2dc>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d125      	bne.n	8004324 <UART_SetConfig+0x21c>
 80042d8:	4b3e      	ldr	r3, [pc, #248]	; (80043d4 <UART_SetConfig+0x2cc>)
 80042da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042e6:	d017      	beq.n	8004318 <UART_SetConfig+0x210>
 80042e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042ec:	d817      	bhi.n	800431e <UART_SetConfig+0x216>
 80042ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042f2:	d00b      	beq.n	800430c <UART_SetConfig+0x204>
 80042f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042f8:	d811      	bhi.n	800431e <UART_SetConfig+0x216>
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <UART_SetConfig+0x1fe>
 80042fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004302:	d006      	beq.n	8004312 <UART_SetConfig+0x20a>
 8004304:	e00b      	b.n	800431e <UART_SetConfig+0x216>
 8004306:	2300      	movs	r3, #0
 8004308:	77fb      	strb	r3, [r7, #31]
 800430a:	e0a1      	b.n	8004450 <UART_SetConfig+0x348>
 800430c:	2302      	movs	r3, #2
 800430e:	77fb      	strb	r3, [r7, #31]
 8004310:	e09e      	b.n	8004450 <UART_SetConfig+0x348>
 8004312:	2304      	movs	r3, #4
 8004314:	77fb      	strb	r3, [r7, #31]
 8004316:	e09b      	b.n	8004450 <UART_SetConfig+0x348>
 8004318:	2308      	movs	r3, #8
 800431a:	77fb      	strb	r3, [r7, #31]
 800431c:	e098      	b.n	8004450 <UART_SetConfig+0x348>
 800431e:	2310      	movs	r3, #16
 8004320:	77fb      	strb	r3, [r7, #31]
 8004322:	e095      	b.n	8004450 <UART_SetConfig+0x348>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a2f      	ldr	r2, [pc, #188]	; (80043e8 <UART_SetConfig+0x2e0>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d125      	bne.n	800437a <UART_SetConfig+0x272>
 800432e:	4b29      	ldr	r3, [pc, #164]	; (80043d4 <UART_SetConfig+0x2cc>)
 8004330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004334:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004338:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800433c:	d017      	beq.n	800436e <UART_SetConfig+0x266>
 800433e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004342:	d817      	bhi.n	8004374 <UART_SetConfig+0x26c>
 8004344:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004348:	d00b      	beq.n	8004362 <UART_SetConfig+0x25a>
 800434a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800434e:	d811      	bhi.n	8004374 <UART_SetConfig+0x26c>
 8004350:	2b00      	cmp	r3, #0
 8004352:	d003      	beq.n	800435c <UART_SetConfig+0x254>
 8004354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004358:	d006      	beq.n	8004368 <UART_SetConfig+0x260>
 800435a:	e00b      	b.n	8004374 <UART_SetConfig+0x26c>
 800435c:	2301      	movs	r3, #1
 800435e:	77fb      	strb	r3, [r7, #31]
 8004360:	e076      	b.n	8004450 <UART_SetConfig+0x348>
 8004362:	2302      	movs	r3, #2
 8004364:	77fb      	strb	r3, [r7, #31]
 8004366:	e073      	b.n	8004450 <UART_SetConfig+0x348>
 8004368:	2304      	movs	r3, #4
 800436a:	77fb      	strb	r3, [r7, #31]
 800436c:	e070      	b.n	8004450 <UART_SetConfig+0x348>
 800436e:	2308      	movs	r3, #8
 8004370:	77fb      	strb	r3, [r7, #31]
 8004372:	e06d      	b.n	8004450 <UART_SetConfig+0x348>
 8004374:	2310      	movs	r3, #16
 8004376:	77fb      	strb	r3, [r7, #31]
 8004378:	e06a      	b.n	8004450 <UART_SetConfig+0x348>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a1b      	ldr	r2, [pc, #108]	; (80043ec <UART_SetConfig+0x2e4>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d138      	bne.n	80043f6 <UART_SetConfig+0x2ee>
 8004384:	4b13      	ldr	r3, [pc, #76]	; (80043d4 <UART_SetConfig+0x2cc>)
 8004386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800438e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004392:	d017      	beq.n	80043c4 <UART_SetConfig+0x2bc>
 8004394:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004398:	d82a      	bhi.n	80043f0 <UART_SetConfig+0x2e8>
 800439a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800439e:	d00b      	beq.n	80043b8 <UART_SetConfig+0x2b0>
 80043a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043a4:	d824      	bhi.n	80043f0 <UART_SetConfig+0x2e8>
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <UART_SetConfig+0x2aa>
 80043aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ae:	d006      	beq.n	80043be <UART_SetConfig+0x2b6>
 80043b0:	e01e      	b.n	80043f0 <UART_SetConfig+0x2e8>
 80043b2:	2300      	movs	r3, #0
 80043b4:	77fb      	strb	r3, [r7, #31]
 80043b6:	e04b      	b.n	8004450 <UART_SetConfig+0x348>
 80043b8:	2302      	movs	r3, #2
 80043ba:	77fb      	strb	r3, [r7, #31]
 80043bc:	e048      	b.n	8004450 <UART_SetConfig+0x348>
 80043be:	2304      	movs	r3, #4
 80043c0:	77fb      	strb	r3, [r7, #31]
 80043c2:	e045      	b.n	8004450 <UART_SetConfig+0x348>
 80043c4:	2308      	movs	r3, #8
 80043c6:	77fb      	strb	r3, [r7, #31]
 80043c8:	e042      	b.n	8004450 <UART_SetConfig+0x348>
 80043ca:	bf00      	nop
 80043cc:	efff69f3 	.word	0xefff69f3
 80043d0:	40011000 	.word	0x40011000
 80043d4:	40023800 	.word	0x40023800
 80043d8:	40004400 	.word	0x40004400
 80043dc:	40004800 	.word	0x40004800
 80043e0:	40004c00 	.word	0x40004c00
 80043e4:	40005000 	.word	0x40005000
 80043e8:	40011400 	.word	0x40011400
 80043ec:	40007800 	.word	0x40007800
 80043f0:	2310      	movs	r3, #16
 80043f2:	77fb      	strb	r3, [r7, #31]
 80043f4:	e02c      	b.n	8004450 <UART_SetConfig+0x348>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a72      	ldr	r2, [pc, #456]	; (80045c4 <UART_SetConfig+0x4bc>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d125      	bne.n	800444c <UART_SetConfig+0x344>
 8004400:	4b71      	ldr	r3, [pc, #452]	; (80045c8 <UART_SetConfig+0x4c0>)
 8004402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004406:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800440a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800440e:	d017      	beq.n	8004440 <UART_SetConfig+0x338>
 8004410:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004414:	d817      	bhi.n	8004446 <UART_SetConfig+0x33e>
 8004416:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800441a:	d00b      	beq.n	8004434 <UART_SetConfig+0x32c>
 800441c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004420:	d811      	bhi.n	8004446 <UART_SetConfig+0x33e>
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <UART_SetConfig+0x326>
 8004426:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800442a:	d006      	beq.n	800443a <UART_SetConfig+0x332>
 800442c:	e00b      	b.n	8004446 <UART_SetConfig+0x33e>
 800442e:	2300      	movs	r3, #0
 8004430:	77fb      	strb	r3, [r7, #31]
 8004432:	e00d      	b.n	8004450 <UART_SetConfig+0x348>
 8004434:	2302      	movs	r3, #2
 8004436:	77fb      	strb	r3, [r7, #31]
 8004438:	e00a      	b.n	8004450 <UART_SetConfig+0x348>
 800443a:	2304      	movs	r3, #4
 800443c:	77fb      	strb	r3, [r7, #31]
 800443e:	e007      	b.n	8004450 <UART_SetConfig+0x348>
 8004440:	2308      	movs	r3, #8
 8004442:	77fb      	strb	r3, [r7, #31]
 8004444:	e004      	b.n	8004450 <UART_SetConfig+0x348>
 8004446:	2310      	movs	r3, #16
 8004448:	77fb      	strb	r3, [r7, #31]
 800444a:	e001      	b.n	8004450 <UART_SetConfig+0x348>
 800444c:	2310      	movs	r3, #16
 800444e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	69db      	ldr	r3, [r3, #28]
 8004454:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004458:	d15b      	bne.n	8004512 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800445a:	7ffb      	ldrb	r3, [r7, #31]
 800445c:	2b08      	cmp	r3, #8
 800445e:	d828      	bhi.n	80044b2 <UART_SetConfig+0x3aa>
 8004460:	a201      	add	r2, pc, #4	; (adr r2, 8004468 <UART_SetConfig+0x360>)
 8004462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004466:	bf00      	nop
 8004468:	0800448d 	.word	0x0800448d
 800446c:	08004495 	.word	0x08004495
 8004470:	0800449d 	.word	0x0800449d
 8004474:	080044b3 	.word	0x080044b3
 8004478:	080044a3 	.word	0x080044a3
 800447c:	080044b3 	.word	0x080044b3
 8004480:	080044b3 	.word	0x080044b3
 8004484:	080044b3 	.word	0x080044b3
 8004488:	080044ab 	.word	0x080044ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800448c:	f7fd ffac 	bl	80023e8 <HAL_RCC_GetPCLK1Freq>
 8004490:	61b8      	str	r0, [r7, #24]
        break;
 8004492:	e013      	b.n	80044bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004494:	f7fd ffbc 	bl	8002410 <HAL_RCC_GetPCLK2Freq>
 8004498:	61b8      	str	r0, [r7, #24]
        break;
 800449a:	e00f      	b.n	80044bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800449c:	4b4b      	ldr	r3, [pc, #300]	; (80045cc <UART_SetConfig+0x4c4>)
 800449e:	61bb      	str	r3, [r7, #24]
        break;
 80044a0:	e00c      	b.n	80044bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044a2:	f7fd fe8f 	bl	80021c4 <HAL_RCC_GetSysClockFreq>
 80044a6:	61b8      	str	r0, [r7, #24]
        break;
 80044a8:	e008      	b.n	80044bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044ae:	61bb      	str	r3, [r7, #24]
        break;
 80044b0:	e004      	b.n	80044bc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	77bb      	strb	r3, [r7, #30]
        break;
 80044ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d074      	beq.n	80045ac <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	005a      	lsls	r2, r3, #1
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	085b      	lsrs	r3, r3, #1
 80044cc:	441a      	add	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	2b0f      	cmp	r3, #15
 80044dc:	d916      	bls.n	800450c <UART_SetConfig+0x404>
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044e4:	d212      	bcs.n	800450c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	f023 030f 	bic.w	r3, r3, #15
 80044ee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	085b      	lsrs	r3, r3, #1
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	f003 0307 	and.w	r3, r3, #7
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	89fb      	ldrh	r3, [r7, #14]
 80044fe:	4313      	orrs	r3, r2
 8004500:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	89fa      	ldrh	r2, [r7, #14]
 8004508:	60da      	str	r2, [r3, #12]
 800450a:	e04f      	b.n	80045ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	77bb      	strb	r3, [r7, #30]
 8004510:	e04c      	b.n	80045ac <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004512:	7ffb      	ldrb	r3, [r7, #31]
 8004514:	2b08      	cmp	r3, #8
 8004516:	d828      	bhi.n	800456a <UART_SetConfig+0x462>
 8004518:	a201      	add	r2, pc, #4	; (adr r2, 8004520 <UART_SetConfig+0x418>)
 800451a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451e:	bf00      	nop
 8004520:	08004545 	.word	0x08004545
 8004524:	0800454d 	.word	0x0800454d
 8004528:	08004555 	.word	0x08004555
 800452c:	0800456b 	.word	0x0800456b
 8004530:	0800455b 	.word	0x0800455b
 8004534:	0800456b 	.word	0x0800456b
 8004538:	0800456b 	.word	0x0800456b
 800453c:	0800456b 	.word	0x0800456b
 8004540:	08004563 	.word	0x08004563
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004544:	f7fd ff50 	bl	80023e8 <HAL_RCC_GetPCLK1Freq>
 8004548:	61b8      	str	r0, [r7, #24]
        break;
 800454a:	e013      	b.n	8004574 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800454c:	f7fd ff60 	bl	8002410 <HAL_RCC_GetPCLK2Freq>
 8004550:	61b8      	str	r0, [r7, #24]
        break;
 8004552:	e00f      	b.n	8004574 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004554:	4b1d      	ldr	r3, [pc, #116]	; (80045cc <UART_SetConfig+0x4c4>)
 8004556:	61bb      	str	r3, [r7, #24]
        break;
 8004558:	e00c      	b.n	8004574 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800455a:	f7fd fe33 	bl	80021c4 <HAL_RCC_GetSysClockFreq>
 800455e:	61b8      	str	r0, [r7, #24]
        break;
 8004560:	e008      	b.n	8004574 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004566:	61bb      	str	r3, [r7, #24]
        break;
 8004568:	e004      	b.n	8004574 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800456a:	2300      	movs	r3, #0
 800456c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	77bb      	strb	r3, [r7, #30]
        break;
 8004572:	bf00      	nop
    }

    if (pclk != 0U)
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d018      	beq.n	80045ac <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	085a      	lsrs	r2, r3, #1
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	441a      	add	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	fbb2 f3f3 	udiv	r3, r2, r3
 800458c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	2b0f      	cmp	r3, #15
 8004592:	d909      	bls.n	80045a8 <UART_SetConfig+0x4a0>
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800459a:	d205      	bcs.n	80045a8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	b29a      	uxth	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	60da      	str	r2, [r3, #12]
 80045a6:	e001      	b.n	80045ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80045b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3720      	adds	r7, #32
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	40007c00 	.word	0x40007c00
 80045c8:	40023800 	.word	0x40023800
 80045cc:	00f42400 	.word	0x00f42400

080045d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00a      	beq.n	80045fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00a      	beq.n	800461c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	430a      	orrs	r2, r1
 800461a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	f003 0304 	and.w	r3, r3, #4
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00a      	beq.n	800463e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	f003 0308 	and.w	r3, r3, #8
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00a      	beq.n	8004660 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	430a      	orrs	r2, r1
 800465e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004664:	f003 0310 	and.w	r3, r3, #16
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00a      	beq.n	8004682 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	430a      	orrs	r2, r1
 8004680:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004686:	f003 0320 	and.w	r3, r3, #32
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00a      	beq.n	80046a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d01a      	beq.n	80046e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046ce:	d10a      	bne.n	80046e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00a      	beq.n	8004708 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	605a      	str	r2, [r3, #4]
  }
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af02      	add	r7, sp, #8
 800471a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004724:	f7fc fc72 	bl	800100c <HAL_GetTick>
 8004728:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0308 	and.w	r3, r3, #8
 8004734:	2b08      	cmp	r3, #8
 8004736:	d10e      	bne.n	8004756 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004738:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f831 	bl	80047ae <UART_WaitOnFlagUntilTimeout>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e027      	b.n	80047a6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0304 	and.w	r3, r3, #4
 8004760:	2b04      	cmp	r3, #4
 8004762:	d10e      	bne.n	8004782 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004764:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004768:	9300      	str	r3, [sp, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 f81b 	bl	80047ae <UART_WaitOnFlagUntilTimeout>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e011      	b.n	80047a6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2220      	movs	r2, #32
 8004786:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2220      	movs	r2, #32
 800478c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b09c      	sub	sp, #112	; 0x70
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	60f8      	str	r0, [r7, #12]
 80047b6:	60b9      	str	r1, [r7, #8]
 80047b8:	603b      	str	r3, [r7, #0]
 80047ba:	4613      	mov	r3, r2
 80047bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047be:	e0a7      	b.n	8004910 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c6:	f000 80a3 	beq.w	8004910 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ca:	f7fc fc1f 	bl	800100c <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d302      	bcc.n	80047e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80047da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d13f      	bne.n	8004860 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047e8:	e853 3f00 	ldrex	r3, [r3]
 80047ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80047ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047f4:	667b      	str	r3, [r7, #100]	; 0x64
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	461a      	mov	r2, r3
 80047fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004800:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004802:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004804:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004806:	e841 2300 	strex	r3, r2, [r1]
 800480a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800480c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1e6      	bne.n	80047e0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	3308      	adds	r3, #8
 8004818:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800481c:	e853 3f00 	ldrex	r3, [r3]
 8004820:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004824:	f023 0301 	bic.w	r3, r3, #1
 8004828:	663b      	str	r3, [r7, #96]	; 0x60
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	3308      	adds	r3, #8
 8004830:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004832:	64ba      	str	r2, [r7, #72]	; 0x48
 8004834:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004836:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004838:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800483a:	e841 2300 	strex	r3, r2, [r1]
 800483e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1e5      	bne.n	8004812 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2220      	movs	r2, #32
 800484a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2220      	movs	r2, #32
 8004850:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e068      	b.n	8004932 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0304 	and.w	r3, r3, #4
 800486a:	2b00      	cmp	r3, #0
 800486c:	d050      	beq.n	8004910 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	69db      	ldr	r3, [r3, #28]
 8004874:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004878:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800487c:	d148      	bne.n	8004910 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004886:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004890:	e853 3f00 	ldrex	r3, [r3]
 8004894:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004898:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800489c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	461a      	mov	r2, r3
 80048a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048a6:	637b      	str	r3, [r7, #52]	; 0x34
 80048a8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048ae:	e841 2300 	strex	r3, r2, [r1]
 80048b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1e6      	bne.n	8004888 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	3308      	adds	r3, #8
 80048c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	e853 3f00 	ldrex	r3, [r3]
 80048c8:	613b      	str	r3, [r7, #16]
   return(result);
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	f023 0301 	bic.w	r3, r3, #1
 80048d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	3308      	adds	r3, #8
 80048d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80048da:	623a      	str	r2, [r7, #32]
 80048dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048de:	69f9      	ldr	r1, [r7, #28]
 80048e0:	6a3a      	ldr	r2, [r7, #32]
 80048e2:	e841 2300 	strex	r3, r2, [r1]
 80048e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1e5      	bne.n	80048ba <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2220      	movs	r2, #32
 80048f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2220      	movs	r2, #32
 80048f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2220      	movs	r2, #32
 8004900:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e010      	b.n	8004932 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	69da      	ldr	r2, [r3, #28]
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	4013      	ands	r3, r2
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	429a      	cmp	r2, r3
 800491e:	bf0c      	ite	eq
 8004920:	2301      	moveq	r3, #1
 8004922:	2300      	movne	r3, #0
 8004924:	b2db      	uxtb	r3, r3
 8004926:	461a      	mov	r2, r3
 8004928:	79fb      	ldrb	r3, [r7, #7]
 800492a:	429a      	cmp	r2, r3
 800492c:	f43f af48 	beq.w	80047c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3770      	adds	r7, #112	; 0x70
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
	...

0800493c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800493c:	b480      	push	{r7}
 800493e:	b097      	sub	sp, #92	; 0x5c
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	4613      	mov	r3, r2
 8004948:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	68ba      	ldr	r2, [r7, #8]
 800494e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	88fa      	ldrh	r2, [r7, #6]
 8004954:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	88fa      	ldrh	r2, [r7, #6]
 800495c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800496e:	d10e      	bne.n	800498e <UART_Start_Receive_IT+0x52>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d105      	bne.n	8004984 <UART_Start_Receive_IT+0x48>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800497e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004982:	e02d      	b.n	80049e0 <UART_Start_Receive_IT+0xa4>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	22ff      	movs	r2, #255	; 0xff
 8004988:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800498c:	e028      	b.n	80049e0 <UART_Start_Receive_IT+0xa4>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10d      	bne.n	80049b2 <UART_Start_Receive_IT+0x76>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d104      	bne.n	80049a8 <UART_Start_Receive_IT+0x6c>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	22ff      	movs	r2, #255	; 0xff
 80049a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049a6:	e01b      	b.n	80049e0 <UART_Start_Receive_IT+0xa4>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	227f      	movs	r2, #127	; 0x7f
 80049ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049b0:	e016      	b.n	80049e0 <UART_Start_Receive_IT+0xa4>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049ba:	d10d      	bne.n	80049d8 <UART_Start_Receive_IT+0x9c>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d104      	bne.n	80049ce <UART_Start_Receive_IT+0x92>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	227f      	movs	r2, #127	; 0x7f
 80049c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049cc:	e008      	b.n	80049e0 <UART_Start_Receive_IT+0xa4>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	223f      	movs	r2, #63	; 0x3f
 80049d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049d6:	e003      	b.n	80049e0 <UART_Start_Receive_IT+0xa4>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2222      	movs	r2, #34	; 0x22
 80049ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	3308      	adds	r3, #8
 80049f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049fa:	e853 3f00 	ldrex	r3, [r3]
 80049fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a02:	f043 0301 	orr.w	r3, r3, #1
 8004a06:	657b      	str	r3, [r7, #84]	; 0x54
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	3308      	adds	r3, #8
 8004a0e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004a10:	64ba      	str	r2, [r7, #72]	; 0x48
 8004a12:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a14:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004a16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a18:	e841 2300 	strex	r3, r2, [r1]
 8004a1c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004a1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1e5      	bne.n	80049f0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a2c:	d107      	bne.n	8004a3e <UART_Start_Receive_IT+0x102>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d103      	bne.n	8004a3e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	4a21      	ldr	r2, [pc, #132]	; (8004ac0 <UART_Start_Receive_IT+0x184>)
 8004a3a:	669a      	str	r2, [r3, #104]	; 0x68
 8004a3c:	e002      	b.n	8004a44 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	4a20      	ldr	r2, [pc, #128]	; (8004ac4 <UART_Start_Receive_IT+0x188>)
 8004a42:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d019      	beq.n	8004a80 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a54:	e853 3f00 	ldrex	r3, [r3]
 8004a58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004a60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	461a      	mov	r2, r3
 8004a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a6a:	637b      	str	r3, [r7, #52]	; 0x34
 8004a6c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a72:	e841 2300 	strex	r3, r2, [r1]
 8004a76:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1e6      	bne.n	8004a4c <UART_Start_Receive_IT+0x110>
 8004a7e:	e018      	b.n	8004ab2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	e853 3f00 	ldrex	r3, [r3]
 8004a8c:	613b      	str	r3, [r7, #16]
   return(result);
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	f043 0320 	orr.w	r3, r3, #32
 8004a94:	653b      	str	r3, [r7, #80]	; 0x50
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a9e:	623b      	str	r3, [r7, #32]
 8004aa0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa2:	69f9      	ldr	r1, [r7, #28]
 8004aa4:	6a3a      	ldr	r2, [r7, #32]
 8004aa6:	e841 2300 	strex	r3, r2, [r1]
 8004aaa:	61bb      	str	r3, [r7, #24]
   return(result);
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1e6      	bne.n	8004a80 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	375c      	adds	r7, #92	; 0x5c
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr
 8004ac0:	08004d77 	.word	0x08004d77
 8004ac4:	08004c11 	.word	0x08004c11

08004ac8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b095      	sub	sp, #84	; 0x54
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ad8:	e853 3f00 	ldrex	r3, [r3]
 8004adc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ae4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	461a      	mov	r2, r3
 8004aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aee:	643b      	str	r3, [r7, #64]	; 0x40
 8004af0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004af4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004af6:	e841 2300 	strex	r3, r2, [r1]
 8004afa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1e6      	bne.n	8004ad0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	3308      	adds	r3, #8
 8004b08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0a:	6a3b      	ldr	r3, [r7, #32]
 8004b0c:	e853 3f00 	ldrex	r3, [r3]
 8004b10:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	f023 0301 	bic.w	r3, r3, #1
 8004b18:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	3308      	adds	r3, #8
 8004b20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b2a:	e841 2300 	strex	r3, r2, [r1]
 8004b2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1e5      	bne.n	8004b02 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d118      	bne.n	8004b70 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	e853 3f00 	ldrex	r3, [r3]
 8004b4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f023 0310 	bic.w	r3, r3, #16
 8004b52:	647b      	str	r3, [r7, #68]	; 0x44
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	461a      	mov	r2, r3
 8004b5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b5c:	61bb      	str	r3, [r7, #24]
 8004b5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b60:	6979      	ldr	r1, [r7, #20]
 8004b62:	69ba      	ldr	r2, [r7, #24]
 8004b64:	e841 2300 	strex	r3, r2, [r1]
 8004b68:	613b      	str	r3, [r7, #16]
   return(result);
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1e6      	bne.n	8004b3e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004b84:	bf00      	nop
 8004b86:	3754      	adds	r7, #84	; 0x54
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f7ff fa8a 	bl	80040c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bb4:	bf00      	nop
 8004bb6:	3710      	adds	r7, #16
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b088      	sub	sp, #32
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	e853 3f00 	ldrex	r3, [r3]
 8004bd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bd8:	61fb      	str	r3, [r7, #28]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	461a      	mov	r2, r3
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	61bb      	str	r3, [r7, #24]
 8004be4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be6:	6979      	ldr	r1, [r7, #20]
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	e841 2300 	strex	r3, r2, [r1]
 8004bee:	613b      	str	r3, [r7, #16]
   return(result);
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1e6      	bne.n	8004bc4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7ff fa56 	bl	80040b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c08:	bf00      	nop
 8004c0a:	3720      	adds	r7, #32
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b096      	sub	sp, #88	; 0x58
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004c1e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c28:	2b22      	cmp	r3, #34	; 0x22
 8004c2a:	f040 8098 	bne.w	8004d5e <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c34:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004c38:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004c3c:	b2d9      	uxtb	r1, r3
 8004c3e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004c42:	b2da      	uxtb	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c48:	400a      	ands	r2, r1
 8004c4a:	b2d2      	uxtb	r2, r2
 8004c4c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c52:	1c5a      	adds	r2, r3, #1
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	3b01      	subs	r3, #1
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d17b      	bne.n	8004d6e <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7e:	e853 3f00 	ldrex	r3, [r3]
 8004c82:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c8a:	653b      	str	r3, [r7, #80]	; 0x50
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	461a      	mov	r2, r3
 8004c92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c94:	647b      	str	r3, [r7, #68]	; 0x44
 8004c96:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c9c:	e841 2300 	strex	r3, r2, [r1]
 8004ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1e6      	bne.n	8004c76 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	3308      	adds	r3, #8
 8004cae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb2:	e853 3f00 	ldrex	r3, [r3]
 8004cb6:	623b      	str	r3, [r7, #32]
   return(result);
 8004cb8:	6a3b      	ldr	r3, [r7, #32]
 8004cba:	f023 0301 	bic.w	r3, r3, #1
 8004cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	3308      	adds	r3, #8
 8004cc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cc8:	633a      	str	r2, [r7, #48]	; 0x30
 8004cca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ccc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cd0:	e841 2300 	strex	r3, r2, [r1]
 8004cd4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1e5      	bne.n	8004ca8 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d12e      	bne.n	8004d56 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	e853 3f00 	ldrex	r3, [r3]
 8004d0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f023 0310 	bic.w	r3, r3, #16
 8004d12:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	461a      	mov	r2, r3
 8004d1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d1c:	61fb      	str	r3, [r7, #28]
 8004d1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d20:	69b9      	ldr	r1, [r7, #24]
 8004d22:	69fa      	ldr	r2, [r7, #28]
 8004d24:	e841 2300 	strex	r3, r2, [r1]
 8004d28:	617b      	str	r3, [r7, #20]
   return(result);
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1e6      	bne.n	8004cfe <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	f003 0310 	and.w	r3, r3, #16
 8004d3a:	2b10      	cmp	r3, #16
 8004d3c:	d103      	bne.n	8004d46 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2210      	movs	r2, #16
 8004d44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7ff f9c4 	bl	80040dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d54:	e00b      	b.n	8004d6e <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7fb fe66 	bl	8000a28 <HAL_UART_RxCpltCallback>
}
 8004d5c:	e007      	b.n	8004d6e <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	699a      	ldr	r2, [r3, #24]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f042 0208 	orr.w	r2, r2, #8
 8004d6c:	619a      	str	r2, [r3, #24]
}
 8004d6e:	bf00      	nop
 8004d70:	3758      	adds	r7, #88	; 0x58
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b096      	sub	sp, #88	; 0x58
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004d84:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d8e:	2b22      	cmp	r3, #34	; 0x22
 8004d90:	f040 8098 	bne.w	8004ec4 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004da4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004da8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004dac:	4013      	ands	r3, r2
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004db2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db8:	1c9a      	adds	r2, r3, #2
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d17b      	bne.n	8004ed4 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de4:	e853 3f00 	ldrex	r3, [r3]
 8004de8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004df0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	461a      	mov	r2, r3
 8004df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dfa:	643b      	str	r3, [r7, #64]	; 0x40
 8004dfc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e02:	e841 2300 	strex	r3, r2, [r1]
 8004e06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1e6      	bne.n	8004ddc <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	3308      	adds	r3, #8
 8004e14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e16:	6a3b      	ldr	r3, [r7, #32]
 8004e18:	e853 3f00 	ldrex	r3, [r3]
 8004e1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	f023 0301 	bic.w	r3, r3, #1
 8004e24:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	3308      	adds	r3, #8
 8004e2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e36:	e841 2300 	strex	r3, r2, [r1]
 8004e3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1e5      	bne.n	8004e0e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2220      	movs	r2, #32
 8004e46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d12e      	bne.n	8004ebc <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	e853 3f00 	ldrex	r3, [r3]
 8004e70:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	f023 0310 	bic.w	r3, r3, #16
 8004e78:	647b      	str	r3, [r7, #68]	; 0x44
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e82:	61bb      	str	r3, [r7, #24]
 8004e84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e86:	6979      	ldr	r1, [r7, #20]
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	e841 2300 	strex	r3, r2, [r1]
 8004e8e:	613b      	str	r3, [r7, #16]
   return(result);
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1e6      	bne.n	8004e64 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	f003 0310 	and.w	r3, r3, #16
 8004ea0:	2b10      	cmp	r3, #16
 8004ea2:	d103      	bne.n	8004eac <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2210      	movs	r2, #16
 8004eaa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f7ff f911 	bl	80040dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004eba:	e00b      	b.n	8004ed4 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f7fb fdb3 	bl	8000a28 <HAL_UART_RxCpltCallback>
}
 8004ec2:	e007      	b.n	8004ed4 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	699a      	ldr	r2, [r3, #24]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f042 0208 	orr.w	r2, r2, #8
 8004ed2:	619a      	str	r2, [r3, #24]
}
 8004ed4:	bf00      	nop
 8004ed6:	3758      	adds	r7, #88	; 0x58
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004edc:	b084      	sub	sp, #16
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b084      	sub	sp, #16
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
 8004ee6:	f107 001c 	add.w	r0, r7, #28
 8004eea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d120      	bne.n	8004f36 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68da      	ldr	r2, [r3, #12]
 8004f04:	4b20      	ldr	r3, [pc, #128]	; (8004f88 <USB_CoreInit+0xac>)
 8004f06:	4013      	ands	r3, r2
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d105      	bne.n	8004f2a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 fa96 	bl	800545c <USB_CoreReset>
 8004f30:	4603      	mov	r3, r0
 8004f32:	73fb      	strb	r3, [r7, #15]
 8004f34:	e010      	b.n	8004f58 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 fa8a 	bl	800545c <USB_CoreReset>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f50:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d10b      	bne.n	8004f76 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f043 0206 	orr.w	r2, r3, #6
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f043 0220 	orr.w	r2, r3, #32
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f82:	b004      	add	sp, #16
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	ffbdffbf 	.word	0xffbdffbf

08004f8c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f023 0201 	bic.w	r2, r3, #1
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b084      	sub	sp, #16
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004fca:	78fb      	ldrb	r3, [r7, #3]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d115      	bne.n	8004ffc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004fdc:	2001      	movs	r0, #1
 8004fde:	f7fc f821 	bl	8001024 <HAL_Delay>
      ms++;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 fa29 	bl	8005440 <USB_GetMode>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d01e      	beq.n	8005032 <USB_SetCurrentMode+0x84>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2b31      	cmp	r3, #49	; 0x31
 8004ff8:	d9f0      	bls.n	8004fdc <USB_SetCurrentMode+0x2e>
 8004ffa:	e01a      	b.n	8005032 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ffc:	78fb      	ldrb	r3, [r7, #3]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d115      	bne.n	800502e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800500e:	2001      	movs	r0, #1
 8005010:	f7fc f808 	bl	8001024 <HAL_Delay>
      ms++;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	3301      	adds	r3, #1
 8005018:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 fa10 	bl	8005440 <USB_GetMode>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d005      	beq.n	8005032 <USB_SetCurrentMode+0x84>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2b31      	cmp	r3, #49	; 0x31
 800502a:	d9f0      	bls.n	800500e <USB_SetCurrentMode+0x60>
 800502c:	e001      	b.n	8005032 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e005      	b.n	800503e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2b32      	cmp	r3, #50	; 0x32
 8005036:	d101      	bne.n	800503c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e000      	b.n	800503e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3710      	adds	r7, #16
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
	...

08005048 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005048:	b084      	sub	sp, #16
 800504a:	b580      	push	{r7, lr}
 800504c:	b086      	sub	sp, #24
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005056:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800505a:	2300      	movs	r3, #0
 800505c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005062:	2300      	movs	r3, #0
 8005064:	613b      	str	r3, [r7, #16]
 8005066:	e009      	b.n	800507c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	3340      	adds	r3, #64	; 0x40
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	2200      	movs	r2, #0
 8005074:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	3301      	adds	r3, #1
 800507a:	613b      	str	r3, [r7, #16]
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	2b0e      	cmp	r3, #14
 8005080:	d9f2      	bls.n	8005068 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005084:	2b00      	cmp	r3, #0
 8005086:	d11c      	bne.n	80050c2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005096:	f043 0302 	orr.w	r3, r3, #2
 800509a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	601a      	str	r2, [r3, #0]
 80050c0:	e005      	b.n	80050ce <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80050d4:	461a      	mov	r2, r3
 80050d6:	2300      	movs	r3, #0
 80050d8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e0:	4619      	mov	r1, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e8:	461a      	mov	r2, r3
 80050ea:	680b      	ldr	r3, [r1, #0]
 80050ec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d10c      	bne.n	800510e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80050f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d104      	bne.n	8005104 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80050fa:	2100      	movs	r1, #0
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 f965 	bl	80053cc <USB_SetDevSpeed>
 8005102:	e008      	b.n	8005116 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005104:	2101      	movs	r1, #1
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f960 	bl	80053cc <USB_SetDevSpeed>
 800510c:	e003      	b.n	8005116 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800510e:	2103      	movs	r1, #3
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 f95b 	bl	80053cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005116:	2110      	movs	r1, #16
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 f8f3 	bl	8005304 <USB_FlushTxFifo>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d001      	beq.n	8005128 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 f91f 	bl	800536c <USB_FlushRxFifo>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800513e:	461a      	mov	r2, r3
 8005140:	2300      	movs	r3, #0
 8005142:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800514a:	461a      	mov	r2, r3
 800514c:	2300      	movs	r3, #0
 800514e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005156:	461a      	mov	r2, r3
 8005158:	2300      	movs	r3, #0
 800515a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800515c:	2300      	movs	r3, #0
 800515e:	613b      	str	r3, [r7, #16]
 8005160:	e043      	b.n	80051ea <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	4413      	add	r3, r2
 800516a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005174:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005178:	d118      	bne.n	80051ac <USB_DevInit+0x164>
    {
      if (i == 0U)
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10a      	bne.n	8005196 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	4413      	add	r3, r2
 8005188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800518c:	461a      	mov	r2, r3
 800518e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005192:	6013      	str	r3, [r2, #0]
 8005194:	e013      	b.n	80051be <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	015a      	lsls	r2, r3, #5
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	4413      	add	r3, r2
 800519e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a2:	461a      	mov	r2, r3
 80051a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051a8:	6013      	str	r3, [r2, #0]
 80051aa:	e008      	b.n	80051be <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b8:	461a      	mov	r2, r3
 80051ba:	2300      	movs	r3, #0
 80051bc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ca:	461a      	mov	r2, r3
 80051cc:	2300      	movs	r3, #0
 80051ce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051dc:	461a      	mov	r2, r3
 80051de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	3301      	adds	r3, #1
 80051e8:	613b      	str	r3, [r7, #16]
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d3b7      	bcc.n	8005162 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051f2:	2300      	movs	r3, #0
 80051f4:	613b      	str	r3, [r7, #16]
 80051f6:	e043      	b.n	8005280 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800520a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800520e:	d118      	bne.n	8005242 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10a      	bne.n	800522c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	015a      	lsls	r2, r3, #5
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	4413      	add	r3, r2
 800521e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005222:	461a      	mov	r2, r3
 8005224:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005228:	6013      	str	r3, [r2, #0]
 800522a:	e013      	b.n	8005254 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	4413      	add	r3, r2
 8005234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005238:	461a      	mov	r2, r3
 800523a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800523e:	6013      	str	r3, [r2, #0]
 8005240:	e008      	b.n	8005254 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	4413      	add	r3, r2
 800524a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800524e:	461a      	mov	r2, r3
 8005250:	2300      	movs	r3, #0
 8005252:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	4413      	add	r3, r2
 800525c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005260:	461a      	mov	r2, r3
 8005262:	2300      	movs	r3, #0
 8005264:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	015a      	lsls	r2, r3, #5
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	4413      	add	r3, r2
 800526e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005272:	461a      	mov	r2, r3
 8005274:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005278:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	3301      	adds	r3, #1
 800527e:	613b      	str	r3, [r7, #16]
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	429a      	cmp	r2, r3
 8005286:	d3b7      	bcc.n	80051f8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005296:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800529a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80052a8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80052aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d105      	bne.n	80052bc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	f043 0210 	orr.w	r2, r3, #16
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	699a      	ldr	r2, [r3, #24]
 80052c0:	4b0e      	ldr	r3, [pc, #56]	; (80052fc <USB_DevInit+0x2b4>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80052c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d005      	beq.n	80052da <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	f043 0208 	orr.w	r2, r3, #8
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80052da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d105      	bne.n	80052ec <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	699a      	ldr	r2, [r3, #24]
 80052e4:	4b06      	ldr	r3, [pc, #24]	; (8005300 <USB_DevInit+0x2b8>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80052ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3718      	adds	r7, #24
 80052f2:	46bd      	mov	sp, r7
 80052f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052f8:	b004      	add	sp, #16
 80052fa:	4770      	bx	lr
 80052fc:	803c3800 	.word	0x803c3800
 8005300:	40000004 	.word	0x40000004

08005304 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800530e:	2300      	movs	r3, #0
 8005310:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	3301      	adds	r3, #1
 8005316:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	4a13      	ldr	r2, [pc, #76]	; (8005368 <USB_FlushTxFifo+0x64>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d901      	bls.n	8005324 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e01b      	b.n	800535c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	2b00      	cmp	r3, #0
 800532a:	daf2      	bge.n	8005312 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	019b      	lsls	r3, r3, #6
 8005334:	f043 0220 	orr.w	r2, r3, #32
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	3301      	adds	r3, #1
 8005340:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	4a08      	ldr	r2, [pc, #32]	; (8005368 <USB_FlushTxFifo+0x64>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d901      	bls.n	800534e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e006      	b.n	800535c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	f003 0320 	and.w	r3, r3, #32
 8005356:	2b20      	cmp	r3, #32
 8005358:	d0f0      	beq.n	800533c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3714      	adds	r7, #20
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr
 8005368:	00030d40 	.word	0x00030d40

0800536c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005374:	2300      	movs	r3, #0
 8005376:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	3301      	adds	r3, #1
 800537c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	4a11      	ldr	r2, [pc, #68]	; (80053c8 <USB_FlushRxFifo+0x5c>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d901      	bls.n	800538a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e018      	b.n	80053bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	2b00      	cmp	r3, #0
 8005390:	daf2      	bge.n	8005378 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005392:	2300      	movs	r3, #0
 8005394:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2210      	movs	r2, #16
 800539a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	3301      	adds	r3, #1
 80053a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	4a08      	ldr	r2, [pc, #32]	; (80053c8 <USB_FlushRxFifo+0x5c>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d901      	bls.n	80053ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e006      	b.n	80053bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	f003 0310 	and.w	r3, r3, #16
 80053b6:	2b10      	cmp	r3, #16
 80053b8:	d0f0      	beq.n	800539c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr
 80053c8:	00030d40 	.word	0x00030d40

080053cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	460b      	mov	r3, r1
 80053d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	78fb      	ldrb	r3, [r7, #3]
 80053e6:	68f9      	ldr	r1, [r7, #12]
 80053e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053ec:	4313      	orrs	r3, r2
 80053ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80053fe:	b480      	push	{r7}
 8005400:	b085      	sub	sp, #20
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005418:	f023 0303 	bic.w	r3, r3, #3
 800541c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800542c:	f043 0302 	orr.w	r3, r3, #2
 8005430:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	4618      	mov	r0, r3
 8005436:	3714      	adds	r7, #20
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	f003 0301 	and.w	r3, r3, #1
}
 8005450:	4618      	mov	r0, r3
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005464:	2300      	movs	r3, #0
 8005466:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	3301      	adds	r3, #1
 800546c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	4a13      	ldr	r2, [pc, #76]	; (80054c0 <USB_CoreReset+0x64>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d901      	bls.n	800547a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e01b      	b.n	80054b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	2b00      	cmp	r3, #0
 8005480:	daf2      	bge.n	8005468 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005482:	2300      	movs	r3, #0
 8005484:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	f043 0201 	orr.w	r2, r3, #1
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	3301      	adds	r3, #1
 8005496:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	4a09      	ldr	r2, [pc, #36]	; (80054c0 <USB_CoreReset+0x64>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d901      	bls.n	80054a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e006      	b.n	80054b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	f003 0301 	and.w	r3, r3, #1
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d0f0      	beq.n	8005492 <USB_CoreReset+0x36>

  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3714      	adds	r7, #20
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	00030d40 	.word	0x00030d40

080054c4 <memset>:
 80054c4:	4402      	add	r2, r0
 80054c6:	4603      	mov	r3, r0
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d100      	bne.n	80054ce <memset+0xa>
 80054cc:	4770      	bx	lr
 80054ce:	f803 1b01 	strb.w	r1, [r3], #1
 80054d2:	e7f9      	b.n	80054c8 <memset+0x4>

080054d4 <__libc_init_array>:
 80054d4:	b570      	push	{r4, r5, r6, lr}
 80054d6:	4d0d      	ldr	r5, [pc, #52]	; (800550c <__libc_init_array+0x38>)
 80054d8:	4c0d      	ldr	r4, [pc, #52]	; (8005510 <__libc_init_array+0x3c>)
 80054da:	1b64      	subs	r4, r4, r5
 80054dc:	10a4      	asrs	r4, r4, #2
 80054de:	2600      	movs	r6, #0
 80054e0:	42a6      	cmp	r6, r4
 80054e2:	d109      	bne.n	80054f8 <__libc_init_array+0x24>
 80054e4:	4d0b      	ldr	r5, [pc, #44]	; (8005514 <__libc_init_array+0x40>)
 80054e6:	4c0c      	ldr	r4, [pc, #48]	; (8005518 <__libc_init_array+0x44>)
 80054e8:	f000 f818 	bl	800551c <_init>
 80054ec:	1b64      	subs	r4, r4, r5
 80054ee:	10a4      	asrs	r4, r4, #2
 80054f0:	2600      	movs	r6, #0
 80054f2:	42a6      	cmp	r6, r4
 80054f4:	d105      	bne.n	8005502 <__libc_init_array+0x2e>
 80054f6:	bd70      	pop	{r4, r5, r6, pc}
 80054f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80054fc:	4798      	blx	r3
 80054fe:	3601      	adds	r6, #1
 8005500:	e7ee      	b.n	80054e0 <__libc_init_array+0xc>
 8005502:	f855 3b04 	ldr.w	r3, [r5], #4
 8005506:	4798      	blx	r3
 8005508:	3601      	adds	r6, #1
 800550a:	e7f2      	b.n	80054f2 <__libc_init_array+0x1e>
 800550c:	08005554 	.word	0x08005554
 8005510:	08005554 	.word	0x08005554
 8005514:	08005554 	.word	0x08005554
 8005518:	08005558 	.word	0x08005558

0800551c <_init>:
 800551c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800551e:	bf00      	nop
 8005520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005522:	bc08      	pop	{r3}
 8005524:	469e      	mov	lr, r3
 8005526:	4770      	bx	lr

08005528 <_fini>:
 8005528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800552a:	bf00      	nop
 800552c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800552e:	bc08      	pop	{r3}
 8005530:	469e      	mov	lr, r3
 8005532:	4770      	bx	lr
