
767_SPI_ILI9341_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090ac  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d4  080092b0  080092b0  000192b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009884  08009884  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009884  08009884  00019884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800988c  0800988c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800988c  0800988c  0001988c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009890  08009890  00019890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009894  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  200001dc  08009a70  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000534  08009a70  00020534  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019b1e  00000000  00000000  0002024d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b7e  00000000  00000000  00039d6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001590  00000000  00000000  0003d8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010c2  00000000  00000000  0003ee80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bc05  00000000  00000000  0003ff42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e151  00000000  00000000  0006bb47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00106fd3  00000000  00000000  00089c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006924  00000000  00000000  00190c6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00197590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001dc 	.word	0x200001dc
 800021c:	00000000 	.word	0x00000000
 8000220:	08009294 	.word	0x08009294

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e0 	.word	0x200001e0
 800023c:	08009294 	.word	0x08009294

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	463b      	mov	r3, r7
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005fe:	4b21      	ldr	r3, [pc, #132]	; (8000684 <MX_ADC1_Init+0x98>)
 8000600:	4a21      	ldr	r2, [pc, #132]	; (8000688 <MX_ADC1_Init+0x9c>)
 8000602:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000604:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <MX_ADC1_Init+0x98>)
 8000606:	2200      	movs	r2, #0
 8000608:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060a:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <MX_ADC1_Init+0x98>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000610:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <MX_ADC1_Init+0x98>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000616:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <MX_ADC1_Init+0x98>)
 8000618:	2201      	movs	r2, #1
 800061a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061c:	4b19      	ldr	r3, [pc, #100]	; (8000684 <MX_ADC1_Init+0x98>)
 800061e:	2200      	movs	r2, #0
 8000620:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000624:	4b17      	ldr	r3, [pc, #92]	; (8000684 <MX_ADC1_Init+0x98>)
 8000626:	2200      	movs	r2, #0
 8000628:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800062a:	4b16      	ldr	r3, [pc, #88]	; (8000684 <MX_ADC1_Init+0x98>)
 800062c:	4a17      	ldr	r2, [pc, #92]	; (800068c <MX_ADC1_Init+0xa0>)
 800062e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000630:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_ADC1_Init+0x98>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000636:	4b13      	ldr	r3, [pc, #76]	; (8000684 <MX_ADC1_Init+0x98>)
 8000638:	2201      	movs	r2, #1
 800063a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800063c:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_ADC1_Init+0x98>)
 800063e:	2200      	movs	r2, #0
 8000640:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_ADC1_Init+0x98>)
 8000646:	2200      	movs	r2, #0
 8000648:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800064a:	480e      	ldr	r0, [pc, #56]	; (8000684 <MX_ADC1_Init+0x98>)
 800064c:	f001 fd5c 	bl	8002108 <HAL_ADC_Init>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000656:	f000 fc41 	bl	8000edc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800065a:	230a      	movs	r3, #10
 800065c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800065e:	2301      	movs	r3, #1
 8000660:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000662:	2300      	movs	r3, #0
 8000664:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000666:	463b      	mov	r3, r7
 8000668:	4619      	mov	r1, r3
 800066a:	4806      	ldr	r0, [pc, #24]	; (8000684 <MX_ADC1_Init+0x98>)
 800066c:	f001 fef6 	bl	800245c <HAL_ADC_ConfigChannel>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000676:	f000 fc31 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	200001f8 	.word	0x200001f8
 8000688:	40012000 	.word	0x40012000
 800068c:	0f000001 	.word	0x0f000001

08000690 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a15      	ldr	r2, [pc, #84]	; (8000704 <HAL_ADC_MspInit+0x74>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d123      	bne.n	80006fa <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006b2:	4b15      	ldr	r3, [pc, #84]	; (8000708 <HAL_ADC_MspInit+0x78>)
 80006b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b6:	4a14      	ldr	r2, [pc, #80]	; (8000708 <HAL_ADC_MspInit+0x78>)
 80006b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006bc:	6453      	str	r3, [r2, #68]	; 0x44
 80006be:	4b12      	ldr	r3, [pc, #72]	; (8000708 <HAL_ADC_MspInit+0x78>)
 80006c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ca:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <HAL_ADC_MspInit+0x78>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a0e      	ldr	r2, [pc, #56]	; (8000708 <HAL_ADC_MspInit+0x78>)
 80006d0:	f043 0304 	orr.w	r3, r3, #4
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <HAL_ADC_MspInit+0x78>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0304 	and.w	r3, r3, #4
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006e2:	2301      	movs	r3, #1
 80006e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006e6:	2303      	movs	r3, #3
 80006e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	4619      	mov	r1, r3
 80006f4:	4805      	ldr	r0, [pc, #20]	; (800070c <HAL_ADC_MspInit+0x7c>)
 80006f6:	f002 fa13 	bl	8002b20 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006fa:	bf00      	nop
 80006fc:	3728      	adds	r7, #40	; 0x28
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40012000 	.word	0x40012000
 8000708:	40023800 	.word	0x40023800
 800070c:	40020800 	.word	0x40020800

08000710 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08e      	sub	sp, #56	; 0x38
 8000714:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000726:	4b8d      	ldr	r3, [pc, #564]	; (800095c <MX_GPIO_Init+0x24c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a8c      	ldr	r2, [pc, #560]	; (800095c <MX_GPIO_Init+0x24c>)
 800072c:	f043 0310 	orr.w	r3, r3, #16
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b8a      	ldr	r3, [pc, #552]	; (800095c <MX_GPIO_Init+0x24c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0310 	and.w	r3, r3, #16
 800073a:	623b      	str	r3, [r7, #32]
 800073c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	4b87      	ldr	r3, [pc, #540]	; (800095c <MX_GPIO_Init+0x24c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a86      	ldr	r2, [pc, #536]	; (800095c <MX_GPIO_Init+0x24c>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b84      	ldr	r3, [pc, #528]	; (800095c <MX_GPIO_Init+0x24c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	61fb      	str	r3, [r7, #28]
 8000754:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000756:	4b81      	ldr	r3, [pc, #516]	; (800095c <MX_GPIO_Init+0x24c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a80      	ldr	r2, [pc, #512]	; (800095c <MX_GPIO_Init+0x24c>)
 800075c:	f043 0320 	orr.w	r3, r3, #32
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b7e      	ldr	r3, [pc, #504]	; (800095c <MX_GPIO_Init+0x24c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0320 	and.w	r3, r3, #32
 800076a:	61bb      	str	r3, [r7, #24]
 800076c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076e:	4b7b      	ldr	r3, [pc, #492]	; (800095c <MX_GPIO_Init+0x24c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a7a      	ldr	r2, [pc, #488]	; (800095c <MX_GPIO_Init+0x24c>)
 8000774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b78      	ldr	r3, [pc, #480]	; (800095c <MX_GPIO_Init+0x24c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	4b75      	ldr	r3, [pc, #468]	; (800095c <MX_GPIO_Init+0x24c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a74      	ldr	r2, [pc, #464]	; (800095c <MX_GPIO_Init+0x24c>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b72      	ldr	r3, [pc, #456]	; (800095c <MX_GPIO_Init+0x24c>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	4b6f      	ldr	r3, [pc, #444]	; (800095c <MX_GPIO_Init+0x24c>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a6e      	ldr	r2, [pc, #440]	; (800095c <MX_GPIO_Init+0x24c>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b6c      	ldr	r3, [pc, #432]	; (800095c <MX_GPIO_Init+0x24c>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b6:	4b69      	ldr	r3, [pc, #420]	; (800095c <MX_GPIO_Init+0x24c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a68      	ldr	r2, [pc, #416]	; (800095c <MX_GPIO_Init+0x24c>)
 80007bc:	f043 0308 	orr.w	r3, r3, #8
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b66      	ldr	r3, [pc, #408]	; (800095c <MX_GPIO_Init+0x24c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0308 	and.w	r3, r3, #8
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ce:	4b63      	ldr	r3, [pc, #396]	; (800095c <MX_GPIO_Init+0x24c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a62      	ldr	r2, [pc, #392]	; (800095c <MX_GPIO_Init+0x24c>)
 80007d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b60      	ldr	r3, [pc, #384]	; (800095c <MX_GPIO_Init+0x24c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2168      	movs	r1, #104	; 0x68
 80007ea:	485d      	ldr	r0, [pc, #372]	; (8000960 <MX_GPIO_Init+0x250>)
 80007ec:	f002 fb44 	bl	8002e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80007f6:	485b      	ldr	r0, [pc, #364]	; (8000964 <MX_GPIO_Init+0x254>)
 80007f8:	f002 fb3e 	bl	8002e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2140      	movs	r1, #64	; 0x40
 8000800:	4859      	ldr	r0, [pc, #356]	; (8000968 <MX_GPIO_Init+0x258>)
 8000802:	f002 fb39 	bl	8002e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800080c:	4857      	ldr	r0, [pc, #348]	; (800096c <MX_GPIO_Init+0x25c>)
 800080e:	f002 fb33 	bl	8002e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 8000812:	2314      	movs	r3, #20
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000816:	2300      	movs	r3, #0
 8000818:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800081e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000822:	4619      	mov	r1, r3
 8000824:	484e      	ldr	r0, [pc, #312]	; (8000960 <MX_GPIO_Init+0x250>)
 8000826:	f002 f97b 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 800082a:	2368      	movs	r3, #104	; 0x68
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000836:	2303      	movs	r3, #3
 8000838:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800083a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083e:	4619      	mov	r1, r3
 8000840:	4847      	ldr	r0, [pc, #284]	; (8000960 <MX_GPIO_Init+0x250>)
 8000842:	f002 f96d 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 8000846:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084c:	2300      	movs	r3, #0
 800084e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000858:	4619      	mov	r1, r3
 800085a:	4844      	ldr	r0, [pc, #272]	; (800096c <MX_GPIO_Init+0x25c>)
 800085c:	f002 f960 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000860:	2332      	movs	r3, #50	; 0x32
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000864:	2302      	movs	r3, #2
 8000866:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086c:	2303      	movs	r3, #3
 800086e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000870:	230b      	movs	r3, #11
 8000872:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000878:	4619      	mov	r1, r3
 800087a:	483c      	ldr	r0, [pc, #240]	; (800096c <MX_GPIO_Init+0x25c>)
 800087c:	f002 f950 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000880:	2386      	movs	r3, #134	; 0x86
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088c:	2303      	movs	r3, #3
 800088e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000890:	230b      	movs	r3, #11
 8000892:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000898:	4619      	mov	r1, r3
 800089a:	4835      	ldr	r0, [pc, #212]	; (8000970 <MX_GPIO_Init+0x260>)
 800089c:	f002 f940 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ae:	2303      	movs	r3, #3
 80008b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008b2:	230b      	movs	r3, #11
 80008b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ba:	4619      	mov	r1, r3
 80008bc:	4829      	ldr	r0, [pc, #164]	; (8000964 <MX_GPIO_Init+0x254>)
 80008be:	f002 f92f 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80008c2:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d8:	4619      	mov	r1, r3
 80008da:	4822      	ldr	r0, [pc, #136]	; (8000964 <MX_GPIO_Init+0x254>)
 80008dc:	f002 f920 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008e0:	2340      	movs	r3, #64	; 0x40
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e4:	2301      	movs	r3, #1
 80008e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f4:	4619      	mov	r1, r3
 80008f6:	481c      	ldr	r0, [pc, #112]	; (8000968 <MX_GPIO_Init+0x258>)
 80008f8:	f002 f912 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000900:	2300      	movs	r3, #0
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090c:	4619      	mov	r1, r3
 800090e:	4816      	ldr	r0, [pc, #88]	; (8000968 <MX_GPIO_Init+0x258>)
 8000910:	f002 f906 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 8000914:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091a:	2301      	movs	r3, #1
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000922:	2303      	movs	r3, #3
 8000924:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092a:	4619      	mov	r1, r3
 800092c:	480f      	ldr	r0, [pc, #60]	; (800096c <MX_GPIO_Init+0x25c>)
 800092e:	f002 f8f7 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000932:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000938:	2302      	movs	r3, #2
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000940:	2303      	movs	r3, #3
 8000942:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000944:	230b      	movs	r3, #11
 8000946:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094c:	4619      	mov	r1, r3
 800094e:	4806      	ldr	r0, [pc, #24]	; (8000968 <MX_GPIO_Init+0x258>)
 8000950:	f002 f8e6 	bl	8002b20 <HAL_GPIO_Init>

}
 8000954:	bf00      	nop
 8000956:	3738      	adds	r7, #56	; 0x38
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40023800 	.word	0x40023800
 8000960:	40021000 	.word	0x40021000
 8000964:	40020400 	.word	0x40020400
 8000968:	40021800 	.word	0x40021800
 800096c:	40020800 	.word	0x40020800
 8000970:	40020000 	.word	0x40020000

08000974 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000978:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <MX_I2C4_Init+0x74>)
 800097a:	4a1c      	ldr	r2, [pc, #112]	; (80009ec <MX_I2C4_Init+0x78>)
 800097c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00808CD2;
 800097e:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <MX_I2C4_Init+0x74>)
 8000980:	4a1b      	ldr	r2, [pc, #108]	; (80009f0 <MX_I2C4_Init+0x7c>)
 8000982:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000984:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <MX_I2C4_Init+0x74>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800098a:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <MX_I2C4_Init+0x74>)
 800098c:	2201      	movs	r2, #1
 800098e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000990:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <MX_I2C4_Init+0x74>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000996:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <MX_I2C4_Init+0x74>)
 8000998:	2200      	movs	r2, #0
 800099a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <MX_I2C4_Init+0x74>)
 800099e:	2200      	movs	r2, #0
 80009a0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_I2C4_Init+0x74>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a8:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <MX_I2C4_Init+0x74>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80009ae:	480e      	ldr	r0, [pc, #56]	; (80009e8 <MX_I2C4_Init+0x74>)
 80009b0:	f002 fa7c 	bl	8002eac <HAL_I2C_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80009ba:	f000 fa8f 	bl	8000edc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009be:	2100      	movs	r1, #0
 80009c0:	4809      	ldr	r0, [pc, #36]	; (80009e8 <MX_I2C4_Init+0x74>)
 80009c2:	f002 fb03 	bl	8002fcc <HAL_I2CEx_ConfigAnalogFilter>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80009cc:	f000 fa86 	bl	8000edc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80009d0:	2100      	movs	r1, #0
 80009d2:	4805      	ldr	r0, [pc, #20]	; (80009e8 <MX_I2C4_Init+0x74>)
 80009d4:	f002 fb45 	bl	8003062 <HAL_I2CEx_ConfigDigitalFilter>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80009de:	f000 fa7d 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000240 	.word	0x20000240
 80009ec:	40006000 	.word	0x40006000
 80009f0:	00808cd2 	.word	0x00808cd2

080009f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b0ae      	sub	sp, #184	; 0xb8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	2290      	movs	r2, #144	; 0x90
 8000a12:	2100      	movs	r1, #0
 8000a14:	4618      	mov	r0, r3
 8000a16:	f006 fbcc 	bl	80071b2 <memset>
  if(i2cHandle->Instance==I2C4)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a22      	ldr	r2, [pc, #136]	; (8000aa8 <HAL_I2C_MspInit+0xb4>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d13d      	bne.n	8000aa0 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000a24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a28:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4618      	mov	r0, r3
 8000a36:	f003 f845 	bl	8003ac4 <HAL_RCCEx_PeriphCLKConfig>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000a40:	f000 fa4c 	bl	8000edc <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a44:	4b19      	ldr	r3, [pc, #100]	; (8000aac <HAL_I2C_MspInit+0xb8>)
 8000a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a48:	4a18      	ldr	r2, [pc, #96]	; (8000aac <HAL_I2C_MspInit+0xb8>)
 8000a4a:	f043 0308 	orr.w	r3, r3, #8
 8000a4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a50:	4b16      	ldr	r3, [pc, #88]	; (8000aac <HAL_I2C_MspInit+0xb8>)
 8000a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a54:	f003 0308 	and.w	r3, r3, #8
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000a5c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000a60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a64:	2312      	movs	r3, #18
 8000a66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a70:	2303      	movs	r3, #3
 8000a72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000a76:	2304      	movs	r3, #4
 8000a78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a7c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a80:	4619      	mov	r1, r3
 8000a82:	480b      	ldr	r0, [pc, #44]	; (8000ab0 <HAL_I2C_MspInit+0xbc>)
 8000a84:	f002 f84c 	bl	8002b20 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000a88:	4b08      	ldr	r3, [pc, #32]	; (8000aac <HAL_I2C_MspInit+0xb8>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8c:	4a07      	ldr	r2, [pc, #28]	; (8000aac <HAL_I2C_MspInit+0xb8>)
 8000a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a92:	6413      	str	r3, [r2, #64]	; 0x40
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <HAL_I2C_MspInit+0xb8>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000aa0:	bf00      	nop
 8000aa2:	37b8      	adds	r7, #184	; 0xb8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40006000 	.word	0x40006000
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40020c00 	.word	0x40020c00

08000ab4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ab8:	f3bf 8f4f 	dsb	sy
}
 8000abc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000abe:	f3bf 8f6f 	isb	sy
}
 8000ac2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000ac4:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <SCB_EnableICache+0x48>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000acc:	f3bf 8f4f 	dsb	sy
}
 8000ad0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ad2:	f3bf 8f6f 	isb	sy
}
 8000ad6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ad8:	4b08      	ldr	r3, [pc, #32]	; (8000afc <SCB_EnableICache+0x48>)
 8000ada:	695b      	ldr	r3, [r3, #20]
 8000adc:	4a07      	ldr	r2, [pc, #28]	; (8000afc <SCB_EnableICache+0x48>)
 8000ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ae4:	f3bf 8f4f 	dsb	sy
}
 8000ae8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000aea:	f3bf 8f6f 	isb	sy
}
 8000aee:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000b06:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <SCB_EnableDCache+0x84>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000b0e:	f3bf 8f4f 	dsb	sy
}
 8000b12:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000b14:	4b1b      	ldr	r3, [pc, #108]	; (8000b84 <SCB_EnableDCache+0x84>)
 8000b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b1a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	0b5b      	lsrs	r3, r3, #13
 8000b20:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000b24:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	08db      	lsrs	r3, r3, #3
 8000b2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b2e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	015a      	lsls	r2, r3, #5
 8000b34:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000b38:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000b3a:	68ba      	ldr	r2, [r7, #8]
 8000b3c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b3e:	4911      	ldr	r1, [pc, #68]	; (8000b84 <SCB_EnableDCache+0x84>)
 8000b40:	4313      	orrs	r3, r2
 8000b42:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	1e5a      	subs	r2, r3, #1
 8000b4a:	60ba      	str	r2, [r7, #8]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d1ef      	bne.n	8000b30 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	1e5a      	subs	r2, r3, #1
 8000b54:	60fa      	str	r2, [r7, #12]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d1e5      	bne.n	8000b26 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000b5a:	f3bf 8f4f 	dsb	sy
}
 8000b5e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <SCB_EnableDCache+0x84>)
 8000b62:	695b      	ldr	r3, [r3, #20]
 8000b64:	4a07      	ldr	r2, [pc, #28]	; (8000b84 <SCB_EnableDCache+0x84>)
 8000b66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b6a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b6c:	f3bf 8f4f 	dsb	sy
}
 8000b70:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b72:	f3bf 8f6f 	isb	sy
}
 8000b76:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b0de      	sub	sp, #376	; 0x178
 8000b8c:	af02      	add	r7, sp, #8
	uint8_t cmdBuffer[3];
	uint8_t dataBuffer[8];
	/* USER CODE END 1 */

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 8000b8e:	f7ff ff91 	bl	8000ab4 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 8000b92:	f7ff ffb5 	bl	8000b00 <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b96:	f001 fa2d 	bl	8001ff4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b9a:	f000 f933 	bl	8000e04 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b9e:	f7ff fdb7 	bl	8000710 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000ba2:	f000 fc6d 	bl	8001480 <MX_USART3_UART_Init>
	MX_SPI5_Init();
 8000ba6:	f000 f9e5 	bl	8000f74 <MX_SPI5_Init>
	MX_RNG_Init();
 8000baa:	f000 f99b 	bl	8000ee4 <MX_RNG_Init>
	MX_TIM2_Init();
 8000bae:	f000 fb97 	bl	80012e0 <MX_TIM2_Init>
	MX_I2C4_Init();
 8000bb2:	f7ff fedf 	bl	8000974 <MX_I2C4_Init>
	MX_ADC1_Init();
 8000bb6:	f7ff fd19 	bl	80005ec <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	ILI9341_Init(); //initial driver setup to drive ili9341
 8000bba:	f000 ff13 	bl	80019e4 <ILI9341_Init>

//	Am2320_HandleTypeDef Am2320_;
//	Am2320_ = am2320_Init(&hi2c4, AM2320_ADDRESS);
//	float temperature, humidity;

	ILI9341_Fill_Screen(WHITE);
 8000bbe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000bc2:	f001 f8bb 	bl	8001d3c <ILI9341_Fill_Screen>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	f000 feae 	bl	8001928 <ILI9341_Set_Rotation>
	HAL_ADC_Start(&hadc1);
 8000bcc:	487e      	ldr	r0, [pc, #504]	; (8000dc8 <main+0x240>)
 8000bce:	f001 fadf 	bl	8002190 <HAL_ADC_Start>

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		while (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK) {
 8000bd2:	bf00      	nop
 8000bd4:	2164      	movs	r1, #100	; 0x64
 8000bd6:	487c      	ldr	r0, [pc, #496]	; (8000dc8 <main+0x240>)
 8000bd8:	f001 fba8 	bl	800232c <HAL_ADC_PollForConversion>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d1f8      	bne.n	8000bd4 <main+0x4c>
		}
		adc_val = HAL_ADC_GetValue(&hadc1);
 8000be2:	4879      	ldr	r0, [pc, #484]	; (8000dc8 <main+0x240>)
 8000be4:	f001 fc2d 	bl	8002442 <HAL_ADC_GetValue>
 8000be8:	4603      	mov	r3, r0
 8000bea:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
		if (adc_val <= 340)
 8000bee:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000bf2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8000bf6:	dc04      	bgt.n	8000c02 <main+0x7a>
			dutyCycleB = 0.25;
 8000bf8:	4b74      	ldr	r3, [pc, #464]	; (8000dcc <main+0x244>)
 8000bfa:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	e063      	b.n	8000cca <main+0x142>
		else if (adc_val <= 680)
 8000c02:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000c06:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 8000c0a:	dc03      	bgt.n	8000c14 <main+0x8c>
			dutyCycleB = 0.30;
 8000c0c:	4b6f      	ldr	r3, [pc, #444]	; (8000dcc <main+0x244>)
 8000c0e:	4a70      	ldr	r2, [pc, #448]	; (8000dd0 <main+0x248>)
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	e05a      	b.n	8000cca <main+0x142>
		else if (adc_val <= 1020)
 8000c14:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000c18:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 8000c1c:	dc03      	bgt.n	8000c26 <main+0x9e>
			dutyCycleB = 0.35;
 8000c1e:	4b6b      	ldr	r3, [pc, #428]	; (8000dcc <main+0x244>)
 8000c20:	4a6c      	ldr	r2, [pc, #432]	; (8000dd4 <main+0x24c>)
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	e051      	b.n	8000cca <main+0x142>
		else if (adc_val <= 1360)
 8000c26:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000c2a:	f5b3 6faa 	cmp.w	r3, #1360	; 0x550
 8000c2e:	dc03      	bgt.n	8000c38 <main+0xb0>
			dutyCycleB = 0.40;
 8000c30:	4b66      	ldr	r3, [pc, #408]	; (8000dcc <main+0x244>)
 8000c32:	4a69      	ldr	r2, [pc, #420]	; (8000dd8 <main+0x250>)
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	e048      	b.n	8000cca <main+0x142>
		else if (adc_val <= 1700)
 8000c38:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000c3c:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8000c40:	4293      	cmp	r3, r2
 8000c42:	dc03      	bgt.n	8000c4c <main+0xc4>
			dutyCycleB = 0.45;
 8000c44:	4b61      	ldr	r3, [pc, #388]	; (8000dcc <main+0x244>)
 8000c46:	4a65      	ldr	r2, [pc, #404]	; (8000ddc <main+0x254>)
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	e03e      	b.n	8000cca <main+0x142>
		else if (adc_val <= 2040)
 8000c4c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000c50:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8000c54:	dc04      	bgt.n	8000c60 <main+0xd8>
			dutyCycleB = 0.50;
 8000c56:	4b5d      	ldr	r3, [pc, #372]	; (8000dcc <main+0x244>)
 8000c58:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	e034      	b.n	8000cca <main+0x142>
		else if (adc_val <= 2380)
 8000c60:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000c64:	f640 124c 	movw	r2, #2380	; 0x94c
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	dc03      	bgt.n	8000c74 <main+0xec>
			dutyCycleB = 0.55;
 8000c6c:	4b57      	ldr	r3, [pc, #348]	; (8000dcc <main+0x244>)
 8000c6e:	4a5c      	ldr	r2, [pc, #368]	; (8000de0 <main+0x258>)
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	e02a      	b.n	8000cca <main+0x142>
		else if (adc_val <= 2720)
 8000c74:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000c78:	f5b3 6f2a 	cmp.w	r3, #2720	; 0xaa0
 8000c7c:	dc03      	bgt.n	8000c86 <main+0xfe>
			dutyCycleB = 0.60;
 8000c7e:	4b53      	ldr	r3, [pc, #332]	; (8000dcc <main+0x244>)
 8000c80:	4a58      	ldr	r2, [pc, #352]	; (8000de4 <main+0x25c>)
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	e021      	b.n	8000cca <main+0x142>
		else if (adc_val <= 3060)
 8000c86:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000c8a:	f640 32f4 	movw	r2, #3060	; 0xbf4
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	dc03      	bgt.n	8000c9a <main+0x112>
			dutyCycleB = 0.65;
 8000c92:	4b4e      	ldr	r3, [pc, #312]	; (8000dcc <main+0x244>)
 8000c94:	4a54      	ldr	r2, [pc, #336]	; (8000de8 <main+0x260>)
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	e017      	b.n	8000cca <main+0x142>
		else if (adc_val <= 3400)
 8000c9a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000c9e:	f640 5248 	movw	r2, #3400	; 0xd48
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	dc03      	bgt.n	8000cae <main+0x126>
			dutyCycleB = 0.70;
 8000ca6:	4b49      	ldr	r3, [pc, #292]	; (8000dcc <main+0x244>)
 8000ca8:	4a50      	ldr	r2, [pc, #320]	; (8000dec <main+0x264>)
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	e00d      	b.n	8000cca <main+0x142>
		else if (adc_val <= 3740)
 8000cae:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000cb2:	f640 629c 	movw	r2, #3740	; 0xe9c
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	dc04      	bgt.n	8000cc4 <main+0x13c>
			dutyCycleB = 0.75;
 8000cba:	4b44      	ldr	r3, [pc, #272]	; (8000dcc <main+0x244>)
 8000cbc:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	e002      	b.n	8000cca <main+0x142>
		else
			dutyCycleB = 0.80;
 8000cc4:	4b41      	ldr	r3, [pc, #260]	; (8000dcc <main+0x244>)
 8000cc6:	4a4a      	ldr	r2, [pc, #296]	; (8000df0 <main+0x268>)
 8000cc8:	601a      	str	r2, [r3, #0]
		htim2.Instance->CCR4 = (1000 - 1) * dutyCycleB;
 8000cca:	4b40      	ldr	r3, [pc, #256]	; (8000dcc <main+0x244>)
 8000ccc:	edd3 7a00 	vldr	s15, [r3]
 8000cd0:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8000df4 <main+0x26c>
 8000cd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cd8:	4b47      	ldr	r3, [pc, #284]	; (8000df8 <main+0x270>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ce0:	ee17 2a90 	vmov	r2, s15
 8000ce4:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000ce6:	210c      	movs	r1, #12
 8000ce8:	4843      	ldr	r0, [pc, #268]	; (8000df8 <main+0x270>)
 8000cea:	f003 ff97 	bl	8004c1c <HAL_TIM_PWM_Start>
		HAL_Delay(100);
 8000cee:	2064      	movs	r0, #100	; 0x64
 8000cf0:	f001 f9e6 	bl	80020c0 <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 8000cf4:	210c      	movs	r1, #12
 8000cf6:	4840      	ldr	r0, [pc, #256]	; (8000df8 <main+0x270>)
 8000cf8:	f004 f88a 	bl	8004e10 <HAL_TIM_PWM_Stop>
		char str[100];
		sprintf(str, "%.0f%%", dutyCycleB * 100, adc_val);
 8000cfc:	4b33      	ldr	r3, [pc, #204]	; (8000dcc <main+0x244>)
 8000cfe:	edd3 7a00 	vldr	s15, [r3]
 8000d02:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8000dfc <main+0x274>
 8000d06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d0e:	4638      	mov	r0, r7
 8000d10:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000d14:	9300      	str	r3, [sp, #0]
 8000d16:	ec53 2b17 	vmov	r2, r3, d7
 8000d1a:	4939      	ldr	r1, [pc, #228]	; (8000e00 <main+0x278>)
 8000d1c:	f006 f9e6 	bl	80070ec <siprintf>
		if (dutyCycleB <= 0.45) {
 8000d20:	4b2a      	ldr	r3, [pc, #168]	; (8000dcc <main+0x244>)
 8000d22:	edd3 7a00 	vldr	s15, [r3]
 8000d26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d2a:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8000db8 <main+0x230>
 8000d2e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d36:	d80c      	bhi.n	8000d52 <main+0x1ca>
			ILI9341_Draw_Text(str, 120, 100, YELLOW, 5, GREEN);
 8000d38:	4638      	mov	r0, r7
 8000d3a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000d3e:	9301      	str	r3, [sp, #4]
 8000d40:	2305      	movs	r3, #5
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000d48:	2264      	movs	r2, #100	; 0x64
 8000d4a:	2178      	movs	r1, #120	; 0x78
 8000d4c:	f000 fcec 	bl	8001728 <ILI9341_Draw_Text>
 8000d50:	e73f      	b.n	8000bd2 <main+0x4a>
		} else if (dutyCycleB <= 0.65) {
 8000d52:	4b1e      	ldr	r3, [pc, #120]	; (8000dcc <main+0x244>)
 8000d54:	edd3 7a00 	vldr	s15, [r3]
 8000d58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d5c:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8000dc0 <main+0x238>
 8000d60:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d68:	d80b      	bhi.n	8000d82 <main+0x1fa>
			ILI9341_Draw_Text(str, 120, 100, BLUE, 5, YELLOW);
 8000d6a:	4638      	mov	r0, r7
 8000d6c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000d70:	9301      	str	r3, [sp, #4]
 8000d72:	2305      	movs	r3, #5
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	231f      	movs	r3, #31
 8000d78:	2264      	movs	r2, #100	; 0x64
 8000d7a:	2178      	movs	r1, #120	; 0x78
 8000d7c:	f000 fcd4 	bl	8001728 <ILI9341_Draw_Text>
 8000d80:	e727      	b.n	8000bd2 <main+0x4a>
		} else {
			ILI9341_Draw_Text(str, 120, 100, RED, 5, CYAN);
 8000d82:	4638      	mov	r0, r7
 8000d84:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d88:	9301      	str	r3, [sp, #4]
 8000d8a:	2305      	movs	r3, #5
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000d92:	2264      	movs	r2, #100	; 0x64
 8000d94:	2178      	movs	r1, #120	; 0x78
 8000d96:	f000 fcc7 	bl	8001728 <ILI9341_Draw_Text>
			ILI9341_Draw_Text(str, 120, 100, CYAN, 5, CYAN);
 8000d9a:	4638      	mov	r0, r7
 8000d9c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000da0:	9301      	str	r3, [sp, #4]
 8000da2:	2305      	movs	r3, #5
 8000da4:	9300      	str	r3, [sp, #0]
 8000da6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000daa:	2264      	movs	r2, #100	; 0x64
 8000dac:	2178      	movs	r1, #120	; 0x78
 8000dae:	f000 fcbb 	bl	8001728 <ILI9341_Draw_Text>
	while (1) {
 8000db2:	e70e      	b.n	8000bd2 <main+0x4a>
 8000db4:	f3af 8000 	nop.w
 8000db8:	cccccccd 	.word	0xcccccccd
 8000dbc:	3fdccccc 	.word	0x3fdccccc
 8000dc0:	cccccccd 	.word	0xcccccccd
 8000dc4:	3fe4cccc 	.word	0x3fe4cccc
 8000dc8:	200001f8 	.word	0x200001f8
 8000dcc:	20000000 	.word	0x20000000
 8000dd0:	3e99999a 	.word	0x3e99999a
 8000dd4:	3eb33333 	.word	0x3eb33333
 8000dd8:	3ecccccd 	.word	0x3ecccccd
 8000ddc:	3ee66666 	.word	0x3ee66666
 8000de0:	3f0ccccd 	.word	0x3f0ccccd
 8000de4:	3f19999a 	.word	0x3f19999a
 8000de8:	3f266666 	.word	0x3f266666
 8000dec:	3f333333 	.word	0x3f333333
 8000df0:	3f4ccccd 	.word	0x3f4ccccd
 8000df4:	4479c000 	.word	0x4479c000
 8000df8:	20000310 	.word	0x20000310
 8000dfc:	42c80000 	.word	0x42c80000
 8000e00:	080092b0 	.word	0x080092b0

08000e04 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b094      	sub	sp, #80	; 0x50
 8000e08:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e0a:	f107 031c 	add.w	r3, r7, #28
 8000e0e:	2234      	movs	r2, #52	; 0x34
 8000e10:	2100      	movs	r1, #0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f006 f9cd 	bl	80071b2 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e18:	f107 0308 	add.w	r3, r7, #8
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000e28:	f002 f968 	bl	80030fc <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000e2c:	4b29      	ldr	r3, [pc, #164]	; (8000ed4 <SystemClock_Config+0xd0>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e30:	4a28      	ldr	r2, [pc, #160]	; (8000ed4 <SystemClock_Config+0xd0>)
 8000e32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e36:	6413      	str	r3, [r2, #64]	; 0x40
 8000e38:	4b26      	ldr	r3, [pc, #152]	; (8000ed4 <SystemClock_Config+0xd0>)
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e44:	4b24      	ldr	r3, [pc, #144]	; (8000ed8 <SystemClock_Config+0xd4>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e4c:	4a22      	ldr	r2, [pc, #136]	; (8000ed8 <SystemClock_Config+0xd4>)
 8000e4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	4b20      	ldr	r3, [pc, #128]	; (8000ed8 <SystemClock_Config+0xd4>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e5c:	603b      	str	r3, [r7, #0]
 8000e5e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e60:	2301      	movs	r3, #1
 8000e62:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e64:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000e68:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e72:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000e74:	2304      	movs	r3, #4
 8000e76:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 144;
 8000e78:	2390      	movs	r3, #144	; 0x90
 8000e7a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 6;
 8000e80:	2306      	movs	r3, #6
 8000e82:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000e84:	2302      	movs	r3, #2
 8000e86:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000e88:	f107 031c 	add.w	r3, r7, #28
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f002 f945 	bl	800311c <HAL_RCC_OscConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <SystemClock_Config+0x98>
		Error_Handler();
 8000e98:	f000 f820 	bl	8000edc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000e9c:	230f      	movs	r3, #15
 8000e9e:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000ea4:	2380      	movs	r3, #128	; 0x80
 8000ea6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eac:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000eae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb2:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000eb4:	f107 0308 	add.w	r3, r7, #8
 8000eb8:	2102      	movs	r1, #2
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f002 fbdc 	bl	8003678 <HAL_RCC_ClockConfig>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <SystemClock_Config+0xc6>
		Error_Handler();
 8000ec6:	f000 f809 	bl	8000edc <Error_Handler>
	}
}
 8000eca:	bf00      	nop
 8000ecc:	3750      	adds	r7, #80	; 0x50
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40007000 	.word	0x40007000

08000edc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
 8000ee0:	e7fe      	b.n	8000ee0 <Error_Handler+0x4>
	...

08000ee4 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <MX_RNG_Init+0x20>)
 8000eea:	4a07      	ldr	r2, [pc, #28]	; (8000f08 <MX_RNG_Init+0x24>)
 8000eec:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000eee:	4805      	ldr	r0, [pc, #20]	; (8000f04 <MX_RNG_Init+0x20>)
 8000ef0:	f003 fa10 	bl	8004314 <HAL_RNG_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000efa:	f7ff ffef 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000298 	.word	0x20000298
 8000f08:	50060800 	.word	0x50060800

08000f0c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b0a8      	sub	sp, #160	; 0xa0
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f14:	f107 0310 	add.w	r3, r7, #16
 8000f18:	2290      	movs	r2, #144	; 0x90
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f006 f948 	bl	80071b2 <memset>
  if(rngHandle->Instance==RNG)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a11      	ldr	r2, [pc, #68]	; (8000f6c <HAL_RNG_MspInit+0x60>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d11b      	bne.n	8000f64 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000f2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f30:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f38:	f107 0310 	add.w	r3, r7, #16
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f002 fdc1 	bl	8003ac4 <HAL_RCCEx_PeriphCLKConfig>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8000f48:	f7ff ffc8 	bl	8000edc <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <HAL_RNG_MspInit+0x64>)
 8000f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f50:	4a07      	ldr	r2, [pc, #28]	; (8000f70 <HAL_RNG_MspInit+0x64>)
 8000f52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f56:	6353      	str	r3, [r2, #52]	; 0x34
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <HAL_RNG_MspInit+0x64>)
 8000f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8000f64:	bf00      	nop
 8000f66:	37a0      	adds	r7, #160	; 0xa0
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	50060800 	.word	0x50060800
 8000f70:	40023800 	.word	0x40023800

08000f74 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8000f78:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <MX_SPI5_Init+0x74>)
 8000f7a:	4a1c      	ldr	r2, [pc, #112]	; (8000fec <MX_SPI5_Init+0x78>)
 8000f7c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000f7e:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <MX_SPI5_Init+0x74>)
 8000f80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f84:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000f86:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <MX_SPI5_Init+0x74>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f8c:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <MX_SPI5_Init+0x74>)
 8000f8e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f92:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f94:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <MX_SPI5_Init+0x74>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f9a:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <MX_SPI5_Init+0x74>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <MX_SPI5_Init+0x74>)
 8000fa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fa6:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <MX_SPI5_Init+0x74>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fae:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <MX_SPI5_Init+0x74>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <MX_SPI5_Init+0x74>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fba:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <MX_SPI5_Init+0x74>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8000fc0:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <MX_SPI5_Init+0x74>)
 8000fc2:	2207      	movs	r2, #7
 8000fc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fc6:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <MX_SPI5_Init+0x74>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <MX_SPI5_Init+0x74>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000fd2:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <MX_SPI5_Init+0x74>)
 8000fd4:	f003 f9c8 	bl	8004368 <HAL_SPI_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8000fde:	f7ff ff7d 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200002a8 	.word	0x200002a8
 8000fec:	40015000 	.word	0x40015000

08000ff0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a17      	ldr	r2, [pc, #92]	; (800106c <HAL_SPI_MspInit+0x7c>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d128      	bne.n	8001064 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001012:	4b17      	ldr	r3, [pc, #92]	; (8001070 <HAL_SPI_MspInit+0x80>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	4a16      	ldr	r2, [pc, #88]	; (8001070 <HAL_SPI_MspInit+0x80>)
 8001018:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800101c:	6453      	str	r3, [r2, #68]	; 0x44
 800101e:	4b14      	ldr	r3, [pc, #80]	; (8001070 <HAL_SPI_MspInit+0x80>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <HAL_SPI_MspInit+0x80>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a10      	ldr	r2, [pc, #64]	; (8001070 <HAL_SPI_MspInit+0x80>)
 8001030:	f043 0320 	orr.w	r3, r3, #32
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <HAL_SPI_MspInit+0x80>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0320 	and.w	r3, r3, #32
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001042:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001050:	2303      	movs	r3, #3
 8001052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001054:	2305      	movs	r3, #5
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4619      	mov	r1, r3
 800105e:	4805      	ldr	r0, [pc, #20]	; (8001074 <HAL_SPI_MspInit+0x84>)
 8001060:	f001 fd5e 	bl	8002b20 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001064:	bf00      	nop
 8001066:	3728      	adds	r7, #40	; 0x28
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40015000 	.word	0x40015000
 8001070:	40023800 	.word	0x40023800
 8001074:	40021400 	.word	0x40021400

08001078 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800107e:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <HAL_MspInit+0x44>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	4a0e      	ldr	r2, [pc, #56]	; (80010bc <HAL_MspInit+0x44>)
 8001084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001088:	6413      	str	r3, [r2, #64]	; 0x40
 800108a:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <HAL_MspInit+0x44>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <HAL_MspInit+0x44>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	4a08      	ldr	r2, [pc, #32]	; (80010bc <HAL_MspInit+0x44>)
 800109c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a0:	6453      	str	r3, [r2, #68]	; 0x44
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_MspInit+0x44>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010aa:	603b      	str	r3, [r7, #0]
 80010ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80010ae:	2005      	movs	r0, #5
 80010b0:	f001 fcf4 	bl	8002a9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40023800 	.word	0x40023800

080010c0 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c4:	f000 ffdc 	bl	8002080 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}

080010cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010d0:	4803      	ldr	r0, [pc, #12]	; (80010e0 <TIM2_IRQHandler+0x14>)
 80010d2:	f003 ff1d 	bl	8004f10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  toSecondPage = 0;
 80010d6:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <TIM2_IRQHandler+0x18>)
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM2_IRQn 1 */
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000310 	.word	0x20000310
 80010e4:	20000294 	.word	0x20000294

080010e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
	return 1;
 80010ec:	2301      	movs	r3, #1
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <_kill>:

int _kill(int pid, int sig)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001102:	f006 f8a9 	bl	8007258 <__errno>
 8001106:	4603      	mov	r3, r0
 8001108:	2216      	movs	r2, #22
 800110a:	601a      	str	r2, [r3, #0]
	return -1;
 800110c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <_exit>:

void _exit (int status)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001120:	f04f 31ff 	mov.w	r1, #4294967295
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff ffe7 	bl	80010f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800112a:	e7fe      	b.n	800112a <_exit+0x12>

0800112c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
 800113c:	e00a      	b.n	8001154 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800113e:	f3af 8000 	nop.w
 8001142:	4601      	mov	r1, r0
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	1c5a      	adds	r2, r3, #1
 8001148:	60ba      	str	r2, [r7, #8]
 800114a:	b2ca      	uxtb	r2, r1
 800114c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	3301      	adds	r3, #1
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	697a      	ldr	r2, [r7, #20]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	429a      	cmp	r2, r3
 800115a:	dbf0      	blt.n	800113e <_read+0x12>
	}

return len;
 800115c:	687b      	ldr	r3, [r7, #4]
}
 800115e:	4618      	mov	r0, r3
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b086      	sub	sp, #24
 800116a:	af00      	add	r7, sp, #0
 800116c:	60f8      	str	r0, [r7, #12]
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	e009      	b.n	800118c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	1c5a      	adds	r2, r3, #1
 800117c:	60ba      	str	r2, [r7, #8]
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	3301      	adds	r3, #1
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	697a      	ldr	r2, [r7, #20]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	429a      	cmp	r2, r3
 8001192:	dbf1      	blt.n	8001178 <_write+0x12>
	}
	return len;
 8001194:	687b      	ldr	r3, [r7, #4]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <_close>:

int _close(int file)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
	return -1;
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b083      	sub	sp, #12
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
 80011be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011c6:	605a      	str	r2, [r3, #4]
	return 0;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <_isatty>:

int _isatty(int file)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
	return 1;
 80011de:	2301      	movs	r3, #1
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
	return 0;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
	...

08001208 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001210:	4a14      	ldr	r2, [pc, #80]	; (8001264 <_sbrk+0x5c>)
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <_sbrk+0x60>)
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <_sbrk+0x64>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d102      	bne.n	800122a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <_sbrk+0x64>)
 8001226:	4a12      	ldr	r2, [pc, #72]	; (8001270 <_sbrk+0x68>)
 8001228:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <_sbrk+0x64>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4413      	add	r3, r2
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	429a      	cmp	r2, r3
 8001236:	d207      	bcs.n	8001248 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001238:	f006 f80e 	bl	8007258 <__errno>
 800123c:	4603      	mov	r3, r0
 800123e:	220c      	movs	r2, #12
 8001240:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001242:	f04f 33ff 	mov.w	r3, #4294967295
 8001246:	e009      	b.n	800125c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001248:	4b08      	ldr	r3, [pc, #32]	; (800126c <_sbrk+0x64>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800124e:	4b07      	ldr	r3, [pc, #28]	; (800126c <_sbrk+0x64>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4413      	add	r3, r2
 8001256:	4a05      	ldr	r2, [pc, #20]	; (800126c <_sbrk+0x64>)
 8001258:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800125a:	68fb      	ldr	r3, [r7, #12]
}
 800125c:	4618      	mov	r0, r3
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20080000 	.word	0x20080000
 8001268:	00000400 	.word	0x00000400
 800126c:	2000030c 	.word	0x2000030c
 8001270:	20000538 	.word	0x20000538

08001274 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001278:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <SystemInit+0x5c>)
 800127a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800127e:	4a14      	ldr	r2, [pc, #80]	; (80012d0 <SystemInit+0x5c>)
 8001280:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001284:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <SystemInit+0x60>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a11      	ldr	r2, [pc, #68]	; (80012d4 <SystemInit+0x60>)
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001294:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <SystemInit+0x60>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <SystemInit+0x60>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	490d      	ldr	r1, [pc, #52]	; (80012d4 <SystemInit+0x60>)
 80012a0:	4b0d      	ldr	r3, [pc, #52]	; (80012d8 <SystemInit+0x64>)
 80012a2:	4013      	ands	r3, r2
 80012a4:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80012a6:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <SystemInit+0x60>)
 80012a8:	4a0c      	ldr	r2, [pc, #48]	; (80012dc <SystemInit+0x68>)
 80012aa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80012ac:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <SystemInit+0x60>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a08      	ldr	r2, [pc, #32]	; (80012d4 <SystemInit+0x60>)
 80012b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <SystemInit+0x60>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012be:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <SystemInit+0x5c>)
 80012c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012c4:	609a      	str	r2, [r3, #8]
#endif
}
 80012c6:	bf00      	nop
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000ed00 	.word	0xe000ed00
 80012d4:	40023800 	.word	0x40023800
 80012d8:	fef6ffff 	.word	0xfef6ffff
 80012dc:	24003010 	.word	0x24003010

080012e0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08e      	sub	sp, #56	; 0x38
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001300:	463b      	mov	r3, r7
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
 800130c:	611a      	str	r2, [r3, #16]
 800130e:	615a      	str	r2, [r3, #20]
 8001310:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001312:	4b2d      	ldr	r3, [pc, #180]	; (80013c8 <MX_TIM2_Init+0xe8>)
 8001314:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001318:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108-1;
 800131a:	4b2b      	ldr	r3, [pc, #172]	; (80013c8 <MX_TIM2_Init+0xe8>)
 800131c:	226b      	movs	r2, #107	; 0x6b
 800131e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001320:	4b29      	ldr	r3, [pc, #164]	; (80013c8 <MX_TIM2_Init+0xe8>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001326:	4b28      	ldr	r3, [pc, #160]	; (80013c8 <MX_TIM2_Init+0xe8>)
 8001328:	f240 32e7 	movw	r2, #999	; 0x3e7
 800132c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132e:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <MX_TIM2_Init+0xe8>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001334:	4b24      	ldr	r3, [pc, #144]	; (80013c8 <MX_TIM2_Init+0xe8>)
 8001336:	2200      	movs	r2, #0
 8001338:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800133a:	4823      	ldr	r0, [pc, #140]	; (80013c8 <MX_TIM2_Init+0xe8>)
 800133c:	f003 fbb6 	bl	8004aac <HAL_TIM_Base_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001346:	f7ff fdc9 	bl	8000edc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800134a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001350:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001354:	4619      	mov	r1, r3
 8001356:	481c      	ldr	r0, [pc, #112]	; (80013c8 <MX_TIM2_Init+0xe8>)
 8001358:	f004 f80e 	bl	8005378 <HAL_TIM_ConfigClockSource>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001362:	f7ff fdbb 	bl	8000edc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001366:	4818      	ldr	r0, [pc, #96]	; (80013c8 <MX_TIM2_Init+0xe8>)
 8001368:	f003 fbf7 	bl	8004b5a <HAL_TIM_PWM_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001372:	f7ff fdb3 	bl	8000edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800137e:	f107 031c 	add.w	r3, r7, #28
 8001382:	4619      	mov	r1, r3
 8001384:	4810      	ldr	r0, [pc, #64]	; (80013c8 <MX_TIM2_Init+0xe8>)
 8001386:	f004 fcb1 	bl	8005cec <HAL_TIMEx_MasterConfigSynchronization>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001390:	f7ff fda4 	bl	8000edc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001394:	2360      	movs	r3, #96	; 0x60
 8001396:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000/4-1;
 8001398:	23f9      	movs	r3, #249	; 0xf9
 800139a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800139c:	2300      	movs	r3, #0
 800139e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013a4:	463b      	mov	r3, r7
 80013a6:	220c      	movs	r2, #12
 80013a8:	4619      	mov	r1, r3
 80013aa:	4807      	ldr	r0, [pc, #28]	; (80013c8 <MX_TIM2_Init+0xe8>)
 80013ac:	f003 fed0 	bl	8005150 <HAL_TIM_PWM_ConfigChannel>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80013b6:	f7ff fd91 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013ba:	4803      	ldr	r0, [pc, #12]	; (80013c8 <MX_TIM2_Init+0xe8>)
 80013bc:	f000 f82a 	bl	8001414 <HAL_TIM_MspPostInit>

}
 80013c0:	bf00      	nop
 80013c2:	3738      	adds	r7, #56	; 0x38
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000310 	.word	0x20000310

080013cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013dc:	d113      	bne.n	8001406 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <HAL_TIM_Base_MspInit+0x44>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	4a0b      	ldr	r2, [pc, #44]	; (8001410 <HAL_TIM_Base_MspInit+0x44>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <HAL_TIM_Base_MspInit+0x44>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2102      	movs	r1, #2
 80013fa:	201c      	movs	r0, #28
 80013fc:	f001 fb59 	bl	8002ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001400:	201c      	movs	r0, #28
 8001402:	f001 fb72 	bl	8002aea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001406:	bf00      	nop
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40023800 	.word	0x40023800

08001414 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 030c 	add.w	r3, r7, #12
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001434:	d11b      	bne.n	800146e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <HAL_TIM_MspPostInit+0x64>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a0f      	ldr	r2, [pc, #60]	; (8001478 <HAL_TIM_MspPostInit+0x64>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <HAL_TIM_MspPostInit+0x64>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800144e:	2308      	movs	r3, #8
 8001450:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	2302      	movs	r3, #2
 8001454:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145a:	2303      	movs	r3, #3
 800145c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800145e:	2301      	movs	r3, #1
 8001460:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001462:	f107 030c 	add.w	r3, r7, #12
 8001466:	4619      	mov	r1, r3
 8001468:	4804      	ldr	r0, [pc, #16]	; (800147c <HAL_TIM_MspPostInit+0x68>)
 800146a:	f001 fb59 	bl	8002b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800146e:	bf00      	nop
 8001470:	3720      	adds	r7, #32
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40023800 	.word	0x40023800
 800147c:	40020000 	.word	0x40020000

08001480 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001484:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <MX_USART3_UART_Init+0x58>)
 8001486:	4a15      	ldr	r2, [pc, #84]	; (80014dc <MX_USART3_UART_Init+0x5c>)
 8001488:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800148a:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <MX_USART3_UART_Init+0x58>)
 800148c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001490:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001492:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <MX_USART3_UART_Init+0x58>)
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001498:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <MX_USART3_UART_Init+0x58>)
 800149a:	2200      	movs	r2, #0
 800149c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <MX_USART3_UART_Init+0x58>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <MX_USART3_UART_Init+0x58>)
 80014a6:	220c      	movs	r2, #12
 80014a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014aa:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <MX_USART3_UART_Init+0x58>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <MX_USART3_UART_Init+0x58>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <MX_USART3_UART_Init+0x58>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <MX_USART3_UART_Init+0x58>)
 80014be:	2200      	movs	r2, #0
 80014c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014c2:	4805      	ldr	r0, [pc, #20]	; (80014d8 <MX_USART3_UART_Init+0x58>)
 80014c4:	f004 fcbe 	bl	8005e44 <HAL_UART_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80014ce:	f7ff fd05 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	2000035c 	.word	0x2000035c
 80014dc:	40004800 	.word	0x40004800

080014e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b0ae      	sub	sp, #184	; 0xb8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	2290      	movs	r2, #144	; 0x90
 80014fe:	2100      	movs	r1, #0
 8001500:	4618      	mov	r0, r3
 8001502:	f005 fe56 	bl	80071b2 <memset>
  if(uartHandle->Instance==USART3)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a22      	ldr	r2, [pc, #136]	; (8001594 <HAL_UART_MspInit+0xb4>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d13c      	bne.n	800158a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001510:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001514:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001516:	2300      	movs	r3, #0
 8001518:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	4618      	mov	r0, r3
 8001520:	f002 fad0 	bl	8003ac4 <HAL_RCCEx_PeriphCLKConfig>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800152a:	f7ff fcd7 	bl	8000edc <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800152e:	4b1a      	ldr	r3, [pc, #104]	; (8001598 <HAL_UART_MspInit+0xb8>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	4a19      	ldr	r2, [pc, #100]	; (8001598 <HAL_UART_MspInit+0xb8>)
 8001534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001538:	6413      	str	r3, [r2, #64]	; 0x40
 800153a:	4b17      	ldr	r3, [pc, #92]	; (8001598 <HAL_UART_MspInit+0xb8>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001546:	4b14      	ldr	r3, [pc, #80]	; (8001598 <HAL_UART_MspInit+0xb8>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a13      	ldr	r2, [pc, #76]	; (8001598 <HAL_UART_MspInit+0xb8>)
 800154c:	f043 0308 	orr.w	r3, r3, #8
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b11      	ldr	r3, [pc, #68]	; (8001598 <HAL_UART_MspInit+0xb8>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0308 	and.w	r3, r3, #8
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800155e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001562:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001566:	2302      	movs	r3, #2
 8001568:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001572:	2303      	movs	r3, #3
 8001574:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001578:	2307      	movs	r3, #7
 800157a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800157e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001582:	4619      	mov	r1, r3
 8001584:	4805      	ldr	r0, [pc, #20]	; (800159c <HAL_UART_MspInit+0xbc>)
 8001586:	f001 facb 	bl	8002b20 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800158a:	bf00      	nop
 800158c:	37b8      	adds	r7, #184	; 0xb8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40004800 	.word	0x40004800
 8001598:	40023800 	.word	0x40023800
 800159c:	40020c00 	.word	0x40020c00

080015a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80015a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80015a6:	e003      	b.n	80015b0 <LoopCopyDataInit>

080015a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80015aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80015ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80015ae:	3104      	adds	r1, #4

080015b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80015b0:	480b      	ldr	r0, [pc, #44]	; (80015e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80015b2:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80015b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80015b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80015b8:	d3f6      	bcc.n	80015a8 <CopyDataInit>
  ldr  r2, =_sbss
 80015ba:	4a0b      	ldr	r2, [pc, #44]	; (80015e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80015bc:	e002      	b.n	80015c4 <LoopFillZerobss>

080015be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80015be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80015c0:	f842 3b04 	str.w	r3, [r2], #4

080015c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80015c4:	4b09      	ldr	r3, [pc, #36]	; (80015ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80015c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80015c8:	d3f9      	bcc.n	80015be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015ca:	f7ff fe53 	bl	8001274 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ce:	f005 fe49 	bl	8007264 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015d2:	f7ff fad9 	bl	8000b88 <main>
  bx  lr    
 80015d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015d8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80015dc:	08009894 	.word	0x08009894
  ldr  r0, =_sdata
 80015e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80015e4:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80015e8:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 80015ec:	20000534 	.word	0x20000534

080015f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015f0:	e7fe      	b.n	80015f0 <ADC_IRQHandler>
	...

080015f4 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 80015f4:	b590      	push	{r4, r7, lr}
 80015f6:	b089      	sub	sp, #36	; 0x24
 80015f8:	af02      	add	r7, sp, #8
 80015fa:	4604      	mov	r4, r0
 80015fc:	4608      	mov	r0, r1
 80015fe:	4611      	mov	r1, r2
 8001600:	461a      	mov	r2, r3
 8001602:	4623      	mov	r3, r4
 8001604:	71fb      	strb	r3, [r7, #7]
 8001606:	4603      	mov	r3, r0
 8001608:	71bb      	strb	r3, [r7, #6]
 800160a:	460b      	mov	r3, r1
 800160c:	717b      	strb	r3, [r7, #5]
 800160e:	4613      	mov	r3, r2
 8001610:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8001616:	7dfb      	ldrb	r3, [r7, #23]
 8001618:	2b1f      	cmp	r3, #31
 800161a:	d802      	bhi.n	8001622 <ILI9341_Draw_Char+0x2e>
        Character = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	71fb      	strb	r3, [r7, #7]
 8001620:	e002      	b.n	8001628 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8001622:	7dfb      	ldrb	r3, [r7, #23]
 8001624:	3b20      	subs	r3, #32
 8001626:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8001628:	2300      	movs	r3, #0
 800162a:	753b      	strb	r3, [r7, #20]
 800162c:	e012      	b.n	8001654 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 800162e:	7dfa      	ldrb	r2, [r7, #23]
 8001630:	7d38      	ldrb	r0, [r7, #20]
 8001632:	7d39      	ldrb	r1, [r7, #20]
 8001634:	4c3b      	ldr	r4, [pc, #236]	; (8001724 <ILI9341_Draw_Char+0x130>)
 8001636:	4613      	mov	r3, r2
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	4413      	add	r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	4423      	add	r3, r4
 8001640:	4403      	add	r3, r0
 8001642:	781a      	ldrb	r2, [r3, #0]
 8001644:	f101 0318 	add.w	r3, r1, #24
 8001648:	443b      	add	r3, r7
 800164a:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800164e:	7d3b      	ldrb	r3, [r7, #20]
 8001650:	3301      	adds	r3, #1
 8001652:	753b      	strb	r3, [r7, #20]
 8001654:	7d3b      	ldrb	r3, [r7, #20]
 8001656:	2b05      	cmp	r3, #5
 8001658:	d9e9      	bls.n	800162e <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 800165a:	79bb      	ldrb	r3, [r7, #6]
 800165c:	b298      	uxth	r0, r3
 800165e:	797b      	ldrb	r3, [r7, #5]
 8001660:	b299      	uxth	r1, r3
 8001662:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001664:	461a      	mov	r2, r3
 8001666:	0052      	lsls	r2, r2, #1
 8001668:	4413      	add	r3, r2
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	b29a      	uxth	r2, r3
 800166e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	b29c      	uxth	r4, r3
 8001674:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	4623      	mov	r3, r4
 800167a:	f000 fc5f 	bl	8001f3c <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 800167e:	2300      	movs	r3, #0
 8001680:	757b      	strb	r3, [r7, #21]
 8001682:	e047      	b.n	8001714 <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8001684:	2300      	movs	r3, #0
 8001686:	75bb      	strb	r3, [r7, #22]
 8001688:	e03e      	b.n	8001708 <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 800168a:	7d7b      	ldrb	r3, [r7, #21]
 800168c:	3318      	adds	r3, #24
 800168e:	443b      	add	r3, r7
 8001690:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001694:	461a      	mov	r2, r3
 8001696:	7dbb      	ldrb	r3, [r7, #22]
 8001698:	fa42 f303 	asr.w	r3, r2, r3
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d02e      	beq.n	8001702 <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 80016a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d110      	bne.n	80016cc <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 80016aa:	79bb      	ldrb	r3, [r7, #6]
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	7d7b      	ldrb	r3, [r7, #21]
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	4413      	add	r3, r2
 80016b4:	b298      	uxth	r0, r3
 80016b6:	797b      	ldrb	r3, [r7, #5]
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	7dbb      	ldrb	r3, [r7, #22]
 80016bc:	b29b      	uxth	r3, r3
 80016be:	4413      	add	r3, r2
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	887a      	ldrh	r2, [r7, #2]
 80016c4:	4619      	mov	r1, r3
 80016c6:	f000 fb5f 	bl	8001d88 <ILI9341_Draw_Pixel>
 80016ca:	e01a      	b.n	8001702 <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 80016cc:	79bb      	ldrb	r3, [r7, #6]
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	7d7b      	ldrb	r3, [r7, #21]
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80016d6:	fb11 f303 	smulbb	r3, r1, r3
 80016da:	b29b      	uxth	r3, r3
 80016dc:	4413      	add	r3, r2
 80016de:	b298      	uxth	r0, r3
 80016e0:	797b      	ldrb	r3, [r7, #5]
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	7dbb      	ldrb	r3, [r7, #22]
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80016ea:	fb11 f303 	smulbb	r3, r1, r3
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	4413      	add	r3, r2
 80016f2:	b299      	uxth	r1, r3
 80016f4:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80016f6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80016f8:	887b      	ldrh	r3, [r7, #2]
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	4623      	mov	r3, r4
 80016fe:	f000 fc1d 	bl	8001f3c <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8001702:	7dbb      	ldrb	r3, [r7, #22]
 8001704:	3301      	adds	r3, #1
 8001706:	75bb      	strb	r3, [r7, #22]
 8001708:	7dbb      	ldrb	r3, [r7, #22]
 800170a:	2b07      	cmp	r3, #7
 800170c:	d9bd      	bls.n	800168a <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 800170e:	7d7b      	ldrb	r3, [r7, #21]
 8001710:	3301      	adds	r3, #1
 8001712:	757b      	strb	r3, [r7, #21]
 8001714:	7d7b      	ldrb	r3, [r7, #21]
 8001716:	2b05      	cmp	r3, #5
 8001718:	d9b4      	bls.n	8001684 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 800171a:	bf00      	nop
 800171c:	bf00      	nop
 800171e:	371c      	adds	r7, #28
 8001720:	46bd      	mov	sp, r7
 8001722:	bd90      	pop	{r4, r7, pc}
 8001724:	080092d0 	.word	0x080092d0

08001728 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b085      	sub	sp, #20
 800172c:	af02      	add	r7, sp, #8
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	4608      	mov	r0, r1
 8001732:	4611      	mov	r1, r2
 8001734:	461a      	mov	r2, r3
 8001736:	4603      	mov	r3, r0
 8001738:	70fb      	strb	r3, [r7, #3]
 800173a:	460b      	mov	r3, r1
 800173c:	70bb      	strb	r3, [r7, #2]
 800173e:	4613      	mov	r3, r2
 8001740:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8001742:	e017      	b.n	8001774 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	1c5a      	adds	r2, r3, #1
 8001748:	607a      	str	r2, [r7, #4]
 800174a:	7818      	ldrb	r0, [r3, #0]
 800174c:	883c      	ldrh	r4, [r7, #0]
 800174e:	78ba      	ldrb	r2, [r7, #2]
 8001750:	78f9      	ldrb	r1, [r7, #3]
 8001752:	8bbb      	ldrh	r3, [r7, #28]
 8001754:	9301      	str	r3, [sp, #4]
 8001756:	8b3b      	ldrh	r3, [r7, #24]
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	4623      	mov	r3, r4
 800175c:	f7ff ff4a 	bl	80015f4 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8001760:	8b3b      	ldrh	r3, [r7, #24]
 8001762:	b2db      	uxtb	r3, r3
 8001764:	461a      	mov	r2, r3
 8001766:	0052      	lsls	r2, r2, #1
 8001768:	4413      	add	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	b2da      	uxtb	r2, r3
 800176e:	78fb      	ldrb	r3, [r7, #3]
 8001770:	4413      	add	r3, r2
 8001772:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1e3      	bne.n	8001744 <ILI9341_Draw_Text+0x1c>
    }
}
 800177c:	bf00      	nop
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	bd90      	pop	{r4, r7, pc}
	...

08001788 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 800178c:	f7ff fbf2 	bl	8000f74 <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 8001790:	f7fe ffbe 	bl	8000710 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8001794:	2200      	movs	r2, #0
 8001796:	f44f 7180 	mov.w	r1, #256	; 0x100
 800179a:	4802      	ldr	r0, [pc, #8]	; (80017a4 <ILI9341_SPI_Init+0x1c>)
 800179c:	f001 fb6c 	bl	8002e78 <HAL_GPIO_WritePin>
}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40020800 	.word	0x40020800

080017a8 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 80017b2:	1df9      	adds	r1, r7, #7
 80017b4:	2301      	movs	r3, #1
 80017b6:	2201      	movs	r2, #1
 80017b8:	4803      	ldr	r0, [pc, #12]	; (80017c8 <ILI9341_SPI_Send+0x20>)
 80017ba:	f002 fe80 	bl	80044be <HAL_SPI_Transmit>
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	200002a8 	.word	0x200002a8

080017cc <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80017d6:	2200      	movs	r2, #0
 80017d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017dc:	480b      	ldr	r0, [pc, #44]	; (800180c <ILI9341_Write_Command+0x40>)
 80017de:	f001 fb4b 	bl	8002e78 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80017e2:	2200      	movs	r2, #0
 80017e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017e8:	4808      	ldr	r0, [pc, #32]	; (800180c <ILI9341_Write_Command+0x40>)
 80017ea:	f001 fb45 	bl	8002e78 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ffd9 	bl	80017a8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80017f6:	2201      	movs	r2, #1
 80017f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017fc:	4803      	ldr	r0, [pc, #12]	; (800180c <ILI9341_Write_Command+0x40>)
 80017fe:	f001 fb3b 	bl	8002e78 <HAL_GPIO_WritePin>
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40020800 	.word	0x40020800

08001810 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800181a:	2201      	movs	r2, #1
 800181c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001820:	480b      	ldr	r0, [pc, #44]	; (8001850 <ILI9341_Write_Data+0x40>)
 8001822:	f001 fb29 	bl	8002e78 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001826:	2200      	movs	r2, #0
 8001828:	f44f 7180 	mov.w	r1, #256	; 0x100
 800182c:	4808      	ldr	r0, [pc, #32]	; (8001850 <ILI9341_Write_Data+0x40>)
 800182e:	f001 fb23 	bl	8002e78 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ffb7 	bl	80017a8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800183a:	2201      	movs	r2, #1
 800183c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001840:	4803      	ldr	r0, [pc, #12]	; (8001850 <ILI9341_Write_Data+0x40>)
 8001842:	f001 fb19 	bl	8002e78 <HAL_GPIO_WritePin>
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40020800 	.word	0x40020800

08001854 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	4604      	mov	r4, r0
 800185c:	4608      	mov	r0, r1
 800185e:	4611      	mov	r1, r2
 8001860:	461a      	mov	r2, r3
 8001862:	4623      	mov	r3, r4
 8001864:	80fb      	strh	r3, [r7, #6]
 8001866:	4603      	mov	r3, r0
 8001868:	80bb      	strh	r3, [r7, #4]
 800186a:	460b      	mov	r3, r1
 800186c:	807b      	strh	r3, [r7, #2]
 800186e:	4613      	mov	r3, r2
 8001870:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8001872:	202a      	movs	r0, #42	; 0x2a
 8001874:	f7ff ffaa 	bl	80017cc <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	0a1b      	lsrs	r3, r3, #8
 800187c:	b29b      	uxth	r3, r3
 800187e:	b2db      	uxtb	r3, r3
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ffc5 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8001886:	88fb      	ldrh	r3, [r7, #6]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff ffc0 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8001890:	887b      	ldrh	r3, [r7, #2]
 8001892:	0a1b      	lsrs	r3, r3, #8
 8001894:	b29b      	uxth	r3, r3
 8001896:	b2db      	uxtb	r3, r3
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ffb9 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 800189e:	887b      	ldrh	r3, [r7, #2]
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff ffb4 	bl	8001810 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 80018a8:	202b      	movs	r0, #43	; 0x2b
 80018aa:	f7ff ff8f 	bl	80017cc <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 80018ae:	88bb      	ldrh	r3, [r7, #4]
 80018b0:	0a1b      	lsrs	r3, r3, #8
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff ffaa 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 80018bc:	88bb      	ldrh	r3, [r7, #4]
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ffa5 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 80018c6:	883b      	ldrh	r3, [r7, #0]
 80018c8:	0a1b      	lsrs	r3, r3, #8
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff ff9e 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 80018d4:	883b      	ldrh	r3, [r7, #0]
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff99 	bl	8001810 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 80018de:	202c      	movs	r0, #44	; 0x2c
 80018e0:	f7ff ff74 	bl	80017cc <ILI9341_Write_Command>
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd90      	pop	{r4, r7, pc}

080018ec <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80018f0:	2201      	movs	r2, #1
 80018f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018f6:	480b      	ldr	r0, [pc, #44]	; (8001924 <ILI9341_Reset+0x38>)
 80018f8:	f001 fabe 	bl	8002e78 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80018fc:	20c8      	movs	r0, #200	; 0xc8
 80018fe:	f000 fbdf 	bl	80020c0 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001902:	2200      	movs	r2, #0
 8001904:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001908:	4806      	ldr	r0, [pc, #24]	; (8001924 <ILI9341_Reset+0x38>)
 800190a:	f001 fab5 	bl	8002e78 <HAL_GPIO_WritePin>
HAL_Delay(200);
 800190e:	20c8      	movs	r0, #200	; 0xc8
 8001910:	f000 fbd6 	bl	80020c0 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8001914:	2201      	movs	r2, #1
 8001916:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800191a:	4802      	ldr	r0, [pc, #8]	; (8001924 <ILI9341_Reset+0x38>)
 800191c:	f001 faac 	bl	8002e78 <HAL_GPIO_WritePin>
}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40020800 	.word	0x40020800

08001928 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8001936:	2036      	movs	r0, #54	; 0x36
 8001938:	f7ff ff48 	bl	80017cc <ILI9341_Write_Command>
HAL_Delay(1);
 800193c:	2001      	movs	r0, #1
 800193e:	f000 fbbf 	bl	80020c0 <HAL_Delay>
	
switch(screen_rotation) 
 8001942:	7bfb      	ldrb	r3, [r7, #15]
 8001944:	2b03      	cmp	r3, #3
 8001946:	d837      	bhi.n	80019b8 <ILI9341_Set_Rotation+0x90>
 8001948:	a201      	add	r2, pc, #4	; (adr r2, 8001950 <ILI9341_Set_Rotation+0x28>)
 800194a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800194e:	bf00      	nop
 8001950:	08001961 	.word	0x08001961
 8001954:	08001977 	.word	0x08001977
 8001958:	0800198d 	.word	0x0800198d
 800195c:	080019a3 	.word	0x080019a3
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8001960:	2048      	movs	r0, #72	; 0x48
 8001962:	f7ff ff55 	bl	8001810 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8001966:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <ILI9341_Set_Rotation+0x9c>)
 8001968:	22f0      	movs	r2, #240	; 0xf0
 800196a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800196c:	4b16      	ldr	r3, [pc, #88]	; (80019c8 <ILI9341_Set_Rotation+0xa0>)
 800196e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001972:	801a      	strh	r2, [r3, #0]
			break;
 8001974:	e021      	b.n	80019ba <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8001976:	2028      	movs	r0, #40	; 0x28
 8001978:	f7ff ff4a 	bl	8001810 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 800197c:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <ILI9341_Set_Rotation+0x9c>)
 800197e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001982:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001984:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <ILI9341_Set_Rotation+0xa0>)
 8001986:	22f0      	movs	r2, #240	; 0xf0
 8001988:	801a      	strh	r2, [r3, #0]
			break;
 800198a:	e016      	b.n	80019ba <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 800198c:	2088      	movs	r0, #136	; 0x88
 800198e:	f7ff ff3f 	bl	8001810 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8001992:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <ILI9341_Set_Rotation+0x9c>)
 8001994:	22f0      	movs	r2, #240	; 0xf0
 8001996:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001998:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <ILI9341_Set_Rotation+0xa0>)
 800199a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800199e:	801a      	strh	r2, [r3, #0]
			break;
 80019a0:	e00b      	b.n	80019ba <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 80019a2:	20e8      	movs	r0, #232	; 0xe8
 80019a4:	f7ff ff34 	bl	8001810 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80019a8:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <ILI9341_Set_Rotation+0x9c>)
 80019aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80019ae:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80019b0:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <ILI9341_Set_Rotation+0xa0>)
 80019b2:	22f0      	movs	r2, #240	; 0xf0
 80019b4:	801a      	strh	r2, [r3, #0]
			break;
 80019b6:	e000      	b.n	80019ba <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 80019b8:	bf00      	nop
	}
}
 80019ba:	bf00      	nop
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	2000000a 	.word	0x2000000a
 80019c8:	20000008 	.word	0x20000008

080019cc <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80019d0:	2201      	movs	r2, #1
 80019d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019d6:	4802      	ldr	r0, [pc, #8]	; (80019e0 <ILI9341_Enable+0x14>)
 80019d8:	f001 fa4e 	bl	8002e78 <HAL_GPIO_WritePin>
}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40020800 	.word	0x40020800

080019e4 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0

ILI9341_Enable();
 80019e8:	f7ff fff0 	bl	80019cc <ILI9341_Enable>
ILI9341_SPI_Init();
 80019ec:	f7ff fecc 	bl	8001788 <ILI9341_SPI_Init>
ILI9341_Reset();
 80019f0:	f7ff ff7c 	bl	80018ec <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 80019f4:	2001      	movs	r0, #1
 80019f6:	f7ff fee9 	bl	80017cc <ILI9341_Write_Command>
HAL_Delay(1000);
 80019fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019fe:	f000 fb5f 	bl	80020c0 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8001a02:	20cb      	movs	r0, #203	; 0xcb
 8001a04:	f7ff fee2 	bl	80017cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8001a08:	2039      	movs	r0, #57	; 0x39
 8001a0a:	f7ff ff01 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8001a0e:	202c      	movs	r0, #44	; 0x2c
 8001a10:	f7ff fefe 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001a14:	2000      	movs	r0, #0
 8001a16:	f7ff fefb 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8001a1a:	2034      	movs	r0, #52	; 0x34
 8001a1c:	f7ff fef8 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8001a20:	2002      	movs	r0, #2
 8001a22:	f7ff fef5 	bl	8001810 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8001a26:	20cf      	movs	r0, #207	; 0xcf
 8001a28:	f7ff fed0 	bl	80017cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	f7ff feef 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001a32:	20c1      	movs	r0, #193	; 0xc1
 8001a34:	f7ff feec 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8001a38:	2030      	movs	r0, #48	; 0x30
 8001a3a:	f7ff fee9 	bl	8001810 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8001a3e:	20e8      	movs	r0, #232	; 0xe8
 8001a40:	f7ff fec4 	bl	80017cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8001a44:	2085      	movs	r0, #133	; 0x85
 8001a46:	f7ff fee3 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	f7ff fee0 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8001a50:	2078      	movs	r0, #120	; 0x78
 8001a52:	f7ff fedd 	bl	8001810 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8001a56:	20ea      	movs	r0, #234	; 0xea
 8001a58:	f7ff feb8 	bl	80017cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	f7ff fed7 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001a62:	2000      	movs	r0, #0
 8001a64:	f7ff fed4 	bl	8001810 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8001a68:	20ed      	movs	r0, #237	; 0xed
 8001a6a:	f7ff feaf 	bl	80017cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8001a6e:	2064      	movs	r0, #100	; 0x64
 8001a70:	f7ff fece 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001a74:	2003      	movs	r0, #3
 8001a76:	f7ff fecb 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8001a7a:	2012      	movs	r0, #18
 8001a7c:	f7ff fec8 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8001a80:	2081      	movs	r0, #129	; 0x81
 8001a82:	f7ff fec5 	bl	8001810 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8001a86:	20f7      	movs	r0, #247	; 0xf7
 8001a88:	f7ff fea0 	bl	80017cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8001a8c:	2020      	movs	r0, #32
 8001a8e:	f7ff febf 	bl	8001810 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8001a92:	20c0      	movs	r0, #192	; 0xc0
 8001a94:	f7ff fe9a 	bl	80017cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8001a98:	2023      	movs	r0, #35	; 0x23
 8001a9a:	f7ff feb9 	bl	8001810 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8001a9e:	20c1      	movs	r0, #193	; 0xc1
 8001aa0:	f7ff fe94 	bl	80017cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8001aa4:	2010      	movs	r0, #16
 8001aa6:	f7ff feb3 	bl	8001810 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8001aaa:	20c5      	movs	r0, #197	; 0xc5
 8001aac:	f7ff fe8e 	bl	80017cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8001ab0:	203e      	movs	r0, #62	; 0x3e
 8001ab2:	f7ff fead 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8001ab6:	2028      	movs	r0, #40	; 0x28
 8001ab8:	f7ff feaa 	bl	8001810 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8001abc:	20c7      	movs	r0, #199	; 0xc7
 8001abe:	f7ff fe85 	bl	80017cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8001ac2:	2086      	movs	r0, #134	; 0x86
 8001ac4:	f7ff fea4 	bl	8001810 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8001ac8:	2036      	movs	r0, #54	; 0x36
 8001aca:	f7ff fe7f 	bl	80017cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8001ace:	2048      	movs	r0, #72	; 0x48
 8001ad0:	f7ff fe9e 	bl	8001810 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8001ad4:	203a      	movs	r0, #58	; 0x3a
 8001ad6:	f7ff fe79 	bl	80017cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8001ada:	2055      	movs	r0, #85	; 0x55
 8001adc:	f7ff fe98 	bl	8001810 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8001ae0:	20b1      	movs	r0, #177	; 0xb1
 8001ae2:	f7ff fe73 	bl	80017cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	f7ff fe92 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8001aec:	2018      	movs	r0, #24
 8001aee:	f7ff fe8f 	bl	8001810 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8001af2:	20b6      	movs	r0, #182	; 0xb6
 8001af4:	f7ff fe6a 	bl	80017cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8001af8:	2008      	movs	r0, #8
 8001afa:	f7ff fe89 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8001afe:	2082      	movs	r0, #130	; 0x82
 8001b00:	f7ff fe86 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8001b04:	2027      	movs	r0, #39	; 0x27
 8001b06:	f7ff fe83 	bl	8001810 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8001b0a:	20f2      	movs	r0, #242	; 0xf2
 8001b0c:	f7ff fe5e 	bl	80017cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001b10:	2000      	movs	r0, #0
 8001b12:	f7ff fe7d 	bl	8001810 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8001b16:	2026      	movs	r0, #38	; 0x26
 8001b18:	f7ff fe58 	bl	80017cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8001b1c:	2001      	movs	r0, #1
 8001b1e:	f7ff fe77 	bl	8001810 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8001b22:	20e0      	movs	r0, #224	; 0xe0
 8001b24:	f7ff fe52 	bl	80017cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8001b28:	200f      	movs	r0, #15
 8001b2a:	f7ff fe71 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001b2e:	2031      	movs	r0, #49	; 0x31
 8001b30:	f7ff fe6e 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8001b34:	202b      	movs	r0, #43	; 0x2b
 8001b36:	f7ff fe6b 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8001b3a:	200c      	movs	r0, #12
 8001b3c:	f7ff fe68 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001b40:	200e      	movs	r0, #14
 8001b42:	f7ff fe65 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8001b46:	2008      	movs	r0, #8
 8001b48:	f7ff fe62 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8001b4c:	204e      	movs	r0, #78	; 0x4e
 8001b4e:	f7ff fe5f 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8001b52:	20f1      	movs	r0, #241	; 0xf1
 8001b54:	f7ff fe5c 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8001b58:	2037      	movs	r0, #55	; 0x37
 8001b5a:	f7ff fe59 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001b5e:	2007      	movs	r0, #7
 8001b60:	f7ff fe56 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8001b64:	2010      	movs	r0, #16
 8001b66:	f7ff fe53 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001b6a:	2003      	movs	r0, #3
 8001b6c:	f7ff fe50 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001b70:	200e      	movs	r0, #14
 8001b72:	f7ff fe4d 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8001b76:	2009      	movs	r0, #9
 8001b78:	f7ff fe4a 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	f7ff fe47 	bl	8001810 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8001b82:	20e1      	movs	r0, #225	; 0xe1
 8001b84:	f7ff fe22 	bl	80017cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001b88:	2000      	movs	r0, #0
 8001b8a:	f7ff fe41 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001b8e:	200e      	movs	r0, #14
 8001b90:	f7ff fe3e 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8001b94:	2014      	movs	r0, #20
 8001b96:	f7ff fe3b 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001b9a:	2003      	movs	r0, #3
 8001b9c:	f7ff fe38 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8001ba0:	2011      	movs	r0, #17
 8001ba2:	f7ff fe35 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001ba6:	2007      	movs	r0, #7
 8001ba8:	f7ff fe32 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001bac:	2031      	movs	r0, #49	; 0x31
 8001bae:	f7ff fe2f 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001bb2:	20c1      	movs	r0, #193	; 0xc1
 8001bb4:	f7ff fe2c 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8001bb8:	2048      	movs	r0, #72	; 0x48
 8001bba:	f7ff fe29 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8001bbe:	2008      	movs	r0, #8
 8001bc0:	f7ff fe26 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001bc4:	200f      	movs	r0, #15
 8001bc6:	f7ff fe23 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8001bca:	200c      	movs	r0, #12
 8001bcc:	f7ff fe20 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001bd0:	2031      	movs	r0, #49	; 0x31
 8001bd2:	f7ff fe1d 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8001bd6:	2036      	movs	r0, #54	; 0x36
 8001bd8:	f7ff fe1a 	bl	8001810 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001bdc:	200f      	movs	r0, #15
 8001bde:	f7ff fe17 	bl	8001810 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8001be2:	2011      	movs	r0, #17
 8001be4:	f7ff fdf2 	bl	80017cc <ILI9341_Write_Command>
HAL_Delay(120);
 8001be8:	2078      	movs	r0, #120	; 0x78
 8001bea:	f000 fa69 	bl	80020c0 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8001bee:	2029      	movs	r0, #41	; 0x29
 8001bf0:	f7ff fdec 	bl	80017cc <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	f7ff fe97 	bl	8001928 <ILI9341_Set_Rotation>
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
	...

08001c00 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8001c00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c04:	b08d      	sub	sp, #52	; 0x34
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	4603      	mov	r3, r0
 8001c0a:	6039      	str	r1, [r7, #0]
 8001c0c:	80fb      	strh	r3, [r7, #6]
 8001c0e:	466b      	mov	r3, sp
 8001c10:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	62fb      	str	r3, [r7, #44]	; 0x2c
if((Size*2) < BURST_MAX_SIZE)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c1e:	d202      	bcs.n	8001c26 <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c24:	e002      	b.n	8001c2c <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8001c26:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c32:	4840      	ldr	r0, [pc, #256]	; (8001d34 <ILI9341_Draw_Colour_Burst+0x134>)
 8001c34:	f001 f920 	bl	8002e78 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c3e:	483d      	ldr	r0, [pc, #244]	; (8001d34 <ILI9341_Draw_Colour_Burst+0x134>)
 8001c40:	f001 f91a 	bl	8002e78 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8001c44:	88fb      	ldrh	r3, [r7, #6]
 8001c46:	0a1b      	lsrs	r3, r3, #8
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8001c4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c50:	460b      	mov	r3, r1
 8001c52:	3b01      	subs	r3, #1
 8001c54:	61fb      	str	r3, [r7, #28]
 8001c56:	2300      	movs	r3, #0
 8001c58:	4688      	mov	r8, r1
 8001c5a:	4699      	mov	r9, r3
 8001c5c:	f04f 0200 	mov.w	r2, #0
 8001c60:	f04f 0300 	mov.w	r3, #0
 8001c64:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c68:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c6c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c70:	2300      	movs	r3, #0
 8001c72:	460c      	mov	r4, r1
 8001c74:	461d      	mov	r5, r3
 8001c76:	f04f 0200 	mov.w	r2, #0
 8001c7a:	f04f 0300 	mov.w	r3, #0
 8001c7e:	00eb      	lsls	r3, r5, #3
 8001c80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c84:	00e2      	lsls	r2, r4, #3
 8001c86:	1dcb      	adds	r3, r1, #7
 8001c88:	08db      	lsrs	r3, r3, #3
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	ebad 0d03 	sub.w	sp, sp, r3
 8001c90:	466b      	mov	r3, sp
 8001c92:	3300      	adds	r3, #0
 8001c94:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001c96:	2300      	movs	r3, #0
 8001c98:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c9a:	e00e      	b.n	8001cba <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca0:	4413      	add	r3, r2
 8001ca2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001ca6:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8001ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001caa:	3301      	adds	r3, #1
 8001cac:	88fa      	ldrh	r2, [r7, #6]
 8001cae:	b2d1      	uxtb	r1, r2
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb6:	3302      	adds	r3, #2
 8001cb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d3ec      	bcc.n	8001c9c <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd0:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cd6:	fbb3 f2f2 	udiv	r2, r3, r2
 8001cda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001cdc:	fb01 f202 	mul.w	r2, r1, r2
 8001ce0:	1a9b      	subs	r3, r3, r2
 8001ce2:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d010      	beq.n	8001d0c <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8001cea:	2300      	movs	r3, #0
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
 8001cee:	e009      	b.n	8001d04 <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8001cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	230a      	movs	r3, #10
 8001cf6:	69b9      	ldr	r1, [r7, #24]
 8001cf8:	480f      	ldr	r0, [pc, #60]	; (8001d38 <ILI9341_Draw_Colour_Burst+0x138>)
 8001cfa:	f002 fbe0 	bl	80044be <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	3301      	adds	r3, #1
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
 8001d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d3f1      	bcc.n	8001cf0 <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	230a      	movs	r3, #10
 8001d12:	69b9      	ldr	r1, [r7, #24]
 8001d14:	4808      	ldr	r0, [pc, #32]	; (8001d38 <ILI9341_Draw_Colour_Burst+0x138>)
 8001d16:	f002 fbd2 	bl	80044be <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d20:	4804      	ldr	r0, [pc, #16]	; (8001d34 <ILI9341_Draw_Colour_Burst+0x134>)
 8001d22:	f001 f8a9 	bl	8002e78 <HAL_GPIO_WritePin>
 8001d26:	46b5      	mov	sp, r6
}
 8001d28:	bf00      	nop
 8001d2a:	3734      	adds	r7, #52	; 0x34
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d32:	bf00      	nop
 8001d34:	40020800 	.word	0x40020800
 8001d38:	200002a8 	.word	0x200002a8

08001d3c <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8001d46:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <ILI9341_Fill_Screen+0x44>)
 8001d48:	881b      	ldrh	r3, [r3, #0]
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	4b0d      	ldr	r3, [pc, #52]	; (8001d84 <ILI9341_Fill_Screen+0x48>)
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	2100      	movs	r1, #0
 8001d54:	2000      	movs	r0, #0
 8001d56:	f7ff fd7d 	bl	8001854 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8001d5a:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <ILI9341_Fill_Screen+0x44>)
 8001d5c:	881b      	ldrh	r3, [r3, #0]
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	461a      	mov	r2, r3
 8001d62:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <ILI9341_Fill_Screen+0x48>)
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	fb02 f303 	mul.w	r3, r2, r3
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	88fb      	ldrh	r3, [r7, #6]
 8001d70:	4611      	mov	r1, r2
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff ff44 	bl	8001c00 <ILI9341_Draw_Colour_Burst>
}
 8001d78:	bf00      	nop
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	2000000a 	.word	0x2000000a
 8001d84:	20000008 	.word	0x20000008

08001d88 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	80fb      	strh	r3, [r7, #6]
 8001d92:	460b      	mov	r3, r1
 8001d94:	80bb      	strh	r3, [r7, #4]
 8001d96:	4613      	mov	r3, r2
 8001d98:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001d9a:	4b64      	ldr	r3, [pc, #400]	; (8001f2c <ILI9341_Draw_Pixel+0x1a4>)
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	88fa      	ldrh	r2, [r7, #6]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	f080 80be 	bcs.w	8001f24 <ILI9341_Draw_Pixel+0x19c>
 8001da8:	4b61      	ldr	r3, [pc, #388]	; (8001f30 <ILI9341_Draw_Pixel+0x1a8>)
 8001daa:	881b      	ldrh	r3, [r3, #0]
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	88ba      	ldrh	r2, [r7, #4]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	f080 80b7 	bcs.w	8001f24 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001db6:	2200      	movs	r2, #0
 8001db8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dbc:	485d      	ldr	r0, [pc, #372]	; (8001f34 <ILI9341_Draw_Pixel+0x1ac>)
 8001dbe:	f001 f85b 	bl	8002e78 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dc8:	485a      	ldr	r0, [pc, #360]	; (8001f34 <ILI9341_Draw_Pixel+0x1ac>)
 8001dca:	f001 f855 	bl	8002e78 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8001dce:	202a      	movs	r0, #42	; 0x2a
 8001dd0:	f7ff fcea 	bl	80017a8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dda:	4856      	ldr	r0, [pc, #344]	; (8001f34 <ILI9341_Draw_Pixel+0x1ac>)
 8001ddc:	f001 f84c 	bl	8002e78 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001de0:	2201      	movs	r2, #1
 8001de2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001de6:	4853      	ldr	r0, [pc, #332]	; (8001f34 <ILI9341_Draw_Pixel+0x1ac>)
 8001de8:	f001 f846 	bl	8002e78 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001dec:	2200      	movs	r2, #0
 8001dee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001df2:	4850      	ldr	r0, [pc, #320]	; (8001f34 <ILI9341_Draw_Pixel+0x1ac>)
 8001df4:	f001 f840 	bl	8002e78 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8001df8:	88fb      	ldrh	r3, [r7, #6]
 8001dfa:	0a1b      	lsrs	r3, r3, #8
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	753b      	strb	r3, [r7, #20]
 8001e02:	88fb      	ldrh	r3, [r7, #6]
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	757b      	strb	r3, [r7, #21]
 8001e08:	88fb      	ldrh	r3, [r7, #6]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	121b      	asrs	r3, r3, #8
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	75bb      	strb	r3, [r7, #22]
 8001e12:	88fb      	ldrh	r3, [r7, #6]
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	3301      	adds	r3, #1
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8001e1c:	f107 0114 	add.w	r1, r7, #20
 8001e20:	2301      	movs	r3, #1
 8001e22:	2204      	movs	r2, #4
 8001e24:	4844      	ldr	r0, [pc, #272]	; (8001f38 <ILI9341_Draw_Pixel+0x1b0>)
 8001e26:	f002 fb4a 	bl	80044be <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e30:	4840      	ldr	r0, [pc, #256]	; (8001f34 <ILI9341_Draw_Pixel+0x1ac>)
 8001e32:	f001 f821 	bl	8002e78 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001e36:	2200      	movs	r2, #0
 8001e38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e3c:	483d      	ldr	r0, [pc, #244]	; (8001f34 <ILI9341_Draw_Pixel+0x1ac>)
 8001e3e:	f001 f81b 	bl	8002e78 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001e42:	2200      	movs	r2, #0
 8001e44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e48:	483a      	ldr	r0, [pc, #232]	; (8001f34 <ILI9341_Draw_Pixel+0x1ac>)
 8001e4a:	f001 f815 	bl	8002e78 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8001e4e:	202b      	movs	r0, #43	; 0x2b
 8001e50:	f7ff fcaa 	bl	80017a8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8001e54:	2201      	movs	r2, #1
 8001e56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e5a:	4836      	ldr	r0, [pc, #216]	; (8001f34 <ILI9341_Draw_Pixel+0x1ac>)
 8001e5c:	f001 f80c 	bl	8002e78 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001e60:	2201      	movs	r2, #1
 8001e62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e66:	4833      	ldr	r0, [pc, #204]	; (8001f34 <ILI9341_Draw_Pixel+0x1ac>)
 8001e68:	f001 f806 	bl	8002e78 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e72:	4830      	ldr	r0, [pc, #192]	; (8001f34 <ILI9341_Draw_Pixel+0x1ac>)
 8001e74:	f001 f800 	bl	8002e78 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8001e78:	88bb      	ldrh	r3, [r7, #4]
 8001e7a:	0a1b      	lsrs	r3, r3, #8
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	743b      	strb	r3, [r7, #16]
 8001e82:	88bb      	ldrh	r3, [r7, #4]
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	747b      	strb	r3, [r7, #17]
 8001e88:	88bb      	ldrh	r3, [r7, #4]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	121b      	asrs	r3, r3, #8
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	74bb      	strb	r3, [r7, #18]
 8001e92:	88bb      	ldrh	r3, [r7, #4]
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	3301      	adds	r3, #1
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8001e9c:	f107 0110 	add.w	r1, r7, #16
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	2204      	movs	r2, #4
 8001ea4:	4824      	ldr	r0, [pc, #144]	; (8001f38 <ILI9341_Draw_Pixel+0x1b0>)
 8001ea6:	f002 fb0a 	bl	80044be <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001eb0:	4820      	ldr	r0, [pc, #128]	; (8001f34 <ILI9341_Draw_Pixel+0x1ac>)
 8001eb2:	f000 ffe1 	bl	8002e78 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ebc:	481d      	ldr	r0, [pc, #116]	; (8001f34 <ILI9341_Draw_Pixel+0x1ac>)
 8001ebe:	f000 ffdb 	bl	8002e78 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ec8:	481a      	ldr	r0, [pc, #104]	; (8001f34 <ILI9341_Draw_Pixel+0x1ac>)
 8001eca:	f000 ffd5 	bl	8002e78 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8001ece:	202c      	movs	r0, #44	; 0x2c
 8001ed0:	f7ff fc6a 	bl	80017a8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001eda:	4816      	ldr	r0, [pc, #88]	; (8001f34 <ILI9341_Draw_Pixel+0x1ac>)
 8001edc:	f000 ffcc 	bl	8002e78 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ee6:	4813      	ldr	r0, [pc, #76]	; (8001f34 <ILI9341_Draw_Pixel+0x1ac>)
 8001ee8:	f000 ffc6 	bl	8002e78 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001eec:	2200      	movs	r2, #0
 8001eee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ef2:	4810      	ldr	r0, [pc, #64]	; (8001f34 <ILI9341_Draw_Pixel+0x1ac>)
 8001ef4:	f000 ffc0 	bl	8002e78 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8001ef8:	887b      	ldrh	r3, [r7, #2]
 8001efa:	0a1b      	lsrs	r3, r3, #8
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	733b      	strb	r3, [r7, #12]
 8001f02:	887b      	ldrh	r3, [r7, #2]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8001f08:	f107 010c 	add.w	r1, r7, #12
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	2202      	movs	r2, #2
 8001f10:	4809      	ldr	r0, [pc, #36]	; (8001f38 <ILI9341_Draw_Pixel+0x1b0>)
 8001f12:	f002 fad4 	bl	80044be <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001f16:	2201      	movs	r2, #1
 8001f18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f1c:	4805      	ldr	r0, [pc, #20]	; (8001f34 <ILI9341_Draw_Pixel+0x1ac>)
 8001f1e:	f000 ffab 	bl	8002e78 <HAL_GPIO_WritePin>
 8001f22:	e000      	b.n	8001f26 <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001f24:	bf00      	nop
	
}
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	2000000a 	.word	0x2000000a
 8001f30:	20000008 	.word	0x20000008
 8001f34:	40020800 	.word	0x40020800
 8001f38:	200002a8 	.word	0x200002a8

08001f3c <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8001f3c:	b590      	push	{r4, r7, lr}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4604      	mov	r4, r0
 8001f44:	4608      	mov	r0, r1
 8001f46:	4611      	mov	r1, r2
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4623      	mov	r3, r4
 8001f4c:	80fb      	strh	r3, [r7, #6]
 8001f4e:	4603      	mov	r3, r0
 8001f50:	80bb      	strh	r3, [r7, #4]
 8001f52:	460b      	mov	r3, r1
 8001f54:	807b      	strh	r3, [r7, #2]
 8001f56:	4613      	mov	r3, r2
 8001f58:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001f5a:	4b24      	ldr	r3, [pc, #144]	; (8001fec <ILI9341_Draw_Rectangle+0xb0>)
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	88fa      	ldrh	r2, [r7, #6]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d23d      	bcs.n	8001fe2 <ILI9341_Draw_Rectangle+0xa6>
 8001f66:	4b22      	ldr	r3, [pc, #136]	; (8001ff0 <ILI9341_Draw_Rectangle+0xb4>)
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	88ba      	ldrh	r2, [r7, #4]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d237      	bcs.n	8001fe2 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8001f72:	88fa      	ldrh	r2, [r7, #6]
 8001f74:	887b      	ldrh	r3, [r7, #2]
 8001f76:	4413      	add	r3, r2
 8001f78:	4a1c      	ldr	r2, [pc, #112]	; (8001fec <ILI9341_Draw_Rectangle+0xb0>)
 8001f7a:	8812      	ldrh	r2, [r2, #0]
 8001f7c:	b292      	uxth	r2, r2
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	dd05      	ble.n	8001f8e <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8001f82:	4b1a      	ldr	r3, [pc, #104]	; (8001fec <ILI9341_Draw_Rectangle+0xb0>)
 8001f84:	881b      	ldrh	r3, [r3, #0]
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	88fb      	ldrh	r3, [r7, #6]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8001f8e:	88ba      	ldrh	r2, [r7, #4]
 8001f90:	883b      	ldrh	r3, [r7, #0]
 8001f92:	4413      	add	r3, r2
 8001f94:	4a16      	ldr	r2, [pc, #88]	; (8001ff0 <ILI9341_Draw_Rectangle+0xb4>)
 8001f96:	8812      	ldrh	r2, [r2, #0]
 8001f98:	b292      	uxth	r2, r2
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	dd05      	ble.n	8001faa <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8001f9e:	4b14      	ldr	r3, [pc, #80]	; (8001ff0 <ILI9341_Draw_Rectangle+0xb4>)
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	88bb      	ldrh	r3, [r7, #4]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8001faa:	88fa      	ldrh	r2, [r7, #6]
 8001fac:	887b      	ldrh	r3, [r7, #2]
 8001fae:	4413      	add	r3, r2
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	b29c      	uxth	r4, r3
 8001fb6:	88ba      	ldrh	r2, [r7, #4]
 8001fb8:	883b      	ldrh	r3, [r7, #0]
 8001fba:	4413      	add	r3, r2
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	88b9      	ldrh	r1, [r7, #4]
 8001fc4:	88f8      	ldrh	r0, [r7, #6]
 8001fc6:	4622      	mov	r2, r4
 8001fc8:	f7ff fc44 	bl	8001854 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8001fcc:	883b      	ldrh	r3, [r7, #0]
 8001fce:	887a      	ldrh	r2, [r7, #2]
 8001fd0:	fb02 f303 	mul.w	r3, r2, r3
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	8b3b      	ldrh	r3, [r7, #24]
 8001fd8:	4611      	mov	r1, r2
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff fe10 	bl	8001c00 <ILI9341_Draw_Colour_Burst>
 8001fe0:	e000      	b.n	8001fe4 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001fe2:	bf00      	nop
}
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd90      	pop	{r4, r7, pc}
 8001fea:	bf00      	nop
 8001fec:	2000000a 	.word	0x2000000a
 8001ff0:	20000008 	.word	0x20000008

08001ff4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ff8:	4b08      	ldr	r3, [pc, #32]	; (800201c <HAL_Init+0x28>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a07      	ldr	r2, [pc, #28]	; (800201c <HAL_Init+0x28>)
 8001ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002002:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002004:	2003      	movs	r0, #3
 8002006:	f000 fd49 	bl	8002a9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800200a:	2000      	movs	r0, #0
 800200c:	f000 f808 	bl	8002020 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002010:	f7ff f832 	bl	8001078 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40023c00 	.word	0x40023c00

08002020 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002028:	4b12      	ldr	r3, [pc, #72]	; (8002074 <HAL_InitTick+0x54>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4b12      	ldr	r3, [pc, #72]	; (8002078 <HAL_InitTick+0x58>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	4619      	mov	r1, r3
 8002032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002036:	fbb3 f3f1 	udiv	r3, r3, r1
 800203a:	fbb2 f3f3 	udiv	r3, r2, r3
 800203e:	4618      	mov	r0, r3
 8002040:	f000 fd61 	bl	8002b06 <HAL_SYSTICK_Config>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e00e      	b.n	800206c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b0f      	cmp	r3, #15
 8002052:	d80a      	bhi.n	800206a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002054:	2200      	movs	r2, #0
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	f04f 30ff 	mov.w	r0, #4294967295
 800205c:	f000 fd29 	bl	8002ab2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002060:	4a06      	ldr	r2, [pc, #24]	; (800207c <HAL_InitTick+0x5c>)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002066:	2300      	movs	r3, #0
 8002068:	e000      	b.n	800206c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
}
 800206c:	4618      	mov	r0, r3
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000004 	.word	0x20000004
 8002078:	20000010 	.word	0x20000010
 800207c:	2000000c 	.word	0x2000000c

08002080 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002084:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <HAL_IncTick+0x20>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	461a      	mov	r2, r3
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <HAL_IncTick+0x24>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4413      	add	r3, r2
 8002090:	4a04      	ldr	r2, [pc, #16]	; (80020a4 <HAL_IncTick+0x24>)
 8002092:	6013      	str	r3, [r2, #0]
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	20000010 	.word	0x20000010
 80020a4:	200003e4 	.word	0x200003e4

080020a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  return uwTick;
 80020ac:	4b03      	ldr	r3, [pc, #12]	; (80020bc <HAL_GetTick+0x14>)
 80020ae:	681b      	ldr	r3, [r3, #0]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	200003e4 	.word	0x200003e4

080020c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020c8:	f7ff ffee 	bl	80020a8 <HAL_GetTick>
 80020cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d8:	d005      	beq.n	80020e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020da:	4b0a      	ldr	r3, [pc, #40]	; (8002104 <HAL_Delay+0x44>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	461a      	mov	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4413      	add	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020e6:	bf00      	nop
 80020e8:	f7ff ffde 	bl	80020a8 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d8f7      	bhi.n	80020e8 <HAL_Delay+0x28>
  {
  }
}
 80020f8:	bf00      	nop
 80020fa:	bf00      	nop
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20000010 	.word	0x20000010

08002108 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e031      	b.n	8002182 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	2b00      	cmp	r3, #0
 8002124:	d109      	bne.n	800213a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7fe fab2 	bl	8000690 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	f003 0310 	and.w	r3, r3, #16
 8002142:	2b00      	cmp	r3, #0
 8002144:	d116      	bne.n	8002174 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800214a:	4b10      	ldr	r3, [pc, #64]	; (800218c <HAL_ADC_Init+0x84>)
 800214c:	4013      	ands	r3, r2
 800214e:	f043 0202 	orr.w	r2, r3, #2
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 fad6 	bl	8002708 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	f023 0303 	bic.w	r3, r3, #3
 800216a:	f043 0201 	orr.w	r2, r3, #1
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	641a      	str	r2, [r3, #64]	; 0x40
 8002172:	e001      	b.n	8002178 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002180:	7bfb      	ldrb	r3, [r7, #15]
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	ffffeefd 	.word	0xffffeefd

08002190 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002198:	2300      	movs	r3, #0
 800219a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d101      	bne.n	80021aa <HAL_ADC_Start+0x1a>
 80021a6:	2302      	movs	r3, #2
 80021a8:	e0ad      	b.n	8002306 <HAL_ADC_Start+0x176>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d018      	beq.n	80021f2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f042 0201 	orr.w	r2, r2, #1
 80021ce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80021d0:	4b50      	ldr	r3, [pc, #320]	; (8002314 <HAL_ADC_Start+0x184>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a50      	ldr	r2, [pc, #320]	; (8002318 <HAL_ADC_Start+0x188>)
 80021d6:	fba2 2303 	umull	r2, r3, r2, r3
 80021da:	0c9a      	lsrs	r2, r3, #18
 80021dc:	4613      	mov	r3, r2
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	4413      	add	r3, r2
 80021e2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80021e4:	e002      	b.n	80021ec <HAL_ADC_Start+0x5c>
    {
      counter--;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	3b01      	subs	r3, #1
 80021ea:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1f9      	bne.n	80021e6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d175      	bne.n	80022ec <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002204:	4b45      	ldr	r3, [pc, #276]	; (800231c <HAL_ADC_Start+0x18c>)
 8002206:	4013      	ands	r3, r2
 8002208:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800221a:	2b00      	cmp	r3, #0
 800221c:	d007      	beq.n	800222e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002226:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800223a:	d106      	bne.n	800224a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002240:	f023 0206 	bic.w	r2, r3, #6
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	645a      	str	r2, [r3, #68]	; 0x44
 8002248:	e002      	b.n	8002250 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002260:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002262:	4b2f      	ldr	r3, [pc, #188]	; (8002320 <HAL_ADC_Start+0x190>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f003 031f 	and.w	r3, r3, #31
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10f      	bne.n	800228e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d143      	bne.n	8002304 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	e03a      	b.n	8002304 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a24      	ldr	r2, [pc, #144]	; (8002324 <HAL_ADC_Start+0x194>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d10e      	bne.n	80022b6 <HAL_ADC_Start+0x126>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d107      	bne.n	80022b6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022b4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80022b6:	4b1a      	ldr	r3, [pc, #104]	; (8002320 <HAL_ADC_Start+0x190>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f003 0310 	and.w	r3, r3, #16
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d120      	bne.n	8002304 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a18      	ldr	r2, [pc, #96]	; (8002328 <HAL_ADC_Start+0x198>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d11b      	bne.n	8002304 <HAL_ADC_Start+0x174>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d114      	bne.n	8002304 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022e8:	609a      	str	r2, [r3, #8]
 80022ea:	e00b      	b.n	8002304 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	f043 0210 	orr.w	r2, r3, #16
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fc:	f043 0201 	orr.w	r2, r3, #1
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	20000004 	.word	0x20000004
 8002318:	431bde83 	.word	0x431bde83
 800231c:	fffff8fe 	.word	0xfffff8fe
 8002320:	40012300 	.word	0x40012300
 8002324:	40012000 	.word	0x40012000
 8002328:	40012200 	.word	0x40012200

0800232c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002336:	2300      	movs	r3, #0
 8002338:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002348:	d113      	bne.n	8002372 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002354:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002358:	d10b      	bne.n	8002372 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	f043 0220 	orr.w	r2, r3, #32
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e063      	b.n	800243a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002372:	f7ff fe99 	bl	80020a8 <HAL_GetTick>
 8002376:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002378:	e021      	b.n	80023be <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002380:	d01d      	beq.n	80023be <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d007      	beq.n	8002398 <HAL_ADC_PollForConversion+0x6c>
 8002388:	f7ff fe8e 	bl	80020a8 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d212      	bcs.n	80023be <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d00b      	beq.n	80023be <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	f043 0204 	orr.w	r2, r3, #4
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e03d      	b.n	800243a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d1d6      	bne.n	800237a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f06f 0212 	mvn.w	r2, #18
 80023d4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d123      	bne.n	8002438 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d11f      	bne.n	8002438 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002402:	2b00      	cmp	r3, #0
 8002404:	d006      	beq.n	8002414 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002410:	2b00      	cmp	r3, #0
 8002412:	d111      	bne.n	8002438 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002424:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d105      	bne.n	8002438 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	f043 0201 	orr.w	r2, r3, #1
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002450:	4618      	mov	r0, r3
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002470:	2b01      	cmp	r3, #1
 8002472:	d101      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x1c>
 8002474:	2302      	movs	r3, #2
 8002476:	e136      	b.n	80026e6 <HAL_ADC_ConfigChannel+0x28a>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2b09      	cmp	r3, #9
 8002486:	d93a      	bls.n	80024fe <HAL_ADC_ConfigChannel+0xa2>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002490:	d035      	beq.n	80024fe <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68d9      	ldr	r1, [r3, #12]
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	b29b      	uxth	r3, r3
 800249e:	461a      	mov	r2, r3
 80024a0:	4613      	mov	r3, r2
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	4413      	add	r3, r2
 80024a6:	3b1e      	subs	r3, #30
 80024a8:	2207      	movs	r2, #7
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43da      	mvns	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	400a      	ands	r2, r1
 80024b6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a8d      	ldr	r2, [pc, #564]	; (80026f4 <HAL_ADC_ConfigChannel+0x298>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d10a      	bne.n	80024d8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68d9      	ldr	r1, [r3, #12]
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	061a      	lsls	r2, r3, #24
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024d6:	e035      	b.n	8002544 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68d9      	ldr	r1, [r3, #12]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	4618      	mov	r0, r3
 80024ea:	4603      	mov	r3, r0
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	4403      	add	r3, r0
 80024f0:	3b1e      	subs	r3, #30
 80024f2:	409a      	lsls	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024fc:	e022      	b.n	8002544 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6919      	ldr	r1, [r3, #16]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	b29b      	uxth	r3, r3
 800250a:	461a      	mov	r2, r3
 800250c:	4613      	mov	r3, r2
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	4413      	add	r3, r2
 8002512:	2207      	movs	r2, #7
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43da      	mvns	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	400a      	ands	r2, r1
 8002520:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6919      	ldr	r1, [r3, #16]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	b29b      	uxth	r3, r3
 8002532:	4618      	mov	r0, r3
 8002534:	4603      	mov	r3, r0
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	4403      	add	r3, r0
 800253a:	409a      	lsls	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	430a      	orrs	r2, r1
 8002542:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b06      	cmp	r3, #6
 800254a:	d824      	bhi.n	8002596 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	4613      	mov	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	3b05      	subs	r3, #5
 800255e:	221f      	movs	r2, #31
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43da      	mvns	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	400a      	ands	r2, r1
 800256c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	b29b      	uxth	r3, r3
 800257a:	4618      	mov	r0, r3
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	3b05      	subs	r3, #5
 8002588:	fa00 f203 	lsl.w	r2, r0, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	635a      	str	r2, [r3, #52]	; 0x34
 8002594:	e04c      	b.n	8002630 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b0c      	cmp	r3, #12
 800259c:	d824      	bhi.n	80025e8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	4613      	mov	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	3b23      	subs	r3, #35	; 0x23
 80025b0:	221f      	movs	r2, #31
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43da      	mvns	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	400a      	ands	r2, r1
 80025be:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	4618      	mov	r0, r3
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	3b23      	subs	r3, #35	; 0x23
 80025da:	fa00 f203 	lsl.w	r2, r0, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	631a      	str	r2, [r3, #48]	; 0x30
 80025e6:	e023      	b.n	8002630 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	3b41      	subs	r3, #65	; 0x41
 80025fa:	221f      	movs	r2, #31
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43da      	mvns	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	400a      	ands	r2, r1
 8002608:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	b29b      	uxth	r3, r3
 8002616:	4618      	mov	r0, r3
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	3b41      	subs	r3, #65	; 0x41
 8002624:	fa00 f203 	lsl.w	r2, r0, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	430a      	orrs	r2, r1
 800262e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a30      	ldr	r2, [pc, #192]	; (80026f8 <HAL_ADC_ConfigChannel+0x29c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d10a      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x1f4>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002642:	d105      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002644:	4b2d      	ldr	r3, [pc, #180]	; (80026fc <HAL_ADC_ConfigChannel+0x2a0>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	4a2c      	ldr	r2, [pc, #176]	; (80026fc <HAL_ADC_ConfigChannel+0x2a0>)
 800264a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800264e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a28      	ldr	r2, [pc, #160]	; (80026f8 <HAL_ADC_ConfigChannel+0x29c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d10f      	bne.n	800267a <HAL_ADC_ConfigChannel+0x21e>
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2b12      	cmp	r3, #18
 8002660:	d10b      	bne.n	800267a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002662:	4b26      	ldr	r3, [pc, #152]	; (80026fc <HAL_ADC_ConfigChannel+0x2a0>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	4a25      	ldr	r2, [pc, #148]	; (80026fc <HAL_ADC_ConfigChannel+0x2a0>)
 8002668:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800266c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800266e:	4b23      	ldr	r3, [pc, #140]	; (80026fc <HAL_ADC_ConfigChannel+0x2a0>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	4a22      	ldr	r2, [pc, #136]	; (80026fc <HAL_ADC_ConfigChannel+0x2a0>)
 8002674:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002678:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a1e      	ldr	r2, [pc, #120]	; (80026f8 <HAL_ADC_ConfigChannel+0x29c>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d12b      	bne.n	80026dc <HAL_ADC_ConfigChannel+0x280>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a1a      	ldr	r2, [pc, #104]	; (80026f4 <HAL_ADC_ConfigChannel+0x298>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d003      	beq.n	8002696 <HAL_ADC_ConfigChannel+0x23a>
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2b11      	cmp	r3, #17
 8002694:	d122      	bne.n	80026dc <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002696:	4b19      	ldr	r3, [pc, #100]	; (80026fc <HAL_ADC_ConfigChannel+0x2a0>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	4a18      	ldr	r2, [pc, #96]	; (80026fc <HAL_ADC_ConfigChannel+0x2a0>)
 800269c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80026a0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80026a2:	4b16      	ldr	r3, [pc, #88]	; (80026fc <HAL_ADC_ConfigChannel+0x2a0>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	4a15      	ldr	r2, [pc, #84]	; (80026fc <HAL_ADC_ConfigChannel+0x2a0>)
 80026a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026ac:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a10      	ldr	r2, [pc, #64]	; (80026f4 <HAL_ADC_ConfigChannel+0x298>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d111      	bne.n	80026dc <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80026b8:	4b11      	ldr	r3, [pc, #68]	; (8002700 <HAL_ADC_ConfigChannel+0x2a4>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a11      	ldr	r2, [pc, #68]	; (8002704 <HAL_ADC_ConfigChannel+0x2a8>)
 80026be:	fba2 2303 	umull	r2, r3, r2, r3
 80026c2:	0c9a      	lsrs	r2, r3, #18
 80026c4:	4613      	mov	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80026ce:	e002      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	3b01      	subs	r3, #1
 80026d4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1f9      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	10000012 	.word	0x10000012
 80026f8:	40012000 	.word	0x40012000
 80026fc:	40012300 	.word	0x40012300
 8002700:	20000004 	.word	0x20000004
 8002704:	431bde83 	.word	0x431bde83

08002708 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002710:	4b78      	ldr	r3, [pc, #480]	; (80028f4 <ADC_Init+0x1ec>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	4a77      	ldr	r2, [pc, #476]	; (80028f4 <ADC_Init+0x1ec>)
 8002716:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800271a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800271c:	4b75      	ldr	r3, [pc, #468]	; (80028f4 <ADC_Init+0x1ec>)
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	4973      	ldr	r1, [pc, #460]	; (80028f4 <ADC_Init+0x1ec>)
 8002726:	4313      	orrs	r3, r2
 8002728:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002738:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6859      	ldr	r1, [r3, #4]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	021a      	lsls	r2, r3, #8
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800275c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6859      	ldr	r1, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	430a      	orrs	r2, r1
 800276e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800277e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6899      	ldr	r1, [r3, #8]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	430a      	orrs	r2, r1
 8002790:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002796:	4a58      	ldr	r2, [pc, #352]	; (80028f8 <ADC_Init+0x1f0>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d022      	beq.n	80027e2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6899      	ldr	r1, [r3, #8]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	430a      	orrs	r2, r1
 80027bc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6899      	ldr	r1, [r3, #8]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	e00f      	b.n	8002802 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002800:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 0202 	bic.w	r2, r2, #2
 8002810:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6899      	ldr	r1, [r3, #8]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	005a      	lsls	r2, r3, #1
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 3020 	ldrb.w	r3, [r3, #32]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d01b      	beq.n	8002868 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800283e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800284e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6859      	ldr	r1, [r3, #4]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	3b01      	subs	r3, #1
 800285c:	035a      	lsls	r2, r3, #13
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	430a      	orrs	r2, r1
 8002864:	605a      	str	r2, [r3, #4]
 8002866:	e007      	b.n	8002878 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002876:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002886:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	3b01      	subs	r3, #1
 8002894:	051a      	lsls	r2, r3, #20
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80028ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6899      	ldr	r1, [r3, #8]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028ba:	025a      	lsls	r2, r3, #9
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689a      	ldr	r2, [r3, #8]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6899      	ldr	r1, [r3, #8]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	029a      	lsls	r2, r3, #10
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	430a      	orrs	r2, r1
 80028e6:	609a      	str	r2, [r3, #8]
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	40012300 	.word	0x40012300
 80028f8:	0f000001 	.word	0x0f000001

080028fc <__NVIC_SetPriorityGrouping>:
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800290c:	4b0b      	ldr	r3, [pc, #44]	; (800293c <__NVIC_SetPriorityGrouping+0x40>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002912:	68ba      	ldr	r2, [r7, #8]
 8002914:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002918:	4013      	ands	r3, r2
 800291a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002924:	4b06      	ldr	r3, [pc, #24]	; (8002940 <__NVIC_SetPriorityGrouping+0x44>)
 8002926:	4313      	orrs	r3, r2
 8002928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800292a:	4a04      	ldr	r2, [pc, #16]	; (800293c <__NVIC_SetPriorityGrouping+0x40>)
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	60d3      	str	r3, [r2, #12]
}
 8002930:	bf00      	nop
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	e000ed00 	.word	0xe000ed00
 8002940:	05fa0000 	.word	0x05fa0000

08002944 <__NVIC_GetPriorityGrouping>:
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002948:	4b04      	ldr	r3, [pc, #16]	; (800295c <__NVIC_GetPriorityGrouping+0x18>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	0a1b      	lsrs	r3, r3, #8
 800294e:	f003 0307 	and.w	r3, r3, #7
}
 8002952:	4618      	mov	r0, r3
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	e000ed00 	.word	0xe000ed00

08002960 <__NVIC_EnableIRQ>:
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800296a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296e:	2b00      	cmp	r3, #0
 8002970:	db0b      	blt.n	800298a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	f003 021f 	and.w	r2, r3, #31
 8002978:	4907      	ldr	r1, [pc, #28]	; (8002998 <__NVIC_EnableIRQ+0x38>)
 800297a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297e:	095b      	lsrs	r3, r3, #5
 8002980:	2001      	movs	r0, #1
 8002982:	fa00 f202 	lsl.w	r2, r0, r2
 8002986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	e000e100 	.word	0xe000e100

0800299c <__NVIC_SetPriority>:
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	6039      	str	r1, [r7, #0]
 80029a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	db0a      	blt.n	80029c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	490c      	ldr	r1, [pc, #48]	; (80029e8 <__NVIC_SetPriority+0x4c>)
 80029b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ba:	0112      	lsls	r2, r2, #4
 80029bc:	b2d2      	uxtb	r2, r2
 80029be:	440b      	add	r3, r1
 80029c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80029c4:	e00a      	b.n	80029dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	b2da      	uxtb	r2, r3
 80029ca:	4908      	ldr	r1, [pc, #32]	; (80029ec <__NVIC_SetPriority+0x50>)
 80029cc:	79fb      	ldrb	r3, [r7, #7]
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	3b04      	subs	r3, #4
 80029d4:	0112      	lsls	r2, r2, #4
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	440b      	add	r3, r1
 80029da:	761a      	strb	r2, [r3, #24]
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	e000e100 	.word	0xe000e100
 80029ec:	e000ed00 	.word	0xe000ed00

080029f0 <NVIC_EncodePriority>:
{
 80029f0:	b480      	push	{r7}
 80029f2:	b089      	sub	sp, #36	; 0x24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	f1c3 0307 	rsb	r3, r3, #7
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	bf28      	it	cs
 8002a0e:	2304      	movcs	r3, #4
 8002a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	3304      	adds	r3, #4
 8002a16:	2b06      	cmp	r3, #6
 8002a18:	d902      	bls.n	8002a20 <NVIC_EncodePriority+0x30>
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	3b03      	subs	r3, #3
 8002a1e:	e000      	b.n	8002a22 <NVIC_EncodePriority+0x32>
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a24:	f04f 32ff 	mov.w	r2, #4294967295
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43da      	mvns	r2, r3
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	401a      	ands	r2, r3
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a38:	f04f 31ff 	mov.w	r1, #4294967295
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a42:	43d9      	mvns	r1, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a48:	4313      	orrs	r3, r2
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3724      	adds	r7, #36	; 0x24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
	...

08002a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3b01      	subs	r3, #1
 8002a64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a68:	d301      	bcc.n	8002a6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e00f      	b.n	8002a8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a6e:	4a0a      	ldr	r2, [pc, #40]	; (8002a98 <SysTick_Config+0x40>)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3b01      	subs	r3, #1
 8002a74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a76:	210f      	movs	r1, #15
 8002a78:	f04f 30ff 	mov.w	r0, #4294967295
 8002a7c:	f7ff ff8e 	bl	800299c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a80:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <SysTick_Config+0x40>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a86:	4b04      	ldr	r3, [pc, #16]	; (8002a98 <SysTick_Config+0x40>)
 8002a88:	2207      	movs	r2, #7
 8002a8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	e000e010 	.word	0xe000e010

08002a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f7ff ff29 	bl	80028fc <__NVIC_SetPriorityGrouping>
}
 8002aaa:	bf00      	nop
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b086      	sub	sp, #24
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	4603      	mov	r3, r0
 8002aba:	60b9      	str	r1, [r7, #8]
 8002abc:	607a      	str	r2, [r7, #4]
 8002abe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ac4:	f7ff ff3e 	bl	8002944 <__NVIC_GetPriorityGrouping>
 8002ac8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	68b9      	ldr	r1, [r7, #8]
 8002ace:	6978      	ldr	r0, [r7, #20]
 8002ad0:	f7ff ff8e 	bl	80029f0 <NVIC_EncodePriority>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ada:	4611      	mov	r1, r2
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff ff5d 	bl	800299c <__NVIC_SetPriority>
}
 8002ae2:	bf00      	nop
 8002ae4:	3718      	adds	r7, #24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b082      	sub	sp, #8
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	4603      	mov	r3, r0
 8002af2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff ff31 	bl	8002960 <__NVIC_EnableIRQ>
}
 8002afe:	bf00      	nop
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b082      	sub	sp, #8
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7ff ffa2 	bl	8002a58 <SysTick_Config>
 8002b14:	4603      	mov	r3, r0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
	...

08002b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b089      	sub	sp, #36	; 0x24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b32:	2300      	movs	r3, #0
 8002b34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002b36:	2300      	movs	r3, #0
 8002b38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61fb      	str	r3, [r7, #28]
 8002b3e:	e175      	b.n	8002e2c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002b40:	2201      	movs	r2, #1
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	4013      	ands	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	f040 8164 	bne.w	8002e26 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d005      	beq.n	8002b76 <HAL_GPIO_Init+0x56>
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d130      	bne.n	8002bd8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	2203      	movs	r2, #3
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43db      	mvns	r3, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bac:	2201      	movs	r2, #1
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	091b      	lsrs	r3, r3, #4
 8002bc2:	f003 0201 	and.w	r2, r3, #1
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 0303 	and.w	r3, r3, #3
 8002be0:	2b03      	cmp	r3, #3
 8002be2:	d017      	beq.n	8002c14 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	2203      	movs	r2, #3
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 0303 	and.w	r3, r3, #3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d123      	bne.n	8002c68 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	08da      	lsrs	r2, r3, #3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3208      	adds	r2, #8
 8002c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	220f      	movs	r2, #15
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4013      	ands	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	691a      	ldr	r2, [r3, #16]
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	08da      	lsrs	r2, r3, #3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	3208      	adds	r2, #8
 8002c62:	69b9      	ldr	r1, [r7, #24]
 8002c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	2203      	movs	r2, #3
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f003 0203 	and.w	r2, r3, #3
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 80be 	beq.w	8002e26 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002caa:	4b66      	ldr	r3, [pc, #408]	; (8002e44 <HAL_GPIO_Init+0x324>)
 8002cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cae:	4a65      	ldr	r2, [pc, #404]	; (8002e44 <HAL_GPIO_Init+0x324>)
 8002cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002cb6:	4b63      	ldr	r3, [pc, #396]	; (8002e44 <HAL_GPIO_Init+0x324>)
 8002cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002cc2:	4a61      	ldr	r2, [pc, #388]	; (8002e48 <HAL_GPIO_Init+0x328>)
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	089b      	lsrs	r3, r3, #2
 8002cc8:	3302      	adds	r3, #2
 8002cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	220f      	movs	r2, #15
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a58      	ldr	r2, [pc, #352]	; (8002e4c <HAL_GPIO_Init+0x32c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d037      	beq.n	8002d5e <HAL_GPIO_Init+0x23e>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a57      	ldr	r2, [pc, #348]	; (8002e50 <HAL_GPIO_Init+0x330>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d031      	beq.n	8002d5a <HAL_GPIO_Init+0x23a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a56      	ldr	r2, [pc, #344]	; (8002e54 <HAL_GPIO_Init+0x334>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d02b      	beq.n	8002d56 <HAL_GPIO_Init+0x236>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a55      	ldr	r2, [pc, #340]	; (8002e58 <HAL_GPIO_Init+0x338>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d025      	beq.n	8002d52 <HAL_GPIO_Init+0x232>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a54      	ldr	r2, [pc, #336]	; (8002e5c <HAL_GPIO_Init+0x33c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d01f      	beq.n	8002d4e <HAL_GPIO_Init+0x22e>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a53      	ldr	r2, [pc, #332]	; (8002e60 <HAL_GPIO_Init+0x340>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d019      	beq.n	8002d4a <HAL_GPIO_Init+0x22a>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a52      	ldr	r2, [pc, #328]	; (8002e64 <HAL_GPIO_Init+0x344>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d013      	beq.n	8002d46 <HAL_GPIO_Init+0x226>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a51      	ldr	r2, [pc, #324]	; (8002e68 <HAL_GPIO_Init+0x348>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d00d      	beq.n	8002d42 <HAL_GPIO_Init+0x222>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a50      	ldr	r2, [pc, #320]	; (8002e6c <HAL_GPIO_Init+0x34c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d007      	beq.n	8002d3e <HAL_GPIO_Init+0x21e>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a4f      	ldr	r2, [pc, #316]	; (8002e70 <HAL_GPIO_Init+0x350>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d101      	bne.n	8002d3a <HAL_GPIO_Init+0x21a>
 8002d36:	2309      	movs	r3, #9
 8002d38:	e012      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d3a:	230a      	movs	r3, #10
 8002d3c:	e010      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d3e:	2308      	movs	r3, #8
 8002d40:	e00e      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d42:	2307      	movs	r3, #7
 8002d44:	e00c      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d46:	2306      	movs	r3, #6
 8002d48:	e00a      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d4a:	2305      	movs	r3, #5
 8002d4c:	e008      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d4e:	2304      	movs	r3, #4
 8002d50:	e006      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d52:	2303      	movs	r3, #3
 8002d54:	e004      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d56:	2302      	movs	r3, #2
 8002d58:	e002      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d5e:	2300      	movs	r3, #0
 8002d60:	69fa      	ldr	r2, [r7, #28]
 8002d62:	f002 0203 	and.w	r2, r2, #3
 8002d66:	0092      	lsls	r2, r2, #2
 8002d68:	4093      	lsls	r3, r2
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d70:	4935      	ldr	r1, [pc, #212]	; (8002e48 <HAL_GPIO_Init+0x328>)
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	089b      	lsrs	r3, r3, #2
 8002d76:	3302      	adds	r3, #2
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d7e:	4b3d      	ldr	r3, [pc, #244]	; (8002e74 <HAL_GPIO_Init+0x354>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	43db      	mvns	r3, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002da2:	4a34      	ldr	r2, [pc, #208]	; (8002e74 <HAL_GPIO_Init+0x354>)
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002da8:	4b32      	ldr	r3, [pc, #200]	; (8002e74 <HAL_GPIO_Init+0x354>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	43db      	mvns	r3, r3
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4013      	ands	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d003      	beq.n	8002dcc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dcc:	4a29      	ldr	r2, [pc, #164]	; (8002e74 <HAL_GPIO_Init+0x354>)
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dd2:	4b28      	ldr	r3, [pc, #160]	; (8002e74 <HAL_GPIO_Init+0x354>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4013      	ands	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002df6:	4a1f      	ldr	r2, [pc, #124]	; (8002e74 <HAL_GPIO_Init+0x354>)
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dfc:	4b1d      	ldr	r3, [pc, #116]	; (8002e74 <HAL_GPIO_Init+0x354>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	43db      	mvns	r3, r3
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d003      	beq.n	8002e20 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e20:	4a14      	ldr	r2, [pc, #80]	; (8002e74 <HAL_GPIO_Init+0x354>)
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	61fb      	str	r3, [r7, #28]
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	2b0f      	cmp	r3, #15
 8002e30:	f67f ae86 	bls.w	8002b40 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002e34:	bf00      	nop
 8002e36:	bf00      	nop
 8002e38:	3724      	adds	r7, #36	; 0x24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	40023800 	.word	0x40023800
 8002e48:	40013800 	.word	0x40013800
 8002e4c:	40020000 	.word	0x40020000
 8002e50:	40020400 	.word	0x40020400
 8002e54:	40020800 	.word	0x40020800
 8002e58:	40020c00 	.word	0x40020c00
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	40021400 	.word	0x40021400
 8002e64:	40021800 	.word	0x40021800
 8002e68:	40021c00 	.word	0x40021c00
 8002e6c:	40022000 	.word	0x40022000
 8002e70:	40022400 	.word	0x40022400
 8002e74:	40013c00 	.word	0x40013c00

08002e78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	807b      	strh	r3, [r7, #2]
 8002e84:	4613      	mov	r3, r2
 8002e86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e88:	787b      	ldrb	r3, [r7, #1]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e8e:	887a      	ldrh	r2, [r7, #2]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002e94:	e003      	b.n	8002e9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002e96:	887b      	ldrh	r3, [r7, #2]
 8002e98:	041a      	lsls	r2, r3, #16
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	619a      	str	r2, [r3, #24]
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
	...

08002eac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e07f      	b.n	8002fbe <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d106      	bne.n	8002ed8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7fd fd8e 	bl	80009f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2224      	movs	r2, #36	; 0x24
 8002edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 0201 	bic.w	r2, r2, #1
 8002eee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002efc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f0c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d107      	bne.n	8002f26 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689a      	ldr	r2, [r3, #8]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f22:	609a      	str	r2, [r3, #8]
 8002f24:	e006      	b.n	8002f34 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002f32:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d104      	bne.n	8002f46 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f44:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6859      	ldr	r1, [r3, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	4b1d      	ldr	r3, [pc, #116]	; (8002fc8 <HAL_I2C_Init+0x11c>)
 8002f52:	430b      	orrs	r3, r1
 8002f54:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68da      	ldr	r2, [r3, #12]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f64:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	691a      	ldr	r2, [r3, #16]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	69d9      	ldr	r1, [r3, #28]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a1a      	ldr	r2, [r3, #32]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0201 	orr.w	r2, r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2220      	movs	r2, #32
 8002faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	02008000 	.word	0x02008000

08002fcc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b20      	cmp	r3, #32
 8002fe0:	d138      	bne.n	8003054 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d101      	bne.n	8002ff0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002fec:	2302      	movs	r3, #2
 8002fee:	e032      	b.n	8003056 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2224      	movs	r2, #36	; 0x24
 8002ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0201 	bic.w	r2, r2, #1
 800300e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800301e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6819      	ldr	r1, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	430a      	orrs	r2, r1
 800302e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f042 0201 	orr.w	r2, r2, #1
 800303e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2220      	movs	r2, #32
 8003044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003050:	2300      	movs	r3, #0
 8003052:	e000      	b.n	8003056 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003054:	2302      	movs	r3, #2
  }
}
 8003056:	4618      	mov	r0, r3
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003062:	b480      	push	{r7}
 8003064:	b085      	sub	sp, #20
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
 800306a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b20      	cmp	r3, #32
 8003076:	d139      	bne.n	80030ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800307e:	2b01      	cmp	r3, #1
 8003080:	d101      	bne.n	8003086 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003082:	2302      	movs	r3, #2
 8003084:	e033      	b.n	80030ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2224      	movs	r2, #36	; 0x24
 8003092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0201 	bic.w	r2, r2, #1
 80030a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	021b      	lsls	r3, r3, #8
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	4313      	orrs	r3, r2
 80030be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f042 0201 	orr.w	r2, r2, #1
 80030d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2220      	movs	r2, #32
 80030dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030e8:	2300      	movs	r3, #0
 80030ea:	e000      	b.n	80030ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030ec:	2302      	movs	r3, #2
  }
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
	...

080030fc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003100:	4b05      	ldr	r3, [pc, #20]	; (8003118 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a04      	ldr	r2, [pc, #16]	; (8003118 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800310a:	6013      	str	r3, [r2, #0]
}
 800310c:	bf00      	nop
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	40007000 	.word	0x40007000

0800311c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003124:	2300      	movs	r3, #0
 8003126:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e29b      	b.n	800366a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 8087 	beq.w	800324e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003140:	4b96      	ldr	r3, [pc, #600]	; (800339c <HAL_RCC_OscConfig+0x280>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f003 030c 	and.w	r3, r3, #12
 8003148:	2b04      	cmp	r3, #4
 800314a:	d00c      	beq.n	8003166 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800314c:	4b93      	ldr	r3, [pc, #588]	; (800339c <HAL_RCC_OscConfig+0x280>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 030c 	and.w	r3, r3, #12
 8003154:	2b08      	cmp	r3, #8
 8003156:	d112      	bne.n	800317e <HAL_RCC_OscConfig+0x62>
 8003158:	4b90      	ldr	r3, [pc, #576]	; (800339c <HAL_RCC_OscConfig+0x280>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003160:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003164:	d10b      	bne.n	800317e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003166:	4b8d      	ldr	r3, [pc, #564]	; (800339c <HAL_RCC_OscConfig+0x280>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d06c      	beq.n	800324c <HAL_RCC_OscConfig+0x130>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d168      	bne.n	800324c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e275      	b.n	800366a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003186:	d106      	bne.n	8003196 <HAL_RCC_OscConfig+0x7a>
 8003188:	4b84      	ldr	r3, [pc, #528]	; (800339c <HAL_RCC_OscConfig+0x280>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a83      	ldr	r2, [pc, #524]	; (800339c <HAL_RCC_OscConfig+0x280>)
 800318e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003192:	6013      	str	r3, [r2, #0]
 8003194:	e02e      	b.n	80031f4 <HAL_RCC_OscConfig+0xd8>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10c      	bne.n	80031b8 <HAL_RCC_OscConfig+0x9c>
 800319e:	4b7f      	ldr	r3, [pc, #508]	; (800339c <HAL_RCC_OscConfig+0x280>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a7e      	ldr	r2, [pc, #504]	; (800339c <HAL_RCC_OscConfig+0x280>)
 80031a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a8:	6013      	str	r3, [r2, #0]
 80031aa:	4b7c      	ldr	r3, [pc, #496]	; (800339c <HAL_RCC_OscConfig+0x280>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a7b      	ldr	r2, [pc, #492]	; (800339c <HAL_RCC_OscConfig+0x280>)
 80031b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	e01d      	b.n	80031f4 <HAL_RCC_OscConfig+0xd8>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031c0:	d10c      	bne.n	80031dc <HAL_RCC_OscConfig+0xc0>
 80031c2:	4b76      	ldr	r3, [pc, #472]	; (800339c <HAL_RCC_OscConfig+0x280>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a75      	ldr	r2, [pc, #468]	; (800339c <HAL_RCC_OscConfig+0x280>)
 80031c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031cc:	6013      	str	r3, [r2, #0]
 80031ce:	4b73      	ldr	r3, [pc, #460]	; (800339c <HAL_RCC_OscConfig+0x280>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a72      	ldr	r2, [pc, #456]	; (800339c <HAL_RCC_OscConfig+0x280>)
 80031d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	e00b      	b.n	80031f4 <HAL_RCC_OscConfig+0xd8>
 80031dc:	4b6f      	ldr	r3, [pc, #444]	; (800339c <HAL_RCC_OscConfig+0x280>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a6e      	ldr	r2, [pc, #440]	; (800339c <HAL_RCC_OscConfig+0x280>)
 80031e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031e6:	6013      	str	r3, [r2, #0]
 80031e8:	4b6c      	ldr	r3, [pc, #432]	; (800339c <HAL_RCC_OscConfig+0x280>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a6b      	ldr	r2, [pc, #428]	; (800339c <HAL_RCC_OscConfig+0x280>)
 80031ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d013      	beq.n	8003224 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fc:	f7fe ff54 	bl	80020a8 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003204:	f7fe ff50 	bl	80020a8 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b64      	cmp	r3, #100	; 0x64
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e229      	b.n	800366a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003216:	4b61      	ldr	r3, [pc, #388]	; (800339c <HAL_RCC_OscConfig+0x280>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d0f0      	beq.n	8003204 <HAL_RCC_OscConfig+0xe8>
 8003222:	e014      	b.n	800324e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003224:	f7fe ff40 	bl	80020a8 <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800322c:	f7fe ff3c 	bl	80020a8 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b64      	cmp	r3, #100	; 0x64
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e215      	b.n	800366a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800323e:	4b57      	ldr	r3, [pc, #348]	; (800339c <HAL_RCC_OscConfig+0x280>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f0      	bne.n	800322c <HAL_RCC_OscConfig+0x110>
 800324a:	e000      	b.n	800324e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800324c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d069      	beq.n	800332e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800325a:	4b50      	ldr	r3, [pc, #320]	; (800339c <HAL_RCC_OscConfig+0x280>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 030c 	and.w	r3, r3, #12
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00b      	beq.n	800327e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003266:	4b4d      	ldr	r3, [pc, #308]	; (800339c <HAL_RCC_OscConfig+0x280>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 030c 	and.w	r3, r3, #12
 800326e:	2b08      	cmp	r3, #8
 8003270:	d11c      	bne.n	80032ac <HAL_RCC_OscConfig+0x190>
 8003272:	4b4a      	ldr	r3, [pc, #296]	; (800339c <HAL_RCC_OscConfig+0x280>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d116      	bne.n	80032ac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800327e:	4b47      	ldr	r3, [pc, #284]	; (800339c <HAL_RCC_OscConfig+0x280>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <HAL_RCC_OscConfig+0x17a>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d001      	beq.n	8003296 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e1e9      	b.n	800366a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003296:	4b41      	ldr	r3, [pc, #260]	; (800339c <HAL_RCC_OscConfig+0x280>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	493d      	ldr	r1, [pc, #244]	; (800339c <HAL_RCC_OscConfig+0x280>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032aa:	e040      	b.n	800332e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d023      	beq.n	80032fc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032b4:	4b39      	ldr	r3, [pc, #228]	; (800339c <HAL_RCC_OscConfig+0x280>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a38      	ldr	r2, [pc, #224]	; (800339c <HAL_RCC_OscConfig+0x280>)
 80032ba:	f043 0301 	orr.w	r3, r3, #1
 80032be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c0:	f7fe fef2 	bl	80020a8 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c8:	f7fe feee 	bl	80020a8 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e1c7      	b.n	800366a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032da:	4b30      	ldr	r3, [pc, #192]	; (800339c <HAL_RCC_OscConfig+0x280>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0f0      	beq.n	80032c8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e6:	4b2d      	ldr	r3, [pc, #180]	; (800339c <HAL_RCC_OscConfig+0x280>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	4929      	ldr	r1, [pc, #164]	; (800339c <HAL_RCC_OscConfig+0x280>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	600b      	str	r3, [r1, #0]
 80032fa:	e018      	b.n	800332e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032fc:	4b27      	ldr	r3, [pc, #156]	; (800339c <HAL_RCC_OscConfig+0x280>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a26      	ldr	r2, [pc, #152]	; (800339c <HAL_RCC_OscConfig+0x280>)
 8003302:	f023 0301 	bic.w	r3, r3, #1
 8003306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003308:	f7fe fece 	bl	80020a8 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003310:	f7fe feca 	bl	80020a8 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e1a3      	b.n	800366a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003322:	4b1e      	ldr	r3, [pc, #120]	; (800339c <HAL_RCC_OscConfig+0x280>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f0      	bne.n	8003310 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	2b00      	cmp	r3, #0
 8003338:	d038      	beq.n	80033ac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d019      	beq.n	8003376 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003342:	4b16      	ldr	r3, [pc, #88]	; (800339c <HAL_RCC_OscConfig+0x280>)
 8003344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003346:	4a15      	ldr	r2, [pc, #84]	; (800339c <HAL_RCC_OscConfig+0x280>)
 8003348:	f043 0301 	orr.w	r3, r3, #1
 800334c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334e:	f7fe feab 	bl	80020a8 <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003354:	e008      	b.n	8003368 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003356:	f7fe fea7 	bl	80020a8 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e180      	b.n	800366a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003368:	4b0c      	ldr	r3, [pc, #48]	; (800339c <HAL_RCC_OscConfig+0x280>)
 800336a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0f0      	beq.n	8003356 <HAL_RCC_OscConfig+0x23a>
 8003374:	e01a      	b.n	80033ac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003376:	4b09      	ldr	r3, [pc, #36]	; (800339c <HAL_RCC_OscConfig+0x280>)
 8003378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800337a:	4a08      	ldr	r2, [pc, #32]	; (800339c <HAL_RCC_OscConfig+0x280>)
 800337c:	f023 0301 	bic.w	r3, r3, #1
 8003380:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003382:	f7fe fe91 	bl	80020a8 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003388:	e00a      	b.n	80033a0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800338a:	f7fe fe8d 	bl	80020a8 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d903      	bls.n	80033a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e166      	b.n	800366a <HAL_RCC_OscConfig+0x54e>
 800339c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033a0:	4b92      	ldr	r3, [pc, #584]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 80033a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1ee      	bne.n	800338a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 80a4 	beq.w	8003502 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ba:	4b8c      	ldr	r3, [pc, #560]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10d      	bne.n	80033e2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80033c6:	4b89      	ldr	r3, [pc, #548]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	4a88      	ldr	r2, [pc, #544]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 80033cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d0:	6413      	str	r3, [r2, #64]	; 0x40
 80033d2:	4b86      	ldr	r3, [pc, #536]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033da:	60bb      	str	r3, [r7, #8]
 80033dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033de:	2301      	movs	r3, #1
 80033e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033e2:	4b83      	ldr	r3, [pc, #524]	; (80035f0 <HAL_RCC_OscConfig+0x4d4>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d118      	bne.n	8003420 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80033ee:	4b80      	ldr	r3, [pc, #512]	; (80035f0 <HAL_RCC_OscConfig+0x4d4>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a7f      	ldr	r2, [pc, #508]	; (80035f0 <HAL_RCC_OscConfig+0x4d4>)
 80033f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033fa:	f7fe fe55 	bl	80020a8 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003400:	e008      	b.n	8003414 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003402:	f7fe fe51 	bl	80020a8 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b64      	cmp	r3, #100	; 0x64
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e12a      	b.n	800366a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003414:	4b76      	ldr	r3, [pc, #472]	; (80035f0 <HAL_RCC_OscConfig+0x4d4>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0f0      	beq.n	8003402 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d106      	bne.n	8003436 <HAL_RCC_OscConfig+0x31a>
 8003428:	4b70      	ldr	r3, [pc, #448]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 800342a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342c:	4a6f      	ldr	r2, [pc, #444]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 800342e:	f043 0301 	orr.w	r3, r3, #1
 8003432:	6713      	str	r3, [r2, #112]	; 0x70
 8003434:	e02d      	b.n	8003492 <HAL_RCC_OscConfig+0x376>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10c      	bne.n	8003458 <HAL_RCC_OscConfig+0x33c>
 800343e:	4b6b      	ldr	r3, [pc, #428]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 8003440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003442:	4a6a      	ldr	r2, [pc, #424]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 8003444:	f023 0301 	bic.w	r3, r3, #1
 8003448:	6713      	str	r3, [r2, #112]	; 0x70
 800344a:	4b68      	ldr	r3, [pc, #416]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 800344c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344e:	4a67      	ldr	r2, [pc, #412]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 8003450:	f023 0304 	bic.w	r3, r3, #4
 8003454:	6713      	str	r3, [r2, #112]	; 0x70
 8003456:	e01c      	b.n	8003492 <HAL_RCC_OscConfig+0x376>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	2b05      	cmp	r3, #5
 800345e:	d10c      	bne.n	800347a <HAL_RCC_OscConfig+0x35e>
 8003460:	4b62      	ldr	r3, [pc, #392]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 8003462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003464:	4a61      	ldr	r2, [pc, #388]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 8003466:	f043 0304 	orr.w	r3, r3, #4
 800346a:	6713      	str	r3, [r2, #112]	; 0x70
 800346c:	4b5f      	ldr	r3, [pc, #380]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 800346e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003470:	4a5e      	ldr	r2, [pc, #376]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 8003472:	f043 0301 	orr.w	r3, r3, #1
 8003476:	6713      	str	r3, [r2, #112]	; 0x70
 8003478:	e00b      	b.n	8003492 <HAL_RCC_OscConfig+0x376>
 800347a:	4b5c      	ldr	r3, [pc, #368]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 800347c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347e:	4a5b      	ldr	r2, [pc, #364]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 8003480:	f023 0301 	bic.w	r3, r3, #1
 8003484:	6713      	str	r3, [r2, #112]	; 0x70
 8003486:	4b59      	ldr	r3, [pc, #356]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 8003488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348a:	4a58      	ldr	r2, [pc, #352]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 800348c:	f023 0304 	bic.w	r3, r3, #4
 8003490:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d015      	beq.n	80034c6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349a:	f7fe fe05 	bl	80020a8 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a0:	e00a      	b.n	80034b8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a2:	f7fe fe01 	bl	80020a8 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e0d8      	b.n	800366a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b8:	4b4c      	ldr	r3, [pc, #304]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 80034ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d0ee      	beq.n	80034a2 <HAL_RCC_OscConfig+0x386>
 80034c4:	e014      	b.n	80034f0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c6:	f7fe fdef 	bl	80020a8 <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034cc:	e00a      	b.n	80034e4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ce:	f7fe fdeb 	bl	80020a8 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034dc:	4293      	cmp	r3, r2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e0c2      	b.n	800366a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034e4:	4b41      	ldr	r3, [pc, #260]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 80034e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1ee      	bne.n	80034ce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034f0:	7dfb      	ldrb	r3, [r7, #23]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d105      	bne.n	8003502 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034f6:	4b3d      	ldr	r3, [pc, #244]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	4a3c      	ldr	r2, [pc, #240]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 80034fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003500:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 80ae 	beq.w	8003668 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800350c:	4b37      	ldr	r3, [pc, #220]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 030c 	and.w	r3, r3, #12
 8003514:	2b08      	cmp	r3, #8
 8003516:	d06d      	beq.n	80035f4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	2b02      	cmp	r3, #2
 800351e:	d14b      	bne.n	80035b8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003520:	4b32      	ldr	r3, [pc, #200]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a31      	ldr	r2, [pc, #196]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 8003526:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800352a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352c:	f7fe fdbc 	bl	80020a8 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003534:	f7fe fdb8 	bl	80020a8 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e091      	b.n	800366a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003546:	4b29      	ldr	r3, [pc, #164]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f0      	bne.n	8003534 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69da      	ldr	r2, [r3, #28]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	019b      	lsls	r3, r3, #6
 8003562:	431a      	orrs	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003568:	085b      	lsrs	r3, r3, #1
 800356a:	3b01      	subs	r3, #1
 800356c:	041b      	lsls	r3, r3, #16
 800356e:	431a      	orrs	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003574:	061b      	lsls	r3, r3, #24
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357c:	071b      	lsls	r3, r3, #28
 800357e:	491b      	ldr	r1, [pc, #108]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 8003580:	4313      	orrs	r3, r2
 8003582:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003584:	4b19      	ldr	r3, [pc, #100]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a18      	ldr	r2, [pc, #96]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 800358a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800358e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003590:	f7fe fd8a 	bl	80020a8 <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003598:	f7fe fd86 	bl	80020a8 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e05f      	b.n	800366a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035aa:	4b10      	ldr	r3, [pc, #64]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0f0      	beq.n	8003598 <HAL_RCC_OscConfig+0x47c>
 80035b6:	e057      	b.n	8003668 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b8:	4b0c      	ldr	r3, [pc, #48]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a0b      	ldr	r2, [pc, #44]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 80035be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c4:	f7fe fd70 	bl	80020a8 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035cc:	f7fe fd6c 	bl	80020a8 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e045      	b.n	800366a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035de:	4b03      	ldr	r3, [pc, #12]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0x4b0>
 80035ea:	e03d      	b.n	8003668 <HAL_RCC_OscConfig+0x54c>
 80035ec:	40023800 	.word	0x40023800
 80035f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80035f4:	4b1f      	ldr	r3, [pc, #124]	; (8003674 <HAL_RCC_OscConfig+0x558>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d030      	beq.n	8003664 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800360c:	429a      	cmp	r2, r3
 800360e:	d129      	bne.n	8003664 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800361a:	429a      	cmp	r2, r3
 800361c:	d122      	bne.n	8003664 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003624:	4013      	ands	r3, r2
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800362a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800362c:	4293      	cmp	r3, r2
 800362e:	d119      	bne.n	8003664 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363a:	085b      	lsrs	r3, r3, #1
 800363c:	3b01      	subs	r3, #1
 800363e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003640:	429a      	cmp	r2, r3
 8003642:	d10f      	bne.n	8003664 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003650:	429a      	cmp	r2, r3
 8003652:	d107      	bne.n	8003664 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003660:	429a      	cmp	r2, r3
 8003662:	d001      	beq.n	8003668 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e000      	b.n	800366a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	40023800 	.word	0x40023800

08003678 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003682:	2300      	movs	r3, #0
 8003684:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e0d0      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003690:	4b6a      	ldr	r3, [pc, #424]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 030f 	and.w	r3, r3, #15
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	429a      	cmp	r2, r3
 800369c:	d910      	bls.n	80036c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369e:	4b67      	ldr	r3, [pc, #412]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f023 020f 	bic.w	r2, r3, #15
 80036a6:	4965      	ldr	r1, [pc, #404]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ae:	4b63      	ldr	r3, [pc, #396]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d001      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e0b8      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d020      	beq.n	800370e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d005      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036d8:	4b59      	ldr	r3, [pc, #356]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	4a58      	ldr	r2, [pc, #352]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 80036de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0308 	and.w	r3, r3, #8
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d005      	beq.n	80036fc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036f0:	4b53      	ldr	r3, [pc, #332]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	4a52      	ldr	r2, [pc, #328]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 80036f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036fc:	4b50      	ldr	r3, [pc, #320]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	494d      	ldr	r1, [pc, #308]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 800370a:	4313      	orrs	r3, r2
 800370c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d040      	beq.n	800379c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d107      	bne.n	8003732 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003722:	4b47      	ldr	r3, [pc, #284]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d115      	bne.n	800375a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e07f      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b02      	cmp	r3, #2
 8003738:	d107      	bne.n	800374a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800373a:	4b41      	ldr	r3, [pc, #260]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d109      	bne.n	800375a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e073      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800374a:	4b3d      	ldr	r3, [pc, #244]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e06b      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800375a:	4b39      	ldr	r3, [pc, #228]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f023 0203 	bic.w	r2, r3, #3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	4936      	ldr	r1, [pc, #216]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 8003768:	4313      	orrs	r3, r2
 800376a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800376c:	f7fe fc9c 	bl	80020a8 <HAL_GetTick>
 8003770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003772:	e00a      	b.n	800378a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003774:	f7fe fc98 	bl	80020a8 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003782:	4293      	cmp	r3, r2
 8003784:	d901      	bls.n	800378a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e053      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800378a:	4b2d      	ldr	r3, [pc, #180]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 020c 	and.w	r2, r3, #12
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	429a      	cmp	r2, r3
 800379a:	d1eb      	bne.n	8003774 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800379c:	4b27      	ldr	r3, [pc, #156]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 030f 	and.w	r3, r3, #15
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d210      	bcs.n	80037cc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037aa:	4b24      	ldr	r3, [pc, #144]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f023 020f 	bic.w	r2, r3, #15
 80037b2:	4922      	ldr	r1, [pc, #136]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ba:	4b20      	ldr	r3, [pc, #128]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d001      	beq.n	80037cc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e032      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d008      	beq.n	80037ea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037d8:	4b19      	ldr	r3, [pc, #100]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	4916      	ldr	r1, [pc, #88]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d009      	beq.n	800380a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037f6:	4b12      	ldr	r3, [pc, #72]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	490e      	ldr	r1, [pc, #56]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 8003806:	4313      	orrs	r3, r2
 8003808:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800380a:	f000 f821 	bl	8003850 <HAL_RCC_GetSysClockFreq>
 800380e:	4602      	mov	r2, r0
 8003810:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	091b      	lsrs	r3, r3, #4
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	490a      	ldr	r1, [pc, #40]	; (8003844 <HAL_RCC_ClockConfig+0x1cc>)
 800381c:	5ccb      	ldrb	r3, [r1, r3]
 800381e:	fa22 f303 	lsr.w	r3, r2, r3
 8003822:	4a09      	ldr	r2, [pc, #36]	; (8003848 <HAL_RCC_ClockConfig+0x1d0>)
 8003824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003826:	4b09      	ldr	r3, [pc, #36]	; (800384c <HAL_RCC_ClockConfig+0x1d4>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f7fe fbf8 	bl	8002020 <HAL_InitTick>

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40023c00 	.word	0x40023c00
 8003840:	40023800 	.word	0x40023800
 8003844:	080092b8 	.word	0x080092b8
 8003848:	20000004 	.word	0x20000004
 800384c:	2000000c 	.word	0x2000000c

08003850 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003854:	b094      	sub	sp, #80	; 0x50
 8003856:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003858:	2300      	movs	r3, #0
 800385a:	647b      	str	r3, [r7, #68]	; 0x44
 800385c:	2300      	movs	r3, #0
 800385e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003860:	2300      	movs	r3, #0
 8003862:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003864:	2300      	movs	r3, #0
 8003866:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003868:	4b79      	ldr	r3, [pc, #484]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x200>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f003 030c 	and.w	r3, r3, #12
 8003870:	2b08      	cmp	r3, #8
 8003872:	d00d      	beq.n	8003890 <HAL_RCC_GetSysClockFreq+0x40>
 8003874:	2b08      	cmp	r3, #8
 8003876:	f200 80e1 	bhi.w	8003a3c <HAL_RCC_GetSysClockFreq+0x1ec>
 800387a:	2b00      	cmp	r3, #0
 800387c:	d002      	beq.n	8003884 <HAL_RCC_GetSysClockFreq+0x34>
 800387e:	2b04      	cmp	r3, #4
 8003880:	d003      	beq.n	800388a <HAL_RCC_GetSysClockFreq+0x3a>
 8003882:	e0db      	b.n	8003a3c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003884:	4b73      	ldr	r3, [pc, #460]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x204>)
 8003886:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003888:	e0db      	b.n	8003a42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800388a:	4b73      	ldr	r3, [pc, #460]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x208>)
 800388c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800388e:	e0d8      	b.n	8003a42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003890:	4b6f      	ldr	r3, [pc, #444]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x200>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003898:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800389a:	4b6d      	ldr	r3, [pc, #436]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x200>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d063      	beq.n	800396e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038a6:	4b6a      	ldr	r3, [pc, #424]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x200>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	099b      	lsrs	r3, r3, #6
 80038ac:	2200      	movs	r2, #0
 80038ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80038b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80038b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038b8:	633b      	str	r3, [r7, #48]	; 0x30
 80038ba:	2300      	movs	r3, #0
 80038bc:	637b      	str	r3, [r7, #52]	; 0x34
 80038be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80038c2:	4622      	mov	r2, r4
 80038c4:	462b      	mov	r3, r5
 80038c6:	f04f 0000 	mov.w	r0, #0
 80038ca:	f04f 0100 	mov.w	r1, #0
 80038ce:	0159      	lsls	r1, r3, #5
 80038d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038d4:	0150      	lsls	r0, r2, #5
 80038d6:	4602      	mov	r2, r0
 80038d8:	460b      	mov	r3, r1
 80038da:	4621      	mov	r1, r4
 80038dc:	1a51      	subs	r1, r2, r1
 80038de:	6139      	str	r1, [r7, #16]
 80038e0:	4629      	mov	r1, r5
 80038e2:	eb63 0301 	sbc.w	r3, r3, r1
 80038e6:	617b      	str	r3, [r7, #20]
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	f04f 0300 	mov.w	r3, #0
 80038f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038f4:	4659      	mov	r1, fp
 80038f6:	018b      	lsls	r3, r1, #6
 80038f8:	4651      	mov	r1, sl
 80038fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038fe:	4651      	mov	r1, sl
 8003900:	018a      	lsls	r2, r1, #6
 8003902:	4651      	mov	r1, sl
 8003904:	ebb2 0801 	subs.w	r8, r2, r1
 8003908:	4659      	mov	r1, fp
 800390a:	eb63 0901 	sbc.w	r9, r3, r1
 800390e:	f04f 0200 	mov.w	r2, #0
 8003912:	f04f 0300 	mov.w	r3, #0
 8003916:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800391a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800391e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003922:	4690      	mov	r8, r2
 8003924:	4699      	mov	r9, r3
 8003926:	4623      	mov	r3, r4
 8003928:	eb18 0303 	adds.w	r3, r8, r3
 800392c:	60bb      	str	r3, [r7, #8]
 800392e:	462b      	mov	r3, r5
 8003930:	eb49 0303 	adc.w	r3, r9, r3
 8003934:	60fb      	str	r3, [r7, #12]
 8003936:	f04f 0200 	mov.w	r2, #0
 800393a:	f04f 0300 	mov.w	r3, #0
 800393e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003942:	4629      	mov	r1, r5
 8003944:	024b      	lsls	r3, r1, #9
 8003946:	4621      	mov	r1, r4
 8003948:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800394c:	4621      	mov	r1, r4
 800394e:	024a      	lsls	r2, r1, #9
 8003950:	4610      	mov	r0, r2
 8003952:	4619      	mov	r1, r3
 8003954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003956:	2200      	movs	r2, #0
 8003958:	62bb      	str	r3, [r7, #40]	; 0x28
 800395a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800395c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003960:	f7fc fcc6 	bl	80002f0 <__aeabi_uldivmod>
 8003964:	4602      	mov	r2, r0
 8003966:	460b      	mov	r3, r1
 8003968:	4613      	mov	r3, r2
 800396a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800396c:	e058      	b.n	8003a20 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800396e:	4b38      	ldr	r3, [pc, #224]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x200>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	099b      	lsrs	r3, r3, #6
 8003974:	2200      	movs	r2, #0
 8003976:	4618      	mov	r0, r3
 8003978:	4611      	mov	r1, r2
 800397a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800397e:	623b      	str	r3, [r7, #32]
 8003980:	2300      	movs	r3, #0
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
 8003984:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003988:	4642      	mov	r2, r8
 800398a:	464b      	mov	r3, r9
 800398c:	f04f 0000 	mov.w	r0, #0
 8003990:	f04f 0100 	mov.w	r1, #0
 8003994:	0159      	lsls	r1, r3, #5
 8003996:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800399a:	0150      	lsls	r0, r2, #5
 800399c:	4602      	mov	r2, r0
 800399e:	460b      	mov	r3, r1
 80039a0:	4641      	mov	r1, r8
 80039a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80039a6:	4649      	mov	r1, r9
 80039a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80039ac:	f04f 0200 	mov.w	r2, #0
 80039b0:	f04f 0300 	mov.w	r3, #0
 80039b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039c0:	ebb2 040a 	subs.w	r4, r2, sl
 80039c4:	eb63 050b 	sbc.w	r5, r3, fp
 80039c8:	f04f 0200 	mov.w	r2, #0
 80039cc:	f04f 0300 	mov.w	r3, #0
 80039d0:	00eb      	lsls	r3, r5, #3
 80039d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039d6:	00e2      	lsls	r2, r4, #3
 80039d8:	4614      	mov	r4, r2
 80039da:	461d      	mov	r5, r3
 80039dc:	4643      	mov	r3, r8
 80039de:	18e3      	adds	r3, r4, r3
 80039e0:	603b      	str	r3, [r7, #0]
 80039e2:	464b      	mov	r3, r9
 80039e4:	eb45 0303 	adc.w	r3, r5, r3
 80039e8:	607b      	str	r3, [r7, #4]
 80039ea:	f04f 0200 	mov.w	r2, #0
 80039ee:	f04f 0300 	mov.w	r3, #0
 80039f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039f6:	4629      	mov	r1, r5
 80039f8:	028b      	lsls	r3, r1, #10
 80039fa:	4621      	mov	r1, r4
 80039fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a00:	4621      	mov	r1, r4
 8003a02:	028a      	lsls	r2, r1, #10
 8003a04:	4610      	mov	r0, r2
 8003a06:	4619      	mov	r1, r3
 8003a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	61bb      	str	r3, [r7, #24]
 8003a0e:	61fa      	str	r2, [r7, #28]
 8003a10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a14:	f7fc fc6c 	bl	80002f0 <__aeabi_uldivmod>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003a20:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	0c1b      	lsrs	r3, r3, #16
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003a30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a3a:	e002      	b.n	8003a42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a3c:	4b05      	ldr	r3, [pc, #20]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a3e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3750      	adds	r7, #80	; 0x50
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a4e:	bf00      	nop
 8003a50:	40023800 	.word	0x40023800
 8003a54:	00f42400 	.word	0x00f42400
 8003a58:	007a1200 	.word	0x007a1200

08003a5c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a60:	4b03      	ldr	r3, [pc, #12]	; (8003a70 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a62:	681b      	ldr	r3, [r3, #0]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	20000004 	.word	0x20000004

08003a74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a78:	f7ff fff0 	bl	8003a5c <HAL_RCC_GetHCLKFreq>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	4b05      	ldr	r3, [pc, #20]	; (8003a94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	0a9b      	lsrs	r3, r3, #10
 8003a84:	f003 0307 	and.w	r3, r3, #7
 8003a88:	4903      	ldr	r1, [pc, #12]	; (8003a98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a8a:	5ccb      	ldrb	r3, [r1, r3]
 8003a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40023800 	.word	0x40023800
 8003a98:	080092c8 	.word	0x080092c8

08003a9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003aa0:	f7ff ffdc 	bl	8003a5c <HAL_RCC_GetHCLKFreq>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	4b05      	ldr	r3, [pc, #20]	; (8003abc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	0b5b      	lsrs	r3, r3, #13
 8003aac:	f003 0307 	and.w	r3, r3, #7
 8003ab0:	4903      	ldr	r1, [pc, #12]	; (8003ac0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ab2:	5ccb      	ldrb	r3, [r1, r3]
 8003ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	080092c8 	.word	0x080092c8

08003ac4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b088      	sub	sp, #32
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003acc:	2300      	movs	r3, #0
 8003ace:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003adc:	2300      	movs	r3, #0
 8003ade:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d012      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003aec:	4b69      	ldr	r3, [pc, #420]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	4a68      	ldr	r2, [pc, #416]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003af2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003af6:	6093      	str	r3, [r2, #8]
 8003af8:	4b66      	ldr	r3, [pc, #408]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b00:	4964      	ldr	r1, [pc, #400]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d017      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b1e:	4b5d      	ldr	r3, [pc, #372]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2c:	4959      	ldr	r1, [pc, #356]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b3c:	d101      	bne.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d017      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b5a:	4b4e      	ldr	r3, [pc, #312]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b68:	494a      	ldr	r1, [pc, #296]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b78:	d101      	bne.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003b86:	2301      	movs	r3, #1
 8003b88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003b96:	2301      	movs	r3, #1
 8003b98:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0320 	and.w	r3, r3, #32
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 808b 	beq.w	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ba8:	4b3a      	ldr	r3, [pc, #232]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bac:	4a39      	ldr	r2, [pc, #228]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bb2:	6413      	str	r3, [r2, #64]	; 0x40
 8003bb4:	4b37      	ldr	r3, [pc, #220]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bbc:	60bb      	str	r3, [r7, #8]
 8003bbe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003bc0:	4b35      	ldr	r3, [pc, #212]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a34      	ldr	r2, [pc, #208]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bcc:	f7fe fa6c 	bl	80020a8 <HAL_GetTick>
 8003bd0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd4:	f7fe fa68 	bl	80020a8 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b64      	cmp	r3, #100	; 0x64
 8003be0:	d901      	bls.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e38f      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003be6:	4b2c      	ldr	r3, [pc, #176]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0f0      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bf2:	4b28      	ldr	r3, [pc, #160]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bfa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d035      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d02e      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c10:	4b20      	ldr	r3, [pc, #128]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c18:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c1a:	4b1e      	ldr	r3, [pc, #120]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1e:	4a1d      	ldr	r2, [pc, #116]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c24:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c26:	4b1b      	ldr	r3, [pc, #108]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2a:	4a1a      	ldr	r2, [pc, #104]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c30:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003c32:	4a18      	ldr	r2, [pc, #96]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c38:	4b16      	ldr	r3, [pc, #88]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d114      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c44:	f7fe fa30 	bl	80020a8 <HAL_GetTick>
 8003c48:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4a:	e00a      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c4c:	f7fe fa2c 	bl	80020a8 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e351      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c62:	4b0c      	ldr	r3, [pc, #48]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0ee      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c7a:	d111      	bne.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003c7c:	4b05      	ldr	r3, [pc, #20]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c88:	4b04      	ldr	r3, [pc, #16]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003c8a:	400b      	ands	r3, r1
 8003c8c:	4901      	ldr	r1, [pc, #4]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	608b      	str	r3, [r1, #8]
 8003c92:	e00b      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003c94:	40023800 	.word	0x40023800
 8003c98:	40007000 	.word	0x40007000
 8003c9c:	0ffffcff 	.word	0x0ffffcff
 8003ca0:	4bac      	ldr	r3, [pc, #688]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	4aab      	ldr	r2, [pc, #684]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ca6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003caa:	6093      	str	r3, [r2, #8]
 8003cac:	4ba9      	ldr	r3, [pc, #676]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cb8:	49a6      	ldr	r1, [pc, #664]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0310 	and.w	r3, r3, #16
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d010      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003cca:	4ba2      	ldr	r3, [pc, #648]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cd0:	4aa0      	ldr	r2, [pc, #640]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cd6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003cda:	4b9e      	ldr	r3, [pc, #632]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cdc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce4:	499b      	ldr	r1, [pc, #620]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00a      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cf8:	4b96      	ldr	r3, [pc, #600]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d06:	4993      	ldr	r1, [pc, #588]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00a      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d1a:	4b8e      	ldr	r3, [pc, #568]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d28:	498a      	ldr	r1, [pc, #552]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00a      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d3c:	4b85      	ldr	r3, [pc, #532]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d4a:	4982      	ldr	r1, [pc, #520]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d5e:	4b7d      	ldr	r3, [pc, #500]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d64:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6c:	4979      	ldr	r1, [pc, #484]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00a      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d80:	4b74      	ldr	r3, [pc, #464]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d86:	f023 0203 	bic.w	r2, r3, #3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8e:	4971      	ldr	r1, [pc, #452]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003da2:	4b6c      	ldr	r3, [pc, #432]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da8:	f023 020c 	bic.w	r2, r3, #12
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db0:	4968      	ldr	r1, [pc, #416]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00a      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003dc4:	4b63      	ldr	r3, [pc, #396]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd2:	4960      	ldr	r1, [pc, #384]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00a      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003de6:	4b5b      	ldr	r3, [pc, #364]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df4:	4957      	ldr	r1, [pc, #348]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00a      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e08:	4b52      	ldr	r3, [pc, #328]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e16:	494f      	ldr	r1, [pc, #316]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00a      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003e2a:	4b4a      	ldr	r3, [pc, #296]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e30:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e38:	4946      	ldr	r1, [pc, #280]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00a      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003e4c:	4b41      	ldr	r3, [pc, #260]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e52:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e5a:	493e      	ldr	r1, [pc, #248]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00a      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003e6e:	4b39      	ldr	r3, [pc, #228]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e7c:	4935      	ldr	r1, [pc, #212]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00a      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e90:	4b30      	ldr	r3, [pc, #192]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e96:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e9e:	492d      	ldr	r1, [pc, #180]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d011      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003eb2:	4b28      	ldr	r3, [pc, #160]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ec0:	4924      	ldr	r1, [pc, #144]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ecc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ed0:	d101      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0308 	and.w	r3, r3, #8
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00a      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ef2:	4b18      	ldr	r3, [pc, #96]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f00:	4914      	ldr	r1, [pc, #80]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00b      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f14:	4b0f      	ldr	r3, [pc, #60]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f24:	490b      	ldr	r1, [pc, #44]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00f      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003f38:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f3e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f48:	4902      	ldr	r1, [pc, #8]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f50:	e002      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003f52:	bf00      	nop
 8003f54:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00b      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f64:	4b8a      	ldr	r3, [pc, #552]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f6a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f74:	4986      	ldr	r1, [pc, #536]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00b      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003f88:	4b81      	ldr	r3, [pc, #516]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f8e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f98:	497d      	ldr	r1, [pc, #500]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d006      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 80d6 	beq.w	8004160 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003fb4:	4b76      	ldr	r3, [pc, #472]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a75      	ldr	r2, [pc, #468]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fc0:	f7fe f872 	bl	80020a8 <HAL_GetTick>
 8003fc4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fc6:	e008      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003fc8:	f7fe f86e 	bl	80020a8 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b64      	cmp	r3, #100	; 0x64
 8003fd4:	d901      	bls.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e195      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fda:	4b6d      	ldr	r3, [pc, #436]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1f0      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d021      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d11d      	bne.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ffa:	4b65      	ldr	r3, [pc, #404]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004000:	0c1b      	lsrs	r3, r3, #16
 8004002:	f003 0303 	and.w	r3, r3, #3
 8004006:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004008:	4b61      	ldr	r3, [pc, #388]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800400a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800400e:	0e1b      	lsrs	r3, r3, #24
 8004010:	f003 030f 	and.w	r3, r3, #15
 8004014:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	019a      	lsls	r2, r3, #6
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	041b      	lsls	r3, r3, #16
 8004020:	431a      	orrs	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	061b      	lsls	r3, r3, #24
 8004026:	431a      	orrs	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	071b      	lsls	r3, r3, #28
 800402e:	4958      	ldr	r1, [pc, #352]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004030:	4313      	orrs	r3, r2
 8004032:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d004      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004046:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800404a:	d00a      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004054:	2b00      	cmp	r3, #0
 8004056:	d02e      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004060:	d129      	bne.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004062:	4b4b      	ldr	r3, [pc, #300]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004064:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004068:	0c1b      	lsrs	r3, r3, #16
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004070:	4b47      	ldr	r3, [pc, #284]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004076:	0f1b      	lsrs	r3, r3, #28
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	019a      	lsls	r2, r3, #6
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	041b      	lsls	r3, r3, #16
 8004088:	431a      	orrs	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	061b      	lsls	r3, r3, #24
 8004090:	431a      	orrs	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	071b      	lsls	r3, r3, #28
 8004096:	493e      	ldr	r1, [pc, #248]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004098:	4313      	orrs	r3, r2
 800409a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800409e:	4b3c      	ldr	r3, [pc, #240]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040a4:	f023 021f 	bic.w	r2, r3, #31
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ac:	3b01      	subs	r3, #1
 80040ae:	4938      	ldr	r1, [pc, #224]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d01d      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040c2:	4b33      	ldr	r3, [pc, #204]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040c8:	0e1b      	lsrs	r3, r3, #24
 80040ca:	f003 030f 	and.w	r3, r3, #15
 80040ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040d0:	4b2f      	ldr	r3, [pc, #188]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040d6:	0f1b      	lsrs	r3, r3, #28
 80040d8:	f003 0307 	and.w	r3, r3, #7
 80040dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	019a      	lsls	r2, r3, #6
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	041b      	lsls	r3, r3, #16
 80040ea:	431a      	orrs	r2, r3
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	061b      	lsls	r3, r3, #24
 80040f0:	431a      	orrs	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	071b      	lsls	r3, r3, #28
 80040f6:	4926      	ldr	r1, [pc, #152]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d011      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	019a      	lsls	r2, r3, #6
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	041b      	lsls	r3, r3, #16
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	061b      	lsls	r3, r3, #24
 800411e:	431a      	orrs	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	071b      	lsls	r3, r3, #28
 8004126:	491a      	ldr	r1, [pc, #104]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004128:	4313      	orrs	r3, r2
 800412a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800412e:	4b18      	ldr	r3, [pc, #96]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a17      	ldr	r2, [pc, #92]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004134:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004138:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800413a:	f7fd ffb5 	bl	80020a8 <HAL_GetTick>
 800413e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004140:	e008      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004142:	f7fd ffb1 	bl	80020a8 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b64      	cmp	r3, #100	; 0x64
 800414e:	d901      	bls.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e0d8      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004154:	4b0e      	ldr	r3, [pc, #56]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d0f0      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	2b01      	cmp	r3, #1
 8004164:	f040 80ce 	bne.w	8004304 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004168:	4b09      	ldr	r3, [pc, #36]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a08      	ldr	r2, [pc, #32]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800416e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004172:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004174:	f7fd ff98 	bl	80020a8 <HAL_GetTick>
 8004178:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800417a:	e00b      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800417c:	f7fd ff94 	bl	80020a8 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b64      	cmp	r3, #100	; 0x64
 8004188:	d904      	bls.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e0bb      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800418e:	bf00      	nop
 8004190:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004194:	4b5e      	ldr	r3, [pc, #376]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800419c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041a0:	d0ec      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d009      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d02e      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d12a      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041ca:	4b51      	ldr	r3, [pc, #324]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d0:	0c1b      	lsrs	r3, r3, #16
 80041d2:	f003 0303 	and.w	r3, r3, #3
 80041d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80041d8:	4b4d      	ldr	r3, [pc, #308]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041de:	0f1b      	lsrs	r3, r3, #28
 80041e0:	f003 0307 	and.w	r3, r3, #7
 80041e4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	019a      	lsls	r2, r3, #6
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	041b      	lsls	r3, r3, #16
 80041f0:	431a      	orrs	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	061b      	lsls	r3, r3, #24
 80041f8:	431a      	orrs	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	071b      	lsls	r3, r3, #28
 80041fe:	4944      	ldr	r1, [pc, #272]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004200:	4313      	orrs	r3, r2
 8004202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004206:	4b42      	ldr	r3, [pc, #264]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004208:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800420c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004214:	3b01      	subs	r3, #1
 8004216:	021b      	lsls	r3, r3, #8
 8004218:	493d      	ldr	r1, [pc, #244]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800421a:	4313      	orrs	r3, r2
 800421c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d022      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004230:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004234:	d11d      	bne.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004236:	4b36      	ldr	r3, [pc, #216]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423c:	0e1b      	lsrs	r3, r3, #24
 800423e:	f003 030f 	and.w	r3, r3, #15
 8004242:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004244:	4b32      	ldr	r3, [pc, #200]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424a:	0f1b      	lsrs	r3, r3, #28
 800424c:	f003 0307 	and.w	r3, r3, #7
 8004250:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	019a      	lsls	r2, r3, #6
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	041b      	lsls	r3, r3, #16
 800425e:	431a      	orrs	r2, r3
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	061b      	lsls	r3, r3, #24
 8004264:	431a      	orrs	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	071b      	lsls	r3, r3, #28
 800426a:	4929      	ldr	r1, [pc, #164]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800426c:	4313      	orrs	r3, r2
 800426e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0308 	and.w	r3, r3, #8
 800427a:	2b00      	cmp	r3, #0
 800427c:	d028      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800427e:	4b24      	ldr	r3, [pc, #144]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004284:	0e1b      	lsrs	r3, r3, #24
 8004286:	f003 030f 	and.w	r3, r3, #15
 800428a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800428c:	4b20      	ldr	r3, [pc, #128]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800428e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004292:	0c1b      	lsrs	r3, r3, #16
 8004294:	f003 0303 	and.w	r3, r3, #3
 8004298:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	019a      	lsls	r2, r3, #6
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	041b      	lsls	r3, r3, #16
 80042a4:	431a      	orrs	r2, r3
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	061b      	lsls	r3, r3, #24
 80042aa:	431a      	orrs	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	69db      	ldr	r3, [r3, #28]
 80042b0:	071b      	lsls	r3, r3, #28
 80042b2:	4917      	ldr	r1, [pc, #92]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80042ba:	4b15      	ldr	r3, [pc, #84]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c8:	4911      	ldr	r1, [pc, #68]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80042d0:	4b0f      	ldr	r3, [pc, #60]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a0e      	ldr	r2, [pc, #56]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042dc:	f7fd fee4 	bl	80020a8 <HAL_GetTick>
 80042e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042e2:	e008      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042e4:	f7fd fee0 	bl	80020a8 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b64      	cmp	r3, #100	; 0x64
 80042f0:	d901      	bls.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e007      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042f6:	4b06      	ldr	r3, [pc, #24]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004302:	d1ef      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3720      	adds	r7, #32
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	40023800 	.word	0x40023800

08004314 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e01c      	b.n	8004360 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	795b      	ldrb	r3, [r3, #5]
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b00      	cmp	r3, #0
 800432e:	d105      	bne.n	800433c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f7fc fde8 	bl	8000f0c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2202      	movs	r2, #2
 8004340:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f042 0204 	orr.w	r2, r2, #4
 8004350:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3708      	adds	r7, #8
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e09d      	b.n	80044b6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437e:	2b00      	cmp	r3, #0
 8004380:	d108      	bne.n	8004394 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800438a:	d009      	beq.n	80043a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	61da      	str	r2, [r3, #28]
 8004392:	e005      	b.n	80043a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d106      	bne.n	80043c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7fc fe18 	bl	8000ff0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2202      	movs	r2, #2
 80043c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043e0:	d902      	bls.n	80043e8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80043e2:	2300      	movs	r3, #0
 80043e4:	60fb      	str	r3, [r7, #12]
 80043e6:	e002      	b.n	80043ee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80043e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043ec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80043f6:	d007      	beq.n	8004408 <HAL_SPI_Init+0xa0>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004400:	d002      	beq.n	8004408 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004418:	431a      	orrs	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	431a      	orrs	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004436:	431a      	orrs	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	69db      	ldr	r3, [r3, #28]
 800443c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004440:	431a      	orrs	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800444a:	ea42 0103 	orr.w	r1, r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004452:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	0c1b      	lsrs	r3, r3, #16
 8004464:	f003 0204 	and.w	r2, r3, #4
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	f003 0310 	and.w	r3, r3, #16
 8004470:	431a      	orrs	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004476:	f003 0308 	and.w	r3, r3, #8
 800447a:	431a      	orrs	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004484:	ea42 0103 	orr.w	r1, r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	69da      	ldr	r2, [r3, #28]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b088      	sub	sp, #32
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	60f8      	str	r0, [r7, #12]
 80044c6:	60b9      	str	r1, [r7, #8]
 80044c8:	603b      	str	r3, [r7, #0]
 80044ca:	4613      	mov	r3, r2
 80044cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044ce:	2300      	movs	r3, #0
 80044d0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d101      	bne.n	80044e0 <HAL_SPI_Transmit+0x22>
 80044dc:	2302      	movs	r3, #2
 80044de:	e158      	b.n	8004792 <HAL_SPI_Transmit+0x2d4>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044e8:	f7fd fdde 	bl	80020a8 <HAL_GetTick>
 80044ec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80044ee:	88fb      	ldrh	r3, [r7, #6]
 80044f0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d002      	beq.n	8004504 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80044fe:	2302      	movs	r3, #2
 8004500:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004502:	e13d      	b.n	8004780 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d002      	beq.n	8004510 <HAL_SPI_Transmit+0x52>
 800450a:	88fb      	ldrh	r3, [r7, #6]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d102      	bne.n	8004516 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004514:	e134      	b.n	8004780 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2203      	movs	r2, #3
 800451a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	88fa      	ldrh	r2, [r7, #6]
 800452e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	88fa      	ldrh	r2, [r7, #6]
 8004534:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004560:	d10f      	bne.n	8004582 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004570:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004580:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458c:	2b40      	cmp	r3, #64	; 0x40
 800458e:	d007      	beq.n	80045a0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800459e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045a8:	d94b      	bls.n	8004642 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d002      	beq.n	80045b8 <HAL_SPI_Transmit+0xfa>
 80045b2:	8afb      	ldrh	r3, [r7, #22]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d13e      	bne.n	8004636 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045bc:	881a      	ldrh	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c8:	1c9a      	adds	r2, r3, #2
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	3b01      	subs	r3, #1
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80045dc:	e02b      	b.n	8004636 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d112      	bne.n	8004612 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f0:	881a      	ldrh	r2, [r3, #0]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fc:	1c9a      	adds	r2, r3, #2
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004606:	b29b      	uxth	r3, r3
 8004608:	3b01      	subs	r3, #1
 800460a:	b29a      	uxth	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004610:	e011      	b.n	8004636 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004612:	f7fd fd49 	bl	80020a8 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	429a      	cmp	r2, r3
 8004620:	d803      	bhi.n	800462a <HAL_SPI_Transmit+0x16c>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004628:	d102      	bne.n	8004630 <HAL_SPI_Transmit+0x172>
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d102      	bne.n	8004636 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004634:	e0a4      	b.n	8004780 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800463a:	b29b      	uxth	r3, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1ce      	bne.n	80045de <HAL_SPI_Transmit+0x120>
 8004640:	e07c      	b.n	800473c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d002      	beq.n	8004650 <HAL_SPI_Transmit+0x192>
 800464a:	8afb      	ldrh	r3, [r7, #22]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d170      	bne.n	8004732 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004654:	b29b      	uxth	r3, r3
 8004656:	2b01      	cmp	r3, #1
 8004658:	d912      	bls.n	8004680 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465e:	881a      	ldrh	r2, [r3, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466a:	1c9a      	adds	r2, r3, #2
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004674:	b29b      	uxth	r3, r3
 8004676:	3b02      	subs	r3, #2
 8004678:	b29a      	uxth	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800467e:	e058      	b.n	8004732 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	330c      	adds	r3, #12
 800468a:	7812      	ldrb	r2, [r2, #0]
 800468c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004692:	1c5a      	adds	r2, r3, #1
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800469c:	b29b      	uxth	r3, r3
 800469e:	3b01      	subs	r3, #1
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80046a6:	e044      	b.n	8004732 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d12b      	bne.n	800470e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d912      	bls.n	80046e6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c4:	881a      	ldrh	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d0:	1c9a      	adds	r2, r3, #2
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046da:	b29b      	uxth	r3, r3
 80046dc:	3b02      	subs	r3, #2
 80046de:	b29a      	uxth	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046e4:	e025      	b.n	8004732 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	330c      	adds	r3, #12
 80046f0:	7812      	ldrb	r2, [r2, #0]
 80046f2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004702:	b29b      	uxth	r3, r3
 8004704:	3b01      	subs	r3, #1
 8004706:	b29a      	uxth	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800470c:	e011      	b.n	8004732 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800470e:	f7fd fccb 	bl	80020a8 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	429a      	cmp	r2, r3
 800471c:	d803      	bhi.n	8004726 <HAL_SPI_Transmit+0x268>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004724:	d102      	bne.n	800472c <HAL_SPI_Transmit+0x26e>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d102      	bne.n	8004732 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004730:	e026      	b.n	8004780 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004736:	b29b      	uxth	r3, r3
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1b5      	bne.n	80046a8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	6839      	ldr	r1, [r7, #0]
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f000 f949 	bl	80049d8 <SPI_EndRxTxTransaction>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d002      	beq.n	8004752 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2220      	movs	r2, #32
 8004750:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10a      	bne.n	8004770 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800475a:	2300      	movs	r3, #0
 800475c:	613b      	str	r3, [r7, #16]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	613b      	str	r3, [r7, #16]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	613b      	str	r3, [r7, #16]
 800476e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004774:	2b00      	cmp	r3, #0
 8004776:	d002      	beq.n	800477e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	77fb      	strb	r3, [r7, #31]
 800477c:	e000      	b.n	8004780 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800477e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004790:	7ffb      	ldrb	r3, [r7, #31]
}
 8004792:	4618      	mov	r0, r3
 8004794:	3720      	adds	r7, #32
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
	...

0800479c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b088      	sub	sp, #32
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	603b      	str	r3, [r7, #0]
 80047a8:	4613      	mov	r3, r2
 80047aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80047ac:	f7fd fc7c 	bl	80020a8 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b4:	1a9b      	subs	r3, r3, r2
 80047b6:	683a      	ldr	r2, [r7, #0]
 80047b8:	4413      	add	r3, r2
 80047ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80047bc:	f7fd fc74 	bl	80020a8 <HAL_GetTick>
 80047c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80047c2:	4b39      	ldr	r3, [pc, #228]	; (80048a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	015b      	lsls	r3, r3, #5
 80047c8:	0d1b      	lsrs	r3, r3, #20
 80047ca:	69fa      	ldr	r2, [r7, #28]
 80047cc:	fb02 f303 	mul.w	r3, r2, r3
 80047d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047d2:	e054      	b.n	800487e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047da:	d050      	beq.n	800487e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047dc:	f7fd fc64 	bl	80020a8 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	69fa      	ldr	r2, [r7, #28]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d902      	bls.n	80047f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d13d      	bne.n	800486e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004800:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800480a:	d111      	bne.n	8004830 <SPI_WaitFlagStateUntilTimeout+0x94>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004814:	d004      	beq.n	8004820 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800481e:	d107      	bne.n	8004830 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800482e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004838:	d10f      	bne.n	800485a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004848:	601a      	str	r2, [r3, #0]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004858:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e017      	b.n	800489e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d101      	bne.n	8004878 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004874:	2300      	movs	r3, #0
 8004876:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	3b01      	subs	r3, #1
 800487c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689a      	ldr	r2, [r3, #8]
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	4013      	ands	r3, r2
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	429a      	cmp	r2, r3
 800488c:	bf0c      	ite	eq
 800488e:	2301      	moveq	r3, #1
 8004890:	2300      	movne	r3, #0
 8004892:	b2db      	uxtb	r3, r3
 8004894:	461a      	mov	r2, r3
 8004896:	79fb      	ldrb	r3, [r7, #7]
 8004898:	429a      	cmp	r2, r3
 800489a:	d19b      	bne.n	80047d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3720      	adds	r7, #32
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	20000004 	.word	0x20000004

080048ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b08a      	sub	sp, #40	; 0x28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
 80048b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80048ba:	2300      	movs	r3, #0
 80048bc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80048be:	f7fd fbf3 	bl	80020a8 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c6:	1a9b      	subs	r3, r3, r2
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	4413      	add	r3, r2
 80048cc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80048ce:	f7fd fbeb 	bl	80020a8 <HAL_GetTick>
 80048d2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	330c      	adds	r3, #12
 80048da:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80048dc:	4b3d      	ldr	r3, [pc, #244]	; (80049d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	4613      	mov	r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	4413      	add	r3, r2
 80048e6:	00da      	lsls	r2, r3, #3
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	0d1b      	lsrs	r3, r3, #20
 80048ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ee:	fb02 f303 	mul.w	r3, r2, r3
 80048f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80048f4:	e060      	b.n	80049b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80048fc:	d107      	bne.n	800490e <SPI_WaitFifoStateUntilTimeout+0x62>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d104      	bne.n	800490e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	b2db      	uxtb	r3, r3
 800490a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800490c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004914:	d050      	beq.n	80049b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004916:	f7fd fbc7 	bl	80020a8 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	6a3b      	ldr	r3, [r7, #32]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004922:	429a      	cmp	r2, r3
 8004924:	d902      	bls.n	800492c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004928:	2b00      	cmp	r3, #0
 800492a:	d13d      	bne.n	80049a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685a      	ldr	r2, [r3, #4]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800493a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004944:	d111      	bne.n	800496a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800494e:	d004      	beq.n	800495a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004958:	d107      	bne.n	800496a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004968:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004972:	d10f      	bne.n	8004994 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004992:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e010      	b.n	80049ca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80049ae:	2300      	movs	r3, #0
 80049b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	3b01      	subs	r3, #1
 80049b6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	689a      	ldr	r2, [r3, #8]
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	4013      	ands	r3, r2
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d196      	bne.n	80048f6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3728      	adds	r7, #40	; 0x28
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	20000004 	.word	0x20000004

080049d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b088      	sub	sp, #32
 80049dc:	af02      	add	r7, sp, #8
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f7ff ff5b 	bl	80048ac <SPI_WaitFifoStateUntilTimeout>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d007      	beq.n	8004a0c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a00:	f043 0220 	orr.w	r2, r3, #32
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e046      	b.n	8004a9a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004a0c:	4b25      	ldr	r3, [pc, #148]	; (8004aa4 <SPI_EndRxTxTransaction+0xcc>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a25      	ldr	r2, [pc, #148]	; (8004aa8 <SPI_EndRxTxTransaction+0xd0>)
 8004a12:	fba2 2303 	umull	r2, r3, r2, r3
 8004a16:	0d5b      	lsrs	r3, r3, #21
 8004a18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a1c:	fb02 f303 	mul.w	r3, r2, r3
 8004a20:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a2a:	d112      	bne.n	8004a52 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	9300      	str	r3, [sp, #0]
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	2200      	movs	r2, #0
 8004a34:	2180      	movs	r1, #128	; 0x80
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f7ff feb0 	bl	800479c <SPI_WaitFlagStateUntilTimeout>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d016      	beq.n	8004a70 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a46:	f043 0220 	orr.w	r2, r3, #32
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e023      	b.n	8004a9a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00a      	beq.n	8004a6e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a68:	2b80      	cmp	r3, #128	; 0x80
 8004a6a:	d0f2      	beq.n	8004a52 <SPI_EndRxTxTransaction+0x7a>
 8004a6c:	e000      	b.n	8004a70 <SPI_EndRxTxTransaction+0x98>
        break;
 8004a6e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f7ff ff15 	bl	80048ac <SPI_WaitFifoStateUntilTimeout>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d007      	beq.n	8004a98 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a8c:	f043 0220 	orr.w	r2, r3, #32
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e000      	b.n	8004a9a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3718      	adds	r7, #24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20000004 	.word	0x20000004
 8004aa8:	165e9f81 	.word	0x165e9f81

08004aac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e049      	b.n	8004b52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d106      	bne.n	8004ad8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f7fc fc7a 	bl	80013cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2202      	movs	r2, #2
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3304      	adds	r3, #4
 8004ae8:	4619      	mov	r1, r3
 8004aea:	4610      	mov	r0, r2
 8004aec:	f000 fd40 	bl	8005570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3708      	adds	r7, #8
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b082      	sub	sp, #8
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d101      	bne.n	8004b6c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e049      	b.n	8004c00 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d106      	bne.n	8004b86 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f841 	bl	8004c08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2202      	movs	r2, #2
 8004b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	3304      	adds	r3, #4
 8004b96:	4619      	mov	r1, r3
 8004b98:	4610      	mov	r0, r2
 8004b9a:	f000 fce9 	bl	8005570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d109      	bne.n	8004c40 <HAL_TIM_PWM_Start+0x24>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	bf14      	ite	ne
 8004c38:	2301      	movne	r3, #1
 8004c3a:	2300      	moveq	r3, #0
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	e03c      	b.n	8004cba <HAL_TIM_PWM_Start+0x9e>
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	2b04      	cmp	r3, #4
 8004c44:	d109      	bne.n	8004c5a <HAL_TIM_PWM_Start+0x3e>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	bf14      	ite	ne
 8004c52:	2301      	movne	r3, #1
 8004c54:	2300      	moveq	r3, #0
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	e02f      	b.n	8004cba <HAL_TIM_PWM_Start+0x9e>
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	2b08      	cmp	r3, #8
 8004c5e:	d109      	bne.n	8004c74 <HAL_TIM_PWM_Start+0x58>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	bf14      	ite	ne
 8004c6c:	2301      	movne	r3, #1
 8004c6e:	2300      	moveq	r3, #0
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	e022      	b.n	8004cba <HAL_TIM_PWM_Start+0x9e>
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	2b0c      	cmp	r3, #12
 8004c78:	d109      	bne.n	8004c8e <HAL_TIM_PWM_Start+0x72>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	bf14      	ite	ne
 8004c86:	2301      	movne	r3, #1
 8004c88:	2300      	moveq	r3, #0
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	e015      	b.n	8004cba <HAL_TIM_PWM_Start+0x9e>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b10      	cmp	r3, #16
 8004c92:	d109      	bne.n	8004ca8 <HAL_TIM_PWM_Start+0x8c>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	bf14      	ite	ne
 8004ca0:	2301      	movne	r3, #1
 8004ca2:	2300      	moveq	r3, #0
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	e008      	b.n	8004cba <HAL_TIM_PWM_Start+0x9e>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	bf14      	ite	ne
 8004cb4:	2301      	movne	r3, #1
 8004cb6:	2300      	moveq	r3, #0
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d001      	beq.n	8004cc2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e092      	b.n	8004de8 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d104      	bne.n	8004cd2 <HAL_TIM_PWM_Start+0xb6>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cd0:	e023      	b.n	8004d1a <HAL_TIM_PWM_Start+0xfe>
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	2b04      	cmp	r3, #4
 8004cd6:	d104      	bne.n	8004ce2 <HAL_TIM_PWM_Start+0xc6>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ce0:	e01b      	b.n	8004d1a <HAL_TIM_PWM_Start+0xfe>
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2b08      	cmp	r3, #8
 8004ce6:	d104      	bne.n	8004cf2 <HAL_TIM_PWM_Start+0xd6>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2202      	movs	r2, #2
 8004cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cf0:	e013      	b.n	8004d1a <HAL_TIM_PWM_Start+0xfe>
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2b0c      	cmp	r3, #12
 8004cf6:	d104      	bne.n	8004d02 <HAL_TIM_PWM_Start+0xe6>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d00:	e00b      	b.n	8004d1a <HAL_TIM_PWM_Start+0xfe>
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	2b10      	cmp	r3, #16
 8004d06:	d104      	bne.n	8004d12 <HAL_TIM_PWM_Start+0xf6>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d10:	e003      	b.n	8004d1a <HAL_TIM_PWM_Start+0xfe>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2202      	movs	r2, #2
 8004d16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	6839      	ldr	r1, [r7, #0]
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 ffbc 	bl	8005ca0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a30      	ldr	r2, [pc, #192]	; (8004df0 <HAL_TIM_PWM_Start+0x1d4>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d004      	beq.n	8004d3c <HAL_TIM_PWM_Start+0x120>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a2f      	ldr	r2, [pc, #188]	; (8004df4 <HAL_TIM_PWM_Start+0x1d8>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d101      	bne.n	8004d40 <HAL_TIM_PWM_Start+0x124>
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e000      	b.n	8004d42 <HAL_TIM_PWM_Start+0x126>
 8004d40:	2300      	movs	r3, #0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d007      	beq.n	8004d56 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a25      	ldr	r2, [pc, #148]	; (8004df0 <HAL_TIM_PWM_Start+0x1d4>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d022      	beq.n	8004da6 <HAL_TIM_PWM_Start+0x18a>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d68:	d01d      	beq.n	8004da6 <HAL_TIM_PWM_Start+0x18a>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a22      	ldr	r2, [pc, #136]	; (8004df8 <HAL_TIM_PWM_Start+0x1dc>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d018      	beq.n	8004da6 <HAL_TIM_PWM_Start+0x18a>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a20      	ldr	r2, [pc, #128]	; (8004dfc <HAL_TIM_PWM_Start+0x1e0>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d013      	beq.n	8004da6 <HAL_TIM_PWM_Start+0x18a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a1f      	ldr	r2, [pc, #124]	; (8004e00 <HAL_TIM_PWM_Start+0x1e4>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d00e      	beq.n	8004da6 <HAL_TIM_PWM_Start+0x18a>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a19      	ldr	r2, [pc, #100]	; (8004df4 <HAL_TIM_PWM_Start+0x1d8>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d009      	beq.n	8004da6 <HAL_TIM_PWM_Start+0x18a>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a1b      	ldr	r2, [pc, #108]	; (8004e04 <HAL_TIM_PWM_Start+0x1e8>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d004      	beq.n	8004da6 <HAL_TIM_PWM_Start+0x18a>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a19      	ldr	r2, [pc, #100]	; (8004e08 <HAL_TIM_PWM_Start+0x1ec>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d115      	bne.n	8004dd2 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	689a      	ldr	r2, [r3, #8]
 8004dac:	4b17      	ldr	r3, [pc, #92]	; (8004e0c <HAL_TIM_PWM_Start+0x1f0>)
 8004dae:	4013      	ands	r3, r2
 8004db0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2b06      	cmp	r3, #6
 8004db6:	d015      	beq.n	8004de4 <HAL_TIM_PWM_Start+0x1c8>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dbe:	d011      	beq.n	8004de4 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f042 0201 	orr.w	r2, r2, #1
 8004dce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dd0:	e008      	b.n	8004de4 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f042 0201 	orr.w	r2, r2, #1
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	e000      	b.n	8004de6 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004de4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	40010000 	.word	0x40010000
 8004df4:	40010400 	.word	0x40010400
 8004df8:	40000400 	.word	0x40000400
 8004dfc:	40000800 	.word	0x40000800
 8004e00:	40000c00 	.word	0x40000c00
 8004e04:	40014000 	.word	0x40014000
 8004e08:	40001800 	.word	0x40001800
 8004e0c:	00010007 	.word	0x00010007

08004e10 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	6839      	ldr	r1, [r7, #0]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 ff3c 	bl	8005ca0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a36      	ldr	r2, [pc, #216]	; (8004f08 <HAL_TIM_PWM_Stop+0xf8>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d004      	beq.n	8004e3c <HAL_TIM_PWM_Stop+0x2c>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a35      	ldr	r2, [pc, #212]	; (8004f0c <HAL_TIM_PWM_Stop+0xfc>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d101      	bne.n	8004e40 <HAL_TIM_PWM_Stop+0x30>
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e000      	b.n	8004e42 <HAL_TIM_PWM_Stop+0x32>
 8004e40:	2300      	movs	r3, #0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d017      	beq.n	8004e76 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	6a1a      	ldr	r2, [r3, #32]
 8004e4c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e50:	4013      	ands	r3, r2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10f      	bne.n	8004e76 <HAL_TIM_PWM_Stop+0x66>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	6a1a      	ldr	r2, [r3, #32]
 8004e5c:	f240 4344 	movw	r3, #1092	; 0x444
 8004e60:	4013      	ands	r3, r2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d107      	bne.n	8004e76 <HAL_TIM_PWM_Stop+0x66>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	6a1a      	ldr	r2, [r3, #32]
 8004e7c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e80:	4013      	ands	r3, r2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10f      	bne.n	8004ea6 <HAL_TIM_PWM_Stop+0x96>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	6a1a      	ldr	r2, [r3, #32]
 8004e8c:	f240 4344 	movw	r3, #1092	; 0x444
 8004e90:	4013      	ands	r3, r2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d107      	bne.n	8004ea6 <HAL_TIM_PWM_Stop+0x96>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0201 	bic.w	r2, r2, #1
 8004ea4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d104      	bne.n	8004eb6 <HAL_TIM_PWM_Stop+0xa6>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004eb4:	e023      	b.n	8004efe <HAL_TIM_PWM_Stop+0xee>
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b04      	cmp	r3, #4
 8004eba:	d104      	bne.n	8004ec6 <HAL_TIM_PWM_Stop+0xb6>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ec4:	e01b      	b.n	8004efe <HAL_TIM_PWM_Stop+0xee>
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	2b08      	cmp	r3, #8
 8004eca:	d104      	bne.n	8004ed6 <HAL_TIM_PWM_Stop+0xc6>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ed4:	e013      	b.n	8004efe <HAL_TIM_PWM_Stop+0xee>
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	2b0c      	cmp	r3, #12
 8004eda:	d104      	bne.n	8004ee6 <HAL_TIM_PWM_Stop+0xd6>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ee4:	e00b      	b.n	8004efe <HAL_TIM_PWM_Stop+0xee>
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2b10      	cmp	r3, #16
 8004eea:	d104      	bne.n	8004ef6 <HAL_TIM_PWM_Stop+0xe6>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ef4:	e003      	b.n	8004efe <HAL_TIM_PWM_Stop+0xee>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	40010000 	.word	0x40010000
 8004f0c:	40010400 	.word	0x40010400

08004f10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d122      	bne.n	8004f6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d11b      	bne.n	8004f6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f06f 0202 	mvn.w	r2, #2
 8004f3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	f003 0303 	and.w	r3, r3, #3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 faee 	bl	8005534 <HAL_TIM_IC_CaptureCallback>
 8004f58:	e005      	b.n	8004f66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 fae0 	bl	8005520 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 faf1 	bl	8005548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	f003 0304 	and.w	r3, r3, #4
 8004f76:	2b04      	cmp	r3, #4
 8004f78:	d122      	bne.n	8004fc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	f003 0304 	and.w	r3, r3, #4
 8004f84:	2b04      	cmp	r3, #4
 8004f86:	d11b      	bne.n	8004fc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f06f 0204 	mvn.w	r2, #4
 8004f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2202      	movs	r2, #2
 8004f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 fac4 	bl	8005534 <HAL_TIM_IC_CaptureCallback>
 8004fac:	e005      	b.n	8004fba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 fab6 	bl	8005520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 fac7 	bl	8005548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	f003 0308 	and.w	r3, r3, #8
 8004fca:	2b08      	cmp	r3, #8
 8004fcc:	d122      	bne.n	8005014 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	f003 0308 	and.w	r3, r3, #8
 8004fd8:	2b08      	cmp	r3, #8
 8004fda:	d11b      	bne.n	8005014 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f06f 0208 	mvn.w	r2, #8
 8004fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2204      	movs	r2, #4
 8004fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	f003 0303 	and.w	r3, r3, #3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d003      	beq.n	8005002 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 fa9a 	bl	8005534 <HAL_TIM_IC_CaptureCallback>
 8005000:	e005      	b.n	800500e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 fa8c 	bl	8005520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 fa9d 	bl	8005548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	f003 0310 	and.w	r3, r3, #16
 800501e:	2b10      	cmp	r3, #16
 8005020:	d122      	bne.n	8005068 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	f003 0310 	and.w	r3, r3, #16
 800502c:	2b10      	cmp	r3, #16
 800502e:	d11b      	bne.n	8005068 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f06f 0210 	mvn.w	r2, #16
 8005038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2208      	movs	r2, #8
 800503e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	69db      	ldr	r3, [r3, #28]
 8005046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800504a:	2b00      	cmp	r3, #0
 800504c:	d003      	beq.n	8005056 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 fa70 	bl	8005534 <HAL_TIM_IC_CaptureCallback>
 8005054:	e005      	b.n	8005062 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 fa62 	bl	8005520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 fa73 	bl	8005548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	f003 0301 	and.w	r3, r3, #1
 8005072:	2b01      	cmp	r3, #1
 8005074:	d10e      	bne.n	8005094 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	f003 0301 	and.w	r3, r3, #1
 8005080:	2b01      	cmp	r3, #1
 8005082:	d107      	bne.n	8005094 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f06f 0201 	mvn.w	r2, #1
 800508c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 fa3c 	bl	800550c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800509e:	2b80      	cmp	r3, #128	; 0x80
 80050a0:	d10e      	bne.n	80050c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ac:	2b80      	cmp	r3, #128	; 0x80
 80050ae:	d107      	bne.n	80050c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 feae 	bl	8005e1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ce:	d10e      	bne.n	80050ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050da:	2b80      	cmp	r3, #128	; 0x80
 80050dc:	d107      	bne.n	80050ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80050e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 fea1 	bl	8005e30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f8:	2b40      	cmp	r3, #64	; 0x40
 80050fa:	d10e      	bne.n	800511a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005106:	2b40      	cmp	r3, #64	; 0x40
 8005108:	d107      	bne.n	800511a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 fa21 	bl	800555c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	f003 0320 	and.w	r3, r3, #32
 8005124:	2b20      	cmp	r3, #32
 8005126:	d10e      	bne.n	8005146 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	f003 0320 	and.w	r3, r3, #32
 8005132:	2b20      	cmp	r3, #32
 8005134:	d107      	bne.n	8005146 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f06f 0220 	mvn.w	r2, #32
 800513e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 fe61 	bl	8005e08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005146:	bf00      	nop
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
	...

08005150 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800515c:	2300      	movs	r3, #0
 800515e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005166:	2b01      	cmp	r3, #1
 8005168:	d101      	bne.n	800516e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800516a:	2302      	movs	r3, #2
 800516c:	e0ff      	b.n	800536e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2b14      	cmp	r3, #20
 800517a:	f200 80f0 	bhi.w	800535e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800517e:	a201      	add	r2, pc, #4	; (adr r2, 8005184 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005184:	080051d9 	.word	0x080051d9
 8005188:	0800535f 	.word	0x0800535f
 800518c:	0800535f 	.word	0x0800535f
 8005190:	0800535f 	.word	0x0800535f
 8005194:	08005219 	.word	0x08005219
 8005198:	0800535f 	.word	0x0800535f
 800519c:	0800535f 	.word	0x0800535f
 80051a0:	0800535f 	.word	0x0800535f
 80051a4:	0800525b 	.word	0x0800525b
 80051a8:	0800535f 	.word	0x0800535f
 80051ac:	0800535f 	.word	0x0800535f
 80051b0:	0800535f 	.word	0x0800535f
 80051b4:	0800529b 	.word	0x0800529b
 80051b8:	0800535f 	.word	0x0800535f
 80051bc:	0800535f 	.word	0x0800535f
 80051c0:	0800535f 	.word	0x0800535f
 80051c4:	080052dd 	.word	0x080052dd
 80051c8:	0800535f 	.word	0x0800535f
 80051cc:	0800535f 	.word	0x0800535f
 80051d0:	0800535f 	.word	0x0800535f
 80051d4:	0800531d 	.word	0x0800531d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68b9      	ldr	r1, [r7, #8]
 80051de:	4618      	mov	r0, r3
 80051e0:	f000 fa66 	bl	80056b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	699a      	ldr	r2, [r3, #24]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f042 0208 	orr.w	r2, r2, #8
 80051f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	699a      	ldr	r2, [r3, #24]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f022 0204 	bic.w	r2, r2, #4
 8005202:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6999      	ldr	r1, [r3, #24]
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	691a      	ldr	r2, [r3, #16]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	619a      	str	r2, [r3, #24]
      break;
 8005216:	e0a5      	b.n	8005364 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68b9      	ldr	r1, [r7, #8]
 800521e:	4618      	mov	r0, r3
 8005220:	f000 fab8 	bl	8005794 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	699a      	ldr	r2, [r3, #24]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	699a      	ldr	r2, [r3, #24]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6999      	ldr	r1, [r3, #24]
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	021a      	lsls	r2, r3, #8
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	430a      	orrs	r2, r1
 8005256:	619a      	str	r2, [r3, #24]
      break;
 8005258:	e084      	b.n	8005364 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68b9      	ldr	r1, [r7, #8]
 8005260:	4618      	mov	r0, r3
 8005262:	f000 fb0f 	bl	8005884 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	69da      	ldr	r2, [r3, #28]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f042 0208 	orr.w	r2, r2, #8
 8005274:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	69da      	ldr	r2, [r3, #28]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f022 0204 	bic.w	r2, r2, #4
 8005284:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	69d9      	ldr	r1, [r3, #28]
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	691a      	ldr	r2, [r3, #16]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	61da      	str	r2, [r3, #28]
      break;
 8005298:	e064      	b.n	8005364 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68b9      	ldr	r1, [r7, #8]
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 fb65 	bl	8005970 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	69da      	ldr	r2, [r3, #28]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	69da      	ldr	r2, [r3, #28]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	69d9      	ldr	r1, [r3, #28]
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	021a      	lsls	r2, r3, #8
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	61da      	str	r2, [r3, #28]
      break;
 80052da:	e043      	b.n	8005364 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68b9      	ldr	r1, [r7, #8]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 fb9c 	bl	8005a20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f042 0208 	orr.w	r2, r2, #8
 80052f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f022 0204 	bic.w	r2, r2, #4
 8005306:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	691a      	ldr	r2, [r3, #16]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	430a      	orrs	r2, r1
 8005318:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800531a:	e023      	b.n	8005364 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68b9      	ldr	r1, [r7, #8]
 8005322:	4618      	mov	r0, r3
 8005324:	f000 fbce 	bl	8005ac4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005336:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005346:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	021a      	lsls	r2, r3, #8
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	430a      	orrs	r2, r1
 800535a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800535c:	e002      	b.n	8005364 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	75fb      	strb	r3, [r7, #23]
      break;
 8005362:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800536c:	7dfb      	ldrb	r3, [r7, #23]
}
 800536e:	4618      	mov	r0, r3
 8005370:	3718      	adds	r7, #24
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop

08005378 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005382:	2300      	movs	r3, #0
 8005384:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800538c:	2b01      	cmp	r3, #1
 800538e:	d101      	bne.n	8005394 <HAL_TIM_ConfigClockSource+0x1c>
 8005390:	2302      	movs	r3, #2
 8005392:	e0b4      	b.n	80054fe <HAL_TIM_ConfigClockSource+0x186>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2202      	movs	r2, #2
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	4b56      	ldr	r3, [pc, #344]	; (8005508 <HAL_TIM_ConfigClockSource+0x190>)
 80053b0:	4013      	ands	r3, r2
 80053b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053cc:	d03e      	beq.n	800544c <HAL_TIM_ConfigClockSource+0xd4>
 80053ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053d2:	f200 8087 	bhi.w	80054e4 <HAL_TIM_ConfigClockSource+0x16c>
 80053d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053da:	f000 8086 	beq.w	80054ea <HAL_TIM_ConfigClockSource+0x172>
 80053de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053e2:	d87f      	bhi.n	80054e4 <HAL_TIM_ConfigClockSource+0x16c>
 80053e4:	2b70      	cmp	r3, #112	; 0x70
 80053e6:	d01a      	beq.n	800541e <HAL_TIM_ConfigClockSource+0xa6>
 80053e8:	2b70      	cmp	r3, #112	; 0x70
 80053ea:	d87b      	bhi.n	80054e4 <HAL_TIM_ConfigClockSource+0x16c>
 80053ec:	2b60      	cmp	r3, #96	; 0x60
 80053ee:	d050      	beq.n	8005492 <HAL_TIM_ConfigClockSource+0x11a>
 80053f0:	2b60      	cmp	r3, #96	; 0x60
 80053f2:	d877      	bhi.n	80054e4 <HAL_TIM_ConfigClockSource+0x16c>
 80053f4:	2b50      	cmp	r3, #80	; 0x50
 80053f6:	d03c      	beq.n	8005472 <HAL_TIM_ConfigClockSource+0xfa>
 80053f8:	2b50      	cmp	r3, #80	; 0x50
 80053fa:	d873      	bhi.n	80054e4 <HAL_TIM_ConfigClockSource+0x16c>
 80053fc:	2b40      	cmp	r3, #64	; 0x40
 80053fe:	d058      	beq.n	80054b2 <HAL_TIM_ConfigClockSource+0x13a>
 8005400:	2b40      	cmp	r3, #64	; 0x40
 8005402:	d86f      	bhi.n	80054e4 <HAL_TIM_ConfigClockSource+0x16c>
 8005404:	2b30      	cmp	r3, #48	; 0x30
 8005406:	d064      	beq.n	80054d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005408:	2b30      	cmp	r3, #48	; 0x30
 800540a:	d86b      	bhi.n	80054e4 <HAL_TIM_ConfigClockSource+0x16c>
 800540c:	2b20      	cmp	r3, #32
 800540e:	d060      	beq.n	80054d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005410:	2b20      	cmp	r3, #32
 8005412:	d867      	bhi.n	80054e4 <HAL_TIM_ConfigClockSource+0x16c>
 8005414:	2b00      	cmp	r3, #0
 8005416:	d05c      	beq.n	80054d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005418:	2b10      	cmp	r3, #16
 800541a:	d05a      	beq.n	80054d2 <HAL_TIM_ConfigClockSource+0x15a>
 800541c:	e062      	b.n	80054e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800542e:	f000 fc17 	bl	8005c60 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005440:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	609a      	str	r2, [r3, #8]
      break;
 800544a:	e04f      	b.n	80054ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800545c:	f000 fc00 	bl	8005c60 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689a      	ldr	r2, [r3, #8]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800546e:	609a      	str	r2, [r3, #8]
      break;
 8005470:	e03c      	b.n	80054ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800547e:	461a      	mov	r2, r3
 8005480:	f000 fb74 	bl	8005b6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2150      	movs	r1, #80	; 0x50
 800548a:	4618      	mov	r0, r3
 800548c:	f000 fbcd 	bl	8005c2a <TIM_ITRx_SetConfig>
      break;
 8005490:	e02c      	b.n	80054ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800549e:	461a      	mov	r2, r3
 80054a0:	f000 fb93 	bl	8005bca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2160      	movs	r1, #96	; 0x60
 80054aa:	4618      	mov	r0, r3
 80054ac:	f000 fbbd 	bl	8005c2a <TIM_ITRx_SetConfig>
      break;
 80054b0:	e01c      	b.n	80054ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054be:	461a      	mov	r2, r3
 80054c0:	f000 fb54 	bl	8005b6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2140      	movs	r1, #64	; 0x40
 80054ca:	4618      	mov	r0, r3
 80054cc:	f000 fbad 	bl	8005c2a <TIM_ITRx_SetConfig>
      break;
 80054d0:	e00c      	b.n	80054ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4619      	mov	r1, r3
 80054dc:	4610      	mov	r0, r2
 80054de:	f000 fba4 	bl	8005c2a <TIM_ITRx_SetConfig>
      break;
 80054e2:	e003      	b.n	80054ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	73fb      	strb	r3, [r7, #15]
      break;
 80054e8:	e000      	b.n	80054ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80054ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	fffeff88 	.word	0xfffeff88

0800550c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a40      	ldr	r2, [pc, #256]	; (8005684 <TIM_Base_SetConfig+0x114>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d013      	beq.n	80055b0 <TIM_Base_SetConfig+0x40>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800558e:	d00f      	beq.n	80055b0 <TIM_Base_SetConfig+0x40>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a3d      	ldr	r2, [pc, #244]	; (8005688 <TIM_Base_SetConfig+0x118>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d00b      	beq.n	80055b0 <TIM_Base_SetConfig+0x40>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a3c      	ldr	r2, [pc, #240]	; (800568c <TIM_Base_SetConfig+0x11c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d007      	beq.n	80055b0 <TIM_Base_SetConfig+0x40>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a3b      	ldr	r2, [pc, #236]	; (8005690 <TIM_Base_SetConfig+0x120>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d003      	beq.n	80055b0 <TIM_Base_SetConfig+0x40>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a3a      	ldr	r2, [pc, #232]	; (8005694 <TIM_Base_SetConfig+0x124>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d108      	bne.n	80055c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	4313      	orrs	r3, r2
 80055c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a2f      	ldr	r2, [pc, #188]	; (8005684 <TIM_Base_SetConfig+0x114>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d02b      	beq.n	8005622 <TIM_Base_SetConfig+0xb2>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055d0:	d027      	beq.n	8005622 <TIM_Base_SetConfig+0xb2>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a2c      	ldr	r2, [pc, #176]	; (8005688 <TIM_Base_SetConfig+0x118>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d023      	beq.n	8005622 <TIM_Base_SetConfig+0xb2>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a2b      	ldr	r2, [pc, #172]	; (800568c <TIM_Base_SetConfig+0x11c>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d01f      	beq.n	8005622 <TIM_Base_SetConfig+0xb2>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a2a      	ldr	r2, [pc, #168]	; (8005690 <TIM_Base_SetConfig+0x120>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d01b      	beq.n	8005622 <TIM_Base_SetConfig+0xb2>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a29      	ldr	r2, [pc, #164]	; (8005694 <TIM_Base_SetConfig+0x124>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d017      	beq.n	8005622 <TIM_Base_SetConfig+0xb2>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a28      	ldr	r2, [pc, #160]	; (8005698 <TIM_Base_SetConfig+0x128>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d013      	beq.n	8005622 <TIM_Base_SetConfig+0xb2>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a27      	ldr	r2, [pc, #156]	; (800569c <TIM_Base_SetConfig+0x12c>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d00f      	beq.n	8005622 <TIM_Base_SetConfig+0xb2>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a26      	ldr	r2, [pc, #152]	; (80056a0 <TIM_Base_SetConfig+0x130>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d00b      	beq.n	8005622 <TIM_Base_SetConfig+0xb2>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a25      	ldr	r2, [pc, #148]	; (80056a4 <TIM_Base_SetConfig+0x134>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d007      	beq.n	8005622 <TIM_Base_SetConfig+0xb2>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a24      	ldr	r2, [pc, #144]	; (80056a8 <TIM_Base_SetConfig+0x138>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d003      	beq.n	8005622 <TIM_Base_SetConfig+0xb2>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a23      	ldr	r2, [pc, #140]	; (80056ac <TIM_Base_SetConfig+0x13c>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d108      	bne.n	8005634 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005628:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	4313      	orrs	r3, r2
 8005632:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	4313      	orrs	r3, r2
 8005640:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	689a      	ldr	r2, [r3, #8]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a0a      	ldr	r2, [pc, #40]	; (8005684 <TIM_Base_SetConfig+0x114>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d003      	beq.n	8005668 <TIM_Base_SetConfig+0xf8>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a0c      	ldr	r2, [pc, #48]	; (8005694 <TIM_Base_SetConfig+0x124>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d103      	bne.n	8005670 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	691a      	ldr	r2, [r3, #16]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	615a      	str	r2, [r3, #20]
}
 8005676:	bf00      	nop
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	40010000 	.word	0x40010000
 8005688:	40000400 	.word	0x40000400
 800568c:	40000800 	.word	0x40000800
 8005690:	40000c00 	.word	0x40000c00
 8005694:	40010400 	.word	0x40010400
 8005698:	40014000 	.word	0x40014000
 800569c:	40014400 	.word	0x40014400
 80056a0:	40014800 	.word	0x40014800
 80056a4:	40001800 	.word	0x40001800
 80056a8:	40001c00 	.word	0x40001c00
 80056ac:	40002000 	.word	0x40002000

080056b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b087      	sub	sp, #28
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	f023 0201 	bic.w	r2, r3, #1
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	4b2b      	ldr	r3, [pc, #172]	; (8005788 <TIM_OC1_SetConfig+0xd8>)
 80056dc:	4013      	ands	r3, r2
 80056de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f023 0303 	bic.w	r3, r3, #3
 80056e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f023 0302 	bic.w	r3, r3, #2
 80056f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	4313      	orrs	r3, r2
 8005702:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a21      	ldr	r2, [pc, #132]	; (800578c <TIM_OC1_SetConfig+0xdc>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d003      	beq.n	8005714 <TIM_OC1_SetConfig+0x64>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a20      	ldr	r2, [pc, #128]	; (8005790 <TIM_OC1_SetConfig+0xe0>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d10c      	bne.n	800572e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	f023 0308 	bic.w	r3, r3, #8
 800571a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	4313      	orrs	r3, r2
 8005724:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	f023 0304 	bic.w	r3, r3, #4
 800572c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a16      	ldr	r2, [pc, #88]	; (800578c <TIM_OC1_SetConfig+0xdc>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d003      	beq.n	800573e <TIM_OC1_SetConfig+0x8e>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a15      	ldr	r2, [pc, #84]	; (8005790 <TIM_OC1_SetConfig+0xe0>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d111      	bne.n	8005762 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005744:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800574c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	4313      	orrs	r3, r2
 8005756:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	4313      	orrs	r3, r2
 8005760:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	621a      	str	r2, [r3, #32]
}
 800577c:	bf00      	nop
 800577e:	371c      	adds	r7, #28
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr
 8005788:	fffeff8f 	.word	0xfffeff8f
 800578c:	40010000 	.word	0x40010000
 8005790:	40010400 	.word	0x40010400

08005794 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005794:	b480      	push	{r7}
 8005796:	b087      	sub	sp, #28
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	f023 0210 	bic.w	r2, r3, #16
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	4b2e      	ldr	r3, [pc, #184]	; (8005878 <TIM_OC2_SetConfig+0xe4>)
 80057c0:	4013      	ands	r3, r2
 80057c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	021b      	lsls	r3, r3, #8
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	f023 0320 	bic.w	r3, r3, #32
 80057de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	011b      	lsls	r3, r3, #4
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a23      	ldr	r2, [pc, #140]	; (800587c <TIM_OC2_SetConfig+0xe8>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d003      	beq.n	80057fc <TIM_OC2_SetConfig+0x68>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a22      	ldr	r2, [pc, #136]	; (8005880 <TIM_OC2_SetConfig+0xec>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d10d      	bne.n	8005818 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005802:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	011b      	lsls	r3, r3, #4
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	4313      	orrs	r3, r2
 800580e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005816:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a18      	ldr	r2, [pc, #96]	; (800587c <TIM_OC2_SetConfig+0xe8>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d003      	beq.n	8005828 <TIM_OC2_SetConfig+0x94>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a17      	ldr	r2, [pc, #92]	; (8005880 <TIM_OC2_SetConfig+0xec>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d113      	bne.n	8005850 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800582e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005836:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	695b      	ldr	r3, [r3, #20]
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	4313      	orrs	r3, r2
 8005842:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	4313      	orrs	r3, r2
 800584e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	621a      	str	r2, [r3, #32]
}
 800586a:	bf00      	nop
 800586c:	371c      	adds	r7, #28
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	feff8fff 	.word	0xfeff8fff
 800587c:	40010000 	.word	0x40010000
 8005880:	40010400 	.word	0x40010400

08005884 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005884:	b480      	push	{r7}
 8005886:	b087      	sub	sp, #28
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	4b2d      	ldr	r3, [pc, #180]	; (8005964 <TIM_OC3_SetConfig+0xe0>)
 80058b0:	4013      	ands	r3, r2
 80058b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f023 0303 	bic.w	r3, r3, #3
 80058ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	021b      	lsls	r3, r3, #8
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a22      	ldr	r2, [pc, #136]	; (8005968 <TIM_OC3_SetConfig+0xe4>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d003      	beq.n	80058ea <TIM_OC3_SetConfig+0x66>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a21      	ldr	r2, [pc, #132]	; (800596c <TIM_OC3_SetConfig+0xe8>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d10d      	bne.n	8005906 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	021b      	lsls	r3, r3, #8
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005904:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a17      	ldr	r2, [pc, #92]	; (8005968 <TIM_OC3_SetConfig+0xe4>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d003      	beq.n	8005916 <TIM_OC3_SetConfig+0x92>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a16      	ldr	r2, [pc, #88]	; (800596c <TIM_OC3_SetConfig+0xe8>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d113      	bne.n	800593e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800591c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005924:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	011b      	lsls	r3, r3, #4
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	4313      	orrs	r3, r2
 8005930:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	011b      	lsls	r3, r3, #4
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	4313      	orrs	r3, r2
 800593c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	685a      	ldr	r2, [r3, #4]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	621a      	str	r2, [r3, #32]
}
 8005958:	bf00      	nop
 800595a:	371c      	adds	r7, #28
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr
 8005964:	fffeff8f 	.word	0xfffeff8f
 8005968:	40010000 	.word	0x40010000
 800596c:	40010400 	.word	0x40010400

08005970 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005970:	b480      	push	{r7}
 8005972:	b087      	sub	sp, #28
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a1b      	ldr	r3, [r3, #32]
 800598a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	69db      	ldr	r3, [r3, #28]
 8005996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	4b1e      	ldr	r3, [pc, #120]	; (8005a14 <TIM_OC4_SetConfig+0xa4>)
 800599c:	4013      	ands	r3, r2
 800599e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	021b      	lsls	r3, r3, #8
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	031b      	lsls	r3, r3, #12
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a13      	ldr	r2, [pc, #76]	; (8005a18 <TIM_OC4_SetConfig+0xa8>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d003      	beq.n	80059d8 <TIM_OC4_SetConfig+0x68>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a12      	ldr	r2, [pc, #72]	; (8005a1c <TIM_OC4_SetConfig+0xac>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d109      	bne.n	80059ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	695b      	ldr	r3, [r3, #20]
 80059e4:	019b      	lsls	r3, r3, #6
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	621a      	str	r2, [r3, #32]
}
 8005a06:	bf00      	nop
 8005a08:	371c      	adds	r7, #28
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	feff8fff 	.word	0xfeff8fff
 8005a18:	40010000 	.word	0x40010000
 8005a1c:	40010400 	.word	0x40010400

08005a20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b087      	sub	sp, #28
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	4b1b      	ldr	r3, [pc, #108]	; (8005ab8 <TIM_OC5_SetConfig+0x98>)
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005a60:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	041b      	lsls	r3, r3, #16
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a12      	ldr	r2, [pc, #72]	; (8005abc <TIM_OC5_SetConfig+0x9c>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d003      	beq.n	8005a7e <TIM_OC5_SetConfig+0x5e>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a11      	ldr	r2, [pc, #68]	; (8005ac0 <TIM_OC5_SetConfig+0xa0>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d109      	bne.n	8005a92 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a84:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	021b      	lsls	r3, r3, #8
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	685a      	ldr	r2, [r3, #4]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	621a      	str	r2, [r3, #32]
}
 8005aac:	bf00      	nop
 8005aae:	371c      	adds	r7, #28
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr
 8005ab8:	fffeff8f 	.word	0xfffeff8f
 8005abc:	40010000 	.word	0x40010000
 8005ac0:	40010400 	.word	0x40010400

08005ac4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b087      	sub	sp, #28
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	4b1c      	ldr	r3, [pc, #112]	; (8005b60 <TIM_OC6_SetConfig+0x9c>)
 8005af0:	4013      	ands	r3, r2
 8005af2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	021b      	lsls	r3, r3, #8
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	051b      	lsls	r3, r3, #20
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a13      	ldr	r2, [pc, #76]	; (8005b64 <TIM_OC6_SetConfig+0xa0>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d003      	beq.n	8005b24 <TIM_OC6_SetConfig+0x60>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a12      	ldr	r2, [pc, #72]	; (8005b68 <TIM_OC6_SetConfig+0xa4>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d109      	bne.n	8005b38 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	695b      	ldr	r3, [r3, #20]
 8005b30:	029b      	lsls	r3, r3, #10
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	621a      	str	r2, [r3, #32]
}
 8005b52:	bf00      	nop
 8005b54:	371c      	adds	r7, #28
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	feff8fff 	.word	0xfeff8fff
 8005b64:	40010000 	.word	0x40010000
 8005b68:	40010400 	.word	0x40010400

08005b6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b087      	sub	sp, #28
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6a1b      	ldr	r3, [r3, #32]
 8005b7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	f023 0201 	bic.w	r2, r3, #1
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	011b      	lsls	r3, r3, #4
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	f023 030a 	bic.w	r3, r3, #10
 8005ba8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	621a      	str	r2, [r3, #32]
}
 8005bbe:	bf00      	nop
 8005bc0:	371c      	adds	r7, #28
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr

08005bca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bca:	b480      	push	{r7}
 8005bcc:	b087      	sub	sp, #28
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	60f8      	str	r0, [r7, #12]
 8005bd2:	60b9      	str	r1, [r7, #8]
 8005bd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	f023 0210 	bic.w	r2, r3, #16
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6a1b      	ldr	r3, [r3, #32]
 8005bec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bf4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	031b      	lsls	r3, r3, #12
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	011b      	lsls	r3, r3, #4
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	621a      	str	r2, [r3, #32]
}
 8005c1e:	bf00      	nop
 8005c20:	371c      	adds	r7, #28
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr

08005c2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b085      	sub	sp, #20
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
 8005c32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	f043 0307 	orr.w	r3, r3, #7
 8005c4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	609a      	str	r2, [r3, #8]
}
 8005c54:	bf00      	nop
 8005c56:	3714      	adds	r7, #20
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
 8005c6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	021a      	lsls	r2, r3, #8
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	431a      	orrs	r2, r3
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	609a      	str	r2, [r3, #8]
}
 8005c94:	bf00      	nop
 8005c96:	371c      	adds	r7, #28
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b087      	sub	sp, #28
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	f003 031f 	and.w	r3, r3, #31
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6a1a      	ldr	r2, [r3, #32]
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	43db      	mvns	r3, r3
 8005cc2:	401a      	ands	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6a1a      	ldr	r2, [r3, #32]
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	f003 031f 	and.w	r3, r3, #31
 8005cd2:	6879      	ldr	r1, [r7, #4]
 8005cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8005cd8:	431a      	orrs	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	621a      	str	r2, [r3, #32]
}
 8005cde:	bf00      	nop
 8005ce0:	371c      	adds	r7, #28
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
	...

08005cec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d101      	bne.n	8005d04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d00:	2302      	movs	r3, #2
 8005d02:	e06d      	b.n	8005de0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2202      	movs	r2, #2
 8005d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a30      	ldr	r2, [pc, #192]	; (8005dec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d004      	beq.n	8005d38 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a2f      	ldr	r2, [pc, #188]	; (8005df0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d108      	bne.n	8005d4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005d3e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d50:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a20      	ldr	r2, [pc, #128]	; (8005dec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d022      	beq.n	8005db4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d76:	d01d      	beq.n	8005db4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a1d      	ldr	r2, [pc, #116]	; (8005df4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d018      	beq.n	8005db4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a1c      	ldr	r2, [pc, #112]	; (8005df8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d013      	beq.n	8005db4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a1a      	ldr	r2, [pc, #104]	; (8005dfc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d00e      	beq.n	8005db4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a15      	ldr	r2, [pc, #84]	; (8005df0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d009      	beq.n	8005db4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a16      	ldr	r2, [pc, #88]	; (8005e00 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d004      	beq.n	8005db4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a15      	ldr	r2, [pc, #84]	; (8005e04 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d10c      	bne.n	8005dce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3714      	adds	r7, #20
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr
 8005dec:	40010000 	.word	0x40010000
 8005df0:	40010400 	.word	0x40010400
 8005df4:	40000400 	.word	0x40000400
 8005df8:	40000800 	.word	0x40000800
 8005dfc:	40000c00 	.word	0x40000c00
 8005e00:	40014000 	.word	0x40014000
 8005e04:	40001800 	.word	0x40001800

08005e08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e040      	b.n	8005ed8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d106      	bne.n	8005e6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7fb fb3a 	bl	80014e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2224      	movs	r2, #36	; 0x24
 8005e70:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f022 0201 	bic.w	r2, r2, #1
 8005e80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 f82c 	bl	8005ee0 <UART_SetConfig>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d101      	bne.n	8005e92 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e022      	b.n	8005ed8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d002      	beq.n	8005ea0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 fa84 	bl	80063a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	685a      	ldr	r2, [r3, #4]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005eae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	689a      	ldr	r2, [r3, #8]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ebe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f042 0201 	orr.w	r2, r2, #1
 8005ece:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 fb0b 	bl	80064ec <UART_CheckIdleState>
 8005ed6:	4603      	mov	r3, r0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3708      	adds	r7, #8
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b088      	sub	sp, #32
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	689a      	ldr	r2, [r3, #8]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	431a      	orrs	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	431a      	orrs	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	69db      	ldr	r3, [r3, #28]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	4ba6      	ldr	r3, [pc, #664]	; (80061a4 <UART_SetConfig+0x2c4>)
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	6812      	ldr	r2, [r2, #0]
 8005f12:	6979      	ldr	r1, [r7, #20]
 8005f14:	430b      	orrs	r3, r1
 8005f16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68da      	ldr	r2, [r3, #12]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a1b      	ldr	r3, [r3, #32]
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a94      	ldr	r2, [pc, #592]	; (80061a8 <UART_SetConfig+0x2c8>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d120      	bne.n	8005f9e <UART_SetConfig+0xbe>
 8005f5c:	4b93      	ldr	r3, [pc, #588]	; (80061ac <UART_SetConfig+0x2cc>)
 8005f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f62:	f003 0303 	and.w	r3, r3, #3
 8005f66:	2b03      	cmp	r3, #3
 8005f68:	d816      	bhi.n	8005f98 <UART_SetConfig+0xb8>
 8005f6a:	a201      	add	r2, pc, #4	; (adr r2, 8005f70 <UART_SetConfig+0x90>)
 8005f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f70:	08005f81 	.word	0x08005f81
 8005f74:	08005f8d 	.word	0x08005f8d
 8005f78:	08005f87 	.word	0x08005f87
 8005f7c:	08005f93 	.word	0x08005f93
 8005f80:	2301      	movs	r3, #1
 8005f82:	77fb      	strb	r3, [r7, #31]
 8005f84:	e150      	b.n	8006228 <UART_SetConfig+0x348>
 8005f86:	2302      	movs	r3, #2
 8005f88:	77fb      	strb	r3, [r7, #31]
 8005f8a:	e14d      	b.n	8006228 <UART_SetConfig+0x348>
 8005f8c:	2304      	movs	r3, #4
 8005f8e:	77fb      	strb	r3, [r7, #31]
 8005f90:	e14a      	b.n	8006228 <UART_SetConfig+0x348>
 8005f92:	2308      	movs	r3, #8
 8005f94:	77fb      	strb	r3, [r7, #31]
 8005f96:	e147      	b.n	8006228 <UART_SetConfig+0x348>
 8005f98:	2310      	movs	r3, #16
 8005f9a:	77fb      	strb	r3, [r7, #31]
 8005f9c:	e144      	b.n	8006228 <UART_SetConfig+0x348>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a83      	ldr	r2, [pc, #524]	; (80061b0 <UART_SetConfig+0x2d0>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d132      	bne.n	800600e <UART_SetConfig+0x12e>
 8005fa8:	4b80      	ldr	r3, [pc, #512]	; (80061ac <UART_SetConfig+0x2cc>)
 8005faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fae:	f003 030c 	and.w	r3, r3, #12
 8005fb2:	2b0c      	cmp	r3, #12
 8005fb4:	d828      	bhi.n	8006008 <UART_SetConfig+0x128>
 8005fb6:	a201      	add	r2, pc, #4	; (adr r2, 8005fbc <UART_SetConfig+0xdc>)
 8005fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fbc:	08005ff1 	.word	0x08005ff1
 8005fc0:	08006009 	.word	0x08006009
 8005fc4:	08006009 	.word	0x08006009
 8005fc8:	08006009 	.word	0x08006009
 8005fcc:	08005ffd 	.word	0x08005ffd
 8005fd0:	08006009 	.word	0x08006009
 8005fd4:	08006009 	.word	0x08006009
 8005fd8:	08006009 	.word	0x08006009
 8005fdc:	08005ff7 	.word	0x08005ff7
 8005fe0:	08006009 	.word	0x08006009
 8005fe4:	08006009 	.word	0x08006009
 8005fe8:	08006009 	.word	0x08006009
 8005fec:	08006003 	.word	0x08006003
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	77fb      	strb	r3, [r7, #31]
 8005ff4:	e118      	b.n	8006228 <UART_SetConfig+0x348>
 8005ff6:	2302      	movs	r3, #2
 8005ff8:	77fb      	strb	r3, [r7, #31]
 8005ffa:	e115      	b.n	8006228 <UART_SetConfig+0x348>
 8005ffc:	2304      	movs	r3, #4
 8005ffe:	77fb      	strb	r3, [r7, #31]
 8006000:	e112      	b.n	8006228 <UART_SetConfig+0x348>
 8006002:	2308      	movs	r3, #8
 8006004:	77fb      	strb	r3, [r7, #31]
 8006006:	e10f      	b.n	8006228 <UART_SetConfig+0x348>
 8006008:	2310      	movs	r3, #16
 800600a:	77fb      	strb	r3, [r7, #31]
 800600c:	e10c      	b.n	8006228 <UART_SetConfig+0x348>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a68      	ldr	r2, [pc, #416]	; (80061b4 <UART_SetConfig+0x2d4>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d120      	bne.n	800605a <UART_SetConfig+0x17a>
 8006018:	4b64      	ldr	r3, [pc, #400]	; (80061ac <UART_SetConfig+0x2cc>)
 800601a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800601e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006022:	2b30      	cmp	r3, #48	; 0x30
 8006024:	d013      	beq.n	800604e <UART_SetConfig+0x16e>
 8006026:	2b30      	cmp	r3, #48	; 0x30
 8006028:	d814      	bhi.n	8006054 <UART_SetConfig+0x174>
 800602a:	2b20      	cmp	r3, #32
 800602c:	d009      	beq.n	8006042 <UART_SetConfig+0x162>
 800602e:	2b20      	cmp	r3, #32
 8006030:	d810      	bhi.n	8006054 <UART_SetConfig+0x174>
 8006032:	2b00      	cmp	r3, #0
 8006034:	d002      	beq.n	800603c <UART_SetConfig+0x15c>
 8006036:	2b10      	cmp	r3, #16
 8006038:	d006      	beq.n	8006048 <UART_SetConfig+0x168>
 800603a:	e00b      	b.n	8006054 <UART_SetConfig+0x174>
 800603c:	2300      	movs	r3, #0
 800603e:	77fb      	strb	r3, [r7, #31]
 8006040:	e0f2      	b.n	8006228 <UART_SetConfig+0x348>
 8006042:	2302      	movs	r3, #2
 8006044:	77fb      	strb	r3, [r7, #31]
 8006046:	e0ef      	b.n	8006228 <UART_SetConfig+0x348>
 8006048:	2304      	movs	r3, #4
 800604a:	77fb      	strb	r3, [r7, #31]
 800604c:	e0ec      	b.n	8006228 <UART_SetConfig+0x348>
 800604e:	2308      	movs	r3, #8
 8006050:	77fb      	strb	r3, [r7, #31]
 8006052:	e0e9      	b.n	8006228 <UART_SetConfig+0x348>
 8006054:	2310      	movs	r3, #16
 8006056:	77fb      	strb	r3, [r7, #31]
 8006058:	e0e6      	b.n	8006228 <UART_SetConfig+0x348>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a56      	ldr	r2, [pc, #344]	; (80061b8 <UART_SetConfig+0x2d8>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d120      	bne.n	80060a6 <UART_SetConfig+0x1c6>
 8006064:	4b51      	ldr	r3, [pc, #324]	; (80061ac <UART_SetConfig+0x2cc>)
 8006066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800606a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800606e:	2bc0      	cmp	r3, #192	; 0xc0
 8006070:	d013      	beq.n	800609a <UART_SetConfig+0x1ba>
 8006072:	2bc0      	cmp	r3, #192	; 0xc0
 8006074:	d814      	bhi.n	80060a0 <UART_SetConfig+0x1c0>
 8006076:	2b80      	cmp	r3, #128	; 0x80
 8006078:	d009      	beq.n	800608e <UART_SetConfig+0x1ae>
 800607a:	2b80      	cmp	r3, #128	; 0x80
 800607c:	d810      	bhi.n	80060a0 <UART_SetConfig+0x1c0>
 800607e:	2b00      	cmp	r3, #0
 8006080:	d002      	beq.n	8006088 <UART_SetConfig+0x1a8>
 8006082:	2b40      	cmp	r3, #64	; 0x40
 8006084:	d006      	beq.n	8006094 <UART_SetConfig+0x1b4>
 8006086:	e00b      	b.n	80060a0 <UART_SetConfig+0x1c0>
 8006088:	2300      	movs	r3, #0
 800608a:	77fb      	strb	r3, [r7, #31]
 800608c:	e0cc      	b.n	8006228 <UART_SetConfig+0x348>
 800608e:	2302      	movs	r3, #2
 8006090:	77fb      	strb	r3, [r7, #31]
 8006092:	e0c9      	b.n	8006228 <UART_SetConfig+0x348>
 8006094:	2304      	movs	r3, #4
 8006096:	77fb      	strb	r3, [r7, #31]
 8006098:	e0c6      	b.n	8006228 <UART_SetConfig+0x348>
 800609a:	2308      	movs	r3, #8
 800609c:	77fb      	strb	r3, [r7, #31]
 800609e:	e0c3      	b.n	8006228 <UART_SetConfig+0x348>
 80060a0:	2310      	movs	r3, #16
 80060a2:	77fb      	strb	r3, [r7, #31]
 80060a4:	e0c0      	b.n	8006228 <UART_SetConfig+0x348>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a44      	ldr	r2, [pc, #272]	; (80061bc <UART_SetConfig+0x2dc>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d125      	bne.n	80060fc <UART_SetConfig+0x21c>
 80060b0:	4b3e      	ldr	r3, [pc, #248]	; (80061ac <UART_SetConfig+0x2cc>)
 80060b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060be:	d017      	beq.n	80060f0 <UART_SetConfig+0x210>
 80060c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060c4:	d817      	bhi.n	80060f6 <UART_SetConfig+0x216>
 80060c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060ca:	d00b      	beq.n	80060e4 <UART_SetConfig+0x204>
 80060cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060d0:	d811      	bhi.n	80060f6 <UART_SetConfig+0x216>
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d003      	beq.n	80060de <UART_SetConfig+0x1fe>
 80060d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060da:	d006      	beq.n	80060ea <UART_SetConfig+0x20a>
 80060dc:	e00b      	b.n	80060f6 <UART_SetConfig+0x216>
 80060de:	2300      	movs	r3, #0
 80060e0:	77fb      	strb	r3, [r7, #31]
 80060e2:	e0a1      	b.n	8006228 <UART_SetConfig+0x348>
 80060e4:	2302      	movs	r3, #2
 80060e6:	77fb      	strb	r3, [r7, #31]
 80060e8:	e09e      	b.n	8006228 <UART_SetConfig+0x348>
 80060ea:	2304      	movs	r3, #4
 80060ec:	77fb      	strb	r3, [r7, #31]
 80060ee:	e09b      	b.n	8006228 <UART_SetConfig+0x348>
 80060f0:	2308      	movs	r3, #8
 80060f2:	77fb      	strb	r3, [r7, #31]
 80060f4:	e098      	b.n	8006228 <UART_SetConfig+0x348>
 80060f6:	2310      	movs	r3, #16
 80060f8:	77fb      	strb	r3, [r7, #31]
 80060fa:	e095      	b.n	8006228 <UART_SetConfig+0x348>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a2f      	ldr	r2, [pc, #188]	; (80061c0 <UART_SetConfig+0x2e0>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d125      	bne.n	8006152 <UART_SetConfig+0x272>
 8006106:	4b29      	ldr	r3, [pc, #164]	; (80061ac <UART_SetConfig+0x2cc>)
 8006108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800610c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006110:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006114:	d017      	beq.n	8006146 <UART_SetConfig+0x266>
 8006116:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800611a:	d817      	bhi.n	800614c <UART_SetConfig+0x26c>
 800611c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006120:	d00b      	beq.n	800613a <UART_SetConfig+0x25a>
 8006122:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006126:	d811      	bhi.n	800614c <UART_SetConfig+0x26c>
 8006128:	2b00      	cmp	r3, #0
 800612a:	d003      	beq.n	8006134 <UART_SetConfig+0x254>
 800612c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006130:	d006      	beq.n	8006140 <UART_SetConfig+0x260>
 8006132:	e00b      	b.n	800614c <UART_SetConfig+0x26c>
 8006134:	2301      	movs	r3, #1
 8006136:	77fb      	strb	r3, [r7, #31]
 8006138:	e076      	b.n	8006228 <UART_SetConfig+0x348>
 800613a:	2302      	movs	r3, #2
 800613c:	77fb      	strb	r3, [r7, #31]
 800613e:	e073      	b.n	8006228 <UART_SetConfig+0x348>
 8006140:	2304      	movs	r3, #4
 8006142:	77fb      	strb	r3, [r7, #31]
 8006144:	e070      	b.n	8006228 <UART_SetConfig+0x348>
 8006146:	2308      	movs	r3, #8
 8006148:	77fb      	strb	r3, [r7, #31]
 800614a:	e06d      	b.n	8006228 <UART_SetConfig+0x348>
 800614c:	2310      	movs	r3, #16
 800614e:	77fb      	strb	r3, [r7, #31]
 8006150:	e06a      	b.n	8006228 <UART_SetConfig+0x348>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a1b      	ldr	r2, [pc, #108]	; (80061c4 <UART_SetConfig+0x2e4>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d138      	bne.n	80061ce <UART_SetConfig+0x2ee>
 800615c:	4b13      	ldr	r3, [pc, #76]	; (80061ac <UART_SetConfig+0x2cc>)
 800615e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006162:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006166:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800616a:	d017      	beq.n	800619c <UART_SetConfig+0x2bc>
 800616c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006170:	d82a      	bhi.n	80061c8 <UART_SetConfig+0x2e8>
 8006172:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006176:	d00b      	beq.n	8006190 <UART_SetConfig+0x2b0>
 8006178:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800617c:	d824      	bhi.n	80061c8 <UART_SetConfig+0x2e8>
 800617e:	2b00      	cmp	r3, #0
 8006180:	d003      	beq.n	800618a <UART_SetConfig+0x2aa>
 8006182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006186:	d006      	beq.n	8006196 <UART_SetConfig+0x2b6>
 8006188:	e01e      	b.n	80061c8 <UART_SetConfig+0x2e8>
 800618a:	2300      	movs	r3, #0
 800618c:	77fb      	strb	r3, [r7, #31]
 800618e:	e04b      	b.n	8006228 <UART_SetConfig+0x348>
 8006190:	2302      	movs	r3, #2
 8006192:	77fb      	strb	r3, [r7, #31]
 8006194:	e048      	b.n	8006228 <UART_SetConfig+0x348>
 8006196:	2304      	movs	r3, #4
 8006198:	77fb      	strb	r3, [r7, #31]
 800619a:	e045      	b.n	8006228 <UART_SetConfig+0x348>
 800619c:	2308      	movs	r3, #8
 800619e:	77fb      	strb	r3, [r7, #31]
 80061a0:	e042      	b.n	8006228 <UART_SetConfig+0x348>
 80061a2:	bf00      	nop
 80061a4:	efff69f3 	.word	0xefff69f3
 80061a8:	40011000 	.word	0x40011000
 80061ac:	40023800 	.word	0x40023800
 80061b0:	40004400 	.word	0x40004400
 80061b4:	40004800 	.word	0x40004800
 80061b8:	40004c00 	.word	0x40004c00
 80061bc:	40005000 	.word	0x40005000
 80061c0:	40011400 	.word	0x40011400
 80061c4:	40007800 	.word	0x40007800
 80061c8:	2310      	movs	r3, #16
 80061ca:	77fb      	strb	r3, [r7, #31]
 80061cc:	e02c      	b.n	8006228 <UART_SetConfig+0x348>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a72      	ldr	r2, [pc, #456]	; (800639c <UART_SetConfig+0x4bc>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d125      	bne.n	8006224 <UART_SetConfig+0x344>
 80061d8:	4b71      	ldr	r3, [pc, #452]	; (80063a0 <UART_SetConfig+0x4c0>)
 80061da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061de:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80061e2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80061e6:	d017      	beq.n	8006218 <UART_SetConfig+0x338>
 80061e8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80061ec:	d817      	bhi.n	800621e <UART_SetConfig+0x33e>
 80061ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061f2:	d00b      	beq.n	800620c <UART_SetConfig+0x32c>
 80061f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061f8:	d811      	bhi.n	800621e <UART_SetConfig+0x33e>
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d003      	beq.n	8006206 <UART_SetConfig+0x326>
 80061fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006202:	d006      	beq.n	8006212 <UART_SetConfig+0x332>
 8006204:	e00b      	b.n	800621e <UART_SetConfig+0x33e>
 8006206:	2300      	movs	r3, #0
 8006208:	77fb      	strb	r3, [r7, #31]
 800620a:	e00d      	b.n	8006228 <UART_SetConfig+0x348>
 800620c:	2302      	movs	r3, #2
 800620e:	77fb      	strb	r3, [r7, #31]
 8006210:	e00a      	b.n	8006228 <UART_SetConfig+0x348>
 8006212:	2304      	movs	r3, #4
 8006214:	77fb      	strb	r3, [r7, #31]
 8006216:	e007      	b.n	8006228 <UART_SetConfig+0x348>
 8006218:	2308      	movs	r3, #8
 800621a:	77fb      	strb	r3, [r7, #31]
 800621c:	e004      	b.n	8006228 <UART_SetConfig+0x348>
 800621e:	2310      	movs	r3, #16
 8006220:	77fb      	strb	r3, [r7, #31]
 8006222:	e001      	b.n	8006228 <UART_SetConfig+0x348>
 8006224:	2310      	movs	r3, #16
 8006226:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	69db      	ldr	r3, [r3, #28]
 800622c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006230:	d15b      	bne.n	80062ea <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006232:	7ffb      	ldrb	r3, [r7, #31]
 8006234:	2b08      	cmp	r3, #8
 8006236:	d828      	bhi.n	800628a <UART_SetConfig+0x3aa>
 8006238:	a201      	add	r2, pc, #4	; (adr r2, 8006240 <UART_SetConfig+0x360>)
 800623a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623e:	bf00      	nop
 8006240:	08006265 	.word	0x08006265
 8006244:	0800626d 	.word	0x0800626d
 8006248:	08006275 	.word	0x08006275
 800624c:	0800628b 	.word	0x0800628b
 8006250:	0800627b 	.word	0x0800627b
 8006254:	0800628b 	.word	0x0800628b
 8006258:	0800628b 	.word	0x0800628b
 800625c:	0800628b 	.word	0x0800628b
 8006260:	08006283 	.word	0x08006283
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006264:	f7fd fc06 	bl	8003a74 <HAL_RCC_GetPCLK1Freq>
 8006268:	61b8      	str	r0, [r7, #24]
        break;
 800626a:	e013      	b.n	8006294 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800626c:	f7fd fc16 	bl	8003a9c <HAL_RCC_GetPCLK2Freq>
 8006270:	61b8      	str	r0, [r7, #24]
        break;
 8006272:	e00f      	b.n	8006294 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006274:	4b4b      	ldr	r3, [pc, #300]	; (80063a4 <UART_SetConfig+0x4c4>)
 8006276:	61bb      	str	r3, [r7, #24]
        break;
 8006278:	e00c      	b.n	8006294 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800627a:	f7fd fae9 	bl	8003850 <HAL_RCC_GetSysClockFreq>
 800627e:	61b8      	str	r0, [r7, #24]
        break;
 8006280:	e008      	b.n	8006294 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006286:	61bb      	str	r3, [r7, #24]
        break;
 8006288:	e004      	b.n	8006294 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800628a:	2300      	movs	r3, #0
 800628c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	77bb      	strb	r3, [r7, #30]
        break;
 8006292:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d074      	beq.n	8006384 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	005a      	lsls	r2, r3, #1
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	085b      	lsrs	r3, r3, #1
 80062a4:	441a      	add	r2, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	2b0f      	cmp	r3, #15
 80062b4:	d916      	bls.n	80062e4 <UART_SetConfig+0x404>
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062bc:	d212      	bcs.n	80062e4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	f023 030f 	bic.w	r3, r3, #15
 80062c6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	085b      	lsrs	r3, r3, #1
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	f003 0307 	and.w	r3, r3, #7
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	89fb      	ldrh	r3, [r7, #14]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	89fa      	ldrh	r2, [r7, #14]
 80062e0:	60da      	str	r2, [r3, #12]
 80062e2:	e04f      	b.n	8006384 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	77bb      	strb	r3, [r7, #30]
 80062e8:	e04c      	b.n	8006384 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062ea:	7ffb      	ldrb	r3, [r7, #31]
 80062ec:	2b08      	cmp	r3, #8
 80062ee:	d828      	bhi.n	8006342 <UART_SetConfig+0x462>
 80062f0:	a201      	add	r2, pc, #4	; (adr r2, 80062f8 <UART_SetConfig+0x418>)
 80062f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f6:	bf00      	nop
 80062f8:	0800631d 	.word	0x0800631d
 80062fc:	08006325 	.word	0x08006325
 8006300:	0800632d 	.word	0x0800632d
 8006304:	08006343 	.word	0x08006343
 8006308:	08006333 	.word	0x08006333
 800630c:	08006343 	.word	0x08006343
 8006310:	08006343 	.word	0x08006343
 8006314:	08006343 	.word	0x08006343
 8006318:	0800633b 	.word	0x0800633b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800631c:	f7fd fbaa 	bl	8003a74 <HAL_RCC_GetPCLK1Freq>
 8006320:	61b8      	str	r0, [r7, #24]
        break;
 8006322:	e013      	b.n	800634c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006324:	f7fd fbba 	bl	8003a9c <HAL_RCC_GetPCLK2Freq>
 8006328:	61b8      	str	r0, [r7, #24]
        break;
 800632a:	e00f      	b.n	800634c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800632c:	4b1d      	ldr	r3, [pc, #116]	; (80063a4 <UART_SetConfig+0x4c4>)
 800632e:	61bb      	str	r3, [r7, #24]
        break;
 8006330:	e00c      	b.n	800634c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006332:	f7fd fa8d 	bl	8003850 <HAL_RCC_GetSysClockFreq>
 8006336:	61b8      	str	r0, [r7, #24]
        break;
 8006338:	e008      	b.n	800634c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800633a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800633e:	61bb      	str	r3, [r7, #24]
        break;
 8006340:	e004      	b.n	800634c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006342:	2300      	movs	r3, #0
 8006344:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	77bb      	strb	r3, [r7, #30]
        break;
 800634a:	bf00      	nop
    }

    if (pclk != 0U)
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d018      	beq.n	8006384 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	085a      	lsrs	r2, r3, #1
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	441a      	add	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	fbb2 f3f3 	udiv	r3, r2, r3
 8006364:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	2b0f      	cmp	r3, #15
 800636a:	d909      	bls.n	8006380 <UART_SetConfig+0x4a0>
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006372:	d205      	bcs.n	8006380 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	b29a      	uxth	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	60da      	str	r2, [r3, #12]
 800637e:	e001      	b.n	8006384 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006390:	7fbb      	ldrb	r3, [r7, #30]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3720      	adds	r7, #32
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	40007c00 	.word	0x40007c00
 80063a0:	40023800 	.word	0x40023800
 80063a4:	00f42400 	.word	0x00f42400

080063a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00a      	beq.n	80063d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	430a      	orrs	r2, r1
 80063d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d6:	f003 0302 	and.w	r3, r3, #2
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00a      	beq.n	80063f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	430a      	orrs	r2, r1
 80063f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f8:	f003 0304 	and.w	r3, r3, #4
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00a      	beq.n	8006416 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	430a      	orrs	r2, r1
 8006414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641a:	f003 0308 	and.w	r3, r3, #8
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00a      	beq.n	8006438 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	430a      	orrs	r2, r1
 8006436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643c:	f003 0310 	and.w	r3, r3, #16
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00a      	beq.n	800645a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	430a      	orrs	r2, r1
 8006458:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645e:	f003 0320 	and.w	r3, r3, #32
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00a      	beq.n	800647c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	430a      	orrs	r2, r1
 800647a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006484:	2b00      	cmp	r3, #0
 8006486:	d01a      	beq.n	80064be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	430a      	orrs	r2, r1
 800649c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064a6:	d10a      	bne.n	80064be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	430a      	orrs	r2, r1
 80064bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00a      	beq.n	80064e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	430a      	orrs	r2, r1
 80064de:	605a      	str	r2, [r3, #4]
  }
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b086      	sub	sp, #24
 80064f0:	af02      	add	r7, sp, #8
 80064f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064fc:	f7fb fdd4 	bl	80020a8 <HAL_GetTick>
 8006500:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0308 	and.w	r3, r3, #8
 800650c:	2b08      	cmp	r3, #8
 800650e:	d10e      	bne.n	800652e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006510:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006514:	9300      	str	r3, [sp, #0]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f831 	bl	8006586 <UART_WaitOnFlagUntilTimeout>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d001      	beq.n	800652e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e027      	b.n	800657e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0304 	and.w	r3, r3, #4
 8006538:	2b04      	cmp	r3, #4
 800653a:	d10e      	bne.n	800655a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800653c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006540:	9300      	str	r3, [sp, #0]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f81b 	bl	8006586 <UART_WaitOnFlagUntilTimeout>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d001      	beq.n	800655a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e011      	b.n	800657e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2220      	movs	r2, #32
 800655e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2220      	movs	r2, #32
 8006564:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	b09c      	sub	sp, #112	; 0x70
 800658a:	af00      	add	r7, sp, #0
 800658c:	60f8      	str	r0, [r7, #12]
 800658e:	60b9      	str	r1, [r7, #8]
 8006590:	603b      	str	r3, [r7, #0]
 8006592:	4613      	mov	r3, r2
 8006594:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006596:	e0a7      	b.n	80066e8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006598:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800659a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800659e:	f000 80a3 	beq.w	80066e8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065a2:	f7fb fd81 	bl	80020a8 <HAL_GetTick>
 80065a6:	4602      	mov	r2, r0
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d302      	bcc.n	80065b8 <UART_WaitOnFlagUntilTimeout+0x32>
 80065b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d13f      	bne.n	8006638 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065c0:	e853 3f00 	ldrex	r3, [r3]
 80065c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80065c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065cc:	667b      	str	r3, [r7, #100]	; 0x64
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	461a      	mov	r2, r3
 80065d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065d8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80065dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80065de:	e841 2300 	strex	r3, r2, [r1]
 80065e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80065e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1e6      	bne.n	80065b8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	3308      	adds	r3, #8
 80065f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065f4:	e853 3f00 	ldrex	r3, [r3]
 80065f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fc:	f023 0301 	bic.w	r3, r3, #1
 8006600:	663b      	str	r3, [r7, #96]	; 0x60
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	3308      	adds	r3, #8
 8006608:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800660a:	64ba      	str	r2, [r7, #72]	; 0x48
 800660c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006610:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006612:	e841 2300 	strex	r3, r2, [r1]
 8006616:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1e5      	bne.n	80065ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2220      	movs	r2, #32
 8006622:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2220      	movs	r2, #32
 8006628:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e068      	b.n	800670a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 0304 	and.w	r3, r3, #4
 8006642:	2b00      	cmp	r3, #0
 8006644:	d050      	beq.n	80066e8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	69db      	ldr	r3, [r3, #28]
 800664c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006650:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006654:	d148      	bne.n	80066e8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800665e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006668:	e853 3f00 	ldrex	r3, [r3]
 800666c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800666e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006670:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006674:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	461a      	mov	r2, r3
 800667c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800667e:	637b      	str	r3, [r7, #52]	; 0x34
 8006680:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006682:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006684:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006686:	e841 2300 	strex	r3, r2, [r1]
 800668a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800668c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1e6      	bne.n	8006660 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	3308      	adds	r3, #8
 8006698:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	e853 3f00 	ldrex	r3, [r3]
 80066a0:	613b      	str	r3, [r7, #16]
   return(result);
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	f023 0301 	bic.w	r3, r3, #1
 80066a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	3308      	adds	r3, #8
 80066b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80066b2:	623a      	str	r2, [r7, #32]
 80066b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b6:	69f9      	ldr	r1, [r7, #28]
 80066b8:	6a3a      	ldr	r2, [r7, #32]
 80066ba:	e841 2300 	strex	r3, r2, [r1]
 80066be:	61bb      	str	r3, [r7, #24]
   return(result);
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1e5      	bne.n	8006692 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2220      	movs	r2, #32
 80066ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2220      	movs	r2, #32
 80066d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2220      	movs	r2, #32
 80066d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	e010      	b.n	800670a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	69da      	ldr	r2, [r3, #28]
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	4013      	ands	r3, r2
 80066f2:	68ba      	ldr	r2, [r7, #8]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	bf0c      	ite	eq
 80066f8:	2301      	moveq	r3, #1
 80066fa:	2300      	movne	r3, #0
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	461a      	mov	r2, r3
 8006700:	79fb      	ldrb	r3, [r7, #7]
 8006702:	429a      	cmp	r2, r3
 8006704:	f43f af48 	beq.w	8006598 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3770      	adds	r7, #112	; 0x70
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <__cvt>:
 8006712:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006714:	ed2d 8b02 	vpush	{d8}
 8006718:	eeb0 8b40 	vmov.f64	d8, d0
 800671c:	b085      	sub	sp, #20
 800671e:	4617      	mov	r7, r2
 8006720:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006722:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006724:	ee18 2a90 	vmov	r2, s17
 8006728:	f025 0520 	bic.w	r5, r5, #32
 800672c:	2a00      	cmp	r2, #0
 800672e:	bfb6      	itet	lt
 8006730:	222d      	movlt	r2, #45	; 0x2d
 8006732:	2200      	movge	r2, #0
 8006734:	eeb1 8b40 	vneglt.f64	d8, d0
 8006738:	2d46      	cmp	r5, #70	; 0x46
 800673a:	460c      	mov	r4, r1
 800673c:	701a      	strb	r2, [r3, #0]
 800673e:	d004      	beq.n	800674a <__cvt+0x38>
 8006740:	2d45      	cmp	r5, #69	; 0x45
 8006742:	d100      	bne.n	8006746 <__cvt+0x34>
 8006744:	3401      	adds	r4, #1
 8006746:	2102      	movs	r1, #2
 8006748:	e000      	b.n	800674c <__cvt+0x3a>
 800674a:	2103      	movs	r1, #3
 800674c:	ab03      	add	r3, sp, #12
 800674e:	9301      	str	r3, [sp, #4]
 8006750:	ab02      	add	r3, sp, #8
 8006752:	9300      	str	r3, [sp, #0]
 8006754:	4622      	mov	r2, r4
 8006756:	4633      	mov	r3, r6
 8006758:	eeb0 0b48 	vmov.f64	d0, d8
 800675c:	f000 fe30 	bl	80073c0 <_dtoa_r>
 8006760:	2d47      	cmp	r5, #71	; 0x47
 8006762:	d101      	bne.n	8006768 <__cvt+0x56>
 8006764:	07fb      	lsls	r3, r7, #31
 8006766:	d51a      	bpl.n	800679e <__cvt+0x8c>
 8006768:	2d46      	cmp	r5, #70	; 0x46
 800676a:	eb00 0204 	add.w	r2, r0, r4
 800676e:	d10c      	bne.n	800678a <__cvt+0x78>
 8006770:	7803      	ldrb	r3, [r0, #0]
 8006772:	2b30      	cmp	r3, #48	; 0x30
 8006774:	d107      	bne.n	8006786 <__cvt+0x74>
 8006776:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800677a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800677e:	bf1c      	itt	ne
 8006780:	f1c4 0401 	rsbne	r4, r4, #1
 8006784:	6034      	strne	r4, [r6, #0]
 8006786:	6833      	ldr	r3, [r6, #0]
 8006788:	441a      	add	r2, r3
 800678a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800678e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006792:	bf08      	it	eq
 8006794:	9203      	streq	r2, [sp, #12]
 8006796:	2130      	movs	r1, #48	; 0x30
 8006798:	9b03      	ldr	r3, [sp, #12]
 800679a:	4293      	cmp	r3, r2
 800679c:	d307      	bcc.n	80067ae <__cvt+0x9c>
 800679e:	9b03      	ldr	r3, [sp, #12]
 80067a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067a2:	1a1b      	subs	r3, r3, r0
 80067a4:	6013      	str	r3, [r2, #0]
 80067a6:	b005      	add	sp, #20
 80067a8:	ecbd 8b02 	vpop	{d8}
 80067ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067ae:	1c5c      	adds	r4, r3, #1
 80067b0:	9403      	str	r4, [sp, #12]
 80067b2:	7019      	strb	r1, [r3, #0]
 80067b4:	e7f0      	b.n	8006798 <__cvt+0x86>

080067b6 <__exponent>:
 80067b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067b8:	4603      	mov	r3, r0
 80067ba:	2900      	cmp	r1, #0
 80067bc:	bfb8      	it	lt
 80067be:	4249      	neglt	r1, r1
 80067c0:	f803 2b02 	strb.w	r2, [r3], #2
 80067c4:	bfb4      	ite	lt
 80067c6:	222d      	movlt	r2, #45	; 0x2d
 80067c8:	222b      	movge	r2, #43	; 0x2b
 80067ca:	2909      	cmp	r1, #9
 80067cc:	7042      	strb	r2, [r0, #1]
 80067ce:	dd2a      	ble.n	8006826 <__exponent+0x70>
 80067d0:	f10d 0207 	add.w	r2, sp, #7
 80067d4:	4617      	mov	r7, r2
 80067d6:	260a      	movs	r6, #10
 80067d8:	4694      	mov	ip, r2
 80067da:	fb91 f5f6 	sdiv	r5, r1, r6
 80067de:	fb06 1415 	mls	r4, r6, r5, r1
 80067e2:	3430      	adds	r4, #48	; 0x30
 80067e4:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80067e8:	460c      	mov	r4, r1
 80067ea:	2c63      	cmp	r4, #99	; 0x63
 80067ec:	f102 32ff 	add.w	r2, r2, #4294967295
 80067f0:	4629      	mov	r1, r5
 80067f2:	dcf1      	bgt.n	80067d8 <__exponent+0x22>
 80067f4:	3130      	adds	r1, #48	; 0x30
 80067f6:	f1ac 0402 	sub.w	r4, ip, #2
 80067fa:	f802 1c01 	strb.w	r1, [r2, #-1]
 80067fe:	1c41      	adds	r1, r0, #1
 8006800:	4622      	mov	r2, r4
 8006802:	42ba      	cmp	r2, r7
 8006804:	d30a      	bcc.n	800681c <__exponent+0x66>
 8006806:	f10d 0209 	add.w	r2, sp, #9
 800680a:	eba2 020c 	sub.w	r2, r2, ip
 800680e:	42bc      	cmp	r4, r7
 8006810:	bf88      	it	hi
 8006812:	2200      	movhi	r2, #0
 8006814:	4413      	add	r3, r2
 8006816:	1a18      	subs	r0, r3, r0
 8006818:	b003      	add	sp, #12
 800681a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800681c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006820:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006824:	e7ed      	b.n	8006802 <__exponent+0x4c>
 8006826:	2330      	movs	r3, #48	; 0x30
 8006828:	3130      	adds	r1, #48	; 0x30
 800682a:	7083      	strb	r3, [r0, #2]
 800682c:	70c1      	strb	r1, [r0, #3]
 800682e:	1d03      	adds	r3, r0, #4
 8006830:	e7f1      	b.n	8006816 <__exponent+0x60>
 8006832:	0000      	movs	r0, r0
 8006834:	0000      	movs	r0, r0
	...

08006838 <_printf_float>:
 8006838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800683c:	b08b      	sub	sp, #44	; 0x2c
 800683e:	460c      	mov	r4, r1
 8006840:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8006844:	4616      	mov	r6, r2
 8006846:	461f      	mov	r7, r3
 8006848:	4605      	mov	r5, r0
 800684a:	f000 fcbb 	bl	80071c4 <_localeconv_r>
 800684e:	f8d0 b000 	ldr.w	fp, [r0]
 8006852:	4658      	mov	r0, fp
 8006854:	f7f9 fd44 	bl	80002e0 <strlen>
 8006858:	2300      	movs	r3, #0
 800685a:	9308      	str	r3, [sp, #32]
 800685c:	f8d8 3000 	ldr.w	r3, [r8]
 8006860:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006864:	6822      	ldr	r2, [r4, #0]
 8006866:	3307      	adds	r3, #7
 8006868:	f023 0307 	bic.w	r3, r3, #7
 800686c:	f103 0108 	add.w	r1, r3, #8
 8006870:	f8c8 1000 	str.w	r1, [r8]
 8006874:	ed93 0b00 	vldr	d0, [r3]
 8006878:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8006ad8 <_printf_float+0x2a0>
 800687c:	eeb0 7bc0 	vabs.f64	d7, d0
 8006880:	eeb4 7b46 	vcmp.f64	d7, d6
 8006884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006888:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800688c:	4682      	mov	sl, r0
 800688e:	dd24      	ble.n	80068da <_printf_float+0xa2>
 8006890:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006898:	d502      	bpl.n	80068a0 <_printf_float+0x68>
 800689a:	232d      	movs	r3, #45	; 0x2d
 800689c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068a0:	498f      	ldr	r1, [pc, #572]	; (8006ae0 <_printf_float+0x2a8>)
 80068a2:	4b90      	ldr	r3, [pc, #576]	; (8006ae4 <_printf_float+0x2ac>)
 80068a4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80068a8:	bf94      	ite	ls
 80068aa:	4688      	movls	r8, r1
 80068ac:	4698      	movhi	r8, r3
 80068ae:	2303      	movs	r3, #3
 80068b0:	6123      	str	r3, [r4, #16]
 80068b2:	f022 0204 	bic.w	r2, r2, #4
 80068b6:	2300      	movs	r3, #0
 80068b8:	6022      	str	r2, [r4, #0]
 80068ba:	9304      	str	r3, [sp, #16]
 80068bc:	9700      	str	r7, [sp, #0]
 80068be:	4633      	mov	r3, r6
 80068c0:	aa09      	add	r2, sp, #36	; 0x24
 80068c2:	4621      	mov	r1, r4
 80068c4:	4628      	mov	r0, r5
 80068c6:	f000 f9d1 	bl	8006c6c <_printf_common>
 80068ca:	3001      	adds	r0, #1
 80068cc:	f040 808a 	bne.w	80069e4 <_printf_float+0x1ac>
 80068d0:	f04f 30ff 	mov.w	r0, #4294967295
 80068d4:	b00b      	add	sp, #44	; 0x2c
 80068d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068da:	eeb4 0b40 	vcmp.f64	d0, d0
 80068de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068e2:	d709      	bvc.n	80068f8 <_printf_float+0xc0>
 80068e4:	ee10 3a90 	vmov	r3, s1
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	bfbc      	itt	lt
 80068ec:	232d      	movlt	r3, #45	; 0x2d
 80068ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80068f2:	497d      	ldr	r1, [pc, #500]	; (8006ae8 <_printf_float+0x2b0>)
 80068f4:	4b7d      	ldr	r3, [pc, #500]	; (8006aec <_printf_float+0x2b4>)
 80068f6:	e7d5      	b.n	80068a4 <_printf_float+0x6c>
 80068f8:	6863      	ldr	r3, [r4, #4]
 80068fa:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80068fe:	9104      	str	r1, [sp, #16]
 8006900:	1c59      	adds	r1, r3, #1
 8006902:	d13c      	bne.n	800697e <_printf_float+0x146>
 8006904:	2306      	movs	r3, #6
 8006906:	6063      	str	r3, [r4, #4]
 8006908:	2300      	movs	r3, #0
 800690a:	9303      	str	r3, [sp, #12]
 800690c:	ab08      	add	r3, sp, #32
 800690e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006912:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006916:	ab07      	add	r3, sp, #28
 8006918:	6861      	ldr	r1, [r4, #4]
 800691a:	9300      	str	r3, [sp, #0]
 800691c:	6022      	str	r2, [r4, #0]
 800691e:	f10d 031b 	add.w	r3, sp, #27
 8006922:	4628      	mov	r0, r5
 8006924:	f7ff fef5 	bl	8006712 <__cvt>
 8006928:	9b04      	ldr	r3, [sp, #16]
 800692a:	9907      	ldr	r1, [sp, #28]
 800692c:	2b47      	cmp	r3, #71	; 0x47
 800692e:	4680      	mov	r8, r0
 8006930:	d108      	bne.n	8006944 <_printf_float+0x10c>
 8006932:	1cc8      	adds	r0, r1, #3
 8006934:	db02      	blt.n	800693c <_printf_float+0x104>
 8006936:	6863      	ldr	r3, [r4, #4]
 8006938:	4299      	cmp	r1, r3
 800693a:	dd41      	ble.n	80069c0 <_printf_float+0x188>
 800693c:	f1a9 0902 	sub.w	r9, r9, #2
 8006940:	fa5f f989 	uxtb.w	r9, r9
 8006944:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006948:	d820      	bhi.n	800698c <_printf_float+0x154>
 800694a:	3901      	subs	r1, #1
 800694c:	464a      	mov	r2, r9
 800694e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006952:	9107      	str	r1, [sp, #28]
 8006954:	f7ff ff2f 	bl	80067b6 <__exponent>
 8006958:	9a08      	ldr	r2, [sp, #32]
 800695a:	9004      	str	r0, [sp, #16]
 800695c:	1813      	adds	r3, r2, r0
 800695e:	2a01      	cmp	r2, #1
 8006960:	6123      	str	r3, [r4, #16]
 8006962:	dc02      	bgt.n	800696a <_printf_float+0x132>
 8006964:	6822      	ldr	r2, [r4, #0]
 8006966:	07d2      	lsls	r2, r2, #31
 8006968:	d501      	bpl.n	800696e <_printf_float+0x136>
 800696a:	3301      	adds	r3, #1
 800696c:	6123      	str	r3, [r4, #16]
 800696e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d0a2      	beq.n	80068bc <_printf_float+0x84>
 8006976:	232d      	movs	r3, #45	; 0x2d
 8006978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800697c:	e79e      	b.n	80068bc <_printf_float+0x84>
 800697e:	9904      	ldr	r1, [sp, #16]
 8006980:	2947      	cmp	r1, #71	; 0x47
 8006982:	d1c1      	bne.n	8006908 <_printf_float+0xd0>
 8006984:	2b00      	cmp	r3, #0
 8006986:	d1bf      	bne.n	8006908 <_printf_float+0xd0>
 8006988:	2301      	movs	r3, #1
 800698a:	e7bc      	b.n	8006906 <_printf_float+0xce>
 800698c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006990:	d118      	bne.n	80069c4 <_printf_float+0x18c>
 8006992:	2900      	cmp	r1, #0
 8006994:	6863      	ldr	r3, [r4, #4]
 8006996:	dd0b      	ble.n	80069b0 <_printf_float+0x178>
 8006998:	6121      	str	r1, [r4, #16]
 800699a:	b913      	cbnz	r3, 80069a2 <_printf_float+0x16a>
 800699c:	6822      	ldr	r2, [r4, #0]
 800699e:	07d0      	lsls	r0, r2, #31
 80069a0:	d502      	bpl.n	80069a8 <_printf_float+0x170>
 80069a2:	3301      	adds	r3, #1
 80069a4:	440b      	add	r3, r1
 80069a6:	6123      	str	r3, [r4, #16]
 80069a8:	2300      	movs	r3, #0
 80069aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80069ac:	9304      	str	r3, [sp, #16]
 80069ae:	e7de      	b.n	800696e <_printf_float+0x136>
 80069b0:	b913      	cbnz	r3, 80069b8 <_printf_float+0x180>
 80069b2:	6822      	ldr	r2, [r4, #0]
 80069b4:	07d2      	lsls	r2, r2, #31
 80069b6:	d501      	bpl.n	80069bc <_printf_float+0x184>
 80069b8:	3302      	adds	r3, #2
 80069ba:	e7f4      	b.n	80069a6 <_printf_float+0x16e>
 80069bc:	2301      	movs	r3, #1
 80069be:	e7f2      	b.n	80069a6 <_printf_float+0x16e>
 80069c0:	f04f 0967 	mov.w	r9, #103	; 0x67
 80069c4:	9b08      	ldr	r3, [sp, #32]
 80069c6:	4299      	cmp	r1, r3
 80069c8:	db05      	blt.n	80069d6 <_printf_float+0x19e>
 80069ca:	6823      	ldr	r3, [r4, #0]
 80069cc:	6121      	str	r1, [r4, #16]
 80069ce:	07d8      	lsls	r0, r3, #31
 80069d0:	d5ea      	bpl.n	80069a8 <_printf_float+0x170>
 80069d2:	1c4b      	adds	r3, r1, #1
 80069d4:	e7e7      	b.n	80069a6 <_printf_float+0x16e>
 80069d6:	2900      	cmp	r1, #0
 80069d8:	bfd4      	ite	le
 80069da:	f1c1 0202 	rsble	r2, r1, #2
 80069de:	2201      	movgt	r2, #1
 80069e0:	4413      	add	r3, r2
 80069e2:	e7e0      	b.n	80069a6 <_printf_float+0x16e>
 80069e4:	6823      	ldr	r3, [r4, #0]
 80069e6:	055a      	lsls	r2, r3, #21
 80069e8:	d407      	bmi.n	80069fa <_printf_float+0x1c2>
 80069ea:	6923      	ldr	r3, [r4, #16]
 80069ec:	4642      	mov	r2, r8
 80069ee:	4631      	mov	r1, r6
 80069f0:	4628      	mov	r0, r5
 80069f2:	47b8      	blx	r7
 80069f4:	3001      	adds	r0, #1
 80069f6:	d12a      	bne.n	8006a4e <_printf_float+0x216>
 80069f8:	e76a      	b.n	80068d0 <_printf_float+0x98>
 80069fa:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80069fe:	f240 80e0 	bls.w	8006bc2 <_printf_float+0x38a>
 8006a02:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006a06:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a0e:	d133      	bne.n	8006a78 <_printf_float+0x240>
 8006a10:	4a37      	ldr	r2, [pc, #220]	; (8006af0 <_printf_float+0x2b8>)
 8006a12:	2301      	movs	r3, #1
 8006a14:	4631      	mov	r1, r6
 8006a16:	4628      	mov	r0, r5
 8006a18:	47b8      	blx	r7
 8006a1a:	3001      	adds	r0, #1
 8006a1c:	f43f af58 	beq.w	80068d0 <_printf_float+0x98>
 8006a20:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	db02      	blt.n	8006a2e <_printf_float+0x1f6>
 8006a28:	6823      	ldr	r3, [r4, #0]
 8006a2a:	07d8      	lsls	r0, r3, #31
 8006a2c:	d50f      	bpl.n	8006a4e <_printf_float+0x216>
 8006a2e:	4653      	mov	r3, sl
 8006a30:	465a      	mov	r2, fp
 8006a32:	4631      	mov	r1, r6
 8006a34:	4628      	mov	r0, r5
 8006a36:	47b8      	blx	r7
 8006a38:	3001      	adds	r0, #1
 8006a3a:	f43f af49 	beq.w	80068d0 <_printf_float+0x98>
 8006a3e:	f04f 0800 	mov.w	r8, #0
 8006a42:	f104 091a 	add.w	r9, r4, #26
 8006a46:	9b08      	ldr	r3, [sp, #32]
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	4543      	cmp	r3, r8
 8006a4c:	dc09      	bgt.n	8006a62 <_printf_float+0x22a>
 8006a4e:	6823      	ldr	r3, [r4, #0]
 8006a50:	079b      	lsls	r3, r3, #30
 8006a52:	f100 8106 	bmi.w	8006c62 <_printf_float+0x42a>
 8006a56:	68e0      	ldr	r0, [r4, #12]
 8006a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a5a:	4298      	cmp	r0, r3
 8006a5c:	bfb8      	it	lt
 8006a5e:	4618      	movlt	r0, r3
 8006a60:	e738      	b.n	80068d4 <_printf_float+0x9c>
 8006a62:	2301      	movs	r3, #1
 8006a64:	464a      	mov	r2, r9
 8006a66:	4631      	mov	r1, r6
 8006a68:	4628      	mov	r0, r5
 8006a6a:	47b8      	blx	r7
 8006a6c:	3001      	adds	r0, #1
 8006a6e:	f43f af2f 	beq.w	80068d0 <_printf_float+0x98>
 8006a72:	f108 0801 	add.w	r8, r8, #1
 8006a76:	e7e6      	b.n	8006a46 <_printf_float+0x20e>
 8006a78:	9b07      	ldr	r3, [sp, #28]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	dc3a      	bgt.n	8006af4 <_printf_float+0x2bc>
 8006a7e:	4a1c      	ldr	r2, [pc, #112]	; (8006af0 <_printf_float+0x2b8>)
 8006a80:	2301      	movs	r3, #1
 8006a82:	4631      	mov	r1, r6
 8006a84:	4628      	mov	r0, r5
 8006a86:	47b8      	blx	r7
 8006a88:	3001      	adds	r0, #1
 8006a8a:	f43f af21 	beq.w	80068d0 <_printf_float+0x98>
 8006a8e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	d102      	bne.n	8006a9c <_printf_float+0x264>
 8006a96:	6823      	ldr	r3, [r4, #0]
 8006a98:	07d9      	lsls	r1, r3, #31
 8006a9a:	d5d8      	bpl.n	8006a4e <_printf_float+0x216>
 8006a9c:	4653      	mov	r3, sl
 8006a9e:	465a      	mov	r2, fp
 8006aa0:	4631      	mov	r1, r6
 8006aa2:	4628      	mov	r0, r5
 8006aa4:	47b8      	blx	r7
 8006aa6:	3001      	adds	r0, #1
 8006aa8:	f43f af12 	beq.w	80068d0 <_printf_float+0x98>
 8006aac:	f04f 0900 	mov.w	r9, #0
 8006ab0:	f104 0a1a 	add.w	sl, r4, #26
 8006ab4:	9b07      	ldr	r3, [sp, #28]
 8006ab6:	425b      	negs	r3, r3
 8006ab8:	454b      	cmp	r3, r9
 8006aba:	dc01      	bgt.n	8006ac0 <_printf_float+0x288>
 8006abc:	9b08      	ldr	r3, [sp, #32]
 8006abe:	e795      	b.n	80069ec <_printf_float+0x1b4>
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	4652      	mov	r2, sl
 8006ac4:	4631      	mov	r1, r6
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	47b8      	blx	r7
 8006aca:	3001      	adds	r0, #1
 8006acc:	f43f af00 	beq.w	80068d0 <_printf_float+0x98>
 8006ad0:	f109 0901 	add.w	r9, r9, #1
 8006ad4:	e7ee      	b.n	8006ab4 <_printf_float+0x27c>
 8006ad6:	bf00      	nop
 8006ad8:	ffffffff 	.word	0xffffffff
 8006adc:	7fefffff 	.word	0x7fefffff
 8006ae0:	08009510 	.word	0x08009510
 8006ae4:	08009514 	.word	0x08009514
 8006ae8:	08009518 	.word	0x08009518
 8006aec:	0800951c 	.word	0x0800951c
 8006af0:	08009520 	.word	0x08009520
 8006af4:	9a08      	ldr	r2, [sp, #32]
 8006af6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006af8:	429a      	cmp	r2, r3
 8006afa:	bfa8      	it	ge
 8006afc:	461a      	movge	r2, r3
 8006afe:	2a00      	cmp	r2, #0
 8006b00:	4691      	mov	r9, r2
 8006b02:	dc38      	bgt.n	8006b76 <_printf_float+0x33e>
 8006b04:	2300      	movs	r3, #0
 8006b06:	9305      	str	r3, [sp, #20]
 8006b08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b0c:	f104 021a 	add.w	r2, r4, #26
 8006b10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b12:	9905      	ldr	r1, [sp, #20]
 8006b14:	9304      	str	r3, [sp, #16]
 8006b16:	eba3 0309 	sub.w	r3, r3, r9
 8006b1a:	428b      	cmp	r3, r1
 8006b1c:	dc33      	bgt.n	8006b86 <_printf_float+0x34e>
 8006b1e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	db3c      	blt.n	8006ba0 <_printf_float+0x368>
 8006b26:	6823      	ldr	r3, [r4, #0]
 8006b28:	07da      	lsls	r2, r3, #31
 8006b2a:	d439      	bmi.n	8006ba0 <_printf_float+0x368>
 8006b2c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8006b30:	eba2 0903 	sub.w	r9, r2, r3
 8006b34:	9b04      	ldr	r3, [sp, #16]
 8006b36:	1ad2      	subs	r2, r2, r3
 8006b38:	4591      	cmp	r9, r2
 8006b3a:	bfa8      	it	ge
 8006b3c:	4691      	movge	r9, r2
 8006b3e:	f1b9 0f00 	cmp.w	r9, #0
 8006b42:	dc35      	bgt.n	8006bb0 <_printf_float+0x378>
 8006b44:	f04f 0800 	mov.w	r8, #0
 8006b48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b4c:	f104 0a1a 	add.w	sl, r4, #26
 8006b50:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006b54:	1a9b      	subs	r3, r3, r2
 8006b56:	eba3 0309 	sub.w	r3, r3, r9
 8006b5a:	4543      	cmp	r3, r8
 8006b5c:	f77f af77 	ble.w	8006a4e <_printf_float+0x216>
 8006b60:	2301      	movs	r3, #1
 8006b62:	4652      	mov	r2, sl
 8006b64:	4631      	mov	r1, r6
 8006b66:	4628      	mov	r0, r5
 8006b68:	47b8      	blx	r7
 8006b6a:	3001      	adds	r0, #1
 8006b6c:	f43f aeb0 	beq.w	80068d0 <_printf_float+0x98>
 8006b70:	f108 0801 	add.w	r8, r8, #1
 8006b74:	e7ec      	b.n	8006b50 <_printf_float+0x318>
 8006b76:	4613      	mov	r3, r2
 8006b78:	4631      	mov	r1, r6
 8006b7a:	4642      	mov	r2, r8
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	47b8      	blx	r7
 8006b80:	3001      	adds	r0, #1
 8006b82:	d1bf      	bne.n	8006b04 <_printf_float+0x2cc>
 8006b84:	e6a4      	b.n	80068d0 <_printf_float+0x98>
 8006b86:	2301      	movs	r3, #1
 8006b88:	4631      	mov	r1, r6
 8006b8a:	4628      	mov	r0, r5
 8006b8c:	9204      	str	r2, [sp, #16]
 8006b8e:	47b8      	blx	r7
 8006b90:	3001      	adds	r0, #1
 8006b92:	f43f ae9d 	beq.w	80068d0 <_printf_float+0x98>
 8006b96:	9b05      	ldr	r3, [sp, #20]
 8006b98:	9a04      	ldr	r2, [sp, #16]
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	9305      	str	r3, [sp, #20]
 8006b9e:	e7b7      	b.n	8006b10 <_printf_float+0x2d8>
 8006ba0:	4653      	mov	r3, sl
 8006ba2:	465a      	mov	r2, fp
 8006ba4:	4631      	mov	r1, r6
 8006ba6:	4628      	mov	r0, r5
 8006ba8:	47b8      	blx	r7
 8006baa:	3001      	adds	r0, #1
 8006bac:	d1be      	bne.n	8006b2c <_printf_float+0x2f4>
 8006bae:	e68f      	b.n	80068d0 <_printf_float+0x98>
 8006bb0:	9a04      	ldr	r2, [sp, #16]
 8006bb2:	464b      	mov	r3, r9
 8006bb4:	4442      	add	r2, r8
 8006bb6:	4631      	mov	r1, r6
 8006bb8:	4628      	mov	r0, r5
 8006bba:	47b8      	blx	r7
 8006bbc:	3001      	adds	r0, #1
 8006bbe:	d1c1      	bne.n	8006b44 <_printf_float+0x30c>
 8006bc0:	e686      	b.n	80068d0 <_printf_float+0x98>
 8006bc2:	9a08      	ldr	r2, [sp, #32]
 8006bc4:	2a01      	cmp	r2, #1
 8006bc6:	dc01      	bgt.n	8006bcc <_printf_float+0x394>
 8006bc8:	07db      	lsls	r3, r3, #31
 8006bca:	d537      	bpl.n	8006c3c <_printf_float+0x404>
 8006bcc:	2301      	movs	r3, #1
 8006bce:	4642      	mov	r2, r8
 8006bd0:	4631      	mov	r1, r6
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	47b8      	blx	r7
 8006bd6:	3001      	adds	r0, #1
 8006bd8:	f43f ae7a 	beq.w	80068d0 <_printf_float+0x98>
 8006bdc:	4653      	mov	r3, sl
 8006bde:	465a      	mov	r2, fp
 8006be0:	4631      	mov	r1, r6
 8006be2:	4628      	mov	r0, r5
 8006be4:	47b8      	blx	r7
 8006be6:	3001      	adds	r0, #1
 8006be8:	f43f ae72 	beq.w	80068d0 <_printf_float+0x98>
 8006bec:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006bf0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bf8:	9b08      	ldr	r3, [sp, #32]
 8006bfa:	d01a      	beq.n	8006c32 <_printf_float+0x3fa>
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	f108 0201 	add.w	r2, r8, #1
 8006c02:	4631      	mov	r1, r6
 8006c04:	4628      	mov	r0, r5
 8006c06:	47b8      	blx	r7
 8006c08:	3001      	adds	r0, #1
 8006c0a:	d10e      	bne.n	8006c2a <_printf_float+0x3f2>
 8006c0c:	e660      	b.n	80068d0 <_printf_float+0x98>
 8006c0e:	2301      	movs	r3, #1
 8006c10:	464a      	mov	r2, r9
 8006c12:	4631      	mov	r1, r6
 8006c14:	4628      	mov	r0, r5
 8006c16:	47b8      	blx	r7
 8006c18:	3001      	adds	r0, #1
 8006c1a:	f43f ae59 	beq.w	80068d0 <_printf_float+0x98>
 8006c1e:	f108 0801 	add.w	r8, r8, #1
 8006c22:	9b08      	ldr	r3, [sp, #32]
 8006c24:	3b01      	subs	r3, #1
 8006c26:	4543      	cmp	r3, r8
 8006c28:	dcf1      	bgt.n	8006c0e <_printf_float+0x3d6>
 8006c2a:	9b04      	ldr	r3, [sp, #16]
 8006c2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006c30:	e6dd      	b.n	80069ee <_printf_float+0x1b6>
 8006c32:	f04f 0800 	mov.w	r8, #0
 8006c36:	f104 091a 	add.w	r9, r4, #26
 8006c3a:	e7f2      	b.n	8006c22 <_printf_float+0x3ea>
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	4642      	mov	r2, r8
 8006c40:	e7df      	b.n	8006c02 <_printf_float+0x3ca>
 8006c42:	2301      	movs	r3, #1
 8006c44:	464a      	mov	r2, r9
 8006c46:	4631      	mov	r1, r6
 8006c48:	4628      	mov	r0, r5
 8006c4a:	47b8      	blx	r7
 8006c4c:	3001      	adds	r0, #1
 8006c4e:	f43f ae3f 	beq.w	80068d0 <_printf_float+0x98>
 8006c52:	f108 0801 	add.w	r8, r8, #1
 8006c56:	68e3      	ldr	r3, [r4, #12]
 8006c58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c5a:	1a5b      	subs	r3, r3, r1
 8006c5c:	4543      	cmp	r3, r8
 8006c5e:	dcf0      	bgt.n	8006c42 <_printf_float+0x40a>
 8006c60:	e6f9      	b.n	8006a56 <_printf_float+0x21e>
 8006c62:	f04f 0800 	mov.w	r8, #0
 8006c66:	f104 0919 	add.w	r9, r4, #25
 8006c6a:	e7f4      	b.n	8006c56 <_printf_float+0x41e>

08006c6c <_printf_common>:
 8006c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c70:	4616      	mov	r6, r2
 8006c72:	4699      	mov	r9, r3
 8006c74:	688a      	ldr	r2, [r1, #8]
 8006c76:	690b      	ldr	r3, [r1, #16]
 8006c78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	bfb8      	it	lt
 8006c80:	4613      	movlt	r3, r2
 8006c82:	6033      	str	r3, [r6, #0]
 8006c84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c88:	4607      	mov	r7, r0
 8006c8a:	460c      	mov	r4, r1
 8006c8c:	b10a      	cbz	r2, 8006c92 <_printf_common+0x26>
 8006c8e:	3301      	adds	r3, #1
 8006c90:	6033      	str	r3, [r6, #0]
 8006c92:	6823      	ldr	r3, [r4, #0]
 8006c94:	0699      	lsls	r1, r3, #26
 8006c96:	bf42      	ittt	mi
 8006c98:	6833      	ldrmi	r3, [r6, #0]
 8006c9a:	3302      	addmi	r3, #2
 8006c9c:	6033      	strmi	r3, [r6, #0]
 8006c9e:	6825      	ldr	r5, [r4, #0]
 8006ca0:	f015 0506 	ands.w	r5, r5, #6
 8006ca4:	d106      	bne.n	8006cb4 <_printf_common+0x48>
 8006ca6:	f104 0a19 	add.w	sl, r4, #25
 8006caa:	68e3      	ldr	r3, [r4, #12]
 8006cac:	6832      	ldr	r2, [r6, #0]
 8006cae:	1a9b      	subs	r3, r3, r2
 8006cb0:	42ab      	cmp	r3, r5
 8006cb2:	dc26      	bgt.n	8006d02 <_printf_common+0x96>
 8006cb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006cb8:	1e13      	subs	r3, r2, #0
 8006cba:	6822      	ldr	r2, [r4, #0]
 8006cbc:	bf18      	it	ne
 8006cbe:	2301      	movne	r3, #1
 8006cc0:	0692      	lsls	r2, r2, #26
 8006cc2:	d42b      	bmi.n	8006d1c <_printf_common+0xb0>
 8006cc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006cc8:	4649      	mov	r1, r9
 8006cca:	4638      	mov	r0, r7
 8006ccc:	47c0      	blx	r8
 8006cce:	3001      	adds	r0, #1
 8006cd0:	d01e      	beq.n	8006d10 <_printf_common+0xa4>
 8006cd2:	6823      	ldr	r3, [r4, #0]
 8006cd4:	6922      	ldr	r2, [r4, #16]
 8006cd6:	f003 0306 	and.w	r3, r3, #6
 8006cda:	2b04      	cmp	r3, #4
 8006cdc:	bf02      	ittt	eq
 8006cde:	68e5      	ldreq	r5, [r4, #12]
 8006ce0:	6833      	ldreq	r3, [r6, #0]
 8006ce2:	1aed      	subeq	r5, r5, r3
 8006ce4:	68a3      	ldr	r3, [r4, #8]
 8006ce6:	bf0c      	ite	eq
 8006ce8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006cec:	2500      	movne	r5, #0
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	bfc4      	itt	gt
 8006cf2:	1a9b      	subgt	r3, r3, r2
 8006cf4:	18ed      	addgt	r5, r5, r3
 8006cf6:	2600      	movs	r6, #0
 8006cf8:	341a      	adds	r4, #26
 8006cfa:	42b5      	cmp	r5, r6
 8006cfc:	d11a      	bne.n	8006d34 <_printf_common+0xc8>
 8006cfe:	2000      	movs	r0, #0
 8006d00:	e008      	b.n	8006d14 <_printf_common+0xa8>
 8006d02:	2301      	movs	r3, #1
 8006d04:	4652      	mov	r2, sl
 8006d06:	4649      	mov	r1, r9
 8006d08:	4638      	mov	r0, r7
 8006d0a:	47c0      	blx	r8
 8006d0c:	3001      	adds	r0, #1
 8006d0e:	d103      	bne.n	8006d18 <_printf_common+0xac>
 8006d10:	f04f 30ff 	mov.w	r0, #4294967295
 8006d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d18:	3501      	adds	r5, #1
 8006d1a:	e7c6      	b.n	8006caa <_printf_common+0x3e>
 8006d1c:	18e1      	adds	r1, r4, r3
 8006d1e:	1c5a      	adds	r2, r3, #1
 8006d20:	2030      	movs	r0, #48	; 0x30
 8006d22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d26:	4422      	add	r2, r4
 8006d28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d30:	3302      	adds	r3, #2
 8006d32:	e7c7      	b.n	8006cc4 <_printf_common+0x58>
 8006d34:	2301      	movs	r3, #1
 8006d36:	4622      	mov	r2, r4
 8006d38:	4649      	mov	r1, r9
 8006d3a:	4638      	mov	r0, r7
 8006d3c:	47c0      	blx	r8
 8006d3e:	3001      	adds	r0, #1
 8006d40:	d0e6      	beq.n	8006d10 <_printf_common+0xa4>
 8006d42:	3601      	adds	r6, #1
 8006d44:	e7d9      	b.n	8006cfa <_printf_common+0x8e>
	...

08006d48 <_printf_i>:
 8006d48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d4c:	7e0f      	ldrb	r7, [r1, #24]
 8006d4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d50:	2f78      	cmp	r7, #120	; 0x78
 8006d52:	4691      	mov	r9, r2
 8006d54:	4680      	mov	r8, r0
 8006d56:	460c      	mov	r4, r1
 8006d58:	469a      	mov	sl, r3
 8006d5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006d5e:	d807      	bhi.n	8006d70 <_printf_i+0x28>
 8006d60:	2f62      	cmp	r7, #98	; 0x62
 8006d62:	d80a      	bhi.n	8006d7a <_printf_i+0x32>
 8006d64:	2f00      	cmp	r7, #0
 8006d66:	f000 80d4 	beq.w	8006f12 <_printf_i+0x1ca>
 8006d6a:	2f58      	cmp	r7, #88	; 0x58
 8006d6c:	f000 80c0 	beq.w	8006ef0 <_printf_i+0x1a8>
 8006d70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d78:	e03a      	b.n	8006df0 <_printf_i+0xa8>
 8006d7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d7e:	2b15      	cmp	r3, #21
 8006d80:	d8f6      	bhi.n	8006d70 <_printf_i+0x28>
 8006d82:	a101      	add	r1, pc, #4	; (adr r1, 8006d88 <_printf_i+0x40>)
 8006d84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d88:	08006de1 	.word	0x08006de1
 8006d8c:	08006df5 	.word	0x08006df5
 8006d90:	08006d71 	.word	0x08006d71
 8006d94:	08006d71 	.word	0x08006d71
 8006d98:	08006d71 	.word	0x08006d71
 8006d9c:	08006d71 	.word	0x08006d71
 8006da0:	08006df5 	.word	0x08006df5
 8006da4:	08006d71 	.word	0x08006d71
 8006da8:	08006d71 	.word	0x08006d71
 8006dac:	08006d71 	.word	0x08006d71
 8006db0:	08006d71 	.word	0x08006d71
 8006db4:	08006ef9 	.word	0x08006ef9
 8006db8:	08006e21 	.word	0x08006e21
 8006dbc:	08006eb3 	.word	0x08006eb3
 8006dc0:	08006d71 	.word	0x08006d71
 8006dc4:	08006d71 	.word	0x08006d71
 8006dc8:	08006f1b 	.word	0x08006f1b
 8006dcc:	08006d71 	.word	0x08006d71
 8006dd0:	08006e21 	.word	0x08006e21
 8006dd4:	08006d71 	.word	0x08006d71
 8006dd8:	08006d71 	.word	0x08006d71
 8006ddc:	08006ebb 	.word	0x08006ebb
 8006de0:	682b      	ldr	r3, [r5, #0]
 8006de2:	1d1a      	adds	r2, r3, #4
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	602a      	str	r2, [r5, #0]
 8006de8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006df0:	2301      	movs	r3, #1
 8006df2:	e09f      	b.n	8006f34 <_printf_i+0x1ec>
 8006df4:	6820      	ldr	r0, [r4, #0]
 8006df6:	682b      	ldr	r3, [r5, #0]
 8006df8:	0607      	lsls	r7, r0, #24
 8006dfa:	f103 0104 	add.w	r1, r3, #4
 8006dfe:	6029      	str	r1, [r5, #0]
 8006e00:	d501      	bpl.n	8006e06 <_printf_i+0xbe>
 8006e02:	681e      	ldr	r6, [r3, #0]
 8006e04:	e003      	b.n	8006e0e <_printf_i+0xc6>
 8006e06:	0646      	lsls	r6, r0, #25
 8006e08:	d5fb      	bpl.n	8006e02 <_printf_i+0xba>
 8006e0a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006e0e:	2e00      	cmp	r6, #0
 8006e10:	da03      	bge.n	8006e1a <_printf_i+0xd2>
 8006e12:	232d      	movs	r3, #45	; 0x2d
 8006e14:	4276      	negs	r6, r6
 8006e16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e1a:	485a      	ldr	r0, [pc, #360]	; (8006f84 <_printf_i+0x23c>)
 8006e1c:	230a      	movs	r3, #10
 8006e1e:	e012      	b.n	8006e46 <_printf_i+0xfe>
 8006e20:	682b      	ldr	r3, [r5, #0]
 8006e22:	6820      	ldr	r0, [r4, #0]
 8006e24:	1d19      	adds	r1, r3, #4
 8006e26:	6029      	str	r1, [r5, #0]
 8006e28:	0605      	lsls	r5, r0, #24
 8006e2a:	d501      	bpl.n	8006e30 <_printf_i+0xe8>
 8006e2c:	681e      	ldr	r6, [r3, #0]
 8006e2e:	e002      	b.n	8006e36 <_printf_i+0xee>
 8006e30:	0641      	lsls	r1, r0, #25
 8006e32:	d5fb      	bpl.n	8006e2c <_printf_i+0xe4>
 8006e34:	881e      	ldrh	r6, [r3, #0]
 8006e36:	4853      	ldr	r0, [pc, #332]	; (8006f84 <_printf_i+0x23c>)
 8006e38:	2f6f      	cmp	r7, #111	; 0x6f
 8006e3a:	bf0c      	ite	eq
 8006e3c:	2308      	moveq	r3, #8
 8006e3e:	230a      	movne	r3, #10
 8006e40:	2100      	movs	r1, #0
 8006e42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e46:	6865      	ldr	r5, [r4, #4]
 8006e48:	60a5      	str	r5, [r4, #8]
 8006e4a:	2d00      	cmp	r5, #0
 8006e4c:	bfa2      	ittt	ge
 8006e4e:	6821      	ldrge	r1, [r4, #0]
 8006e50:	f021 0104 	bicge.w	r1, r1, #4
 8006e54:	6021      	strge	r1, [r4, #0]
 8006e56:	b90e      	cbnz	r6, 8006e5c <_printf_i+0x114>
 8006e58:	2d00      	cmp	r5, #0
 8006e5a:	d04b      	beq.n	8006ef4 <_printf_i+0x1ac>
 8006e5c:	4615      	mov	r5, r2
 8006e5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006e62:	fb03 6711 	mls	r7, r3, r1, r6
 8006e66:	5dc7      	ldrb	r7, [r0, r7]
 8006e68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006e6c:	4637      	mov	r7, r6
 8006e6e:	42bb      	cmp	r3, r7
 8006e70:	460e      	mov	r6, r1
 8006e72:	d9f4      	bls.n	8006e5e <_printf_i+0x116>
 8006e74:	2b08      	cmp	r3, #8
 8006e76:	d10b      	bne.n	8006e90 <_printf_i+0x148>
 8006e78:	6823      	ldr	r3, [r4, #0]
 8006e7a:	07de      	lsls	r6, r3, #31
 8006e7c:	d508      	bpl.n	8006e90 <_printf_i+0x148>
 8006e7e:	6923      	ldr	r3, [r4, #16]
 8006e80:	6861      	ldr	r1, [r4, #4]
 8006e82:	4299      	cmp	r1, r3
 8006e84:	bfde      	ittt	le
 8006e86:	2330      	movle	r3, #48	; 0x30
 8006e88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006e8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006e90:	1b52      	subs	r2, r2, r5
 8006e92:	6122      	str	r2, [r4, #16]
 8006e94:	f8cd a000 	str.w	sl, [sp]
 8006e98:	464b      	mov	r3, r9
 8006e9a:	aa03      	add	r2, sp, #12
 8006e9c:	4621      	mov	r1, r4
 8006e9e:	4640      	mov	r0, r8
 8006ea0:	f7ff fee4 	bl	8006c6c <_printf_common>
 8006ea4:	3001      	adds	r0, #1
 8006ea6:	d14a      	bne.n	8006f3e <_printf_i+0x1f6>
 8006ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8006eac:	b004      	add	sp, #16
 8006eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eb2:	6823      	ldr	r3, [r4, #0]
 8006eb4:	f043 0320 	orr.w	r3, r3, #32
 8006eb8:	6023      	str	r3, [r4, #0]
 8006eba:	4833      	ldr	r0, [pc, #204]	; (8006f88 <_printf_i+0x240>)
 8006ebc:	2778      	movs	r7, #120	; 0x78
 8006ebe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006ec2:	6823      	ldr	r3, [r4, #0]
 8006ec4:	6829      	ldr	r1, [r5, #0]
 8006ec6:	061f      	lsls	r7, r3, #24
 8006ec8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ecc:	d402      	bmi.n	8006ed4 <_printf_i+0x18c>
 8006ece:	065f      	lsls	r7, r3, #25
 8006ed0:	bf48      	it	mi
 8006ed2:	b2b6      	uxthmi	r6, r6
 8006ed4:	07df      	lsls	r7, r3, #31
 8006ed6:	bf48      	it	mi
 8006ed8:	f043 0320 	orrmi.w	r3, r3, #32
 8006edc:	6029      	str	r1, [r5, #0]
 8006ede:	bf48      	it	mi
 8006ee0:	6023      	strmi	r3, [r4, #0]
 8006ee2:	b91e      	cbnz	r6, 8006eec <_printf_i+0x1a4>
 8006ee4:	6823      	ldr	r3, [r4, #0]
 8006ee6:	f023 0320 	bic.w	r3, r3, #32
 8006eea:	6023      	str	r3, [r4, #0]
 8006eec:	2310      	movs	r3, #16
 8006eee:	e7a7      	b.n	8006e40 <_printf_i+0xf8>
 8006ef0:	4824      	ldr	r0, [pc, #144]	; (8006f84 <_printf_i+0x23c>)
 8006ef2:	e7e4      	b.n	8006ebe <_printf_i+0x176>
 8006ef4:	4615      	mov	r5, r2
 8006ef6:	e7bd      	b.n	8006e74 <_printf_i+0x12c>
 8006ef8:	682b      	ldr	r3, [r5, #0]
 8006efa:	6826      	ldr	r6, [r4, #0]
 8006efc:	6961      	ldr	r1, [r4, #20]
 8006efe:	1d18      	adds	r0, r3, #4
 8006f00:	6028      	str	r0, [r5, #0]
 8006f02:	0635      	lsls	r5, r6, #24
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	d501      	bpl.n	8006f0c <_printf_i+0x1c4>
 8006f08:	6019      	str	r1, [r3, #0]
 8006f0a:	e002      	b.n	8006f12 <_printf_i+0x1ca>
 8006f0c:	0670      	lsls	r0, r6, #25
 8006f0e:	d5fb      	bpl.n	8006f08 <_printf_i+0x1c0>
 8006f10:	8019      	strh	r1, [r3, #0]
 8006f12:	2300      	movs	r3, #0
 8006f14:	6123      	str	r3, [r4, #16]
 8006f16:	4615      	mov	r5, r2
 8006f18:	e7bc      	b.n	8006e94 <_printf_i+0x14c>
 8006f1a:	682b      	ldr	r3, [r5, #0]
 8006f1c:	1d1a      	adds	r2, r3, #4
 8006f1e:	602a      	str	r2, [r5, #0]
 8006f20:	681d      	ldr	r5, [r3, #0]
 8006f22:	6862      	ldr	r2, [r4, #4]
 8006f24:	2100      	movs	r1, #0
 8006f26:	4628      	mov	r0, r5
 8006f28:	f7f9 f98a 	bl	8000240 <memchr>
 8006f2c:	b108      	cbz	r0, 8006f32 <_printf_i+0x1ea>
 8006f2e:	1b40      	subs	r0, r0, r5
 8006f30:	6060      	str	r0, [r4, #4]
 8006f32:	6863      	ldr	r3, [r4, #4]
 8006f34:	6123      	str	r3, [r4, #16]
 8006f36:	2300      	movs	r3, #0
 8006f38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f3c:	e7aa      	b.n	8006e94 <_printf_i+0x14c>
 8006f3e:	6923      	ldr	r3, [r4, #16]
 8006f40:	462a      	mov	r2, r5
 8006f42:	4649      	mov	r1, r9
 8006f44:	4640      	mov	r0, r8
 8006f46:	47d0      	blx	sl
 8006f48:	3001      	adds	r0, #1
 8006f4a:	d0ad      	beq.n	8006ea8 <_printf_i+0x160>
 8006f4c:	6823      	ldr	r3, [r4, #0]
 8006f4e:	079b      	lsls	r3, r3, #30
 8006f50:	d413      	bmi.n	8006f7a <_printf_i+0x232>
 8006f52:	68e0      	ldr	r0, [r4, #12]
 8006f54:	9b03      	ldr	r3, [sp, #12]
 8006f56:	4298      	cmp	r0, r3
 8006f58:	bfb8      	it	lt
 8006f5a:	4618      	movlt	r0, r3
 8006f5c:	e7a6      	b.n	8006eac <_printf_i+0x164>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	4632      	mov	r2, r6
 8006f62:	4649      	mov	r1, r9
 8006f64:	4640      	mov	r0, r8
 8006f66:	47d0      	blx	sl
 8006f68:	3001      	adds	r0, #1
 8006f6a:	d09d      	beq.n	8006ea8 <_printf_i+0x160>
 8006f6c:	3501      	adds	r5, #1
 8006f6e:	68e3      	ldr	r3, [r4, #12]
 8006f70:	9903      	ldr	r1, [sp, #12]
 8006f72:	1a5b      	subs	r3, r3, r1
 8006f74:	42ab      	cmp	r3, r5
 8006f76:	dcf2      	bgt.n	8006f5e <_printf_i+0x216>
 8006f78:	e7eb      	b.n	8006f52 <_printf_i+0x20a>
 8006f7a:	2500      	movs	r5, #0
 8006f7c:	f104 0619 	add.w	r6, r4, #25
 8006f80:	e7f5      	b.n	8006f6e <_printf_i+0x226>
 8006f82:	bf00      	nop
 8006f84:	08009522 	.word	0x08009522
 8006f88:	08009533 	.word	0x08009533

08006f8c <std>:
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	b510      	push	{r4, lr}
 8006f90:	4604      	mov	r4, r0
 8006f92:	e9c0 3300 	strd	r3, r3, [r0]
 8006f96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f9a:	6083      	str	r3, [r0, #8]
 8006f9c:	8181      	strh	r1, [r0, #12]
 8006f9e:	6643      	str	r3, [r0, #100]	; 0x64
 8006fa0:	81c2      	strh	r2, [r0, #14]
 8006fa2:	6183      	str	r3, [r0, #24]
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	2208      	movs	r2, #8
 8006fa8:	305c      	adds	r0, #92	; 0x5c
 8006faa:	f000 f902 	bl	80071b2 <memset>
 8006fae:	4b05      	ldr	r3, [pc, #20]	; (8006fc4 <std+0x38>)
 8006fb0:	6263      	str	r3, [r4, #36]	; 0x24
 8006fb2:	4b05      	ldr	r3, [pc, #20]	; (8006fc8 <std+0x3c>)
 8006fb4:	62a3      	str	r3, [r4, #40]	; 0x28
 8006fb6:	4b05      	ldr	r3, [pc, #20]	; (8006fcc <std+0x40>)
 8006fb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006fba:	4b05      	ldr	r3, [pc, #20]	; (8006fd0 <std+0x44>)
 8006fbc:	6224      	str	r4, [r4, #32]
 8006fbe:	6323      	str	r3, [r4, #48]	; 0x30
 8006fc0:	bd10      	pop	{r4, pc}
 8006fc2:	bf00      	nop
 8006fc4:	0800712d 	.word	0x0800712d
 8006fc8:	0800714f 	.word	0x0800714f
 8006fcc:	08007187 	.word	0x08007187
 8006fd0:	080071ab 	.word	0x080071ab

08006fd4 <stdio_exit_handler>:
 8006fd4:	4a02      	ldr	r2, [pc, #8]	; (8006fe0 <stdio_exit_handler+0xc>)
 8006fd6:	4903      	ldr	r1, [pc, #12]	; (8006fe4 <stdio_exit_handler+0x10>)
 8006fd8:	4803      	ldr	r0, [pc, #12]	; (8006fe8 <stdio_exit_handler+0x14>)
 8006fda:	f000 b869 	b.w	80070b0 <_fwalk_sglue>
 8006fde:	bf00      	nop
 8006fe0:	20000014 	.word	0x20000014
 8006fe4:	08008b4d 	.word	0x08008b4d
 8006fe8:	20000020 	.word	0x20000020

08006fec <cleanup_stdio>:
 8006fec:	6841      	ldr	r1, [r0, #4]
 8006fee:	4b0c      	ldr	r3, [pc, #48]	; (8007020 <cleanup_stdio+0x34>)
 8006ff0:	4299      	cmp	r1, r3
 8006ff2:	b510      	push	{r4, lr}
 8006ff4:	4604      	mov	r4, r0
 8006ff6:	d001      	beq.n	8006ffc <cleanup_stdio+0x10>
 8006ff8:	f001 fda8 	bl	8008b4c <_fflush_r>
 8006ffc:	68a1      	ldr	r1, [r4, #8]
 8006ffe:	4b09      	ldr	r3, [pc, #36]	; (8007024 <cleanup_stdio+0x38>)
 8007000:	4299      	cmp	r1, r3
 8007002:	d002      	beq.n	800700a <cleanup_stdio+0x1e>
 8007004:	4620      	mov	r0, r4
 8007006:	f001 fda1 	bl	8008b4c <_fflush_r>
 800700a:	68e1      	ldr	r1, [r4, #12]
 800700c:	4b06      	ldr	r3, [pc, #24]	; (8007028 <cleanup_stdio+0x3c>)
 800700e:	4299      	cmp	r1, r3
 8007010:	d004      	beq.n	800701c <cleanup_stdio+0x30>
 8007012:	4620      	mov	r0, r4
 8007014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007018:	f001 bd98 	b.w	8008b4c <_fflush_r>
 800701c:	bd10      	pop	{r4, pc}
 800701e:	bf00      	nop
 8007020:	200003e8 	.word	0x200003e8
 8007024:	20000450 	.word	0x20000450
 8007028:	200004b8 	.word	0x200004b8

0800702c <global_stdio_init.part.0>:
 800702c:	b510      	push	{r4, lr}
 800702e:	4b0b      	ldr	r3, [pc, #44]	; (800705c <global_stdio_init.part.0+0x30>)
 8007030:	4c0b      	ldr	r4, [pc, #44]	; (8007060 <global_stdio_init.part.0+0x34>)
 8007032:	4a0c      	ldr	r2, [pc, #48]	; (8007064 <global_stdio_init.part.0+0x38>)
 8007034:	601a      	str	r2, [r3, #0]
 8007036:	4620      	mov	r0, r4
 8007038:	2200      	movs	r2, #0
 800703a:	2104      	movs	r1, #4
 800703c:	f7ff ffa6 	bl	8006f8c <std>
 8007040:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007044:	2201      	movs	r2, #1
 8007046:	2109      	movs	r1, #9
 8007048:	f7ff ffa0 	bl	8006f8c <std>
 800704c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007050:	2202      	movs	r2, #2
 8007052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007056:	2112      	movs	r1, #18
 8007058:	f7ff bf98 	b.w	8006f8c <std>
 800705c:	20000520 	.word	0x20000520
 8007060:	200003e8 	.word	0x200003e8
 8007064:	08006fd5 	.word	0x08006fd5

08007068 <__sfp_lock_acquire>:
 8007068:	4801      	ldr	r0, [pc, #4]	; (8007070 <__sfp_lock_acquire+0x8>)
 800706a:	f000 b91f 	b.w	80072ac <__retarget_lock_acquire_recursive>
 800706e:	bf00      	nop
 8007070:	20000529 	.word	0x20000529

08007074 <__sfp_lock_release>:
 8007074:	4801      	ldr	r0, [pc, #4]	; (800707c <__sfp_lock_release+0x8>)
 8007076:	f000 b91a 	b.w	80072ae <__retarget_lock_release_recursive>
 800707a:	bf00      	nop
 800707c:	20000529 	.word	0x20000529

08007080 <__sinit>:
 8007080:	b510      	push	{r4, lr}
 8007082:	4604      	mov	r4, r0
 8007084:	f7ff fff0 	bl	8007068 <__sfp_lock_acquire>
 8007088:	6a23      	ldr	r3, [r4, #32]
 800708a:	b11b      	cbz	r3, 8007094 <__sinit+0x14>
 800708c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007090:	f7ff bff0 	b.w	8007074 <__sfp_lock_release>
 8007094:	4b04      	ldr	r3, [pc, #16]	; (80070a8 <__sinit+0x28>)
 8007096:	6223      	str	r3, [r4, #32]
 8007098:	4b04      	ldr	r3, [pc, #16]	; (80070ac <__sinit+0x2c>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1f5      	bne.n	800708c <__sinit+0xc>
 80070a0:	f7ff ffc4 	bl	800702c <global_stdio_init.part.0>
 80070a4:	e7f2      	b.n	800708c <__sinit+0xc>
 80070a6:	bf00      	nop
 80070a8:	08006fed 	.word	0x08006fed
 80070ac:	20000520 	.word	0x20000520

080070b0 <_fwalk_sglue>:
 80070b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070b4:	4607      	mov	r7, r0
 80070b6:	4688      	mov	r8, r1
 80070b8:	4614      	mov	r4, r2
 80070ba:	2600      	movs	r6, #0
 80070bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070c0:	f1b9 0901 	subs.w	r9, r9, #1
 80070c4:	d505      	bpl.n	80070d2 <_fwalk_sglue+0x22>
 80070c6:	6824      	ldr	r4, [r4, #0]
 80070c8:	2c00      	cmp	r4, #0
 80070ca:	d1f7      	bne.n	80070bc <_fwalk_sglue+0xc>
 80070cc:	4630      	mov	r0, r6
 80070ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070d2:	89ab      	ldrh	r3, [r5, #12]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d907      	bls.n	80070e8 <_fwalk_sglue+0x38>
 80070d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070dc:	3301      	adds	r3, #1
 80070de:	d003      	beq.n	80070e8 <_fwalk_sglue+0x38>
 80070e0:	4629      	mov	r1, r5
 80070e2:	4638      	mov	r0, r7
 80070e4:	47c0      	blx	r8
 80070e6:	4306      	orrs	r6, r0
 80070e8:	3568      	adds	r5, #104	; 0x68
 80070ea:	e7e9      	b.n	80070c0 <_fwalk_sglue+0x10>

080070ec <siprintf>:
 80070ec:	b40e      	push	{r1, r2, r3}
 80070ee:	b500      	push	{lr}
 80070f0:	b09c      	sub	sp, #112	; 0x70
 80070f2:	ab1d      	add	r3, sp, #116	; 0x74
 80070f4:	9002      	str	r0, [sp, #8]
 80070f6:	9006      	str	r0, [sp, #24]
 80070f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80070fc:	4809      	ldr	r0, [pc, #36]	; (8007124 <siprintf+0x38>)
 80070fe:	9107      	str	r1, [sp, #28]
 8007100:	9104      	str	r1, [sp, #16]
 8007102:	4909      	ldr	r1, [pc, #36]	; (8007128 <siprintf+0x3c>)
 8007104:	f853 2b04 	ldr.w	r2, [r3], #4
 8007108:	9105      	str	r1, [sp, #20]
 800710a:	6800      	ldr	r0, [r0, #0]
 800710c:	9301      	str	r3, [sp, #4]
 800710e:	a902      	add	r1, sp, #8
 8007110:	f001 fb98 	bl	8008844 <_svfiprintf_r>
 8007114:	9b02      	ldr	r3, [sp, #8]
 8007116:	2200      	movs	r2, #0
 8007118:	701a      	strb	r2, [r3, #0]
 800711a:	b01c      	add	sp, #112	; 0x70
 800711c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007120:	b003      	add	sp, #12
 8007122:	4770      	bx	lr
 8007124:	2000006c 	.word	0x2000006c
 8007128:	ffff0208 	.word	0xffff0208

0800712c <__sread>:
 800712c:	b510      	push	{r4, lr}
 800712e:	460c      	mov	r4, r1
 8007130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007134:	f000 f86c 	bl	8007210 <_read_r>
 8007138:	2800      	cmp	r0, #0
 800713a:	bfab      	itete	ge
 800713c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800713e:	89a3      	ldrhlt	r3, [r4, #12]
 8007140:	181b      	addge	r3, r3, r0
 8007142:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007146:	bfac      	ite	ge
 8007148:	6563      	strge	r3, [r4, #84]	; 0x54
 800714a:	81a3      	strhlt	r3, [r4, #12]
 800714c:	bd10      	pop	{r4, pc}

0800714e <__swrite>:
 800714e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007152:	461f      	mov	r7, r3
 8007154:	898b      	ldrh	r3, [r1, #12]
 8007156:	05db      	lsls	r3, r3, #23
 8007158:	4605      	mov	r5, r0
 800715a:	460c      	mov	r4, r1
 800715c:	4616      	mov	r6, r2
 800715e:	d505      	bpl.n	800716c <__swrite+0x1e>
 8007160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007164:	2302      	movs	r3, #2
 8007166:	2200      	movs	r2, #0
 8007168:	f000 f840 	bl	80071ec <_lseek_r>
 800716c:	89a3      	ldrh	r3, [r4, #12]
 800716e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007172:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007176:	81a3      	strh	r3, [r4, #12]
 8007178:	4632      	mov	r2, r6
 800717a:	463b      	mov	r3, r7
 800717c:	4628      	mov	r0, r5
 800717e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007182:	f000 b857 	b.w	8007234 <_write_r>

08007186 <__sseek>:
 8007186:	b510      	push	{r4, lr}
 8007188:	460c      	mov	r4, r1
 800718a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800718e:	f000 f82d 	bl	80071ec <_lseek_r>
 8007192:	1c43      	adds	r3, r0, #1
 8007194:	89a3      	ldrh	r3, [r4, #12]
 8007196:	bf15      	itete	ne
 8007198:	6560      	strne	r0, [r4, #84]	; 0x54
 800719a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800719e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80071a2:	81a3      	strheq	r3, [r4, #12]
 80071a4:	bf18      	it	ne
 80071a6:	81a3      	strhne	r3, [r4, #12]
 80071a8:	bd10      	pop	{r4, pc}

080071aa <__sclose>:
 80071aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071ae:	f000 b80d 	b.w	80071cc <_close_r>

080071b2 <memset>:
 80071b2:	4402      	add	r2, r0
 80071b4:	4603      	mov	r3, r0
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d100      	bne.n	80071bc <memset+0xa>
 80071ba:	4770      	bx	lr
 80071bc:	f803 1b01 	strb.w	r1, [r3], #1
 80071c0:	e7f9      	b.n	80071b6 <memset+0x4>
	...

080071c4 <_localeconv_r>:
 80071c4:	4800      	ldr	r0, [pc, #0]	; (80071c8 <_localeconv_r+0x4>)
 80071c6:	4770      	bx	lr
 80071c8:	20000160 	.word	0x20000160

080071cc <_close_r>:
 80071cc:	b538      	push	{r3, r4, r5, lr}
 80071ce:	4d06      	ldr	r5, [pc, #24]	; (80071e8 <_close_r+0x1c>)
 80071d0:	2300      	movs	r3, #0
 80071d2:	4604      	mov	r4, r0
 80071d4:	4608      	mov	r0, r1
 80071d6:	602b      	str	r3, [r5, #0]
 80071d8:	f7f9 ffe1 	bl	800119e <_close>
 80071dc:	1c43      	adds	r3, r0, #1
 80071de:	d102      	bne.n	80071e6 <_close_r+0x1a>
 80071e0:	682b      	ldr	r3, [r5, #0]
 80071e2:	b103      	cbz	r3, 80071e6 <_close_r+0x1a>
 80071e4:	6023      	str	r3, [r4, #0]
 80071e6:	bd38      	pop	{r3, r4, r5, pc}
 80071e8:	20000524 	.word	0x20000524

080071ec <_lseek_r>:
 80071ec:	b538      	push	{r3, r4, r5, lr}
 80071ee:	4d07      	ldr	r5, [pc, #28]	; (800720c <_lseek_r+0x20>)
 80071f0:	4604      	mov	r4, r0
 80071f2:	4608      	mov	r0, r1
 80071f4:	4611      	mov	r1, r2
 80071f6:	2200      	movs	r2, #0
 80071f8:	602a      	str	r2, [r5, #0]
 80071fa:	461a      	mov	r2, r3
 80071fc:	f7f9 fff6 	bl	80011ec <_lseek>
 8007200:	1c43      	adds	r3, r0, #1
 8007202:	d102      	bne.n	800720a <_lseek_r+0x1e>
 8007204:	682b      	ldr	r3, [r5, #0]
 8007206:	b103      	cbz	r3, 800720a <_lseek_r+0x1e>
 8007208:	6023      	str	r3, [r4, #0]
 800720a:	bd38      	pop	{r3, r4, r5, pc}
 800720c:	20000524 	.word	0x20000524

08007210 <_read_r>:
 8007210:	b538      	push	{r3, r4, r5, lr}
 8007212:	4d07      	ldr	r5, [pc, #28]	; (8007230 <_read_r+0x20>)
 8007214:	4604      	mov	r4, r0
 8007216:	4608      	mov	r0, r1
 8007218:	4611      	mov	r1, r2
 800721a:	2200      	movs	r2, #0
 800721c:	602a      	str	r2, [r5, #0]
 800721e:	461a      	mov	r2, r3
 8007220:	f7f9 ff84 	bl	800112c <_read>
 8007224:	1c43      	adds	r3, r0, #1
 8007226:	d102      	bne.n	800722e <_read_r+0x1e>
 8007228:	682b      	ldr	r3, [r5, #0]
 800722a:	b103      	cbz	r3, 800722e <_read_r+0x1e>
 800722c:	6023      	str	r3, [r4, #0]
 800722e:	bd38      	pop	{r3, r4, r5, pc}
 8007230:	20000524 	.word	0x20000524

08007234 <_write_r>:
 8007234:	b538      	push	{r3, r4, r5, lr}
 8007236:	4d07      	ldr	r5, [pc, #28]	; (8007254 <_write_r+0x20>)
 8007238:	4604      	mov	r4, r0
 800723a:	4608      	mov	r0, r1
 800723c:	4611      	mov	r1, r2
 800723e:	2200      	movs	r2, #0
 8007240:	602a      	str	r2, [r5, #0]
 8007242:	461a      	mov	r2, r3
 8007244:	f7f9 ff8f 	bl	8001166 <_write>
 8007248:	1c43      	adds	r3, r0, #1
 800724a:	d102      	bne.n	8007252 <_write_r+0x1e>
 800724c:	682b      	ldr	r3, [r5, #0]
 800724e:	b103      	cbz	r3, 8007252 <_write_r+0x1e>
 8007250:	6023      	str	r3, [r4, #0]
 8007252:	bd38      	pop	{r3, r4, r5, pc}
 8007254:	20000524 	.word	0x20000524

08007258 <__errno>:
 8007258:	4b01      	ldr	r3, [pc, #4]	; (8007260 <__errno+0x8>)
 800725a:	6818      	ldr	r0, [r3, #0]
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop
 8007260:	2000006c 	.word	0x2000006c

08007264 <__libc_init_array>:
 8007264:	b570      	push	{r4, r5, r6, lr}
 8007266:	4d0d      	ldr	r5, [pc, #52]	; (800729c <__libc_init_array+0x38>)
 8007268:	4c0d      	ldr	r4, [pc, #52]	; (80072a0 <__libc_init_array+0x3c>)
 800726a:	1b64      	subs	r4, r4, r5
 800726c:	10a4      	asrs	r4, r4, #2
 800726e:	2600      	movs	r6, #0
 8007270:	42a6      	cmp	r6, r4
 8007272:	d109      	bne.n	8007288 <__libc_init_array+0x24>
 8007274:	4d0b      	ldr	r5, [pc, #44]	; (80072a4 <__libc_init_array+0x40>)
 8007276:	4c0c      	ldr	r4, [pc, #48]	; (80072a8 <__libc_init_array+0x44>)
 8007278:	f002 f80c 	bl	8009294 <_init>
 800727c:	1b64      	subs	r4, r4, r5
 800727e:	10a4      	asrs	r4, r4, #2
 8007280:	2600      	movs	r6, #0
 8007282:	42a6      	cmp	r6, r4
 8007284:	d105      	bne.n	8007292 <__libc_init_array+0x2e>
 8007286:	bd70      	pop	{r4, r5, r6, pc}
 8007288:	f855 3b04 	ldr.w	r3, [r5], #4
 800728c:	4798      	blx	r3
 800728e:	3601      	adds	r6, #1
 8007290:	e7ee      	b.n	8007270 <__libc_init_array+0xc>
 8007292:	f855 3b04 	ldr.w	r3, [r5], #4
 8007296:	4798      	blx	r3
 8007298:	3601      	adds	r6, #1
 800729a:	e7f2      	b.n	8007282 <__libc_init_array+0x1e>
 800729c:	0800988c 	.word	0x0800988c
 80072a0:	0800988c 	.word	0x0800988c
 80072a4:	0800988c 	.word	0x0800988c
 80072a8:	08009890 	.word	0x08009890

080072ac <__retarget_lock_acquire_recursive>:
 80072ac:	4770      	bx	lr

080072ae <__retarget_lock_release_recursive>:
 80072ae:	4770      	bx	lr

080072b0 <quorem>:
 80072b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b4:	6903      	ldr	r3, [r0, #16]
 80072b6:	690c      	ldr	r4, [r1, #16]
 80072b8:	42a3      	cmp	r3, r4
 80072ba:	4607      	mov	r7, r0
 80072bc:	db7e      	blt.n	80073bc <quorem+0x10c>
 80072be:	3c01      	subs	r4, #1
 80072c0:	f101 0814 	add.w	r8, r1, #20
 80072c4:	f100 0514 	add.w	r5, r0, #20
 80072c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072cc:	9301      	str	r3, [sp, #4]
 80072ce:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80072d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072d6:	3301      	adds	r3, #1
 80072d8:	429a      	cmp	r2, r3
 80072da:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80072de:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80072e2:	fbb2 f6f3 	udiv	r6, r2, r3
 80072e6:	d331      	bcc.n	800734c <quorem+0x9c>
 80072e8:	f04f 0e00 	mov.w	lr, #0
 80072ec:	4640      	mov	r0, r8
 80072ee:	46ac      	mov	ip, r5
 80072f0:	46f2      	mov	sl, lr
 80072f2:	f850 2b04 	ldr.w	r2, [r0], #4
 80072f6:	b293      	uxth	r3, r2
 80072f8:	fb06 e303 	mla	r3, r6, r3, lr
 80072fc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007300:	0c1a      	lsrs	r2, r3, #16
 8007302:	b29b      	uxth	r3, r3
 8007304:	ebaa 0303 	sub.w	r3, sl, r3
 8007308:	f8dc a000 	ldr.w	sl, [ip]
 800730c:	fa13 f38a 	uxtah	r3, r3, sl
 8007310:	fb06 220e 	mla	r2, r6, lr, r2
 8007314:	9300      	str	r3, [sp, #0]
 8007316:	9b00      	ldr	r3, [sp, #0]
 8007318:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800731c:	b292      	uxth	r2, r2
 800731e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007322:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007326:	f8bd 3000 	ldrh.w	r3, [sp]
 800732a:	4581      	cmp	r9, r0
 800732c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007330:	f84c 3b04 	str.w	r3, [ip], #4
 8007334:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007338:	d2db      	bcs.n	80072f2 <quorem+0x42>
 800733a:	f855 300b 	ldr.w	r3, [r5, fp]
 800733e:	b92b      	cbnz	r3, 800734c <quorem+0x9c>
 8007340:	9b01      	ldr	r3, [sp, #4]
 8007342:	3b04      	subs	r3, #4
 8007344:	429d      	cmp	r5, r3
 8007346:	461a      	mov	r2, r3
 8007348:	d32c      	bcc.n	80073a4 <quorem+0xf4>
 800734a:	613c      	str	r4, [r7, #16]
 800734c:	4638      	mov	r0, r7
 800734e:	f001 f91f 	bl	8008590 <__mcmp>
 8007352:	2800      	cmp	r0, #0
 8007354:	db22      	blt.n	800739c <quorem+0xec>
 8007356:	3601      	adds	r6, #1
 8007358:	4629      	mov	r1, r5
 800735a:	2000      	movs	r0, #0
 800735c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007360:	f8d1 c000 	ldr.w	ip, [r1]
 8007364:	b293      	uxth	r3, r2
 8007366:	1ac3      	subs	r3, r0, r3
 8007368:	0c12      	lsrs	r2, r2, #16
 800736a:	fa13 f38c 	uxtah	r3, r3, ip
 800736e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007372:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007376:	b29b      	uxth	r3, r3
 8007378:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800737c:	45c1      	cmp	r9, r8
 800737e:	f841 3b04 	str.w	r3, [r1], #4
 8007382:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007386:	d2e9      	bcs.n	800735c <quorem+0xac>
 8007388:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800738c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007390:	b922      	cbnz	r2, 800739c <quorem+0xec>
 8007392:	3b04      	subs	r3, #4
 8007394:	429d      	cmp	r5, r3
 8007396:	461a      	mov	r2, r3
 8007398:	d30a      	bcc.n	80073b0 <quorem+0x100>
 800739a:	613c      	str	r4, [r7, #16]
 800739c:	4630      	mov	r0, r6
 800739e:	b003      	add	sp, #12
 80073a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073a4:	6812      	ldr	r2, [r2, #0]
 80073a6:	3b04      	subs	r3, #4
 80073a8:	2a00      	cmp	r2, #0
 80073aa:	d1ce      	bne.n	800734a <quorem+0x9a>
 80073ac:	3c01      	subs	r4, #1
 80073ae:	e7c9      	b.n	8007344 <quorem+0x94>
 80073b0:	6812      	ldr	r2, [r2, #0]
 80073b2:	3b04      	subs	r3, #4
 80073b4:	2a00      	cmp	r2, #0
 80073b6:	d1f0      	bne.n	800739a <quorem+0xea>
 80073b8:	3c01      	subs	r4, #1
 80073ba:	e7eb      	b.n	8007394 <quorem+0xe4>
 80073bc:	2000      	movs	r0, #0
 80073be:	e7ee      	b.n	800739e <quorem+0xee>

080073c0 <_dtoa_r>:
 80073c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073c4:	ed2d 8b02 	vpush	{d8}
 80073c8:	69c5      	ldr	r5, [r0, #28]
 80073ca:	b091      	sub	sp, #68	; 0x44
 80073cc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80073d0:	ec59 8b10 	vmov	r8, r9, d0
 80073d4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80073d6:	9106      	str	r1, [sp, #24]
 80073d8:	4606      	mov	r6, r0
 80073da:	9208      	str	r2, [sp, #32]
 80073dc:	930c      	str	r3, [sp, #48]	; 0x30
 80073de:	b975      	cbnz	r5, 80073fe <_dtoa_r+0x3e>
 80073e0:	2010      	movs	r0, #16
 80073e2:	f000 fda5 	bl	8007f30 <malloc>
 80073e6:	4602      	mov	r2, r0
 80073e8:	61f0      	str	r0, [r6, #28]
 80073ea:	b920      	cbnz	r0, 80073f6 <_dtoa_r+0x36>
 80073ec:	4ba6      	ldr	r3, [pc, #664]	; (8007688 <_dtoa_r+0x2c8>)
 80073ee:	21ef      	movs	r1, #239	; 0xef
 80073f0:	48a6      	ldr	r0, [pc, #664]	; (800768c <_dtoa_r+0x2cc>)
 80073f2:	f001 fc0b 	bl	8008c0c <__assert_func>
 80073f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80073fa:	6005      	str	r5, [r0, #0]
 80073fc:	60c5      	str	r5, [r0, #12]
 80073fe:	69f3      	ldr	r3, [r6, #28]
 8007400:	6819      	ldr	r1, [r3, #0]
 8007402:	b151      	cbz	r1, 800741a <_dtoa_r+0x5a>
 8007404:	685a      	ldr	r2, [r3, #4]
 8007406:	604a      	str	r2, [r1, #4]
 8007408:	2301      	movs	r3, #1
 800740a:	4093      	lsls	r3, r2
 800740c:	608b      	str	r3, [r1, #8]
 800740e:	4630      	mov	r0, r6
 8007410:	f000 fe82 	bl	8008118 <_Bfree>
 8007414:	69f3      	ldr	r3, [r6, #28]
 8007416:	2200      	movs	r2, #0
 8007418:	601a      	str	r2, [r3, #0]
 800741a:	f1b9 0300 	subs.w	r3, r9, #0
 800741e:	bfbb      	ittet	lt
 8007420:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007424:	9303      	strlt	r3, [sp, #12]
 8007426:	2300      	movge	r3, #0
 8007428:	2201      	movlt	r2, #1
 800742a:	bfac      	ite	ge
 800742c:	6023      	strge	r3, [r4, #0]
 800742e:	6022      	strlt	r2, [r4, #0]
 8007430:	4b97      	ldr	r3, [pc, #604]	; (8007690 <_dtoa_r+0x2d0>)
 8007432:	9c03      	ldr	r4, [sp, #12]
 8007434:	43a3      	bics	r3, r4
 8007436:	d11c      	bne.n	8007472 <_dtoa_r+0xb2>
 8007438:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800743a:	f242 730f 	movw	r3, #9999	; 0x270f
 800743e:	6013      	str	r3, [r2, #0]
 8007440:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007444:	ea53 0308 	orrs.w	r3, r3, r8
 8007448:	f000 84fb 	beq.w	8007e42 <_dtoa_r+0xa82>
 800744c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800744e:	b963      	cbnz	r3, 800746a <_dtoa_r+0xaa>
 8007450:	4b90      	ldr	r3, [pc, #576]	; (8007694 <_dtoa_r+0x2d4>)
 8007452:	e020      	b.n	8007496 <_dtoa_r+0xd6>
 8007454:	4b90      	ldr	r3, [pc, #576]	; (8007698 <_dtoa_r+0x2d8>)
 8007456:	9301      	str	r3, [sp, #4]
 8007458:	3308      	adds	r3, #8
 800745a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800745c:	6013      	str	r3, [r2, #0]
 800745e:	9801      	ldr	r0, [sp, #4]
 8007460:	b011      	add	sp, #68	; 0x44
 8007462:	ecbd 8b02 	vpop	{d8}
 8007466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800746a:	4b8a      	ldr	r3, [pc, #552]	; (8007694 <_dtoa_r+0x2d4>)
 800746c:	9301      	str	r3, [sp, #4]
 800746e:	3303      	adds	r3, #3
 8007470:	e7f3      	b.n	800745a <_dtoa_r+0x9a>
 8007472:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007476:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800747a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800747e:	d10c      	bne.n	800749a <_dtoa_r+0xda>
 8007480:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007482:	2301      	movs	r3, #1
 8007484:	6013      	str	r3, [r2, #0]
 8007486:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007488:	2b00      	cmp	r3, #0
 800748a:	f000 84d7 	beq.w	8007e3c <_dtoa_r+0xa7c>
 800748e:	4b83      	ldr	r3, [pc, #524]	; (800769c <_dtoa_r+0x2dc>)
 8007490:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007492:	6013      	str	r3, [r2, #0]
 8007494:	3b01      	subs	r3, #1
 8007496:	9301      	str	r3, [sp, #4]
 8007498:	e7e1      	b.n	800745e <_dtoa_r+0x9e>
 800749a:	aa0e      	add	r2, sp, #56	; 0x38
 800749c:	a90f      	add	r1, sp, #60	; 0x3c
 800749e:	4630      	mov	r0, r6
 80074a0:	eeb0 0b48 	vmov.f64	d0, d8
 80074a4:	f001 f91a 	bl	80086dc <__d2b>
 80074a8:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80074ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074ae:	4605      	mov	r5, r0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d046      	beq.n	8007542 <_dtoa_r+0x182>
 80074b4:	eeb0 7b48 	vmov.f64	d7, d8
 80074b8:	ee18 1a90 	vmov	r1, s17
 80074bc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80074c0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80074c4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80074c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80074cc:	2000      	movs	r0, #0
 80074ce:	ee07 1a90 	vmov	s15, r1
 80074d2:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 80074d6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8007670 <_dtoa_r+0x2b0>
 80074da:	ee37 7b46 	vsub.f64	d7, d7, d6
 80074de:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8007678 <_dtoa_r+0x2b8>
 80074e2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80074e6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8007680 <_dtoa_r+0x2c0>
 80074ea:	ee07 3a90 	vmov	s15, r3
 80074ee:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80074f2:	eeb0 7b46 	vmov.f64	d7, d6
 80074f6:	eea4 7b05 	vfma.f64	d7, d4, d5
 80074fa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80074fe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007506:	ee16 ba90 	vmov	fp, s13
 800750a:	9009      	str	r0, [sp, #36]	; 0x24
 800750c:	d508      	bpl.n	8007520 <_dtoa_r+0x160>
 800750e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007512:	eeb4 6b47 	vcmp.f64	d6, d7
 8007516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800751a:	bf18      	it	ne
 800751c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007520:	f1bb 0f16 	cmp.w	fp, #22
 8007524:	d82b      	bhi.n	800757e <_dtoa_r+0x1be>
 8007526:	495e      	ldr	r1, [pc, #376]	; (80076a0 <_dtoa_r+0x2e0>)
 8007528:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800752c:	ed91 7b00 	vldr	d7, [r1]
 8007530:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007538:	d501      	bpl.n	800753e <_dtoa_r+0x17e>
 800753a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800753e:	2100      	movs	r1, #0
 8007540:	e01e      	b.n	8007580 <_dtoa_r+0x1c0>
 8007542:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007544:	4413      	add	r3, r2
 8007546:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800754a:	2920      	cmp	r1, #32
 800754c:	bfc1      	itttt	gt
 800754e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8007552:	408c      	lslgt	r4, r1
 8007554:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8007558:	fa28 f101 	lsrgt.w	r1, r8, r1
 800755c:	bfd6      	itet	le
 800755e:	f1c1 0120 	rsble	r1, r1, #32
 8007562:	4321      	orrgt	r1, r4
 8007564:	fa08 f101 	lslle.w	r1, r8, r1
 8007568:	ee07 1a90 	vmov	s15, r1
 800756c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007570:	3b01      	subs	r3, #1
 8007572:	ee17 1a90 	vmov	r1, s15
 8007576:	2001      	movs	r0, #1
 8007578:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800757c:	e7a7      	b.n	80074ce <_dtoa_r+0x10e>
 800757e:	2101      	movs	r1, #1
 8007580:	1ad2      	subs	r2, r2, r3
 8007582:	1e53      	subs	r3, r2, #1
 8007584:	9305      	str	r3, [sp, #20]
 8007586:	bf45      	ittet	mi
 8007588:	f1c2 0301 	rsbmi	r3, r2, #1
 800758c:	9304      	strmi	r3, [sp, #16]
 800758e:	2300      	movpl	r3, #0
 8007590:	2300      	movmi	r3, #0
 8007592:	bf4c      	ite	mi
 8007594:	9305      	strmi	r3, [sp, #20]
 8007596:	9304      	strpl	r3, [sp, #16]
 8007598:	f1bb 0f00 	cmp.w	fp, #0
 800759c:	910b      	str	r1, [sp, #44]	; 0x2c
 800759e:	db18      	blt.n	80075d2 <_dtoa_r+0x212>
 80075a0:	9b05      	ldr	r3, [sp, #20]
 80075a2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80075a6:	445b      	add	r3, fp
 80075a8:	9305      	str	r3, [sp, #20]
 80075aa:	2300      	movs	r3, #0
 80075ac:	9a06      	ldr	r2, [sp, #24]
 80075ae:	2a09      	cmp	r2, #9
 80075b0:	d848      	bhi.n	8007644 <_dtoa_r+0x284>
 80075b2:	2a05      	cmp	r2, #5
 80075b4:	bfc4      	itt	gt
 80075b6:	3a04      	subgt	r2, #4
 80075b8:	9206      	strgt	r2, [sp, #24]
 80075ba:	9a06      	ldr	r2, [sp, #24]
 80075bc:	f1a2 0202 	sub.w	r2, r2, #2
 80075c0:	bfcc      	ite	gt
 80075c2:	2400      	movgt	r4, #0
 80075c4:	2401      	movle	r4, #1
 80075c6:	2a03      	cmp	r2, #3
 80075c8:	d847      	bhi.n	800765a <_dtoa_r+0x29a>
 80075ca:	e8df f002 	tbb	[pc, r2]
 80075ce:	2d0b      	.short	0x2d0b
 80075d0:	392b      	.short	0x392b
 80075d2:	9b04      	ldr	r3, [sp, #16]
 80075d4:	2200      	movs	r2, #0
 80075d6:	eba3 030b 	sub.w	r3, r3, fp
 80075da:	9304      	str	r3, [sp, #16]
 80075dc:	920a      	str	r2, [sp, #40]	; 0x28
 80075de:	f1cb 0300 	rsb	r3, fp, #0
 80075e2:	e7e3      	b.n	80075ac <_dtoa_r+0x1ec>
 80075e4:	2200      	movs	r2, #0
 80075e6:	9207      	str	r2, [sp, #28]
 80075e8:	9a08      	ldr	r2, [sp, #32]
 80075ea:	2a00      	cmp	r2, #0
 80075ec:	dc38      	bgt.n	8007660 <_dtoa_r+0x2a0>
 80075ee:	f04f 0a01 	mov.w	sl, #1
 80075f2:	46d1      	mov	r9, sl
 80075f4:	4652      	mov	r2, sl
 80075f6:	f8cd a020 	str.w	sl, [sp, #32]
 80075fa:	69f7      	ldr	r7, [r6, #28]
 80075fc:	2100      	movs	r1, #0
 80075fe:	2004      	movs	r0, #4
 8007600:	f100 0c14 	add.w	ip, r0, #20
 8007604:	4594      	cmp	ip, r2
 8007606:	d930      	bls.n	800766a <_dtoa_r+0x2aa>
 8007608:	6079      	str	r1, [r7, #4]
 800760a:	4630      	mov	r0, r6
 800760c:	930d      	str	r3, [sp, #52]	; 0x34
 800760e:	f000 fd43 	bl	8008098 <_Balloc>
 8007612:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007614:	9001      	str	r0, [sp, #4]
 8007616:	4602      	mov	r2, r0
 8007618:	2800      	cmp	r0, #0
 800761a:	d145      	bne.n	80076a8 <_dtoa_r+0x2e8>
 800761c:	4b21      	ldr	r3, [pc, #132]	; (80076a4 <_dtoa_r+0x2e4>)
 800761e:	f240 11af 	movw	r1, #431	; 0x1af
 8007622:	e6e5      	b.n	80073f0 <_dtoa_r+0x30>
 8007624:	2201      	movs	r2, #1
 8007626:	e7de      	b.n	80075e6 <_dtoa_r+0x226>
 8007628:	2200      	movs	r2, #0
 800762a:	9207      	str	r2, [sp, #28]
 800762c:	9a08      	ldr	r2, [sp, #32]
 800762e:	eb0b 0a02 	add.w	sl, fp, r2
 8007632:	f10a 0901 	add.w	r9, sl, #1
 8007636:	464a      	mov	r2, r9
 8007638:	2a01      	cmp	r2, #1
 800763a:	bfb8      	it	lt
 800763c:	2201      	movlt	r2, #1
 800763e:	e7dc      	b.n	80075fa <_dtoa_r+0x23a>
 8007640:	2201      	movs	r2, #1
 8007642:	e7f2      	b.n	800762a <_dtoa_r+0x26a>
 8007644:	2401      	movs	r4, #1
 8007646:	2200      	movs	r2, #0
 8007648:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800764c:	f04f 3aff 	mov.w	sl, #4294967295
 8007650:	2100      	movs	r1, #0
 8007652:	46d1      	mov	r9, sl
 8007654:	2212      	movs	r2, #18
 8007656:	9108      	str	r1, [sp, #32]
 8007658:	e7cf      	b.n	80075fa <_dtoa_r+0x23a>
 800765a:	2201      	movs	r2, #1
 800765c:	9207      	str	r2, [sp, #28]
 800765e:	e7f5      	b.n	800764c <_dtoa_r+0x28c>
 8007660:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007664:	46d1      	mov	r9, sl
 8007666:	4652      	mov	r2, sl
 8007668:	e7c7      	b.n	80075fa <_dtoa_r+0x23a>
 800766a:	3101      	adds	r1, #1
 800766c:	0040      	lsls	r0, r0, #1
 800766e:	e7c7      	b.n	8007600 <_dtoa_r+0x240>
 8007670:	636f4361 	.word	0x636f4361
 8007674:	3fd287a7 	.word	0x3fd287a7
 8007678:	8b60c8b3 	.word	0x8b60c8b3
 800767c:	3fc68a28 	.word	0x3fc68a28
 8007680:	509f79fb 	.word	0x509f79fb
 8007684:	3fd34413 	.word	0x3fd34413
 8007688:	08009551 	.word	0x08009551
 800768c:	08009568 	.word	0x08009568
 8007690:	7ff00000 	.word	0x7ff00000
 8007694:	0800954d 	.word	0x0800954d
 8007698:	08009544 	.word	0x08009544
 800769c:	08009521 	.word	0x08009521
 80076a0:	08009658 	.word	0x08009658
 80076a4:	080095c0 	.word	0x080095c0
 80076a8:	69f2      	ldr	r2, [r6, #28]
 80076aa:	9901      	ldr	r1, [sp, #4]
 80076ac:	6011      	str	r1, [r2, #0]
 80076ae:	f1b9 0f0e 	cmp.w	r9, #14
 80076b2:	d86c      	bhi.n	800778e <_dtoa_r+0x3ce>
 80076b4:	2c00      	cmp	r4, #0
 80076b6:	d06a      	beq.n	800778e <_dtoa_r+0x3ce>
 80076b8:	f1bb 0f00 	cmp.w	fp, #0
 80076bc:	f340 80a0 	ble.w	8007800 <_dtoa_r+0x440>
 80076c0:	4ac1      	ldr	r2, [pc, #772]	; (80079c8 <_dtoa_r+0x608>)
 80076c2:	f00b 010f 	and.w	r1, fp, #15
 80076c6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80076ca:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80076ce:	ed92 7b00 	vldr	d7, [r2]
 80076d2:	ea4f 122b 	mov.w	r2, fp, asr #4
 80076d6:	f000 8087 	beq.w	80077e8 <_dtoa_r+0x428>
 80076da:	49bc      	ldr	r1, [pc, #752]	; (80079cc <_dtoa_r+0x60c>)
 80076dc:	ed91 6b08 	vldr	d6, [r1, #32]
 80076e0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80076e4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80076e8:	f002 020f 	and.w	r2, r2, #15
 80076ec:	2103      	movs	r1, #3
 80076ee:	48b7      	ldr	r0, [pc, #732]	; (80079cc <_dtoa_r+0x60c>)
 80076f0:	2a00      	cmp	r2, #0
 80076f2:	d17b      	bne.n	80077ec <_dtoa_r+0x42c>
 80076f4:	ed9d 6b02 	vldr	d6, [sp, #8]
 80076f8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80076fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007700:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007702:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007706:	2a00      	cmp	r2, #0
 8007708:	f000 80a0 	beq.w	800784c <_dtoa_r+0x48c>
 800770c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007710:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007718:	f140 8098 	bpl.w	800784c <_dtoa_r+0x48c>
 800771c:	f1b9 0f00 	cmp.w	r9, #0
 8007720:	f000 8094 	beq.w	800784c <_dtoa_r+0x48c>
 8007724:	f1ba 0f00 	cmp.w	sl, #0
 8007728:	dd2f      	ble.n	800778a <_dtoa_r+0x3ca>
 800772a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800772e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007732:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007736:	f10b 32ff 	add.w	r2, fp, #4294967295
 800773a:	3101      	adds	r1, #1
 800773c:	4654      	mov	r4, sl
 800773e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007742:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8007746:	ee07 1a90 	vmov	s15, r1
 800774a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800774e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007752:	ee15 7a90 	vmov	r7, s11
 8007756:	ec51 0b15 	vmov	r0, r1, d5
 800775a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800775e:	2c00      	cmp	r4, #0
 8007760:	d177      	bne.n	8007852 <_dtoa_r+0x492>
 8007762:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007766:	ee36 6b47 	vsub.f64	d6, d6, d7
 800776a:	ec41 0b17 	vmov	d7, r0, r1
 800776e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007776:	f300 826a 	bgt.w	8007c4e <_dtoa_r+0x88e>
 800777a:	eeb1 7b47 	vneg.f64	d7, d7
 800777e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007786:	f100 8260 	bmi.w	8007c4a <_dtoa_r+0x88a>
 800778a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800778e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007790:	2a00      	cmp	r2, #0
 8007792:	f2c0 811d 	blt.w	80079d0 <_dtoa_r+0x610>
 8007796:	f1bb 0f0e 	cmp.w	fp, #14
 800779a:	f300 8119 	bgt.w	80079d0 <_dtoa_r+0x610>
 800779e:	4b8a      	ldr	r3, [pc, #552]	; (80079c8 <_dtoa_r+0x608>)
 80077a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80077a4:	ed93 6b00 	vldr	d6, [r3]
 80077a8:	9b08      	ldr	r3, [sp, #32]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	f280 80b7 	bge.w	800791e <_dtoa_r+0x55e>
 80077b0:	f1b9 0f00 	cmp.w	r9, #0
 80077b4:	f300 80b3 	bgt.w	800791e <_dtoa_r+0x55e>
 80077b8:	f040 8246 	bne.w	8007c48 <_dtoa_r+0x888>
 80077bc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80077c0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80077c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80077c8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80077cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077d0:	464c      	mov	r4, r9
 80077d2:	464f      	mov	r7, r9
 80077d4:	f280 821c 	bge.w	8007c10 <_dtoa_r+0x850>
 80077d8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80077dc:	2331      	movs	r3, #49	; 0x31
 80077de:	f808 3b01 	strb.w	r3, [r8], #1
 80077e2:	f10b 0b01 	add.w	fp, fp, #1
 80077e6:	e218      	b.n	8007c1a <_dtoa_r+0x85a>
 80077e8:	2102      	movs	r1, #2
 80077ea:	e780      	b.n	80076ee <_dtoa_r+0x32e>
 80077ec:	07d4      	lsls	r4, r2, #31
 80077ee:	d504      	bpl.n	80077fa <_dtoa_r+0x43a>
 80077f0:	ed90 6b00 	vldr	d6, [r0]
 80077f4:	3101      	adds	r1, #1
 80077f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80077fa:	1052      	asrs	r2, r2, #1
 80077fc:	3008      	adds	r0, #8
 80077fe:	e777      	b.n	80076f0 <_dtoa_r+0x330>
 8007800:	d022      	beq.n	8007848 <_dtoa_r+0x488>
 8007802:	f1cb 0200 	rsb	r2, fp, #0
 8007806:	4970      	ldr	r1, [pc, #448]	; (80079c8 <_dtoa_r+0x608>)
 8007808:	f002 000f 	and.w	r0, r2, #15
 800780c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007810:	ed91 7b00 	vldr	d7, [r1]
 8007814:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007818:	ed8d 7b02 	vstr	d7, [sp, #8]
 800781c:	486b      	ldr	r0, [pc, #428]	; (80079cc <_dtoa_r+0x60c>)
 800781e:	1112      	asrs	r2, r2, #4
 8007820:	2400      	movs	r4, #0
 8007822:	2102      	movs	r1, #2
 8007824:	b92a      	cbnz	r2, 8007832 <_dtoa_r+0x472>
 8007826:	2c00      	cmp	r4, #0
 8007828:	f43f af6a 	beq.w	8007700 <_dtoa_r+0x340>
 800782c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007830:	e766      	b.n	8007700 <_dtoa_r+0x340>
 8007832:	07d7      	lsls	r7, r2, #31
 8007834:	d505      	bpl.n	8007842 <_dtoa_r+0x482>
 8007836:	ed90 6b00 	vldr	d6, [r0]
 800783a:	3101      	adds	r1, #1
 800783c:	2401      	movs	r4, #1
 800783e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007842:	1052      	asrs	r2, r2, #1
 8007844:	3008      	adds	r0, #8
 8007846:	e7ed      	b.n	8007824 <_dtoa_r+0x464>
 8007848:	2102      	movs	r1, #2
 800784a:	e759      	b.n	8007700 <_dtoa_r+0x340>
 800784c:	465a      	mov	r2, fp
 800784e:	464c      	mov	r4, r9
 8007850:	e775      	b.n	800773e <_dtoa_r+0x37e>
 8007852:	ec41 0b17 	vmov	d7, r0, r1
 8007856:	495c      	ldr	r1, [pc, #368]	; (80079c8 <_dtoa_r+0x608>)
 8007858:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800785c:	ed11 4b02 	vldr	d4, [r1, #-8]
 8007860:	9901      	ldr	r1, [sp, #4]
 8007862:	440c      	add	r4, r1
 8007864:	9907      	ldr	r1, [sp, #28]
 8007866:	b351      	cbz	r1, 80078be <_dtoa_r+0x4fe>
 8007868:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800786c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007870:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007874:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007878:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800787c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007880:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007884:	ee14 1a90 	vmov	r1, s9
 8007888:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800788c:	3130      	adds	r1, #48	; 0x30
 800788e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007892:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800789a:	f808 1b01 	strb.w	r1, [r8], #1
 800789e:	d439      	bmi.n	8007914 <_dtoa_r+0x554>
 80078a0:	ee32 5b46 	vsub.f64	d5, d2, d6
 80078a4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80078a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078ac:	d472      	bmi.n	8007994 <_dtoa_r+0x5d4>
 80078ae:	45a0      	cmp	r8, r4
 80078b0:	f43f af6b 	beq.w	800778a <_dtoa_r+0x3ca>
 80078b4:	ee27 7b03 	vmul.f64	d7, d7, d3
 80078b8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80078bc:	e7e0      	b.n	8007880 <_dtoa_r+0x4c0>
 80078be:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80078c2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80078c6:	4620      	mov	r0, r4
 80078c8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80078cc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80078d0:	ee14 1a90 	vmov	r1, s9
 80078d4:	3130      	adds	r1, #48	; 0x30
 80078d6:	f808 1b01 	strb.w	r1, [r8], #1
 80078da:	45a0      	cmp	r8, r4
 80078dc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80078e0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80078e4:	d118      	bne.n	8007918 <_dtoa_r+0x558>
 80078e6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80078ea:	ee37 4b05 	vadd.f64	d4, d7, d5
 80078ee:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80078f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078f6:	dc4d      	bgt.n	8007994 <_dtoa_r+0x5d4>
 80078f8:	ee35 5b47 	vsub.f64	d5, d5, d7
 80078fc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8007900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007904:	f57f af41 	bpl.w	800778a <_dtoa_r+0x3ca>
 8007908:	4680      	mov	r8, r0
 800790a:	3801      	subs	r0, #1
 800790c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8007910:	2b30      	cmp	r3, #48	; 0x30
 8007912:	d0f9      	beq.n	8007908 <_dtoa_r+0x548>
 8007914:	4693      	mov	fp, r2
 8007916:	e02a      	b.n	800796e <_dtoa_r+0x5ae>
 8007918:	ee26 6b03 	vmul.f64	d6, d6, d3
 800791c:	e7d6      	b.n	80078cc <_dtoa_r+0x50c>
 800791e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007922:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8007926:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800792a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800792e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007932:	ee15 3a10 	vmov	r3, s10
 8007936:	3330      	adds	r3, #48	; 0x30
 8007938:	f808 3b01 	strb.w	r3, [r8], #1
 800793c:	9b01      	ldr	r3, [sp, #4]
 800793e:	eba8 0303 	sub.w	r3, r8, r3
 8007942:	4599      	cmp	r9, r3
 8007944:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007948:	eea3 7b46 	vfms.f64	d7, d3, d6
 800794c:	d133      	bne.n	80079b6 <_dtoa_r+0x5f6>
 800794e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007952:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800795a:	dc1a      	bgt.n	8007992 <_dtoa_r+0x5d2>
 800795c:	eeb4 7b46 	vcmp.f64	d7, d6
 8007960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007964:	d103      	bne.n	800796e <_dtoa_r+0x5ae>
 8007966:	ee15 3a10 	vmov	r3, s10
 800796a:	07d9      	lsls	r1, r3, #31
 800796c:	d411      	bmi.n	8007992 <_dtoa_r+0x5d2>
 800796e:	4629      	mov	r1, r5
 8007970:	4630      	mov	r0, r6
 8007972:	f000 fbd1 	bl	8008118 <_Bfree>
 8007976:	2300      	movs	r3, #0
 8007978:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800797a:	f888 3000 	strb.w	r3, [r8]
 800797e:	f10b 0301 	add.w	r3, fp, #1
 8007982:	6013      	str	r3, [r2, #0]
 8007984:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007986:	2b00      	cmp	r3, #0
 8007988:	f43f ad69 	beq.w	800745e <_dtoa_r+0x9e>
 800798c:	f8c3 8000 	str.w	r8, [r3]
 8007990:	e565      	b.n	800745e <_dtoa_r+0x9e>
 8007992:	465a      	mov	r2, fp
 8007994:	4643      	mov	r3, r8
 8007996:	4698      	mov	r8, r3
 8007998:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800799c:	2939      	cmp	r1, #57	; 0x39
 800799e:	d106      	bne.n	80079ae <_dtoa_r+0x5ee>
 80079a0:	9901      	ldr	r1, [sp, #4]
 80079a2:	4299      	cmp	r1, r3
 80079a4:	d1f7      	bne.n	8007996 <_dtoa_r+0x5d6>
 80079a6:	9801      	ldr	r0, [sp, #4]
 80079a8:	2130      	movs	r1, #48	; 0x30
 80079aa:	3201      	adds	r2, #1
 80079ac:	7001      	strb	r1, [r0, #0]
 80079ae:	7819      	ldrb	r1, [r3, #0]
 80079b0:	3101      	adds	r1, #1
 80079b2:	7019      	strb	r1, [r3, #0]
 80079b4:	e7ae      	b.n	8007914 <_dtoa_r+0x554>
 80079b6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80079ba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80079be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079c2:	d1b2      	bne.n	800792a <_dtoa_r+0x56a>
 80079c4:	e7d3      	b.n	800796e <_dtoa_r+0x5ae>
 80079c6:	bf00      	nop
 80079c8:	08009658 	.word	0x08009658
 80079cc:	08009630 	.word	0x08009630
 80079d0:	9907      	ldr	r1, [sp, #28]
 80079d2:	2900      	cmp	r1, #0
 80079d4:	f000 80d0 	beq.w	8007b78 <_dtoa_r+0x7b8>
 80079d8:	9906      	ldr	r1, [sp, #24]
 80079da:	2901      	cmp	r1, #1
 80079dc:	f300 80b4 	bgt.w	8007b48 <_dtoa_r+0x788>
 80079e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079e2:	2900      	cmp	r1, #0
 80079e4:	f000 80ac 	beq.w	8007b40 <_dtoa_r+0x780>
 80079e8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80079ec:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80079f0:	461c      	mov	r4, r3
 80079f2:	9309      	str	r3, [sp, #36]	; 0x24
 80079f4:	9b04      	ldr	r3, [sp, #16]
 80079f6:	4413      	add	r3, r2
 80079f8:	9304      	str	r3, [sp, #16]
 80079fa:	9b05      	ldr	r3, [sp, #20]
 80079fc:	2101      	movs	r1, #1
 80079fe:	4413      	add	r3, r2
 8007a00:	4630      	mov	r0, r6
 8007a02:	9305      	str	r3, [sp, #20]
 8007a04:	f000 fc3e 	bl	8008284 <__i2b>
 8007a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a0a:	4607      	mov	r7, r0
 8007a0c:	f1b8 0f00 	cmp.w	r8, #0
 8007a10:	d00d      	beq.n	8007a2e <_dtoa_r+0x66e>
 8007a12:	9a05      	ldr	r2, [sp, #20]
 8007a14:	2a00      	cmp	r2, #0
 8007a16:	dd0a      	ble.n	8007a2e <_dtoa_r+0x66e>
 8007a18:	4542      	cmp	r2, r8
 8007a1a:	9904      	ldr	r1, [sp, #16]
 8007a1c:	bfa8      	it	ge
 8007a1e:	4642      	movge	r2, r8
 8007a20:	1a89      	subs	r1, r1, r2
 8007a22:	9104      	str	r1, [sp, #16]
 8007a24:	9905      	ldr	r1, [sp, #20]
 8007a26:	eba8 0802 	sub.w	r8, r8, r2
 8007a2a:	1a8a      	subs	r2, r1, r2
 8007a2c:	9205      	str	r2, [sp, #20]
 8007a2e:	b303      	cbz	r3, 8007a72 <_dtoa_r+0x6b2>
 8007a30:	9a07      	ldr	r2, [sp, #28]
 8007a32:	2a00      	cmp	r2, #0
 8007a34:	f000 80a5 	beq.w	8007b82 <_dtoa_r+0x7c2>
 8007a38:	2c00      	cmp	r4, #0
 8007a3a:	dd13      	ble.n	8007a64 <_dtoa_r+0x6a4>
 8007a3c:	4639      	mov	r1, r7
 8007a3e:	4622      	mov	r2, r4
 8007a40:	4630      	mov	r0, r6
 8007a42:	930d      	str	r3, [sp, #52]	; 0x34
 8007a44:	f000 fcde 	bl	8008404 <__pow5mult>
 8007a48:	462a      	mov	r2, r5
 8007a4a:	4601      	mov	r1, r0
 8007a4c:	4607      	mov	r7, r0
 8007a4e:	4630      	mov	r0, r6
 8007a50:	f000 fc2e 	bl	80082b0 <__multiply>
 8007a54:	4629      	mov	r1, r5
 8007a56:	9009      	str	r0, [sp, #36]	; 0x24
 8007a58:	4630      	mov	r0, r6
 8007a5a:	f000 fb5d 	bl	8008118 <_Bfree>
 8007a5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a62:	4615      	mov	r5, r2
 8007a64:	1b1a      	subs	r2, r3, r4
 8007a66:	d004      	beq.n	8007a72 <_dtoa_r+0x6b2>
 8007a68:	4629      	mov	r1, r5
 8007a6a:	4630      	mov	r0, r6
 8007a6c:	f000 fcca 	bl	8008404 <__pow5mult>
 8007a70:	4605      	mov	r5, r0
 8007a72:	2101      	movs	r1, #1
 8007a74:	4630      	mov	r0, r6
 8007a76:	f000 fc05 	bl	8008284 <__i2b>
 8007a7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	4604      	mov	r4, r0
 8007a80:	f340 8081 	ble.w	8007b86 <_dtoa_r+0x7c6>
 8007a84:	461a      	mov	r2, r3
 8007a86:	4601      	mov	r1, r0
 8007a88:	4630      	mov	r0, r6
 8007a8a:	f000 fcbb 	bl	8008404 <__pow5mult>
 8007a8e:	9b06      	ldr	r3, [sp, #24]
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	4604      	mov	r4, r0
 8007a94:	dd7a      	ble.n	8007b8c <_dtoa_r+0x7cc>
 8007a96:	2300      	movs	r3, #0
 8007a98:	9309      	str	r3, [sp, #36]	; 0x24
 8007a9a:	6922      	ldr	r2, [r4, #16]
 8007a9c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007aa0:	6910      	ldr	r0, [r2, #16]
 8007aa2:	f000 fba1 	bl	80081e8 <__hi0bits>
 8007aa6:	f1c0 0020 	rsb	r0, r0, #32
 8007aaa:	9b05      	ldr	r3, [sp, #20]
 8007aac:	4418      	add	r0, r3
 8007aae:	f010 001f 	ands.w	r0, r0, #31
 8007ab2:	f000 8093 	beq.w	8007bdc <_dtoa_r+0x81c>
 8007ab6:	f1c0 0220 	rsb	r2, r0, #32
 8007aba:	2a04      	cmp	r2, #4
 8007abc:	f340 8085 	ble.w	8007bca <_dtoa_r+0x80a>
 8007ac0:	9b04      	ldr	r3, [sp, #16]
 8007ac2:	f1c0 001c 	rsb	r0, r0, #28
 8007ac6:	4403      	add	r3, r0
 8007ac8:	9304      	str	r3, [sp, #16]
 8007aca:	9b05      	ldr	r3, [sp, #20]
 8007acc:	4480      	add	r8, r0
 8007ace:	4403      	add	r3, r0
 8007ad0:	9305      	str	r3, [sp, #20]
 8007ad2:	9b04      	ldr	r3, [sp, #16]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	dd05      	ble.n	8007ae4 <_dtoa_r+0x724>
 8007ad8:	4629      	mov	r1, r5
 8007ada:	461a      	mov	r2, r3
 8007adc:	4630      	mov	r0, r6
 8007ade:	f000 fceb 	bl	80084b8 <__lshift>
 8007ae2:	4605      	mov	r5, r0
 8007ae4:	9b05      	ldr	r3, [sp, #20]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	dd05      	ble.n	8007af6 <_dtoa_r+0x736>
 8007aea:	4621      	mov	r1, r4
 8007aec:	461a      	mov	r2, r3
 8007aee:	4630      	mov	r0, r6
 8007af0:	f000 fce2 	bl	80084b8 <__lshift>
 8007af4:	4604      	mov	r4, r0
 8007af6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d071      	beq.n	8007be0 <_dtoa_r+0x820>
 8007afc:	4621      	mov	r1, r4
 8007afe:	4628      	mov	r0, r5
 8007b00:	f000 fd46 	bl	8008590 <__mcmp>
 8007b04:	2800      	cmp	r0, #0
 8007b06:	da6b      	bge.n	8007be0 <_dtoa_r+0x820>
 8007b08:	2300      	movs	r3, #0
 8007b0a:	4629      	mov	r1, r5
 8007b0c:	220a      	movs	r2, #10
 8007b0e:	4630      	mov	r0, r6
 8007b10:	f000 fb24 	bl	800815c <__multadd>
 8007b14:	9b07      	ldr	r3, [sp, #28]
 8007b16:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007b1a:	4605      	mov	r5, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f000 8197 	beq.w	8007e50 <_dtoa_r+0xa90>
 8007b22:	4639      	mov	r1, r7
 8007b24:	2300      	movs	r3, #0
 8007b26:	220a      	movs	r2, #10
 8007b28:	4630      	mov	r0, r6
 8007b2a:	f000 fb17 	bl	800815c <__multadd>
 8007b2e:	f1ba 0f00 	cmp.w	sl, #0
 8007b32:	4607      	mov	r7, r0
 8007b34:	f300 8093 	bgt.w	8007c5e <_dtoa_r+0x89e>
 8007b38:	9b06      	ldr	r3, [sp, #24]
 8007b3a:	2b02      	cmp	r3, #2
 8007b3c:	dc57      	bgt.n	8007bee <_dtoa_r+0x82e>
 8007b3e:	e08e      	b.n	8007c5e <_dtoa_r+0x89e>
 8007b40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b42:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007b46:	e751      	b.n	80079ec <_dtoa_r+0x62c>
 8007b48:	f109 34ff 	add.w	r4, r9, #4294967295
 8007b4c:	42a3      	cmp	r3, r4
 8007b4e:	bfbf      	itttt	lt
 8007b50:	1ae2      	sublt	r2, r4, r3
 8007b52:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007b54:	189b      	addlt	r3, r3, r2
 8007b56:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007b58:	bfae      	itee	ge
 8007b5a:	1b1c      	subge	r4, r3, r4
 8007b5c:	4623      	movlt	r3, r4
 8007b5e:	2400      	movlt	r4, #0
 8007b60:	f1b9 0f00 	cmp.w	r9, #0
 8007b64:	bfb5      	itete	lt
 8007b66:	9a04      	ldrlt	r2, [sp, #16]
 8007b68:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8007b6c:	eba2 0809 	sublt.w	r8, r2, r9
 8007b70:	464a      	movge	r2, r9
 8007b72:	bfb8      	it	lt
 8007b74:	2200      	movlt	r2, #0
 8007b76:	e73c      	b.n	80079f2 <_dtoa_r+0x632>
 8007b78:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007b7c:	9f07      	ldr	r7, [sp, #28]
 8007b7e:	461c      	mov	r4, r3
 8007b80:	e744      	b.n	8007a0c <_dtoa_r+0x64c>
 8007b82:	461a      	mov	r2, r3
 8007b84:	e770      	b.n	8007a68 <_dtoa_r+0x6a8>
 8007b86:	9b06      	ldr	r3, [sp, #24]
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	dc18      	bgt.n	8007bbe <_dtoa_r+0x7fe>
 8007b8c:	9b02      	ldr	r3, [sp, #8]
 8007b8e:	b9b3      	cbnz	r3, 8007bbe <_dtoa_r+0x7fe>
 8007b90:	9b03      	ldr	r3, [sp, #12]
 8007b92:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007b96:	b9a2      	cbnz	r2, 8007bc2 <_dtoa_r+0x802>
 8007b98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007b9c:	0d12      	lsrs	r2, r2, #20
 8007b9e:	0512      	lsls	r2, r2, #20
 8007ba0:	b18a      	cbz	r2, 8007bc6 <_dtoa_r+0x806>
 8007ba2:	9b04      	ldr	r3, [sp, #16]
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	9304      	str	r3, [sp, #16]
 8007ba8:	9b05      	ldr	r3, [sp, #20]
 8007baa:	3301      	adds	r3, #1
 8007bac:	9305      	str	r3, [sp, #20]
 8007bae:	2301      	movs	r3, #1
 8007bb0:	9309      	str	r3, [sp, #36]	; 0x24
 8007bb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	f47f af70 	bne.w	8007a9a <_dtoa_r+0x6da>
 8007bba:	2001      	movs	r0, #1
 8007bbc:	e775      	b.n	8007aaa <_dtoa_r+0x6ea>
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	e7f6      	b.n	8007bb0 <_dtoa_r+0x7f0>
 8007bc2:	9b02      	ldr	r3, [sp, #8]
 8007bc4:	e7f4      	b.n	8007bb0 <_dtoa_r+0x7f0>
 8007bc6:	9209      	str	r2, [sp, #36]	; 0x24
 8007bc8:	e7f3      	b.n	8007bb2 <_dtoa_r+0x7f2>
 8007bca:	d082      	beq.n	8007ad2 <_dtoa_r+0x712>
 8007bcc:	9b04      	ldr	r3, [sp, #16]
 8007bce:	321c      	adds	r2, #28
 8007bd0:	4413      	add	r3, r2
 8007bd2:	9304      	str	r3, [sp, #16]
 8007bd4:	9b05      	ldr	r3, [sp, #20]
 8007bd6:	4490      	add	r8, r2
 8007bd8:	4413      	add	r3, r2
 8007bda:	e779      	b.n	8007ad0 <_dtoa_r+0x710>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	e7f5      	b.n	8007bcc <_dtoa_r+0x80c>
 8007be0:	f1b9 0f00 	cmp.w	r9, #0
 8007be4:	dc36      	bgt.n	8007c54 <_dtoa_r+0x894>
 8007be6:	9b06      	ldr	r3, [sp, #24]
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	dd33      	ble.n	8007c54 <_dtoa_r+0x894>
 8007bec:	46ca      	mov	sl, r9
 8007bee:	f1ba 0f00 	cmp.w	sl, #0
 8007bf2:	d10d      	bne.n	8007c10 <_dtoa_r+0x850>
 8007bf4:	4621      	mov	r1, r4
 8007bf6:	4653      	mov	r3, sl
 8007bf8:	2205      	movs	r2, #5
 8007bfa:	4630      	mov	r0, r6
 8007bfc:	f000 faae 	bl	800815c <__multadd>
 8007c00:	4601      	mov	r1, r0
 8007c02:	4604      	mov	r4, r0
 8007c04:	4628      	mov	r0, r5
 8007c06:	f000 fcc3 	bl	8008590 <__mcmp>
 8007c0a:	2800      	cmp	r0, #0
 8007c0c:	f73f ade4 	bgt.w	80077d8 <_dtoa_r+0x418>
 8007c10:	9b08      	ldr	r3, [sp, #32]
 8007c12:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007c16:	ea6f 0b03 	mvn.w	fp, r3
 8007c1a:	f04f 0900 	mov.w	r9, #0
 8007c1e:	4621      	mov	r1, r4
 8007c20:	4630      	mov	r0, r6
 8007c22:	f000 fa79 	bl	8008118 <_Bfree>
 8007c26:	2f00      	cmp	r7, #0
 8007c28:	f43f aea1 	beq.w	800796e <_dtoa_r+0x5ae>
 8007c2c:	f1b9 0f00 	cmp.w	r9, #0
 8007c30:	d005      	beq.n	8007c3e <_dtoa_r+0x87e>
 8007c32:	45b9      	cmp	r9, r7
 8007c34:	d003      	beq.n	8007c3e <_dtoa_r+0x87e>
 8007c36:	4649      	mov	r1, r9
 8007c38:	4630      	mov	r0, r6
 8007c3a:	f000 fa6d 	bl	8008118 <_Bfree>
 8007c3e:	4639      	mov	r1, r7
 8007c40:	4630      	mov	r0, r6
 8007c42:	f000 fa69 	bl	8008118 <_Bfree>
 8007c46:	e692      	b.n	800796e <_dtoa_r+0x5ae>
 8007c48:	2400      	movs	r4, #0
 8007c4a:	4627      	mov	r7, r4
 8007c4c:	e7e0      	b.n	8007c10 <_dtoa_r+0x850>
 8007c4e:	4693      	mov	fp, r2
 8007c50:	4627      	mov	r7, r4
 8007c52:	e5c1      	b.n	80077d8 <_dtoa_r+0x418>
 8007c54:	9b07      	ldr	r3, [sp, #28]
 8007c56:	46ca      	mov	sl, r9
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	f000 8100 	beq.w	8007e5e <_dtoa_r+0xa9e>
 8007c5e:	f1b8 0f00 	cmp.w	r8, #0
 8007c62:	dd05      	ble.n	8007c70 <_dtoa_r+0x8b0>
 8007c64:	4639      	mov	r1, r7
 8007c66:	4642      	mov	r2, r8
 8007c68:	4630      	mov	r0, r6
 8007c6a:	f000 fc25 	bl	80084b8 <__lshift>
 8007c6e:	4607      	mov	r7, r0
 8007c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d05d      	beq.n	8007d32 <_dtoa_r+0x972>
 8007c76:	6879      	ldr	r1, [r7, #4]
 8007c78:	4630      	mov	r0, r6
 8007c7a:	f000 fa0d 	bl	8008098 <_Balloc>
 8007c7e:	4680      	mov	r8, r0
 8007c80:	b928      	cbnz	r0, 8007c8e <_dtoa_r+0x8ce>
 8007c82:	4b82      	ldr	r3, [pc, #520]	; (8007e8c <_dtoa_r+0xacc>)
 8007c84:	4602      	mov	r2, r0
 8007c86:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007c8a:	f7ff bbb1 	b.w	80073f0 <_dtoa_r+0x30>
 8007c8e:	693a      	ldr	r2, [r7, #16]
 8007c90:	3202      	adds	r2, #2
 8007c92:	0092      	lsls	r2, r2, #2
 8007c94:	f107 010c 	add.w	r1, r7, #12
 8007c98:	300c      	adds	r0, #12
 8007c9a:	f000 ffa9 	bl	8008bf0 <memcpy>
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	4641      	mov	r1, r8
 8007ca2:	4630      	mov	r0, r6
 8007ca4:	f000 fc08 	bl	80084b8 <__lshift>
 8007ca8:	9b01      	ldr	r3, [sp, #4]
 8007caa:	3301      	adds	r3, #1
 8007cac:	9304      	str	r3, [sp, #16]
 8007cae:	9b01      	ldr	r3, [sp, #4]
 8007cb0:	4453      	add	r3, sl
 8007cb2:	9308      	str	r3, [sp, #32]
 8007cb4:	9b02      	ldr	r3, [sp, #8]
 8007cb6:	f003 0301 	and.w	r3, r3, #1
 8007cba:	46b9      	mov	r9, r7
 8007cbc:	9307      	str	r3, [sp, #28]
 8007cbe:	4607      	mov	r7, r0
 8007cc0:	9b04      	ldr	r3, [sp, #16]
 8007cc2:	4621      	mov	r1, r4
 8007cc4:	3b01      	subs	r3, #1
 8007cc6:	4628      	mov	r0, r5
 8007cc8:	9302      	str	r3, [sp, #8]
 8007cca:	f7ff faf1 	bl	80072b0 <quorem>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	3330      	adds	r3, #48	; 0x30
 8007cd2:	9005      	str	r0, [sp, #20]
 8007cd4:	4649      	mov	r1, r9
 8007cd6:	4628      	mov	r0, r5
 8007cd8:	9309      	str	r3, [sp, #36]	; 0x24
 8007cda:	f000 fc59 	bl	8008590 <__mcmp>
 8007cde:	463a      	mov	r2, r7
 8007ce0:	4682      	mov	sl, r0
 8007ce2:	4621      	mov	r1, r4
 8007ce4:	4630      	mov	r0, r6
 8007ce6:	f000 fc6f 	bl	80085c8 <__mdiff>
 8007cea:	68c2      	ldr	r2, [r0, #12]
 8007cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cee:	4680      	mov	r8, r0
 8007cf0:	bb0a      	cbnz	r2, 8007d36 <_dtoa_r+0x976>
 8007cf2:	4601      	mov	r1, r0
 8007cf4:	4628      	mov	r0, r5
 8007cf6:	f000 fc4b 	bl	8008590 <__mcmp>
 8007cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	4641      	mov	r1, r8
 8007d00:	4630      	mov	r0, r6
 8007d02:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8007d06:	f000 fa07 	bl	8008118 <_Bfree>
 8007d0a:	9b06      	ldr	r3, [sp, #24]
 8007d0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d0e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007d12:	ea43 0102 	orr.w	r1, r3, r2
 8007d16:	9b07      	ldr	r3, [sp, #28]
 8007d18:	4319      	orrs	r1, r3
 8007d1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d1c:	d10d      	bne.n	8007d3a <_dtoa_r+0x97a>
 8007d1e:	2b39      	cmp	r3, #57	; 0x39
 8007d20:	d029      	beq.n	8007d76 <_dtoa_r+0x9b6>
 8007d22:	f1ba 0f00 	cmp.w	sl, #0
 8007d26:	dd01      	ble.n	8007d2c <_dtoa_r+0x96c>
 8007d28:	9b05      	ldr	r3, [sp, #20]
 8007d2a:	3331      	adds	r3, #49	; 0x31
 8007d2c:	9a02      	ldr	r2, [sp, #8]
 8007d2e:	7013      	strb	r3, [r2, #0]
 8007d30:	e775      	b.n	8007c1e <_dtoa_r+0x85e>
 8007d32:	4638      	mov	r0, r7
 8007d34:	e7b8      	b.n	8007ca8 <_dtoa_r+0x8e8>
 8007d36:	2201      	movs	r2, #1
 8007d38:	e7e1      	b.n	8007cfe <_dtoa_r+0x93e>
 8007d3a:	f1ba 0f00 	cmp.w	sl, #0
 8007d3e:	db06      	blt.n	8007d4e <_dtoa_r+0x98e>
 8007d40:	9906      	ldr	r1, [sp, #24]
 8007d42:	ea41 0a0a 	orr.w	sl, r1, sl
 8007d46:	9907      	ldr	r1, [sp, #28]
 8007d48:	ea5a 0a01 	orrs.w	sl, sl, r1
 8007d4c:	d120      	bne.n	8007d90 <_dtoa_r+0x9d0>
 8007d4e:	2a00      	cmp	r2, #0
 8007d50:	ddec      	ble.n	8007d2c <_dtoa_r+0x96c>
 8007d52:	4629      	mov	r1, r5
 8007d54:	2201      	movs	r2, #1
 8007d56:	4630      	mov	r0, r6
 8007d58:	9304      	str	r3, [sp, #16]
 8007d5a:	f000 fbad 	bl	80084b8 <__lshift>
 8007d5e:	4621      	mov	r1, r4
 8007d60:	4605      	mov	r5, r0
 8007d62:	f000 fc15 	bl	8008590 <__mcmp>
 8007d66:	2800      	cmp	r0, #0
 8007d68:	9b04      	ldr	r3, [sp, #16]
 8007d6a:	dc02      	bgt.n	8007d72 <_dtoa_r+0x9b2>
 8007d6c:	d1de      	bne.n	8007d2c <_dtoa_r+0x96c>
 8007d6e:	07da      	lsls	r2, r3, #31
 8007d70:	d5dc      	bpl.n	8007d2c <_dtoa_r+0x96c>
 8007d72:	2b39      	cmp	r3, #57	; 0x39
 8007d74:	d1d8      	bne.n	8007d28 <_dtoa_r+0x968>
 8007d76:	9a02      	ldr	r2, [sp, #8]
 8007d78:	2339      	movs	r3, #57	; 0x39
 8007d7a:	7013      	strb	r3, [r2, #0]
 8007d7c:	4643      	mov	r3, r8
 8007d7e:	4698      	mov	r8, r3
 8007d80:	3b01      	subs	r3, #1
 8007d82:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8007d86:	2a39      	cmp	r2, #57	; 0x39
 8007d88:	d051      	beq.n	8007e2e <_dtoa_r+0xa6e>
 8007d8a:	3201      	adds	r2, #1
 8007d8c:	701a      	strb	r2, [r3, #0]
 8007d8e:	e746      	b.n	8007c1e <_dtoa_r+0x85e>
 8007d90:	2a00      	cmp	r2, #0
 8007d92:	dd03      	ble.n	8007d9c <_dtoa_r+0x9dc>
 8007d94:	2b39      	cmp	r3, #57	; 0x39
 8007d96:	d0ee      	beq.n	8007d76 <_dtoa_r+0x9b6>
 8007d98:	3301      	adds	r3, #1
 8007d9a:	e7c7      	b.n	8007d2c <_dtoa_r+0x96c>
 8007d9c:	9a04      	ldr	r2, [sp, #16]
 8007d9e:	9908      	ldr	r1, [sp, #32]
 8007da0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007da4:	428a      	cmp	r2, r1
 8007da6:	d02b      	beq.n	8007e00 <_dtoa_r+0xa40>
 8007da8:	4629      	mov	r1, r5
 8007daa:	2300      	movs	r3, #0
 8007dac:	220a      	movs	r2, #10
 8007dae:	4630      	mov	r0, r6
 8007db0:	f000 f9d4 	bl	800815c <__multadd>
 8007db4:	45b9      	cmp	r9, r7
 8007db6:	4605      	mov	r5, r0
 8007db8:	f04f 0300 	mov.w	r3, #0
 8007dbc:	f04f 020a 	mov.w	r2, #10
 8007dc0:	4649      	mov	r1, r9
 8007dc2:	4630      	mov	r0, r6
 8007dc4:	d107      	bne.n	8007dd6 <_dtoa_r+0xa16>
 8007dc6:	f000 f9c9 	bl	800815c <__multadd>
 8007dca:	4681      	mov	r9, r0
 8007dcc:	4607      	mov	r7, r0
 8007dce:	9b04      	ldr	r3, [sp, #16]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	9304      	str	r3, [sp, #16]
 8007dd4:	e774      	b.n	8007cc0 <_dtoa_r+0x900>
 8007dd6:	f000 f9c1 	bl	800815c <__multadd>
 8007dda:	4639      	mov	r1, r7
 8007ddc:	4681      	mov	r9, r0
 8007dde:	2300      	movs	r3, #0
 8007de0:	220a      	movs	r2, #10
 8007de2:	4630      	mov	r0, r6
 8007de4:	f000 f9ba 	bl	800815c <__multadd>
 8007de8:	4607      	mov	r7, r0
 8007dea:	e7f0      	b.n	8007dce <_dtoa_r+0xa0e>
 8007dec:	f1ba 0f00 	cmp.w	sl, #0
 8007df0:	9a01      	ldr	r2, [sp, #4]
 8007df2:	bfcc      	ite	gt
 8007df4:	46d0      	movgt	r8, sl
 8007df6:	f04f 0801 	movle.w	r8, #1
 8007dfa:	4490      	add	r8, r2
 8007dfc:	f04f 0900 	mov.w	r9, #0
 8007e00:	4629      	mov	r1, r5
 8007e02:	2201      	movs	r2, #1
 8007e04:	4630      	mov	r0, r6
 8007e06:	9302      	str	r3, [sp, #8]
 8007e08:	f000 fb56 	bl	80084b8 <__lshift>
 8007e0c:	4621      	mov	r1, r4
 8007e0e:	4605      	mov	r5, r0
 8007e10:	f000 fbbe 	bl	8008590 <__mcmp>
 8007e14:	2800      	cmp	r0, #0
 8007e16:	dcb1      	bgt.n	8007d7c <_dtoa_r+0x9bc>
 8007e18:	d102      	bne.n	8007e20 <_dtoa_r+0xa60>
 8007e1a:	9b02      	ldr	r3, [sp, #8]
 8007e1c:	07db      	lsls	r3, r3, #31
 8007e1e:	d4ad      	bmi.n	8007d7c <_dtoa_r+0x9bc>
 8007e20:	4643      	mov	r3, r8
 8007e22:	4698      	mov	r8, r3
 8007e24:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e28:	2a30      	cmp	r2, #48	; 0x30
 8007e2a:	d0fa      	beq.n	8007e22 <_dtoa_r+0xa62>
 8007e2c:	e6f7      	b.n	8007c1e <_dtoa_r+0x85e>
 8007e2e:	9a01      	ldr	r2, [sp, #4]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d1a4      	bne.n	8007d7e <_dtoa_r+0x9be>
 8007e34:	f10b 0b01 	add.w	fp, fp, #1
 8007e38:	2331      	movs	r3, #49	; 0x31
 8007e3a:	e778      	b.n	8007d2e <_dtoa_r+0x96e>
 8007e3c:	4b14      	ldr	r3, [pc, #80]	; (8007e90 <_dtoa_r+0xad0>)
 8007e3e:	f7ff bb2a 	b.w	8007496 <_dtoa_r+0xd6>
 8007e42:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	f47f ab05 	bne.w	8007454 <_dtoa_r+0x94>
 8007e4a:	4b12      	ldr	r3, [pc, #72]	; (8007e94 <_dtoa_r+0xad4>)
 8007e4c:	f7ff bb23 	b.w	8007496 <_dtoa_r+0xd6>
 8007e50:	f1ba 0f00 	cmp.w	sl, #0
 8007e54:	dc03      	bgt.n	8007e5e <_dtoa_r+0xa9e>
 8007e56:	9b06      	ldr	r3, [sp, #24]
 8007e58:	2b02      	cmp	r3, #2
 8007e5a:	f73f aec8 	bgt.w	8007bee <_dtoa_r+0x82e>
 8007e5e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007e62:	4621      	mov	r1, r4
 8007e64:	4628      	mov	r0, r5
 8007e66:	f7ff fa23 	bl	80072b0 <quorem>
 8007e6a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007e6e:	f808 3b01 	strb.w	r3, [r8], #1
 8007e72:	9a01      	ldr	r2, [sp, #4]
 8007e74:	eba8 0202 	sub.w	r2, r8, r2
 8007e78:	4592      	cmp	sl, r2
 8007e7a:	ddb7      	ble.n	8007dec <_dtoa_r+0xa2c>
 8007e7c:	4629      	mov	r1, r5
 8007e7e:	2300      	movs	r3, #0
 8007e80:	220a      	movs	r2, #10
 8007e82:	4630      	mov	r0, r6
 8007e84:	f000 f96a 	bl	800815c <__multadd>
 8007e88:	4605      	mov	r5, r0
 8007e8a:	e7ea      	b.n	8007e62 <_dtoa_r+0xaa2>
 8007e8c:	080095c0 	.word	0x080095c0
 8007e90:	08009520 	.word	0x08009520
 8007e94:	08009544 	.word	0x08009544

08007e98 <_free_r>:
 8007e98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e9a:	2900      	cmp	r1, #0
 8007e9c:	d044      	beq.n	8007f28 <_free_r+0x90>
 8007e9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ea2:	9001      	str	r0, [sp, #4]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f1a1 0404 	sub.w	r4, r1, #4
 8007eaa:	bfb8      	it	lt
 8007eac:	18e4      	addlt	r4, r4, r3
 8007eae:	f000 f8e7 	bl	8008080 <__malloc_lock>
 8007eb2:	4a1e      	ldr	r2, [pc, #120]	; (8007f2c <_free_r+0x94>)
 8007eb4:	9801      	ldr	r0, [sp, #4]
 8007eb6:	6813      	ldr	r3, [r2, #0]
 8007eb8:	b933      	cbnz	r3, 8007ec8 <_free_r+0x30>
 8007eba:	6063      	str	r3, [r4, #4]
 8007ebc:	6014      	str	r4, [r2, #0]
 8007ebe:	b003      	add	sp, #12
 8007ec0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ec4:	f000 b8e2 	b.w	800808c <__malloc_unlock>
 8007ec8:	42a3      	cmp	r3, r4
 8007eca:	d908      	bls.n	8007ede <_free_r+0x46>
 8007ecc:	6825      	ldr	r5, [r4, #0]
 8007ece:	1961      	adds	r1, r4, r5
 8007ed0:	428b      	cmp	r3, r1
 8007ed2:	bf01      	itttt	eq
 8007ed4:	6819      	ldreq	r1, [r3, #0]
 8007ed6:	685b      	ldreq	r3, [r3, #4]
 8007ed8:	1949      	addeq	r1, r1, r5
 8007eda:	6021      	streq	r1, [r4, #0]
 8007edc:	e7ed      	b.n	8007eba <_free_r+0x22>
 8007ede:	461a      	mov	r2, r3
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	b10b      	cbz	r3, 8007ee8 <_free_r+0x50>
 8007ee4:	42a3      	cmp	r3, r4
 8007ee6:	d9fa      	bls.n	8007ede <_free_r+0x46>
 8007ee8:	6811      	ldr	r1, [r2, #0]
 8007eea:	1855      	adds	r5, r2, r1
 8007eec:	42a5      	cmp	r5, r4
 8007eee:	d10b      	bne.n	8007f08 <_free_r+0x70>
 8007ef0:	6824      	ldr	r4, [r4, #0]
 8007ef2:	4421      	add	r1, r4
 8007ef4:	1854      	adds	r4, r2, r1
 8007ef6:	42a3      	cmp	r3, r4
 8007ef8:	6011      	str	r1, [r2, #0]
 8007efa:	d1e0      	bne.n	8007ebe <_free_r+0x26>
 8007efc:	681c      	ldr	r4, [r3, #0]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	6053      	str	r3, [r2, #4]
 8007f02:	440c      	add	r4, r1
 8007f04:	6014      	str	r4, [r2, #0]
 8007f06:	e7da      	b.n	8007ebe <_free_r+0x26>
 8007f08:	d902      	bls.n	8007f10 <_free_r+0x78>
 8007f0a:	230c      	movs	r3, #12
 8007f0c:	6003      	str	r3, [r0, #0]
 8007f0e:	e7d6      	b.n	8007ebe <_free_r+0x26>
 8007f10:	6825      	ldr	r5, [r4, #0]
 8007f12:	1961      	adds	r1, r4, r5
 8007f14:	428b      	cmp	r3, r1
 8007f16:	bf04      	itt	eq
 8007f18:	6819      	ldreq	r1, [r3, #0]
 8007f1a:	685b      	ldreq	r3, [r3, #4]
 8007f1c:	6063      	str	r3, [r4, #4]
 8007f1e:	bf04      	itt	eq
 8007f20:	1949      	addeq	r1, r1, r5
 8007f22:	6021      	streq	r1, [r4, #0]
 8007f24:	6054      	str	r4, [r2, #4]
 8007f26:	e7ca      	b.n	8007ebe <_free_r+0x26>
 8007f28:	b003      	add	sp, #12
 8007f2a:	bd30      	pop	{r4, r5, pc}
 8007f2c:	2000052c 	.word	0x2000052c

08007f30 <malloc>:
 8007f30:	4b02      	ldr	r3, [pc, #8]	; (8007f3c <malloc+0xc>)
 8007f32:	4601      	mov	r1, r0
 8007f34:	6818      	ldr	r0, [r3, #0]
 8007f36:	f000 b823 	b.w	8007f80 <_malloc_r>
 8007f3a:	bf00      	nop
 8007f3c:	2000006c 	.word	0x2000006c

08007f40 <sbrk_aligned>:
 8007f40:	b570      	push	{r4, r5, r6, lr}
 8007f42:	4e0e      	ldr	r6, [pc, #56]	; (8007f7c <sbrk_aligned+0x3c>)
 8007f44:	460c      	mov	r4, r1
 8007f46:	6831      	ldr	r1, [r6, #0]
 8007f48:	4605      	mov	r5, r0
 8007f4a:	b911      	cbnz	r1, 8007f52 <sbrk_aligned+0x12>
 8007f4c:	f000 fe40 	bl	8008bd0 <_sbrk_r>
 8007f50:	6030      	str	r0, [r6, #0]
 8007f52:	4621      	mov	r1, r4
 8007f54:	4628      	mov	r0, r5
 8007f56:	f000 fe3b 	bl	8008bd0 <_sbrk_r>
 8007f5a:	1c43      	adds	r3, r0, #1
 8007f5c:	d00a      	beq.n	8007f74 <sbrk_aligned+0x34>
 8007f5e:	1cc4      	adds	r4, r0, #3
 8007f60:	f024 0403 	bic.w	r4, r4, #3
 8007f64:	42a0      	cmp	r0, r4
 8007f66:	d007      	beq.n	8007f78 <sbrk_aligned+0x38>
 8007f68:	1a21      	subs	r1, r4, r0
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	f000 fe30 	bl	8008bd0 <_sbrk_r>
 8007f70:	3001      	adds	r0, #1
 8007f72:	d101      	bne.n	8007f78 <sbrk_aligned+0x38>
 8007f74:	f04f 34ff 	mov.w	r4, #4294967295
 8007f78:	4620      	mov	r0, r4
 8007f7a:	bd70      	pop	{r4, r5, r6, pc}
 8007f7c:	20000530 	.word	0x20000530

08007f80 <_malloc_r>:
 8007f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f84:	1ccd      	adds	r5, r1, #3
 8007f86:	f025 0503 	bic.w	r5, r5, #3
 8007f8a:	3508      	adds	r5, #8
 8007f8c:	2d0c      	cmp	r5, #12
 8007f8e:	bf38      	it	cc
 8007f90:	250c      	movcc	r5, #12
 8007f92:	2d00      	cmp	r5, #0
 8007f94:	4607      	mov	r7, r0
 8007f96:	db01      	blt.n	8007f9c <_malloc_r+0x1c>
 8007f98:	42a9      	cmp	r1, r5
 8007f9a:	d905      	bls.n	8007fa8 <_malloc_r+0x28>
 8007f9c:	230c      	movs	r3, #12
 8007f9e:	603b      	str	r3, [r7, #0]
 8007fa0:	2600      	movs	r6, #0
 8007fa2:	4630      	mov	r0, r6
 8007fa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fa8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800807c <_malloc_r+0xfc>
 8007fac:	f000 f868 	bl	8008080 <__malloc_lock>
 8007fb0:	f8d8 3000 	ldr.w	r3, [r8]
 8007fb4:	461c      	mov	r4, r3
 8007fb6:	bb5c      	cbnz	r4, 8008010 <_malloc_r+0x90>
 8007fb8:	4629      	mov	r1, r5
 8007fba:	4638      	mov	r0, r7
 8007fbc:	f7ff ffc0 	bl	8007f40 <sbrk_aligned>
 8007fc0:	1c43      	adds	r3, r0, #1
 8007fc2:	4604      	mov	r4, r0
 8007fc4:	d155      	bne.n	8008072 <_malloc_r+0xf2>
 8007fc6:	f8d8 4000 	ldr.w	r4, [r8]
 8007fca:	4626      	mov	r6, r4
 8007fcc:	2e00      	cmp	r6, #0
 8007fce:	d145      	bne.n	800805c <_malloc_r+0xdc>
 8007fd0:	2c00      	cmp	r4, #0
 8007fd2:	d048      	beq.n	8008066 <_malloc_r+0xe6>
 8007fd4:	6823      	ldr	r3, [r4, #0]
 8007fd6:	4631      	mov	r1, r6
 8007fd8:	4638      	mov	r0, r7
 8007fda:	eb04 0903 	add.w	r9, r4, r3
 8007fde:	f000 fdf7 	bl	8008bd0 <_sbrk_r>
 8007fe2:	4581      	cmp	r9, r0
 8007fe4:	d13f      	bne.n	8008066 <_malloc_r+0xe6>
 8007fe6:	6821      	ldr	r1, [r4, #0]
 8007fe8:	1a6d      	subs	r5, r5, r1
 8007fea:	4629      	mov	r1, r5
 8007fec:	4638      	mov	r0, r7
 8007fee:	f7ff ffa7 	bl	8007f40 <sbrk_aligned>
 8007ff2:	3001      	adds	r0, #1
 8007ff4:	d037      	beq.n	8008066 <_malloc_r+0xe6>
 8007ff6:	6823      	ldr	r3, [r4, #0]
 8007ff8:	442b      	add	r3, r5
 8007ffa:	6023      	str	r3, [r4, #0]
 8007ffc:	f8d8 3000 	ldr.w	r3, [r8]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d038      	beq.n	8008076 <_malloc_r+0xf6>
 8008004:	685a      	ldr	r2, [r3, #4]
 8008006:	42a2      	cmp	r2, r4
 8008008:	d12b      	bne.n	8008062 <_malloc_r+0xe2>
 800800a:	2200      	movs	r2, #0
 800800c:	605a      	str	r2, [r3, #4]
 800800e:	e00f      	b.n	8008030 <_malloc_r+0xb0>
 8008010:	6822      	ldr	r2, [r4, #0]
 8008012:	1b52      	subs	r2, r2, r5
 8008014:	d41f      	bmi.n	8008056 <_malloc_r+0xd6>
 8008016:	2a0b      	cmp	r2, #11
 8008018:	d917      	bls.n	800804a <_malloc_r+0xca>
 800801a:	1961      	adds	r1, r4, r5
 800801c:	42a3      	cmp	r3, r4
 800801e:	6025      	str	r5, [r4, #0]
 8008020:	bf18      	it	ne
 8008022:	6059      	strne	r1, [r3, #4]
 8008024:	6863      	ldr	r3, [r4, #4]
 8008026:	bf08      	it	eq
 8008028:	f8c8 1000 	streq.w	r1, [r8]
 800802c:	5162      	str	r2, [r4, r5]
 800802e:	604b      	str	r3, [r1, #4]
 8008030:	4638      	mov	r0, r7
 8008032:	f104 060b 	add.w	r6, r4, #11
 8008036:	f000 f829 	bl	800808c <__malloc_unlock>
 800803a:	f026 0607 	bic.w	r6, r6, #7
 800803e:	1d23      	adds	r3, r4, #4
 8008040:	1af2      	subs	r2, r6, r3
 8008042:	d0ae      	beq.n	8007fa2 <_malloc_r+0x22>
 8008044:	1b9b      	subs	r3, r3, r6
 8008046:	50a3      	str	r3, [r4, r2]
 8008048:	e7ab      	b.n	8007fa2 <_malloc_r+0x22>
 800804a:	42a3      	cmp	r3, r4
 800804c:	6862      	ldr	r2, [r4, #4]
 800804e:	d1dd      	bne.n	800800c <_malloc_r+0x8c>
 8008050:	f8c8 2000 	str.w	r2, [r8]
 8008054:	e7ec      	b.n	8008030 <_malloc_r+0xb0>
 8008056:	4623      	mov	r3, r4
 8008058:	6864      	ldr	r4, [r4, #4]
 800805a:	e7ac      	b.n	8007fb6 <_malloc_r+0x36>
 800805c:	4634      	mov	r4, r6
 800805e:	6876      	ldr	r6, [r6, #4]
 8008060:	e7b4      	b.n	8007fcc <_malloc_r+0x4c>
 8008062:	4613      	mov	r3, r2
 8008064:	e7cc      	b.n	8008000 <_malloc_r+0x80>
 8008066:	230c      	movs	r3, #12
 8008068:	603b      	str	r3, [r7, #0]
 800806a:	4638      	mov	r0, r7
 800806c:	f000 f80e 	bl	800808c <__malloc_unlock>
 8008070:	e797      	b.n	8007fa2 <_malloc_r+0x22>
 8008072:	6025      	str	r5, [r4, #0]
 8008074:	e7dc      	b.n	8008030 <_malloc_r+0xb0>
 8008076:	605b      	str	r3, [r3, #4]
 8008078:	deff      	udf	#255	; 0xff
 800807a:	bf00      	nop
 800807c:	2000052c 	.word	0x2000052c

08008080 <__malloc_lock>:
 8008080:	4801      	ldr	r0, [pc, #4]	; (8008088 <__malloc_lock+0x8>)
 8008082:	f7ff b913 	b.w	80072ac <__retarget_lock_acquire_recursive>
 8008086:	bf00      	nop
 8008088:	20000528 	.word	0x20000528

0800808c <__malloc_unlock>:
 800808c:	4801      	ldr	r0, [pc, #4]	; (8008094 <__malloc_unlock+0x8>)
 800808e:	f7ff b90e 	b.w	80072ae <__retarget_lock_release_recursive>
 8008092:	bf00      	nop
 8008094:	20000528 	.word	0x20000528

08008098 <_Balloc>:
 8008098:	b570      	push	{r4, r5, r6, lr}
 800809a:	69c6      	ldr	r6, [r0, #28]
 800809c:	4604      	mov	r4, r0
 800809e:	460d      	mov	r5, r1
 80080a0:	b976      	cbnz	r6, 80080c0 <_Balloc+0x28>
 80080a2:	2010      	movs	r0, #16
 80080a4:	f7ff ff44 	bl	8007f30 <malloc>
 80080a8:	4602      	mov	r2, r0
 80080aa:	61e0      	str	r0, [r4, #28]
 80080ac:	b920      	cbnz	r0, 80080b8 <_Balloc+0x20>
 80080ae:	4b18      	ldr	r3, [pc, #96]	; (8008110 <_Balloc+0x78>)
 80080b0:	4818      	ldr	r0, [pc, #96]	; (8008114 <_Balloc+0x7c>)
 80080b2:	216b      	movs	r1, #107	; 0x6b
 80080b4:	f000 fdaa 	bl	8008c0c <__assert_func>
 80080b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080bc:	6006      	str	r6, [r0, #0]
 80080be:	60c6      	str	r6, [r0, #12]
 80080c0:	69e6      	ldr	r6, [r4, #28]
 80080c2:	68f3      	ldr	r3, [r6, #12]
 80080c4:	b183      	cbz	r3, 80080e8 <_Balloc+0x50>
 80080c6:	69e3      	ldr	r3, [r4, #28]
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80080ce:	b9b8      	cbnz	r0, 8008100 <_Balloc+0x68>
 80080d0:	2101      	movs	r1, #1
 80080d2:	fa01 f605 	lsl.w	r6, r1, r5
 80080d6:	1d72      	adds	r2, r6, #5
 80080d8:	0092      	lsls	r2, r2, #2
 80080da:	4620      	mov	r0, r4
 80080dc:	f000 fdb4 	bl	8008c48 <_calloc_r>
 80080e0:	b160      	cbz	r0, 80080fc <_Balloc+0x64>
 80080e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80080e6:	e00e      	b.n	8008106 <_Balloc+0x6e>
 80080e8:	2221      	movs	r2, #33	; 0x21
 80080ea:	2104      	movs	r1, #4
 80080ec:	4620      	mov	r0, r4
 80080ee:	f000 fdab 	bl	8008c48 <_calloc_r>
 80080f2:	69e3      	ldr	r3, [r4, #28]
 80080f4:	60f0      	str	r0, [r6, #12]
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d1e4      	bne.n	80080c6 <_Balloc+0x2e>
 80080fc:	2000      	movs	r0, #0
 80080fe:	bd70      	pop	{r4, r5, r6, pc}
 8008100:	6802      	ldr	r2, [r0, #0]
 8008102:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008106:	2300      	movs	r3, #0
 8008108:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800810c:	e7f7      	b.n	80080fe <_Balloc+0x66>
 800810e:	bf00      	nop
 8008110:	08009551 	.word	0x08009551
 8008114:	080095d1 	.word	0x080095d1

08008118 <_Bfree>:
 8008118:	b570      	push	{r4, r5, r6, lr}
 800811a:	69c6      	ldr	r6, [r0, #28]
 800811c:	4605      	mov	r5, r0
 800811e:	460c      	mov	r4, r1
 8008120:	b976      	cbnz	r6, 8008140 <_Bfree+0x28>
 8008122:	2010      	movs	r0, #16
 8008124:	f7ff ff04 	bl	8007f30 <malloc>
 8008128:	4602      	mov	r2, r0
 800812a:	61e8      	str	r0, [r5, #28]
 800812c:	b920      	cbnz	r0, 8008138 <_Bfree+0x20>
 800812e:	4b09      	ldr	r3, [pc, #36]	; (8008154 <_Bfree+0x3c>)
 8008130:	4809      	ldr	r0, [pc, #36]	; (8008158 <_Bfree+0x40>)
 8008132:	218f      	movs	r1, #143	; 0x8f
 8008134:	f000 fd6a 	bl	8008c0c <__assert_func>
 8008138:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800813c:	6006      	str	r6, [r0, #0]
 800813e:	60c6      	str	r6, [r0, #12]
 8008140:	b13c      	cbz	r4, 8008152 <_Bfree+0x3a>
 8008142:	69eb      	ldr	r3, [r5, #28]
 8008144:	6862      	ldr	r2, [r4, #4]
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800814c:	6021      	str	r1, [r4, #0]
 800814e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008152:	bd70      	pop	{r4, r5, r6, pc}
 8008154:	08009551 	.word	0x08009551
 8008158:	080095d1 	.word	0x080095d1

0800815c <__multadd>:
 800815c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008160:	690d      	ldr	r5, [r1, #16]
 8008162:	4607      	mov	r7, r0
 8008164:	460c      	mov	r4, r1
 8008166:	461e      	mov	r6, r3
 8008168:	f101 0c14 	add.w	ip, r1, #20
 800816c:	2000      	movs	r0, #0
 800816e:	f8dc 3000 	ldr.w	r3, [ip]
 8008172:	b299      	uxth	r1, r3
 8008174:	fb02 6101 	mla	r1, r2, r1, r6
 8008178:	0c1e      	lsrs	r6, r3, #16
 800817a:	0c0b      	lsrs	r3, r1, #16
 800817c:	fb02 3306 	mla	r3, r2, r6, r3
 8008180:	b289      	uxth	r1, r1
 8008182:	3001      	adds	r0, #1
 8008184:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008188:	4285      	cmp	r5, r0
 800818a:	f84c 1b04 	str.w	r1, [ip], #4
 800818e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008192:	dcec      	bgt.n	800816e <__multadd+0x12>
 8008194:	b30e      	cbz	r6, 80081da <__multadd+0x7e>
 8008196:	68a3      	ldr	r3, [r4, #8]
 8008198:	42ab      	cmp	r3, r5
 800819a:	dc19      	bgt.n	80081d0 <__multadd+0x74>
 800819c:	6861      	ldr	r1, [r4, #4]
 800819e:	4638      	mov	r0, r7
 80081a0:	3101      	adds	r1, #1
 80081a2:	f7ff ff79 	bl	8008098 <_Balloc>
 80081a6:	4680      	mov	r8, r0
 80081a8:	b928      	cbnz	r0, 80081b6 <__multadd+0x5a>
 80081aa:	4602      	mov	r2, r0
 80081ac:	4b0c      	ldr	r3, [pc, #48]	; (80081e0 <__multadd+0x84>)
 80081ae:	480d      	ldr	r0, [pc, #52]	; (80081e4 <__multadd+0x88>)
 80081b0:	21ba      	movs	r1, #186	; 0xba
 80081b2:	f000 fd2b 	bl	8008c0c <__assert_func>
 80081b6:	6922      	ldr	r2, [r4, #16]
 80081b8:	3202      	adds	r2, #2
 80081ba:	f104 010c 	add.w	r1, r4, #12
 80081be:	0092      	lsls	r2, r2, #2
 80081c0:	300c      	adds	r0, #12
 80081c2:	f000 fd15 	bl	8008bf0 <memcpy>
 80081c6:	4621      	mov	r1, r4
 80081c8:	4638      	mov	r0, r7
 80081ca:	f7ff ffa5 	bl	8008118 <_Bfree>
 80081ce:	4644      	mov	r4, r8
 80081d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80081d4:	3501      	adds	r5, #1
 80081d6:	615e      	str	r6, [r3, #20]
 80081d8:	6125      	str	r5, [r4, #16]
 80081da:	4620      	mov	r0, r4
 80081dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081e0:	080095c0 	.word	0x080095c0
 80081e4:	080095d1 	.word	0x080095d1

080081e8 <__hi0bits>:
 80081e8:	0c03      	lsrs	r3, r0, #16
 80081ea:	041b      	lsls	r3, r3, #16
 80081ec:	b9d3      	cbnz	r3, 8008224 <__hi0bits+0x3c>
 80081ee:	0400      	lsls	r0, r0, #16
 80081f0:	2310      	movs	r3, #16
 80081f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80081f6:	bf04      	itt	eq
 80081f8:	0200      	lsleq	r0, r0, #8
 80081fa:	3308      	addeq	r3, #8
 80081fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008200:	bf04      	itt	eq
 8008202:	0100      	lsleq	r0, r0, #4
 8008204:	3304      	addeq	r3, #4
 8008206:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800820a:	bf04      	itt	eq
 800820c:	0080      	lsleq	r0, r0, #2
 800820e:	3302      	addeq	r3, #2
 8008210:	2800      	cmp	r0, #0
 8008212:	db05      	blt.n	8008220 <__hi0bits+0x38>
 8008214:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008218:	f103 0301 	add.w	r3, r3, #1
 800821c:	bf08      	it	eq
 800821e:	2320      	moveq	r3, #32
 8008220:	4618      	mov	r0, r3
 8008222:	4770      	bx	lr
 8008224:	2300      	movs	r3, #0
 8008226:	e7e4      	b.n	80081f2 <__hi0bits+0xa>

08008228 <__lo0bits>:
 8008228:	6803      	ldr	r3, [r0, #0]
 800822a:	f013 0207 	ands.w	r2, r3, #7
 800822e:	d00c      	beq.n	800824a <__lo0bits+0x22>
 8008230:	07d9      	lsls	r1, r3, #31
 8008232:	d422      	bmi.n	800827a <__lo0bits+0x52>
 8008234:	079a      	lsls	r2, r3, #30
 8008236:	bf49      	itett	mi
 8008238:	085b      	lsrmi	r3, r3, #1
 800823a:	089b      	lsrpl	r3, r3, #2
 800823c:	6003      	strmi	r3, [r0, #0]
 800823e:	2201      	movmi	r2, #1
 8008240:	bf5c      	itt	pl
 8008242:	6003      	strpl	r3, [r0, #0]
 8008244:	2202      	movpl	r2, #2
 8008246:	4610      	mov	r0, r2
 8008248:	4770      	bx	lr
 800824a:	b299      	uxth	r1, r3
 800824c:	b909      	cbnz	r1, 8008252 <__lo0bits+0x2a>
 800824e:	0c1b      	lsrs	r3, r3, #16
 8008250:	2210      	movs	r2, #16
 8008252:	b2d9      	uxtb	r1, r3
 8008254:	b909      	cbnz	r1, 800825a <__lo0bits+0x32>
 8008256:	3208      	adds	r2, #8
 8008258:	0a1b      	lsrs	r3, r3, #8
 800825a:	0719      	lsls	r1, r3, #28
 800825c:	bf04      	itt	eq
 800825e:	091b      	lsreq	r3, r3, #4
 8008260:	3204      	addeq	r2, #4
 8008262:	0799      	lsls	r1, r3, #30
 8008264:	bf04      	itt	eq
 8008266:	089b      	lsreq	r3, r3, #2
 8008268:	3202      	addeq	r2, #2
 800826a:	07d9      	lsls	r1, r3, #31
 800826c:	d403      	bmi.n	8008276 <__lo0bits+0x4e>
 800826e:	085b      	lsrs	r3, r3, #1
 8008270:	f102 0201 	add.w	r2, r2, #1
 8008274:	d003      	beq.n	800827e <__lo0bits+0x56>
 8008276:	6003      	str	r3, [r0, #0]
 8008278:	e7e5      	b.n	8008246 <__lo0bits+0x1e>
 800827a:	2200      	movs	r2, #0
 800827c:	e7e3      	b.n	8008246 <__lo0bits+0x1e>
 800827e:	2220      	movs	r2, #32
 8008280:	e7e1      	b.n	8008246 <__lo0bits+0x1e>
	...

08008284 <__i2b>:
 8008284:	b510      	push	{r4, lr}
 8008286:	460c      	mov	r4, r1
 8008288:	2101      	movs	r1, #1
 800828a:	f7ff ff05 	bl	8008098 <_Balloc>
 800828e:	4602      	mov	r2, r0
 8008290:	b928      	cbnz	r0, 800829e <__i2b+0x1a>
 8008292:	4b05      	ldr	r3, [pc, #20]	; (80082a8 <__i2b+0x24>)
 8008294:	4805      	ldr	r0, [pc, #20]	; (80082ac <__i2b+0x28>)
 8008296:	f240 1145 	movw	r1, #325	; 0x145
 800829a:	f000 fcb7 	bl	8008c0c <__assert_func>
 800829e:	2301      	movs	r3, #1
 80082a0:	6144      	str	r4, [r0, #20]
 80082a2:	6103      	str	r3, [r0, #16]
 80082a4:	bd10      	pop	{r4, pc}
 80082a6:	bf00      	nop
 80082a8:	080095c0 	.word	0x080095c0
 80082ac:	080095d1 	.word	0x080095d1

080082b0 <__multiply>:
 80082b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082b4:	4691      	mov	r9, r2
 80082b6:	690a      	ldr	r2, [r1, #16]
 80082b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80082bc:	429a      	cmp	r2, r3
 80082be:	bfb8      	it	lt
 80082c0:	460b      	movlt	r3, r1
 80082c2:	460c      	mov	r4, r1
 80082c4:	bfbc      	itt	lt
 80082c6:	464c      	movlt	r4, r9
 80082c8:	4699      	movlt	r9, r3
 80082ca:	6927      	ldr	r7, [r4, #16]
 80082cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80082d0:	68a3      	ldr	r3, [r4, #8]
 80082d2:	6861      	ldr	r1, [r4, #4]
 80082d4:	eb07 060a 	add.w	r6, r7, sl
 80082d8:	42b3      	cmp	r3, r6
 80082da:	b085      	sub	sp, #20
 80082dc:	bfb8      	it	lt
 80082de:	3101      	addlt	r1, #1
 80082e0:	f7ff feda 	bl	8008098 <_Balloc>
 80082e4:	b930      	cbnz	r0, 80082f4 <__multiply+0x44>
 80082e6:	4602      	mov	r2, r0
 80082e8:	4b44      	ldr	r3, [pc, #272]	; (80083fc <__multiply+0x14c>)
 80082ea:	4845      	ldr	r0, [pc, #276]	; (8008400 <__multiply+0x150>)
 80082ec:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80082f0:	f000 fc8c 	bl	8008c0c <__assert_func>
 80082f4:	f100 0514 	add.w	r5, r0, #20
 80082f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80082fc:	462b      	mov	r3, r5
 80082fe:	2200      	movs	r2, #0
 8008300:	4543      	cmp	r3, r8
 8008302:	d321      	bcc.n	8008348 <__multiply+0x98>
 8008304:	f104 0314 	add.w	r3, r4, #20
 8008308:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800830c:	f109 0314 	add.w	r3, r9, #20
 8008310:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008314:	9202      	str	r2, [sp, #8]
 8008316:	1b3a      	subs	r2, r7, r4
 8008318:	3a15      	subs	r2, #21
 800831a:	f022 0203 	bic.w	r2, r2, #3
 800831e:	3204      	adds	r2, #4
 8008320:	f104 0115 	add.w	r1, r4, #21
 8008324:	428f      	cmp	r7, r1
 8008326:	bf38      	it	cc
 8008328:	2204      	movcc	r2, #4
 800832a:	9201      	str	r2, [sp, #4]
 800832c:	9a02      	ldr	r2, [sp, #8]
 800832e:	9303      	str	r3, [sp, #12]
 8008330:	429a      	cmp	r2, r3
 8008332:	d80c      	bhi.n	800834e <__multiply+0x9e>
 8008334:	2e00      	cmp	r6, #0
 8008336:	dd03      	ble.n	8008340 <__multiply+0x90>
 8008338:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800833c:	2b00      	cmp	r3, #0
 800833e:	d05b      	beq.n	80083f8 <__multiply+0x148>
 8008340:	6106      	str	r6, [r0, #16]
 8008342:	b005      	add	sp, #20
 8008344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008348:	f843 2b04 	str.w	r2, [r3], #4
 800834c:	e7d8      	b.n	8008300 <__multiply+0x50>
 800834e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008352:	f1ba 0f00 	cmp.w	sl, #0
 8008356:	d024      	beq.n	80083a2 <__multiply+0xf2>
 8008358:	f104 0e14 	add.w	lr, r4, #20
 800835c:	46a9      	mov	r9, r5
 800835e:	f04f 0c00 	mov.w	ip, #0
 8008362:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008366:	f8d9 1000 	ldr.w	r1, [r9]
 800836a:	fa1f fb82 	uxth.w	fp, r2
 800836e:	b289      	uxth	r1, r1
 8008370:	fb0a 110b 	mla	r1, sl, fp, r1
 8008374:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008378:	f8d9 2000 	ldr.w	r2, [r9]
 800837c:	4461      	add	r1, ip
 800837e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008382:	fb0a c20b 	mla	r2, sl, fp, ip
 8008386:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800838a:	b289      	uxth	r1, r1
 800838c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008390:	4577      	cmp	r7, lr
 8008392:	f849 1b04 	str.w	r1, [r9], #4
 8008396:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800839a:	d8e2      	bhi.n	8008362 <__multiply+0xb2>
 800839c:	9a01      	ldr	r2, [sp, #4]
 800839e:	f845 c002 	str.w	ip, [r5, r2]
 80083a2:	9a03      	ldr	r2, [sp, #12]
 80083a4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80083a8:	3304      	adds	r3, #4
 80083aa:	f1b9 0f00 	cmp.w	r9, #0
 80083ae:	d021      	beq.n	80083f4 <__multiply+0x144>
 80083b0:	6829      	ldr	r1, [r5, #0]
 80083b2:	f104 0c14 	add.w	ip, r4, #20
 80083b6:	46ae      	mov	lr, r5
 80083b8:	f04f 0a00 	mov.w	sl, #0
 80083bc:	f8bc b000 	ldrh.w	fp, [ip]
 80083c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80083c4:	fb09 220b 	mla	r2, r9, fp, r2
 80083c8:	4452      	add	r2, sl
 80083ca:	b289      	uxth	r1, r1
 80083cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80083d0:	f84e 1b04 	str.w	r1, [lr], #4
 80083d4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80083d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80083dc:	f8be 1000 	ldrh.w	r1, [lr]
 80083e0:	fb09 110a 	mla	r1, r9, sl, r1
 80083e4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80083e8:	4567      	cmp	r7, ip
 80083ea:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80083ee:	d8e5      	bhi.n	80083bc <__multiply+0x10c>
 80083f0:	9a01      	ldr	r2, [sp, #4]
 80083f2:	50a9      	str	r1, [r5, r2]
 80083f4:	3504      	adds	r5, #4
 80083f6:	e799      	b.n	800832c <__multiply+0x7c>
 80083f8:	3e01      	subs	r6, #1
 80083fa:	e79b      	b.n	8008334 <__multiply+0x84>
 80083fc:	080095c0 	.word	0x080095c0
 8008400:	080095d1 	.word	0x080095d1

08008404 <__pow5mult>:
 8008404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008408:	4615      	mov	r5, r2
 800840a:	f012 0203 	ands.w	r2, r2, #3
 800840e:	4606      	mov	r6, r0
 8008410:	460f      	mov	r7, r1
 8008412:	d007      	beq.n	8008424 <__pow5mult+0x20>
 8008414:	4c25      	ldr	r4, [pc, #148]	; (80084ac <__pow5mult+0xa8>)
 8008416:	3a01      	subs	r2, #1
 8008418:	2300      	movs	r3, #0
 800841a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800841e:	f7ff fe9d 	bl	800815c <__multadd>
 8008422:	4607      	mov	r7, r0
 8008424:	10ad      	asrs	r5, r5, #2
 8008426:	d03d      	beq.n	80084a4 <__pow5mult+0xa0>
 8008428:	69f4      	ldr	r4, [r6, #28]
 800842a:	b97c      	cbnz	r4, 800844c <__pow5mult+0x48>
 800842c:	2010      	movs	r0, #16
 800842e:	f7ff fd7f 	bl	8007f30 <malloc>
 8008432:	4602      	mov	r2, r0
 8008434:	61f0      	str	r0, [r6, #28]
 8008436:	b928      	cbnz	r0, 8008444 <__pow5mult+0x40>
 8008438:	4b1d      	ldr	r3, [pc, #116]	; (80084b0 <__pow5mult+0xac>)
 800843a:	481e      	ldr	r0, [pc, #120]	; (80084b4 <__pow5mult+0xb0>)
 800843c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008440:	f000 fbe4 	bl	8008c0c <__assert_func>
 8008444:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008448:	6004      	str	r4, [r0, #0]
 800844a:	60c4      	str	r4, [r0, #12]
 800844c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008450:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008454:	b94c      	cbnz	r4, 800846a <__pow5mult+0x66>
 8008456:	f240 2171 	movw	r1, #625	; 0x271
 800845a:	4630      	mov	r0, r6
 800845c:	f7ff ff12 	bl	8008284 <__i2b>
 8008460:	2300      	movs	r3, #0
 8008462:	f8c8 0008 	str.w	r0, [r8, #8]
 8008466:	4604      	mov	r4, r0
 8008468:	6003      	str	r3, [r0, #0]
 800846a:	f04f 0900 	mov.w	r9, #0
 800846e:	07eb      	lsls	r3, r5, #31
 8008470:	d50a      	bpl.n	8008488 <__pow5mult+0x84>
 8008472:	4639      	mov	r1, r7
 8008474:	4622      	mov	r2, r4
 8008476:	4630      	mov	r0, r6
 8008478:	f7ff ff1a 	bl	80082b0 <__multiply>
 800847c:	4639      	mov	r1, r7
 800847e:	4680      	mov	r8, r0
 8008480:	4630      	mov	r0, r6
 8008482:	f7ff fe49 	bl	8008118 <_Bfree>
 8008486:	4647      	mov	r7, r8
 8008488:	106d      	asrs	r5, r5, #1
 800848a:	d00b      	beq.n	80084a4 <__pow5mult+0xa0>
 800848c:	6820      	ldr	r0, [r4, #0]
 800848e:	b938      	cbnz	r0, 80084a0 <__pow5mult+0x9c>
 8008490:	4622      	mov	r2, r4
 8008492:	4621      	mov	r1, r4
 8008494:	4630      	mov	r0, r6
 8008496:	f7ff ff0b 	bl	80082b0 <__multiply>
 800849a:	6020      	str	r0, [r4, #0]
 800849c:	f8c0 9000 	str.w	r9, [r0]
 80084a0:	4604      	mov	r4, r0
 80084a2:	e7e4      	b.n	800846e <__pow5mult+0x6a>
 80084a4:	4638      	mov	r0, r7
 80084a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084aa:	bf00      	nop
 80084ac:	08009720 	.word	0x08009720
 80084b0:	08009551 	.word	0x08009551
 80084b4:	080095d1 	.word	0x080095d1

080084b8 <__lshift>:
 80084b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084bc:	460c      	mov	r4, r1
 80084be:	6849      	ldr	r1, [r1, #4]
 80084c0:	6923      	ldr	r3, [r4, #16]
 80084c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80084c6:	68a3      	ldr	r3, [r4, #8]
 80084c8:	4607      	mov	r7, r0
 80084ca:	4691      	mov	r9, r2
 80084cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80084d0:	f108 0601 	add.w	r6, r8, #1
 80084d4:	42b3      	cmp	r3, r6
 80084d6:	db0b      	blt.n	80084f0 <__lshift+0x38>
 80084d8:	4638      	mov	r0, r7
 80084da:	f7ff fddd 	bl	8008098 <_Balloc>
 80084de:	4605      	mov	r5, r0
 80084e0:	b948      	cbnz	r0, 80084f6 <__lshift+0x3e>
 80084e2:	4602      	mov	r2, r0
 80084e4:	4b28      	ldr	r3, [pc, #160]	; (8008588 <__lshift+0xd0>)
 80084e6:	4829      	ldr	r0, [pc, #164]	; (800858c <__lshift+0xd4>)
 80084e8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80084ec:	f000 fb8e 	bl	8008c0c <__assert_func>
 80084f0:	3101      	adds	r1, #1
 80084f2:	005b      	lsls	r3, r3, #1
 80084f4:	e7ee      	b.n	80084d4 <__lshift+0x1c>
 80084f6:	2300      	movs	r3, #0
 80084f8:	f100 0114 	add.w	r1, r0, #20
 80084fc:	f100 0210 	add.w	r2, r0, #16
 8008500:	4618      	mov	r0, r3
 8008502:	4553      	cmp	r3, sl
 8008504:	db33      	blt.n	800856e <__lshift+0xb6>
 8008506:	6920      	ldr	r0, [r4, #16]
 8008508:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800850c:	f104 0314 	add.w	r3, r4, #20
 8008510:	f019 091f 	ands.w	r9, r9, #31
 8008514:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008518:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800851c:	d02b      	beq.n	8008576 <__lshift+0xbe>
 800851e:	f1c9 0e20 	rsb	lr, r9, #32
 8008522:	468a      	mov	sl, r1
 8008524:	2200      	movs	r2, #0
 8008526:	6818      	ldr	r0, [r3, #0]
 8008528:	fa00 f009 	lsl.w	r0, r0, r9
 800852c:	4310      	orrs	r0, r2
 800852e:	f84a 0b04 	str.w	r0, [sl], #4
 8008532:	f853 2b04 	ldr.w	r2, [r3], #4
 8008536:	459c      	cmp	ip, r3
 8008538:	fa22 f20e 	lsr.w	r2, r2, lr
 800853c:	d8f3      	bhi.n	8008526 <__lshift+0x6e>
 800853e:	ebac 0304 	sub.w	r3, ip, r4
 8008542:	3b15      	subs	r3, #21
 8008544:	f023 0303 	bic.w	r3, r3, #3
 8008548:	3304      	adds	r3, #4
 800854a:	f104 0015 	add.w	r0, r4, #21
 800854e:	4584      	cmp	ip, r0
 8008550:	bf38      	it	cc
 8008552:	2304      	movcc	r3, #4
 8008554:	50ca      	str	r2, [r1, r3]
 8008556:	b10a      	cbz	r2, 800855c <__lshift+0xa4>
 8008558:	f108 0602 	add.w	r6, r8, #2
 800855c:	3e01      	subs	r6, #1
 800855e:	4638      	mov	r0, r7
 8008560:	612e      	str	r6, [r5, #16]
 8008562:	4621      	mov	r1, r4
 8008564:	f7ff fdd8 	bl	8008118 <_Bfree>
 8008568:	4628      	mov	r0, r5
 800856a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800856e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008572:	3301      	adds	r3, #1
 8008574:	e7c5      	b.n	8008502 <__lshift+0x4a>
 8008576:	3904      	subs	r1, #4
 8008578:	f853 2b04 	ldr.w	r2, [r3], #4
 800857c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008580:	459c      	cmp	ip, r3
 8008582:	d8f9      	bhi.n	8008578 <__lshift+0xc0>
 8008584:	e7ea      	b.n	800855c <__lshift+0xa4>
 8008586:	bf00      	nop
 8008588:	080095c0 	.word	0x080095c0
 800858c:	080095d1 	.word	0x080095d1

08008590 <__mcmp>:
 8008590:	b530      	push	{r4, r5, lr}
 8008592:	6902      	ldr	r2, [r0, #16]
 8008594:	690c      	ldr	r4, [r1, #16]
 8008596:	1b12      	subs	r2, r2, r4
 8008598:	d10e      	bne.n	80085b8 <__mcmp+0x28>
 800859a:	f100 0314 	add.w	r3, r0, #20
 800859e:	3114      	adds	r1, #20
 80085a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80085a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80085a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80085ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80085b0:	42a5      	cmp	r5, r4
 80085b2:	d003      	beq.n	80085bc <__mcmp+0x2c>
 80085b4:	d305      	bcc.n	80085c2 <__mcmp+0x32>
 80085b6:	2201      	movs	r2, #1
 80085b8:	4610      	mov	r0, r2
 80085ba:	bd30      	pop	{r4, r5, pc}
 80085bc:	4283      	cmp	r3, r0
 80085be:	d3f3      	bcc.n	80085a8 <__mcmp+0x18>
 80085c0:	e7fa      	b.n	80085b8 <__mcmp+0x28>
 80085c2:	f04f 32ff 	mov.w	r2, #4294967295
 80085c6:	e7f7      	b.n	80085b8 <__mcmp+0x28>

080085c8 <__mdiff>:
 80085c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085cc:	460c      	mov	r4, r1
 80085ce:	4606      	mov	r6, r0
 80085d0:	4611      	mov	r1, r2
 80085d2:	4620      	mov	r0, r4
 80085d4:	4690      	mov	r8, r2
 80085d6:	f7ff ffdb 	bl	8008590 <__mcmp>
 80085da:	1e05      	subs	r5, r0, #0
 80085dc:	d110      	bne.n	8008600 <__mdiff+0x38>
 80085de:	4629      	mov	r1, r5
 80085e0:	4630      	mov	r0, r6
 80085e2:	f7ff fd59 	bl	8008098 <_Balloc>
 80085e6:	b930      	cbnz	r0, 80085f6 <__mdiff+0x2e>
 80085e8:	4b3a      	ldr	r3, [pc, #232]	; (80086d4 <__mdiff+0x10c>)
 80085ea:	4602      	mov	r2, r0
 80085ec:	f240 2137 	movw	r1, #567	; 0x237
 80085f0:	4839      	ldr	r0, [pc, #228]	; (80086d8 <__mdiff+0x110>)
 80085f2:	f000 fb0b 	bl	8008c0c <__assert_func>
 80085f6:	2301      	movs	r3, #1
 80085f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80085fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008600:	bfa4      	itt	ge
 8008602:	4643      	movge	r3, r8
 8008604:	46a0      	movge	r8, r4
 8008606:	4630      	mov	r0, r6
 8008608:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800860c:	bfa6      	itte	ge
 800860e:	461c      	movge	r4, r3
 8008610:	2500      	movge	r5, #0
 8008612:	2501      	movlt	r5, #1
 8008614:	f7ff fd40 	bl	8008098 <_Balloc>
 8008618:	b920      	cbnz	r0, 8008624 <__mdiff+0x5c>
 800861a:	4b2e      	ldr	r3, [pc, #184]	; (80086d4 <__mdiff+0x10c>)
 800861c:	4602      	mov	r2, r0
 800861e:	f240 2145 	movw	r1, #581	; 0x245
 8008622:	e7e5      	b.n	80085f0 <__mdiff+0x28>
 8008624:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008628:	6926      	ldr	r6, [r4, #16]
 800862a:	60c5      	str	r5, [r0, #12]
 800862c:	f104 0914 	add.w	r9, r4, #20
 8008630:	f108 0514 	add.w	r5, r8, #20
 8008634:	f100 0e14 	add.w	lr, r0, #20
 8008638:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800863c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008640:	f108 0210 	add.w	r2, r8, #16
 8008644:	46f2      	mov	sl, lr
 8008646:	2100      	movs	r1, #0
 8008648:	f859 3b04 	ldr.w	r3, [r9], #4
 800864c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008650:	fa11 f88b 	uxtah	r8, r1, fp
 8008654:	b299      	uxth	r1, r3
 8008656:	0c1b      	lsrs	r3, r3, #16
 8008658:	eba8 0801 	sub.w	r8, r8, r1
 800865c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008660:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008664:	fa1f f888 	uxth.w	r8, r8
 8008668:	1419      	asrs	r1, r3, #16
 800866a:	454e      	cmp	r6, r9
 800866c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008670:	f84a 3b04 	str.w	r3, [sl], #4
 8008674:	d8e8      	bhi.n	8008648 <__mdiff+0x80>
 8008676:	1b33      	subs	r3, r6, r4
 8008678:	3b15      	subs	r3, #21
 800867a:	f023 0303 	bic.w	r3, r3, #3
 800867e:	3304      	adds	r3, #4
 8008680:	3415      	adds	r4, #21
 8008682:	42a6      	cmp	r6, r4
 8008684:	bf38      	it	cc
 8008686:	2304      	movcc	r3, #4
 8008688:	441d      	add	r5, r3
 800868a:	4473      	add	r3, lr
 800868c:	469e      	mov	lr, r3
 800868e:	462e      	mov	r6, r5
 8008690:	4566      	cmp	r6, ip
 8008692:	d30e      	bcc.n	80086b2 <__mdiff+0xea>
 8008694:	f10c 0203 	add.w	r2, ip, #3
 8008698:	1b52      	subs	r2, r2, r5
 800869a:	f022 0203 	bic.w	r2, r2, #3
 800869e:	3d03      	subs	r5, #3
 80086a0:	45ac      	cmp	ip, r5
 80086a2:	bf38      	it	cc
 80086a4:	2200      	movcc	r2, #0
 80086a6:	4413      	add	r3, r2
 80086a8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80086ac:	b17a      	cbz	r2, 80086ce <__mdiff+0x106>
 80086ae:	6107      	str	r7, [r0, #16]
 80086b0:	e7a4      	b.n	80085fc <__mdiff+0x34>
 80086b2:	f856 8b04 	ldr.w	r8, [r6], #4
 80086b6:	fa11 f288 	uxtah	r2, r1, r8
 80086ba:	1414      	asrs	r4, r2, #16
 80086bc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80086c0:	b292      	uxth	r2, r2
 80086c2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80086c6:	f84e 2b04 	str.w	r2, [lr], #4
 80086ca:	1421      	asrs	r1, r4, #16
 80086cc:	e7e0      	b.n	8008690 <__mdiff+0xc8>
 80086ce:	3f01      	subs	r7, #1
 80086d0:	e7ea      	b.n	80086a8 <__mdiff+0xe0>
 80086d2:	bf00      	nop
 80086d4:	080095c0 	.word	0x080095c0
 80086d8:	080095d1 	.word	0x080095d1

080086dc <__d2b>:
 80086dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80086e0:	460f      	mov	r7, r1
 80086e2:	2101      	movs	r1, #1
 80086e4:	ec59 8b10 	vmov	r8, r9, d0
 80086e8:	4616      	mov	r6, r2
 80086ea:	f7ff fcd5 	bl	8008098 <_Balloc>
 80086ee:	4604      	mov	r4, r0
 80086f0:	b930      	cbnz	r0, 8008700 <__d2b+0x24>
 80086f2:	4602      	mov	r2, r0
 80086f4:	4b24      	ldr	r3, [pc, #144]	; (8008788 <__d2b+0xac>)
 80086f6:	4825      	ldr	r0, [pc, #148]	; (800878c <__d2b+0xb0>)
 80086f8:	f240 310f 	movw	r1, #783	; 0x30f
 80086fc:	f000 fa86 	bl	8008c0c <__assert_func>
 8008700:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008704:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008708:	bb2d      	cbnz	r5, 8008756 <__d2b+0x7a>
 800870a:	9301      	str	r3, [sp, #4]
 800870c:	f1b8 0300 	subs.w	r3, r8, #0
 8008710:	d026      	beq.n	8008760 <__d2b+0x84>
 8008712:	4668      	mov	r0, sp
 8008714:	9300      	str	r3, [sp, #0]
 8008716:	f7ff fd87 	bl	8008228 <__lo0bits>
 800871a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800871e:	b1e8      	cbz	r0, 800875c <__d2b+0x80>
 8008720:	f1c0 0320 	rsb	r3, r0, #32
 8008724:	fa02 f303 	lsl.w	r3, r2, r3
 8008728:	430b      	orrs	r3, r1
 800872a:	40c2      	lsrs	r2, r0
 800872c:	6163      	str	r3, [r4, #20]
 800872e:	9201      	str	r2, [sp, #4]
 8008730:	9b01      	ldr	r3, [sp, #4]
 8008732:	61a3      	str	r3, [r4, #24]
 8008734:	2b00      	cmp	r3, #0
 8008736:	bf14      	ite	ne
 8008738:	2202      	movne	r2, #2
 800873a:	2201      	moveq	r2, #1
 800873c:	6122      	str	r2, [r4, #16]
 800873e:	b1bd      	cbz	r5, 8008770 <__d2b+0x94>
 8008740:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008744:	4405      	add	r5, r0
 8008746:	603d      	str	r5, [r7, #0]
 8008748:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800874c:	6030      	str	r0, [r6, #0]
 800874e:	4620      	mov	r0, r4
 8008750:	b003      	add	sp, #12
 8008752:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008756:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800875a:	e7d6      	b.n	800870a <__d2b+0x2e>
 800875c:	6161      	str	r1, [r4, #20]
 800875e:	e7e7      	b.n	8008730 <__d2b+0x54>
 8008760:	a801      	add	r0, sp, #4
 8008762:	f7ff fd61 	bl	8008228 <__lo0bits>
 8008766:	9b01      	ldr	r3, [sp, #4]
 8008768:	6163      	str	r3, [r4, #20]
 800876a:	3020      	adds	r0, #32
 800876c:	2201      	movs	r2, #1
 800876e:	e7e5      	b.n	800873c <__d2b+0x60>
 8008770:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008774:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008778:	6038      	str	r0, [r7, #0]
 800877a:	6918      	ldr	r0, [r3, #16]
 800877c:	f7ff fd34 	bl	80081e8 <__hi0bits>
 8008780:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008784:	e7e2      	b.n	800874c <__d2b+0x70>
 8008786:	bf00      	nop
 8008788:	080095c0 	.word	0x080095c0
 800878c:	080095d1 	.word	0x080095d1

08008790 <__ssputs_r>:
 8008790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008794:	688e      	ldr	r6, [r1, #8]
 8008796:	461f      	mov	r7, r3
 8008798:	42be      	cmp	r6, r7
 800879a:	680b      	ldr	r3, [r1, #0]
 800879c:	4682      	mov	sl, r0
 800879e:	460c      	mov	r4, r1
 80087a0:	4690      	mov	r8, r2
 80087a2:	d82c      	bhi.n	80087fe <__ssputs_r+0x6e>
 80087a4:	898a      	ldrh	r2, [r1, #12]
 80087a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80087aa:	d026      	beq.n	80087fa <__ssputs_r+0x6a>
 80087ac:	6965      	ldr	r5, [r4, #20]
 80087ae:	6909      	ldr	r1, [r1, #16]
 80087b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087b4:	eba3 0901 	sub.w	r9, r3, r1
 80087b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80087bc:	1c7b      	adds	r3, r7, #1
 80087be:	444b      	add	r3, r9
 80087c0:	106d      	asrs	r5, r5, #1
 80087c2:	429d      	cmp	r5, r3
 80087c4:	bf38      	it	cc
 80087c6:	461d      	movcc	r5, r3
 80087c8:	0553      	lsls	r3, r2, #21
 80087ca:	d527      	bpl.n	800881c <__ssputs_r+0x8c>
 80087cc:	4629      	mov	r1, r5
 80087ce:	f7ff fbd7 	bl	8007f80 <_malloc_r>
 80087d2:	4606      	mov	r6, r0
 80087d4:	b360      	cbz	r0, 8008830 <__ssputs_r+0xa0>
 80087d6:	6921      	ldr	r1, [r4, #16]
 80087d8:	464a      	mov	r2, r9
 80087da:	f000 fa09 	bl	8008bf0 <memcpy>
 80087de:	89a3      	ldrh	r3, [r4, #12]
 80087e0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80087e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087e8:	81a3      	strh	r3, [r4, #12]
 80087ea:	6126      	str	r6, [r4, #16]
 80087ec:	6165      	str	r5, [r4, #20]
 80087ee:	444e      	add	r6, r9
 80087f0:	eba5 0509 	sub.w	r5, r5, r9
 80087f4:	6026      	str	r6, [r4, #0]
 80087f6:	60a5      	str	r5, [r4, #8]
 80087f8:	463e      	mov	r6, r7
 80087fa:	42be      	cmp	r6, r7
 80087fc:	d900      	bls.n	8008800 <__ssputs_r+0x70>
 80087fe:	463e      	mov	r6, r7
 8008800:	6820      	ldr	r0, [r4, #0]
 8008802:	4632      	mov	r2, r6
 8008804:	4641      	mov	r1, r8
 8008806:	f000 f9c9 	bl	8008b9c <memmove>
 800880a:	68a3      	ldr	r3, [r4, #8]
 800880c:	1b9b      	subs	r3, r3, r6
 800880e:	60a3      	str	r3, [r4, #8]
 8008810:	6823      	ldr	r3, [r4, #0]
 8008812:	4433      	add	r3, r6
 8008814:	6023      	str	r3, [r4, #0]
 8008816:	2000      	movs	r0, #0
 8008818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800881c:	462a      	mov	r2, r5
 800881e:	f000 fa3b 	bl	8008c98 <_realloc_r>
 8008822:	4606      	mov	r6, r0
 8008824:	2800      	cmp	r0, #0
 8008826:	d1e0      	bne.n	80087ea <__ssputs_r+0x5a>
 8008828:	6921      	ldr	r1, [r4, #16]
 800882a:	4650      	mov	r0, sl
 800882c:	f7ff fb34 	bl	8007e98 <_free_r>
 8008830:	230c      	movs	r3, #12
 8008832:	f8ca 3000 	str.w	r3, [sl]
 8008836:	89a3      	ldrh	r3, [r4, #12]
 8008838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800883c:	81a3      	strh	r3, [r4, #12]
 800883e:	f04f 30ff 	mov.w	r0, #4294967295
 8008842:	e7e9      	b.n	8008818 <__ssputs_r+0x88>

08008844 <_svfiprintf_r>:
 8008844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008848:	4698      	mov	r8, r3
 800884a:	898b      	ldrh	r3, [r1, #12]
 800884c:	061b      	lsls	r3, r3, #24
 800884e:	b09d      	sub	sp, #116	; 0x74
 8008850:	4607      	mov	r7, r0
 8008852:	460d      	mov	r5, r1
 8008854:	4614      	mov	r4, r2
 8008856:	d50e      	bpl.n	8008876 <_svfiprintf_r+0x32>
 8008858:	690b      	ldr	r3, [r1, #16]
 800885a:	b963      	cbnz	r3, 8008876 <_svfiprintf_r+0x32>
 800885c:	2140      	movs	r1, #64	; 0x40
 800885e:	f7ff fb8f 	bl	8007f80 <_malloc_r>
 8008862:	6028      	str	r0, [r5, #0]
 8008864:	6128      	str	r0, [r5, #16]
 8008866:	b920      	cbnz	r0, 8008872 <_svfiprintf_r+0x2e>
 8008868:	230c      	movs	r3, #12
 800886a:	603b      	str	r3, [r7, #0]
 800886c:	f04f 30ff 	mov.w	r0, #4294967295
 8008870:	e0d0      	b.n	8008a14 <_svfiprintf_r+0x1d0>
 8008872:	2340      	movs	r3, #64	; 0x40
 8008874:	616b      	str	r3, [r5, #20]
 8008876:	2300      	movs	r3, #0
 8008878:	9309      	str	r3, [sp, #36]	; 0x24
 800887a:	2320      	movs	r3, #32
 800887c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008880:	f8cd 800c 	str.w	r8, [sp, #12]
 8008884:	2330      	movs	r3, #48	; 0x30
 8008886:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008a2c <_svfiprintf_r+0x1e8>
 800888a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800888e:	f04f 0901 	mov.w	r9, #1
 8008892:	4623      	mov	r3, r4
 8008894:	469a      	mov	sl, r3
 8008896:	f813 2b01 	ldrb.w	r2, [r3], #1
 800889a:	b10a      	cbz	r2, 80088a0 <_svfiprintf_r+0x5c>
 800889c:	2a25      	cmp	r2, #37	; 0x25
 800889e:	d1f9      	bne.n	8008894 <_svfiprintf_r+0x50>
 80088a0:	ebba 0b04 	subs.w	fp, sl, r4
 80088a4:	d00b      	beq.n	80088be <_svfiprintf_r+0x7a>
 80088a6:	465b      	mov	r3, fp
 80088a8:	4622      	mov	r2, r4
 80088aa:	4629      	mov	r1, r5
 80088ac:	4638      	mov	r0, r7
 80088ae:	f7ff ff6f 	bl	8008790 <__ssputs_r>
 80088b2:	3001      	adds	r0, #1
 80088b4:	f000 80a9 	beq.w	8008a0a <_svfiprintf_r+0x1c6>
 80088b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088ba:	445a      	add	r2, fp
 80088bc:	9209      	str	r2, [sp, #36]	; 0x24
 80088be:	f89a 3000 	ldrb.w	r3, [sl]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	f000 80a1 	beq.w	8008a0a <_svfiprintf_r+0x1c6>
 80088c8:	2300      	movs	r3, #0
 80088ca:	f04f 32ff 	mov.w	r2, #4294967295
 80088ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088d2:	f10a 0a01 	add.w	sl, sl, #1
 80088d6:	9304      	str	r3, [sp, #16]
 80088d8:	9307      	str	r3, [sp, #28]
 80088da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088de:	931a      	str	r3, [sp, #104]	; 0x68
 80088e0:	4654      	mov	r4, sl
 80088e2:	2205      	movs	r2, #5
 80088e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088e8:	4850      	ldr	r0, [pc, #320]	; (8008a2c <_svfiprintf_r+0x1e8>)
 80088ea:	f7f7 fca9 	bl	8000240 <memchr>
 80088ee:	9a04      	ldr	r2, [sp, #16]
 80088f0:	b9d8      	cbnz	r0, 800892a <_svfiprintf_r+0xe6>
 80088f2:	06d0      	lsls	r0, r2, #27
 80088f4:	bf44      	itt	mi
 80088f6:	2320      	movmi	r3, #32
 80088f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088fc:	0711      	lsls	r1, r2, #28
 80088fe:	bf44      	itt	mi
 8008900:	232b      	movmi	r3, #43	; 0x2b
 8008902:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008906:	f89a 3000 	ldrb.w	r3, [sl]
 800890a:	2b2a      	cmp	r3, #42	; 0x2a
 800890c:	d015      	beq.n	800893a <_svfiprintf_r+0xf6>
 800890e:	9a07      	ldr	r2, [sp, #28]
 8008910:	4654      	mov	r4, sl
 8008912:	2000      	movs	r0, #0
 8008914:	f04f 0c0a 	mov.w	ip, #10
 8008918:	4621      	mov	r1, r4
 800891a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800891e:	3b30      	subs	r3, #48	; 0x30
 8008920:	2b09      	cmp	r3, #9
 8008922:	d94d      	bls.n	80089c0 <_svfiprintf_r+0x17c>
 8008924:	b1b0      	cbz	r0, 8008954 <_svfiprintf_r+0x110>
 8008926:	9207      	str	r2, [sp, #28]
 8008928:	e014      	b.n	8008954 <_svfiprintf_r+0x110>
 800892a:	eba0 0308 	sub.w	r3, r0, r8
 800892e:	fa09 f303 	lsl.w	r3, r9, r3
 8008932:	4313      	orrs	r3, r2
 8008934:	9304      	str	r3, [sp, #16]
 8008936:	46a2      	mov	sl, r4
 8008938:	e7d2      	b.n	80088e0 <_svfiprintf_r+0x9c>
 800893a:	9b03      	ldr	r3, [sp, #12]
 800893c:	1d19      	adds	r1, r3, #4
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	9103      	str	r1, [sp, #12]
 8008942:	2b00      	cmp	r3, #0
 8008944:	bfbb      	ittet	lt
 8008946:	425b      	neglt	r3, r3
 8008948:	f042 0202 	orrlt.w	r2, r2, #2
 800894c:	9307      	strge	r3, [sp, #28]
 800894e:	9307      	strlt	r3, [sp, #28]
 8008950:	bfb8      	it	lt
 8008952:	9204      	strlt	r2, [sp, #16]
 8008954:	7823      	ldrb	r3, [r4, #0]
 8008956:	2b2e      	cmp	r3, #46	; 0x2e
 8008958:	d10c      	bne.n	8008974 <_svfiprintf_r+0x130>
 800895a:	7863      	ldrb	r3, [r4, #1]
 800895c:	2b2a      	cmp	r3, #42	; 0x2a
 800895e:	d134      	bne.n	80089ca <_svfiprintf_r+0x186>
 8008960:	9b03      	ldr	r3, [sp, #12]
 8008962:	1d1a      	adds	r2, r3, #4
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	9203      	str	r2, [sp, #12]
 8008968:	2b00      	cmp	r3, #0
 800896a:	bfb8      	it	lt
 800896c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008970:	3402      	adds	r4, #2
 8008972:	9305      	str	r3, [sp, #20]
 8008974:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008a3c <_svfiprintf_r+0x1f8>
 8008978:	7821      	ldrb	r1, [r4, #0]
 800897a:	2203      	movs	r2, #3
 800897c:	4650      	mov	r0, sl
 800897e:	f7f7 fc5f 	bl	8000240 <memchr>
 8008982:	b138      	cbz	r0, 8008994 <_svfiprintf_r+0x150>
 8008984:	9b04      	ldr	r3, [sp, #16]
 8008986:	eba0 000a 	sub.w	r0, r0, sl
 800898a:	2240      	movs	r2, #64	; 0x40
 800898c:	4082      	lsls	r2, r0
 800898e:	4313      	orrs	r3, r2
 8008990:	3401      	adds	r4, #1
 8008992:	9304      	str	r3, [sp, #16]
 8008994:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008998:	4825      	ldr	r0, [pc, #148]	; (8008a30 <_svfiprintf_r+0x1ec>)
 800899a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800899e:	2206      	movs	r2, #6
 80089a0:	f7f7 fc4e 	bl	8000240 <memchr>
 80089a4:	2800      	cmp	r0, #0
 80089a6:	d038      	beq.n	8008a1a <_svfiprintf_r+0x1d6>
 80089a8:	4b22      	ldr	r3, [pc, #136]	; (8008a34 <_svfiprintf_r+0x1f0>)
 80089aa:	bb1b      	cbnz	r3, 80089f4 <_svfiprintf_r+0x1b0>
 80089ac:	9b03      	ldr	r3, [sp, #12]
 80089ae:	3307      	adds	r3, #7
 80089b0:	f023 0307 	bic.w	r3, r3, #7
 80089b4:	3308      	adds	r3, #8
 80089b6:	9303      	str	r3, [sp, #12]
 80089b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ba:	4433      	add	r3, r6
 80089bc:	9309      	str	r3, [sp, #36]	; 0x24
 80089be:	e768      	b.n	8008892 <_svfiprintf_r+0x4e>
 80089c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80089c4:	460c      	mov	r4, r1
 80089c6:	2001      	movs	r0, #1
 80089c8:	e7a6      	b.n	8008918 <_svfiprintf_r+0xd4>
 80089ca:	2300      	movs	r3, #0
 80089cc:	3401      	adds	r4, #1
 80089ce:	9305      	str	r3, [sp, #20]
 80089d0:	4619      	mov	r1, r3
 80089d2:	f04f 0c0a 	mov.w	ip, #10
 80089d6:	4620      	mov	r0, r4
 80089d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089dc:	3a30      	subs	r2, #48	; 0x30
 80089de:	2a09      	cmp	r2, #9
 80089e0:	d903      	bls.n	80089ea <_svfiprintf_r+0x1a6>
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d0c6      	beq.n	8008974 <_svfiprintf_r+0x130>
 80089e6:	9105      	str	r1, [sp, #20]
 80089e8:	e7c4      	b.n	8008974 <_svfiprintf_r+0x130>
 80089ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80089ee:	4604      	mov	r4, r0
 80089f0:	2301      	movs	r3, #1
 80089f2:	e7f0      	b.n	80089d6 <_svfiprintf_r+0x192>
 80089f4:	ab03      	add	r3, sp, #12
 80089f6:	9300      	str	r3, [sp, #0]
 80089f8:	462a      	mov	r2, r5
 80089fa:	4b0f      	ldr	r3, [pc, #60]	; (8008a38 <_svfiprintf_r+0x1f4>)
 80089fc:	a904      	add	r1, sp, #16
 80089fe:	4638      	mov	r0, r7
 8008a00:	f7fd ff1a 	bl	8006838 <_printf_float>
 8008a04:	1c42      	adds	r2, r0, #1
 8008a06:	4606      	mov	r6, r0
 8008a08:	d1d6      	bne.n	80089b8 <_svfiprintf_r+0x174>
 8008a0a:	89ab      	ldrh	r3, [r5, #12]
 8008a0c:	065b      	lsls	r3, r3, #25
 8008a0e:	f53f af2d 	bmi.w	800886c <_svfiprintf_r+0x28>
 8008a12:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a14:	b01d      	add	sp, #116	; 0x74
 8008a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a1a:	ab03      	add	r3, sp, #12
 8008a1c:	9300      	str	r3, [sp, #0]
 8008a1e:	462a      	mov	r2, r5
 8008a20:	4b05      	ldr	r3, [pc, #20]	; (8008a38 <_svfiprintf_r+0x1f4>)
 8008a22:	a904      	add	r1, sp, #16
 8008a24:	4638      	mov	r0, r7
 8008a26:	f7fe f98f 	bl	8006d48 <_printf_i>
 8008a2a:	e7eb      	b.n	8008a04 <_svfiprintf_r+0x1c0>
 8008a2c:	0800972c 	.word	0x0800972c
 8008a30:	08009736 	.word	0x08009736
 8008a34:	08006839 	.word	0x08006839
 8008a38:	08008791 	.word	0x08008791
 8008a3c:	08009732 	.word	0x08009732

08008a40 <__sflush_r>:
 8008a40:	898a      	ldrh	r2, [r1, #12]
 8008a42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a46:	4605      	mov	r5, r0
 8008a48:	0710      	lsls	r0, r2, #28
 8008a4a:	460c      	mov	r4, r1
 8008a4c:	d458      	bmi.n	8008b00 <__sflush_r+0xc0>
 8008a4e:	684b      	ldr	r3, [r1, #4]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	dc05      	bgt.n	8008a60 <__sflush_r+0x20>
 8008a54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	dc02      	bgt.n	8008a60 <__sflush_r+0x20>
 8008a5a:	2000      	movs	r0, #0
 8008a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a62:	2e00      	cmp	r6, #0
 8008a64:	d0f9      	beq.n	8008a5a <__sflush_r+0x1a>
 8008a66:	2300      	movs	r3, #0
 8008a68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a6c:	682f      	ldr	r7, [r5, #0]
 8008a6e:	6a21      	ldr	r1, [r4, #32]
 8008a70:	602b      	str	r3, [r5, #0]
 8008a72:	d032      	beq.n	8008ada <__sflush_r+0x9a>
 8008a74:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a76:	89a3      	ldrh	r3, [r4, #12]
 8008a78:	075a      	lsls	r2, r3, #29
 8008a7a:	d505      	bpl.n	8008a88 <__sflush_r+0x48>
 8008a7c:	6863      	ldr	r3, [r4, #4]
 8008a7e:	1ac0      	subs	r0, r0, r3
 8008a80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a82:	b10b      	cbz	r3, 8008a88 <__sflush_r+0x48>
 8008a84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a86:	1ac0      	subs	r0, r0, r3
 8008a88:	2300      	movs	r3, #0
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a8e:	6a21      	ldr	r1, [r4, #32]
 8008a90:	4628      	mov	r0, r5
 8008a92:	47b0      	blx	r6
 8008a94:	1c43      	adds	r3, r0, #1
 8008a96:	89a3      	ldrh	r3, [r4, #12]
 8008a98:	d106      	bne.n	8008aa8 <__sflush_r+0x68>
 8008a9a:	6829      	ldr	r1, [r5, #0]
 8008a9c:	291d      	cmp	r1, #29
 8008a9e:	d82b      	bhi.n	8008af8 <__sflush_r+0xb8>
 8008aa0:	4a29      	ldr	r2, [pc, #164]	; (8008b48 <__sflush_r+0x108>)
 8008aa2:	410a      	asrs	r2, r1
 8008aa4:	07d6      	lsls	r6, r2, #31
 8008aa6:	d427      	bmi.n	8008af8 <__sflush_r+0xb8>
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	6062      	str	r2, [r4, #4]
 8008aac:	04d9      	lsls	r1, r3, #19
 8008aae:	6922      	ldr	r2, [r4, #16]
 8008ab0:	6022      	str	r2, [r4, #0]
 8008ab2:	d504      	bpl.n	8008abe <__sflush_r+0x7e>
 8008ab4:	1c42      	adds	r2, r0, #1
 8008ab6:	d101      	bne.n	8008abc <__sflush_r+0x7c>
 8008ab8:	682b      	ldr	r3, [r5, #0]
 8008aba:	b903      	cbnz	r3, 8008abe <__sflush_r+0x7e>
 8008abc:	6560      	str	r0, [r4, #84]	; 0x54
 8008abe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ac0:	602f      	str	r7, [r5, #0]
 8008ac2:	2900      	cmp	r1, #0
 8008ac4:	d0c9      	beq.n	8008a5a <__sflush_r+0x1a>
 8008ac6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008aca:	4299      	cmp	r1, r3
 8008acc:	d002      	beq.n	8008ad4 <__sflush_r+0x94>
 8008ace:	4628      	mov	r0, r5
 8008ad0:	f7ff f9e2 	bl	8007e98 <_free_r>
 8008ad4:	2000      	movs	r0, #0
 8008ad6:	6360      	str	r0, [r4, #52]	; 0x34
 8008ad8:	e7c0      	b.n	8008a5c <__sflush_r+0x1c>
 8008ada:	2301      	movs	r3, #1
 8008adc:	4628      	mov	r0, r5
 8008ade:	47b0      	blx	r6
 8008ae0:	1c41      	adds	r1, r0, #1
 8008ae2:	d1c8      	bne.n	8008a76 <__sflush_r+0x36>
 8008ae4:	682b      	ldr	r3, [r5, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d0c5      	beq.n	8008a76 <__sflush_r+0x36>
 8008aea:	2b1d      	cmp	r3, #29
 8008aec:	d001      	beq.n	8008af2 <__sflush_r+0xb2>
 8008aee:	2b16      	cmp	r3, #22
 8008af0:	d101      	bne.n	8008af6 <__sflush_r+0xb6>
 8008af2:	602f      	str	r7, [r5, #0]
 8008af4:	e7b1      	b.n	8008a5a <__sflush_r+0x1a>
 8008af6:	89a3      	ldrh	r3, [r4, #12]
 8008af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008afc:	81a3      	strh	r3, [r4, #12]
 8008afe:	e7ad      	b.n	8008a5c <__sflush_r+0x1c>
 8008b00:	690f      	ldr	r7, [r1, #16]
 8008b02:	2f00      	cmp	r7, #0
 8008b04:	d0a9      	beq.n	8008a5a <__sflush_r+0x1a>
 8008b06:	0793      	lsls	r3, r2, #30
 8008b08:	680e      	ldr	r6, [r1, #0]
 8008b0a:	bf08      	it	eq
 8008b0c:	694b      	ldreq	r3, [r1, #20]
 8008b0e:	600f      	str	r7, [r1, #0]
 8008b10:	bf18      	it	ne
 8008b12:	2300      	movne	r3, #0
 8008b14:	eba6 0807 	sub.w	r8, r6, r7
 8008b18:	608b      	str	r3, [r1, #8]
 8008b1a:	f1b8 0f00 	cmp.w	r8, #0
 8008b1e:	dd9c      	ble.n	8008a5a <__sflush_r+0x1a>
 8008b20:	6a21      	ldr	r1, [r4, #32]
 8008b22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b24:	4643      	mov	r3, r8
 8008b26:	463a      	mov	r2, r7
 8008b28:	4628      	mov	r0, r5
 8008b2a:	47b0      	blx	r6
 8008b2c:	2800      	cmp	r0, #0
 8008b2e:	dc06      	bgt.n	8008b3e <__sflush_r+0xfe>
 8008b30:	89a3      	ldrh	r3, [r4, #12]
 8008b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b36:	81a3      	strh	r3, [r4, #12]
 8008b38:	f04f 30ff 	mov.w	r0, #4294967295
 8008b3c:	e78e      	b.n	8008a5c <__sflush_r+0x1c>
 8008b3e:	4407      	add	r7, r0
 8008b40:	eba8 0800 	sub.w	r8, r8, r0
 8008b44:	e7e9      	b.n	8008b1a <__sflush_r+0xda>
 8008b46:	bf00      	nop
 8008b48:	dfbffffe 	.word	0xdfbffffe

08008b4c <_fflush_r>:
 8008b4c:	b538      	push	{r3, r4, r5, lr}
 8008b4e:	690b      	ldr	r3, [r1, #16]
 8008b50:	4605      	mov	r5, r0
 8008b52:	460c      	mov	r4, r1
 8008b54:	b913      	cbnz	r3, 8008b5c <_fflush_r+0x10>
 8008b56:	2500      	movs	r5, #0
 8008b58:	4628      	mov	r0, r5
 8008b5a:	bd38      	pop	{r3, r4, r5, pc}
 8008b5c:	b118      	cbz	r0, 8008b66 <_fflush_r+0x1a>
 8008b5e:	6a03      	ldr	r3, [r0, #32]
 8008b60:	b90b      	cbnz	r3, 8008b66 <_fflush_r+0x1a>
 8008b62:	f7fe fa8d 	bl	8007080 <__sinit>
 8008b66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d0f3      	beq.n	8008b56 <_fflush_r+0xa>
 8008b6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b70:	07d0      	lsls	r0, r2, #31
 8008b72:	d404      	bmi.n	8008b7e <_fflush_r+0x32>
 8008b74:	0599      	lsls	r1, r3, #22
 8008b76:	d402      	bmi.n	8008b7e <_fflush_r+0x32>
 8008b78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b7a:	f7fe fb97 	bl	80072ac <__retarget_lock_acquire_recursive>
 8008b7e:	4628      	mov	r0, r5
 8008b80:	4621      	mov	r1, r4
 8008b82:	f7ff ff5d 	bl	8008a40 <__sflush_r>
 8008b86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b88:	07da      	lsls	r2, r3, #31
 8008b8a:	4605      	mov	r5, r0
 8008b8c:	d4e4      	bmi.n	8008b58 <_fflush_r+0xc>
 8008b8e:	89a3      	ldrh	r3, [r4, #12]
 8008b90:	059b      	lsls	r3, r3, #22
 8008b92:	d4e1      	bmi.n	8008b58 <_fflush_r+0xc>
 8008b94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b96:	f7fe fb8a 	bl	80072ae <__retarget_lock_release_recursive>
 8008b9a:	e7dd      	b.n	8008b58 <_fflush_r+0xc>

08008b9c <memmove>:
 8008b9c:	4288      	cmp	r0, r1
 8008b9e:	b510      	push	{r4, lr}
 8008ba0:	eb01 0402 	add.w	r4, r1, r2
 8008ba4:	d902      	bls.n	8008bac <memmove+0x10>
 8008ba6:	4284      	cmp	r4, r0
 8008ba8:	4623      	mov	r3, r4
 8008baa:	d807      	bhi.n	8008bbc <memmove+0x20>
 8008bac:	1e43      	subs	r3, r0, #1
 8008bae:	42a1      	cmp	r1, r4
 8008bb0:	d008      	beq.n	8008bc4 <memmove+0x28>
 8008bb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008bb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008bba:	e7f8      	b.n	8008bae <memmove+0x12>
 8008bbc:	4402      	add	r2, r0
 8008bbe:	4601      	mov	r1, r0
 8008bc0:	428a      	cmp	r2, r1
 8008bc2:	d100      	bne.n	8008bc6 <memmove+0x2a>
 8008bc4:	bd10      	pop	{r4, pc}
 8008bc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008bca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008bce:	e7f7      	b.n	8008bc0 <memmove+0x24>

08008bd0 <_sbrk_r>:
 8008bd0:	b538      	push	{r3, r4, r5, lr}
 8008bd2:	4d06      	ldr	r5, [pc, #24]	; (8008bec <_sbrk_r+0x1c>)
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	4604      	mov	r4, r0
 8008bd8:	4608      	mov	r0, r1
 8008bda:	602b      	str	r3, [r5, #0]
 8008bdc:	f7f8 fb14 	bl	8001208 <_sbrk>
 8008be0:	1c43      	adds	r3, r0, #1
 8008be2:	d102      	bne.n	8008bea <_sbrk_r+0x1a>
 8008be4:	682b      	ldr	r3, [r5, #0]
 8008be6:	b103      	cbz	r3, 8008bea <_sbrk_r+0x1a>
 8008be8:	6023      	str	r3, [r4, #0]
 8008bea:	bd38      	pop	{r3, r4, r5, pc}
 8008bec:	20000524 	.word	0x20000524

08008bf0 <memcpy>:
 8008bf0:	440a      	add	r2, r1
 8008bf2:	4291      	cmp	r1, r2
 8008bf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008bf8:	d100      	bne.n	8008bfc <memcpy+0xc>
 8008bfa:	4770      	bx	lr
 8008bfc:	b510      	push	{r4, lr}
 8008bfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c06:	4291      	cmp	r1, r2
 8008c08:	d1f9      	bne.n	8008bfe <memcpy+0xe>
 8008c0a:	bd10      	pop	{r4, pc}

08008c0c <__assert_func>:
 8008c0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c0e:	4614      	mov	r4, r2
 8008c10:	461a      	mov	r2, r3
 8008c12:	4b09      	ldr	r3, [pc, #36]	; (8008c38 <__assert_func+0x2c>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4605      	mov	r5, r0
 8008c18:	68d8      	ldr	r0, [r3, #12]
 8008c1a:	b14c      	cbz	r4, 8008c30 <__assert_func+0x24>
 8008c1c:	4b07      	ldr	r3, [pc, #28]	; (8008c3c <__assert_func+0x30>)
 8008c1e:	9100      	str	r1, [sp, #0]
 8008c20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c24:	4906      	ldr	r1, [pc, #24]	; (8008c40 <__assert_func+0x34>)
 8008c26:	462b      	mov	r3, r5
 8008c28:	f000 f872 	bl	8008d10 <fiprintf>
 8008c2c:	f000 f882 	bl	8008d34 <abort>
 8008c30:	4b04      	ldr	r3, [pc, #16]	; (8008c44 <__assert_func+0x38>)
 8008c32:	461c      	mov	r4, r3
 8008c34:	e7f3      	b.n	8008c1e <__assert_func+0x12>
 8008c36:	bf00      	nop
 8008c38:	2000006c 	.word	0x2000006c
 8008c3c:	08009747 	.word	0x08009747
 8008c40:	08009754 	.word	0x08009754
 8008c44:	08009782 	.word	0x08009782

08008c48 <_calloc_r>:
 8008c48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c4a:	fba1 2402 	umull	r2, r4, r1, r2
 8008c4e:	b94c      	cbnz	r4, 8008c64 <_calloc_r+0x1c>
 8008c50:	4611      	mov	r1, r2
 8008c52:	9201      	str	r2, [sp, #4]
 8008c54:	f7ff f994 	bl	8007f80 <_malloc_r>
 8008c58:	9a01      	ldr	r2, [sp, #4]
 8008c5a:	4605      	mov	r5, r0
 8008c5c:	b930      	cbnz	r0, 8008c6c <_calloc_r+0x24>
 8008c5e:	4628      	mov	r0, r5
 8008c60:	b003      	add	sp, #12
 8008c62:	bd30      	pop	{r4, r5, pc}
 8008c64:	220c      	movs	r2, #12
 8008c66:	6002      	str	r2, [r0, #0]
 8008c68:	2500      	movs	r5, #0
 8008c6a:	e7f8      	b.n	8008c5e <_calloc_r+0x16>
 8008c6c:	4621      	mov	r1, r4
 8008c6e:	f7fe faa0 	bl	80071b2 <memset>
 8008c72:	e7f4      	b.n	8008c5e <_calloc_r+0x16>

08008c74 <__ascii_mbtowc>:
 8008c74:	b082      	sub	sp, #8
 8008c76:	b901      	cbnz	r1, 8008c7a <__ascii_mbtowc+0x6>
 8008c78:	a901      	add	r1, sp, #4
 8008c7a:	b142      	cbz	r2, 8008c8e <__ascii_mbtowc+0x1a>
 8008c7c:	b14b      	cbz	r3, 8008c92 <__ascii_mbtowc+0x1e>
 8008c7e:	7813      	ldrb	r3, [r2, #0]
 8008c80:	600b      	str	r3, [r1, #0]
 8008c82:	7812      	ldrb	r2, [r2, #0]
 8008c84:	1e10      	subs	r0, r2, #0
 8008c86:	bf18      	it	ne
 8008c88:	2001      	movne	r0, #1
 8008c8a:	b002      	add	sp, #8
 8008c8c:	4770      	bx	lr
 8008c8e:	4610      	mov	r0, r2
 8008c90:	e7fb      	b.n	8008c8a <__ascii_mbtowc+0x16>
 8008c92:	f06f 0001 	mvn.w	r0, #1
 8008c96:	e7f8      	b.n	8008c8a <__ascii_mbtowc+0x16>

08008c98 <_realloc_r>:
 8008c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c9c:	4680      	mov	r8, r0
 8008c9e:	4614      	mov	r4, r2
 8008ca0:	460e      	mov	r6, r1
 8008ca2:	b921      	cbnz	r1, 8008cae <_realloc_r+0x16>
 8008ca4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ca8:	4611      	mov	r1, r2
 8008caa:	f7ff b969 	b.w	8007f80 <_malloc_r>
 8008cae:	b92a      	cbnz	r2, 8008cbc <_realloc_r+0x24>
 8008cb0:	f7ff f8f2 	bl	8007e98 <_free_r>
 8008cb4:	4625      	mov	r5, r4
 8008cb6:	4628      	mov	r0, r5
 8008cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cbc:	f000 f841 	bl	8008d42 <_malloc_usable_size_r>
 8008cc0:	4284      	cmp	r4, r0
 8008cc2:	4607      	mov	r7, r0
 8008cc4:	d802      	bhi.n	8008ccc <_realloc_r+0x34>
 8008cc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008cca:	d812      	bhi.n	8008cf2 <_realloc_r+0x5a>
 8008ccc:	4621      	mov	r1, r4
 8008cce:	4640      	mov	r0, r8
 8008cd0:	f7ff f956 	bl	8007f80 <_malloc_r>
 8008cd4:	4605      	mov	r5, r0
 8008cd6:	2800      	cmp	r0, #0
 8008cd8:	d0ed      	beq.n	8008cb6 <_realloc_r+0x1e>
 8008cda:	42bc      	cmp	r4, r7
 8008cdc:	4622      	mov	r2, r4
 8008cde:	4631      	mov	r1, r6
 8008ce0:	bf28      	it	cs
 8008ce2:	463a      	movcs	r2, r7
 8008ce4:	f7ff ff84 	bl	8008bf0 <memcpy>
 8008ce8:	4631      	mov	r1, r6
 8008cea:	4640      	mov	r0, r8
 8008cec:	f7ff f8d4 	bl	8007e98 <_free_r>
 8008cf0:	e7e1      	b.n	8008cb6 <_realloc_r+0x1e>
 8008cf2:	4635      	mov	r5, r6
 8008cf4:	e7df      	b.n	8008cb6 <_realloc_r+0x1e>

08008cf6 <__ascii_wctomb>:
 8008cf6:	b149      	cbz	r1, 8008d0c <__ascii_wctomb+0x16>
 8008cf8:	2aff      	cmp	r2, #255	; 0xff
 8008cfa:	bf85      	ittet	hi
 8008cfc:	238a      	movhi	r3, #138	; 0x8a
 8008cfe:	6003      	strhi	r3, [r0, #0]
 8008d00:	700a      	strbls	r2, [r1, #0]
 8008d02:	f04f 30ff 	movhi.w	r0, #4294967295
 8008d06:	bf98      	it	ls
 8008d08:	2001      	movls	r0, #1
 8008d0a:	4770      	bx	lr
 8008d0c:	4608      	mov	r0, r1
 8008d0e:	4770      	bx	lr

08008d10 <fiprintf>:
 8008d10:	b40e      	push	{r1, r2, r3}
 8008d12:	b503      	push	{r0, r1, lr}
 8008d14:	4601      	mov	r1, r0
 8008d16:	ab03      	add	r3, sp, #12
 8008d18:	4805      	ldr	r0, [pc, #20]	; (8008d30 <fiprintf+0x20>)
 8008d1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d1e:	6800      	ldr	r0, [r0, #0]
 8008d20:	9301      	str	r3, [sp, #4]
 8008d22:	f000 f83f 	bl	8008da4 <_vfiprintf_r>
 8008d26:	b002      	add	sp, #8
 8008d28:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d2c:	b003      	add	sp, #12
 8008d2e:	4770      	bx	lr
 8008d30:	2000006c 	.word	0x2000006c

08008d34 <abort>:
 8008d34:	b508      	push	{r3, lr}
 8008d36:	2006      	movs	r0, #6
 8008d38:	f000 fa0c 	bl	8009154 <raise>
 8008d3c:	2001      	movs	r0, #1
 8008d3e:	f7f8 f9eb 	bl	8001118 <_exit>

08008d42 <_malloc_usable_size_r>:
 8008d42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d46:	1f18      	subs	r0, r3, #4
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	bfbc      	itt	lt
 8008d4c:	580b      	ldrlt	r3, [r1, r0]
 8008d4e:	18c0      	addlt	r0, r0, r3
 8008d50:	4770      	bx	lr

08008d52 <__sfputc_r>:
 8008d52:	6893      	ldr	r3, [r2, #8]
 8008d54:	3b01      	subs	r3, #1
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	b410      	push	{r4}
 8008d5a:	6093      	str	r3, [r2, #8]
 8008d5c:	da08      	bge.n	8008d70 <__sfputc_r+0x1e>
 8008d5e:	6994      	ldr	r4, [r2, #24]
 8008d60:	42a3      	cmp	r3, r4
 8008d62:	db01      	blt.n	8008d68 <__sfputc_r+0x16>
 8008d64:	290a      	cmp	r1, #10
 8008d66:	d103      	bne.n	8008d70 <__sfputc_r+0x1e>
 8008d68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d6c:	f000 b934 	b.w	8008fd8 <__swbuf_r>
 8008d70:	6813      	ldr	r3, [r2, #0]
 8008d72:	1c58      	adds	r0, r3, #1
 8008d74:	6010      	str	r0, [r2, #0]
 8008d76:	7019      	strb	r1, [r3, #0]
 8008d78:	4608      	mov	r0, r1
 8008d7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <__sfputs_r>:
 8008d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d82:	4606      	mov	r6, r0
 8008d84:	460f      	mov	r7, r1
 8008d86:	4614      	mov	r4, r2
 8008d88:	18d5      	adds	r5, r2, r3
 8008d8a:	42ac      	cmp	r4, r5
 8008d8c:	d101      	bne.n	8008d92 <__sfputs_r+0x12>
 8008d8e:	2000      	movs	r0, #0
 8008d90:	e007      	b.n	8008da2 <__sfputs_r+0x22>
 8008d92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d96:	463a      	mov	r2, r7
 8008d98:	4630      	mov	r0, r6
 8008d9a:	f7ff ffda 	bl	8008d52 <__sfputc_r>
 8008d9e:	1c43      	adds	r3, r0, #1
 8008da0:	d1f3      	bne.n	8008d8a <__sfputs_r+0xa>
 8008da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008da4 <_vfiprintf_r>:
 8008da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008da8:	460d      	mov	r5, r1
 8008daa:	b09d      	sub	sp, #116	; 0x74
 8008dac:	4614      	mov	r4, r2
 8008dae:	4698      	mov	r8, r3
 8008db0:	4606      	mov	r6, r0
 8008db2:	b118      	cbz	r0, 8008dbc <_vfiprintf_r+0x18>
 8008db4:	6a03      	ldr	r3, [r0, #32]
 8008db6:	b90b      	cbnz	r3, 8008dbc <_vfiprintf_r+0x18>
 8008db8:	f7fe f962 	bl	8007080 <__sinit>
 8008dbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008dbe:	07d9      	lsls	r1, r3, #31
 8008dc0:	d405      	bmi.n	8008dce <_vfiprintf_r+0x2a>
 8008dc2:	89ab      	ldrh	r3, [r5, #12]
 8008dc4:	059a      	lsls	r2, r3, #22
 8008dc6:	d402      	bmi.n	8008dce <_vfiprintf_r+0x2a>
 8008dc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008dca:	f7fe fa6f 	bl	80072ac <__retarget_lock_acquire_recursive>
 8008dce:	89ab      	ldrh	r3, [r5, #12]
 8008dd0:	071b      	lsls	r3, r3, #28
 8008dd2:	d501      	bpl.n	8008dd8 <_vfiprintf_r+0x34>
 8008dd4:	692b      	ldr	r3, [r5, #16]
 8008dd6:	b99b      	cbnz	r3, 8008e00 <_vfiprintf_r+0x5c>
 8008dd8:	4629      	mov	r1, r5
 8008dda:	4630      	mov	r0, r6
 8008ddc:	f000 f93a 	bl	8009054 <__swsetup_r>
 8008de0:	b170      	cbz	r0, 8008e00 <_vfiprintf_r+0x5c>
 8008de2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008de4:	07dc      	lsls	r4, r3, #31
 8008de6:	d504      	bpl.n	8008df2 <_vfiprintf_r+0x4e>
 8008de8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dec:	b01d      	add	sp, #116	; 0x74
 8008dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008df2:	89ab      	ldrh	r3, [r5, #12]
 8008df4:	0598      	lsls	r0, r3, #22
 8008df6:	d4f7      	bmi.n	8008de8 <_vfiprintf_r+0x44>
 8008df8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008dfa:	f7fe fa58 	bl	80072ae <__retarget_lock_release_recursive>
 8008dfe:	e7f3      	b.n	8008de8 <_vfiprintf_r+0x44>
 8008e00:	2300      	movs	r3, #0
 8008e02:	9309      	str	r3, [sp, #36]	; 0x24
 8008e04:	2320      	movs	r3, #32
 8008e06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e0e:	2330      	movs	r3, #48	; 0x30
 8008e10:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008fc4 <_vfiprintf_r+0x220>
 8008e14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e18:	f04f 0901 	mov.w	r9, #1
 8008e1c:	4623      	mov	r3, r4
 8008e1e:	469a      	mov	sl, r3
 8008e20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e24:	b10a      	cbz	r2, 8008e2a <_vfiprintf_r+0x86>
 8008e26:	2a25      	cmp	r2, #37	; 0x25
 8008e28:	d1f9      	bne.n	8008e1e <_vfiprintf_r+0x7a>
 8008e2a:	ebba 0b04 	subs.w	fp, sl, r4
 8008e2e:	d00b      	beq.n	8008e48 <_vfiprintf_r+0xa4>
 8008e30:	465b      	mov	r3, fp
 8008e32:	4622      	mov	r2, r4
 8008e34:	4629      	mov	r1, r5
 8008e36:	4630      	mov	r0, r6
 8008e38:	f7ff ffa2 	bl	8008d80 <__sfputs_r>
 8008e3c:	3001      	adds	r0, #1
 8008e3e:	f000 80a9 	beq.w	8008f94 <_vfiprintf_r+0x1f0>
 8008e42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e44:	445a      	add	r2, fp
 8008e46:	9209      	str	r2, [sp, #36]	; 0x24
 8008e48:	f89a 3000 	ldrb.w	r3, [sl]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	f000 80a1 	beq.w	8008f94 <_vfiprintf_r+0x1f0>
 8008e52:	2300      	movs	r3, #0
 8008e54:	f04f 32ff 	mov.w	r2, #4294967295
 8008e58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e5c:	f10a 0a01 	add.w	sl, sl, #1
 8008e60:	9304      	str	r3, [sp, #16]
 8008e62:	9307      	str	r3, [sp, #28]
 8008e64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e68:	931a      	str	r3, [sp, #104]	; 0x68
 8008e6a:	4654      	mov	r4, sl
 8008e6c:	2205      	movs	r2, #5
 8008e6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e72:	4854      	ldr	r0, [pc, #336]	; (8008fc4 <_vfiprintf_r+0x220>)
 8008e74:	f7f7 f9e4 	bl	8000240 <memchr>
 8008e78:	9a04      	ldr	r2, [sp, #16]
 8008e7a:	b9d8      	cbnz	r0, 8008eb4 <_vfiprintf_r+0x110>
 8008e7c:	06d1      	lsls	r1, r2, #27
 8008e7e:	bf44      	itt	mi
 8008e80:	2320      	movmi	r3, #32
 8008e82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e86:	0713      	lsls	r3, r2, #28
 8008e88:	bf44      	itt	mi
 8008e8a:	232b      	movmi	r3, #43	; 0x2b
 8008e8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e90:	f89a 3000 	ldrb.w	r3, [sl]
 8008e94:	2b2a      	cmp	r3, #42	; 0x2a
 8008e96:	d015      	beq.n	8008ec4 <_vfiprintf_r+0x120>
 8008e98:	9a07      	ldr	r2, [sp, #28]
 8008e9a:	4654      	mov	r4, sl
 8008e9c:	2000      	movs	r0, #0
 8008e9e:	f04f 0c0a 	mov.w	ip, #10
 8008ea2:	4621      	mov	r1, r4
 8008ea4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ea8:	3b30      	subs	r3, #48	; 0x30
 8008eaa:	2b09      	cmp	r3, #9
 8008eac:	d94d      	bls.n	8008f4a <_vfiprintf_r+0x1a6>
 8008eae:	b1b0      	cbz	r0, 8008ede <_vfiprintf_r+0x13a>
 8008eb0:	9207      	str	r2, [sp, #28]
 8008eb2:	e014      	b.n	8008ede <_vfiprintf_r+0x13a>
 8008eb4:	eba0 0308 	sub.w	r3, r0, r8
 8008eb8:	fa09 f303 	lsl.w	r3, r9, r3
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	9304      	str	r3, [sp, #16]
 8008ec0:	46a2      	mov	sl, r4
 8008ec2:	e7d2      	b.n	8008e6a <_vfiprintf_r+0xc6>
 8008ec4:	9b03      	ldr	r3, [sp, #12]
 8008ec6:	1d19      	adds	r1, r3, #4
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	9103      	str	r1, [sp, #12]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	bfbb      	ittet	lt
 8008ed0:	425b      	neglt	r3, r3
 8008ed2:	f042 0202 	orrlt.w	r2, r2, #2
 8008ed6:	9307      	strge	r3, [sp, #28]
 8008ed8:	9307      	strlt	r3, [sp, #28]
 8008eda:	bfb8      	it	lt
 8008edc:	9204      	strlt	r2, [sp, #16]
 8008ede:	7823      	ldrb	r3, [r4, #0]
 8008ee0:	2b2e      	cmp	r3, #46	; 0x2e
 8008ee2:	d10c      	bne.n	8008efe <_vfiprintf_r+0x15a>
 8008ee4:	7863      	ldrb	r3, [r4, #1]
 8008ee6:	2b2a      	cmp	r3, #42	; 0x2a
 8008ee8:	d134      	bne.n	8008f54 <_vfiprintf_r+0x1b0>
 8008eea:	9b03      	ldr	r3, [sp, #12]
 8008eec:	1d1a      	adds	r2, r3, #4
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	9203      	str	r2, [sp, #12]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	bfb8      	it	lt
 8008ef6:	f04f 33ff 	movlt.w	r3, #4294967295
 8008efa:	3402      	adds	r4, #2
 8008efc:	9305      	str	r3, [sp, #20]
 8008efe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008fd4 <_vfiprintf_r+0x230>
 8008f02:	7821      	ldrb	r1, [r4, #0]
 8008f04:	2203      	movs	r2, #3
 8008f06:	4650      	mov	r0, sl
 8008f08:	f7f7 f99a 	bl	8000240 <memchr>
 8008f0c:	b138      	cbz	r0, 8008f1e <_vfiprintf_r+0x17a>
 8008f0e:	9b04      	ldr	r3, [sp, #16]
 8008f10:	eba0 000a 	sub.w	r0, r0, sl
 8008f14:	2240      	movs	r2, #64	; 0x40
 8008f16:	4082      	lsls	r2, r0
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	3401      	adds	r4, #1
 8008f1c:	9304      	str	r3, [sp, #16]
 8008f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f22:	4829      	ldr	r0, [pc, #164]	; (8008fc8 <_vfiprintf_r+0x224>)
 8008f24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f28:	2206      	movs	r2, #6
 8008f2a:	f7f7 f989 	bl	8000240 <memchr>
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	d03f      	beq.n	8008fb2 <_vfiprintf_r+0x20e>
 8008f32:	4b26      	ldr	r3, [pc, #152]	; (8008fcc <_vfiprintf_r+0x228>)
 8008f34:	bb1b      	cbnz	r3, 8008f7e <_vfiprintf_r+0x1da>
 8008f36:	9b03      	ldr	r3, [sp, #12]
 8008f38:	3307      	adds	r3, #7
 8008f3a:	f023 0307 	bic.w	r3, r3, #7
 8008f3e:	3308      	adds	r3, #8
 8008f40:	9303      	str	r3, [sp, #12]
 8008f42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f44:	443b      	add	r3, r7
 8008f46:	9309      	str	r3, [sp, #36]	; 0x24
 8008f48:	e768      	b.n	8008e1c <_vfiprintf_r+0x78>
 8008f4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f4e:	460c      	mov	r4, r1
 8008f50:	2001      	movs	r0, #1
 8008f52:	e7a6      	b.n	8008ea2 <_vfiprintf_r+0xfe>
 8008f54:	2300      	movs	r3, #0
 8008f56:	3401      	adds	r4, #1
 8008f58:	9305      	str	r3, [sp, #20]
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	f04f 0c0a 	mov.w	ip, #10
 8008f60:	4620      	mov	r0, r4
 8008f62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f66:	3a30      	subs	r2, #48	; 0x30
 8008f68:	2a09      	cmp	r2, #9
 8008f6a:	d903      	bls.n	8008f74 <_vfiprintf_r+0x1d0>
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d0c6      	beq.n	8008efe <_vfiprintf_r+0x15a>
 8008f70:	9105      	str	r1, [sp, #20]
 8008f72:	e7c4      	b.n	8008efe <_vfiprintf_r+0x15a>
 8008f74:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f78:	4604      	mov	r4, r0
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	e7f0      	b.n	8008f60 <_vfiprintf_r+0x1bc>
 8008f7e:	ab03      	add	r3, sp, #12
 8008f80:	9300      	str	r3, [sp, #0]
 8008f82:	462a      	mov	r2, r5
 8008f84:	4b12      	ldr	r3, [pc, #72]	; (8008fd0 <_vfiprintf_r+0x22c>)
 8008f86:	a904      	add	r1, sp, #16
 8008f88:	4630      	mov	r0, r6
 8008f8a:	f7fd fc55 	bl	8006838 <_printf_float>
 8008f8e:	4607      	mov	r7, r0
 8008f90:	1c78      	adds	r0, r7, #1
 8008f92:	d1d6      	bne.n	8008f42 <_vfiprintf_r+0x19e>
 8008f94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f96:	07d9      	lsls	r1, r3, #31
 8008f98:	d405      	bmi.n	8008fa6 <_vfiprintf_r+0x202>
 8008f9a:	89ab      	ldrh	r3, [r5, #12]
 8008f9c:	059a      	lsls	r2, r3, #22
 8008f9e:	d402      	bmi.n	8008fa6 <_vfiprintf_r+0x202>
 8008fa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fa2:	f7fe f984 	bl	80072ae <__retarget_lock_release_recursive>
 8008fa6:	89ab      	ldrh	r3, [r5, #12]
 8008fa8:	065b      	lsls	r3, r3, #25
 8008faa:	f53f af1d 	bmi.w	8008de8 <_vfiprintf_r+0x44>
 8008fae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fb0:	e71c      	b.n	8008dec <_vfiprintf_r+0x48>
 8008fb2:	ab03      	add	r3, sp, #12
 8008fb4:	9300      	str	r3, [sp, #0]
 8008fb6:	462a      	mov	r2, r5
 8008fb8:	4b05      	ldr	r3, [pc, #20]	; (8008fd0 <_vfiprintf_r+0x22c>)
 8008fba:	a904      	add	r1, sp, #16
 8008fbc:	4630      	mov	r0, r6
 8008fbe:	f7fd fec3 	bl	8006d48 <_printf_i>
 8008fc2:	e7e4      	b.n	8008f8e <_vfiprintf_r+0x1ea>
 8008fc4:	0800972c 	.word	0x0800972c
 8008fc8:	08009736 	.word	0x08009736
 8008fcc:	08006839 	.word	0x08006839
 8008fd0:	08008d81 	.word	0x08008d81
 8008fd4:	08009732 	.word	0x08009732

08008fd8 <__swbuf_r>:
 8008fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fda:	460e      	mov	r6, r1
 8008fdc:	4614      	mov	r4, r2
 8008fde:	4605      	mov	r5, r0
 8008fe0:	b118      	cbz	r0, 8008fea <__swbuf_r+0x12>
 8008fe2:	6a03      	ldr	r3, [r0, #32]
 8008fe4:	b90b      	cbnz	r3, 8008fea <__swbuf_r+0x12>
 8008fe6:	f7fe f84b 	bl	8007080 <__sinit>
 8008fea:	69a3      	ldr	r3, [r4, #24]
 8008fec:	60a3      	str	r3, [r4, #8]
 8008fee:	89a3      	ldrh	r3, [r4, #12]
 8008ff0:	071a      	lsls	r2, r3, #28
 8008ff2:	d525      	bpl.n	8009040 <__swbuf_r+0x68>
 8008ff4:	6923      	ldr	r3, [r4, #16]
 8008ff6:	b31b      	cbz	r3, 8009040 <__swbuf_r+0x68>
 8008ff8:	6823      	ldr	r3, [r4, #0]
 8008ffa:	6922      	ldr	r2, [r4, #16]
 8008ffc:	1a98      	subs	r0, r3, r2
 8008ffe:	6963      	ldr	r3, [r4, #20]
 8009000:	b2f6      	uxtb	r6, r6
 8009002:	4283      	cmp	r3, r0
 8009004:	4637      	mov	r7, r6
 8009006:	dc04      	bgt.n	8009012 <__swbuf_r+0x3a>
 8009008:	4621      	mov	r1, r4
 800900a:	4628      	mov	r0, r5
 800900c:	f7ff fd9e 	bl	8008b4c <_fflush_r>
 8009010:	b9e0      	cbnz	r0, 800904c <__swbuf_r+0x74>
 8009012:	68a3      	ldr	r3, [r4, #8]
 8009014:	3b01      	subs	r3, #1
 8009016:	60a3      	str	r3, [r4, #8]
 8009018:	6823      	ldr	r3, [r4, #0]
 800901a:	1c5a      	adds	r2, r3, #1
 800901c:	6022      	str	r2, [r4, #0]
 800901e:	701e      	strb	r6, [r3, #0]
 8009020:	6962      	ldr	r2, [r4, #20]
 8009022:	1c43      	adds	r3, r0, #1
 8009024:	429a      	cmp	r2, r3
 8009026:	d004      	beq.n	8009032 <__swbuf_r+0x5a>
 8009028:	89a3      	ldrh	r3, [r4, #12]
 800902a:	07db      	lsls	r3, r3, #31
 800902c:	d506      	bpl.n	800903c <__swbuf_r+0x64>
 800902e:	2e0a      	cmp	r6, #10
 8009030:	d104      	bne.n	800903c <__swbuf_r+0x64>
 8009032:	4621      	mov	r1, r4
 8009034:	4628      	mov	r0, r5
 8009036:	f7ff fd89 	bl	8008b4c <_fflush_r>
 800903a:	b938      	cbnz	r0, 800904c <__swbuf_r+0x74>
 800903c:	4638      	mov	r0, r7
 800903e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009040:	4621      	mov	r1, r4
 8009042:	4628      	mov	r0, r5
 8009044:	f000 f806 	bl	8009054 <__swsetup_r>
 8009048:	2800      	cmp	r0, #0
 800904a:	d0d5      	beq.n	8008ff8 <__swbuf_r+0x20>
 800904c:	f04f 37ff 	mov.w	r7, #4294967295
 8009050:	e7f4      	b.n	800903c <__swbuf_r+0x64>
	...

08009054 <__swsetup_r>:
 8009054:	b538      	push	{r3, r4, r5, lr}
 8009056:	4b2a      	ldr	r3, [pc, #168]	; (8009100 <__swsetup_r+0xac>)
 8009058:	4605      	mov	r5, r0
 800905a:	6818      	ldr	r0, [r3, #0]
 800905c:	460c      	mov	r4, r1
 800905e:	b118      	cbz	r0, 8009068 <__swsetup_r+0x14>
 8009060:	6a03      	ldr	r3, [r0, #32]
 8009062:	b90b      	cbnz	r3, 8009068 <__swsetup_r+0x14>
 8009064:	f7fe f80c 	bl	8007080 <__sinit>
 8009068:	89a3      	ldrh	r3, [r4, #12]
 800906a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800906e:	0718      	lsls	r0, r3, #28
 8009070:	d422      	bmi.n	80090b8 <__swsetup_r+0x64>
 8009072:	06d9      	lsls	r1, r3, #27
 8009074:	d407      	bmi.n	8009086 <__swsetup_r+0x32>
 8009076:	2309      	movs	r3, #9
 8009078:	602b      	str	r3, [r5, #0]
 800907a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800907e:	81a3      	strh	r3, [r4, #12]
 8009080:	f04f 30ff 	mov.w	r0, #4294967295
 8009084:	e034      	b.n	80090f0 <__swsetup_r+0x9c>
 8009086:	0758      	lsls	r0, r3, #29
 8009088:	d512      	bpl.n	80090b0 <__swsetup_r+0x5c>
 800908a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800908c:	b141      	cbz	r1, 80090a0 <__swsetup_r+0x4c>
 800908e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009092:	4299      	cmp	r1, r3
 8009094:	d002      	beq.n	800909c <__swsetup_r+0x48>
 8009096:	4628      	mov	r0, r5
 8009098:	f7fe fefe 	bl	8007e98 <_free_r>
 800909c:	2300      	movs	r3, #0
 800909e:	6363      	str	r3, [r4, #52]	; 0x34
 80090a0:	89a3      	ldrh	r3, [r4, #12]
 80090a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80090a6:	81a3      	strh	r3, [r4, #12]
 80090a8:	2300      	movs	r3, #0
 80090aa:	6063      	str	r3, [r4, #4]
 80090ac:	6923      	ldr	r3, [r4, #16]
 80090ae:	6023      	str	r3, [r4, #0]
 80090b0:	89a3      	ldrh	r3, [r4, #12]
 80090b2:	f043 0308 	orr.w	r3, r3, #8
 80090b6:	81a3      	strh	r3, [r4, #12]
 80090b8:	6923      	ldr	r3, [r4, #16]
 80090ba:	b94b      	cbnz	r3, 80090d0 <__swsetup_r+0x7c>
 80090bc:	89a3      	ldrh	r3, [r4, #12]
 80090be:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80090c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090c6:	d003      	beq.n	80090d0 <__swsetup_r+0x7c>
 80090c8:	4621      	mov	r1, r4
 80090ca:	4628      	mov	r0, r5
 80090cc:	f000 f884 	bl	80091d8 <__smakebuf_r>
 80090d0:	89a0      	ldrh	r0, [r4, #12]
 80090d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090d6:	f010 0301 	ands.w	r3, r0, #1
 80090da:	d00a      	beq.n	80090f2 <__swsetup_r+0x9e>
 80090dc:	2300      	movs	r3, #0
 80090de:	60a3      	str	r3, [r4, #8]
 80090e0:	6963      	ldr	r3, [r4, #20]
 80090e2:	425b      	negs	r3, r3
 80090e4:	61a3      	str	r3, [r4, #24]
 80090e6:	6923      	ldr	r3, [r4, #16]
 80090e8:	b943      	cbnz	r3, 80090fc <__swsetup_r+0xa8>
 80090ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80090ee:	d1c4      	bne.n	800907a <__swsetup_r+0x26>
 80090f0:	bd38      	pop	{r3, r4, r5, pc}
 80090f2:	0781      	lsls	r1, r0, #30
 80090f4:	bf58      	it	pl
 80090f6:	6963      	ldrpl	r3, [r4, #20]
 80090f8:	60a3      	str	r3, [r4, #8]
 80090fa:	e7f4      	b.n	80090e6 <__swsetup_r+0x92>
 80090fc:	2000      	movs	r0, #0
 80090fe:	e7f7      	b.n	80090f0 <__swsetup_r+0x9c>
 8009100:	2000006c 	.word	0x2000006c

08009104 <_raise_r>:
 8009104:	291f      	cmp	r1, #31
 8009106:	b538      	push	{r3, r4, r5, lr}
 8009108:	4604      	mov	r4, r0
 800910a:	460d      	mov	r5, r1
 800910c:	d904      	bls.n	8009118 <_raise_r+0x14>
 800910e:	2316      	movs	r3, #22
 8009110:	6003      	str	r3, [r0, #0]
 8009112:	f04f 30ff 	mov.w	r0, #4294967295
 8009116:	bd38      	pop	{r3, r4, r5, pc}
 8009118:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800911a:	b112      	cbz	r2, 8009122 <_raise_r+0x1e>
 800911c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009120:	b94b      	cbnz	r3, 8009136 <_raise_r+0x32>
 8009122:	4620      	mov	r0, r4
 8009124:	f000 f830 	bl	8009188 <_getpid_r>
 8009128:	462a      	mov	r2, r5
 800912a:	4601      	mov	r1, r0
 800912c:	4620      	mov	r0, r4
 800912e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009132:	f000 b817 	b.w	8009164 <_kill_r>
 8009136:	2b01      	cmp	r3, #1
 8009138:	d00a      	beq.n	8009150 <_raise_r+0x4c>
 800913a:	1c59      	adds	r1, r3, #1
 800913c:	d103      	bne.n	8009146 <_raise_r+0x42>
 800913e:	2316      	movs	r3, #22
 8009140:	6003      	str	r3, [r0, #0]
 8009142:	2001      	movs	r0, #1
 8009144:	e7e7      	b.n	8009116 <_raise_r+0x12>
 8009146:	2400      	movs	r4, #0
 8009148:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800914c:	4628      	mov	r0, r5
 800914e:	4798      	blx	r3
 8009150:	2000      	movs	r0, #0
 8009152:	e7e0      	b.n	8009116 <_raise_r+0x12>

08009154 <raise>:
 8009154:	4b02      	ldr	r3, [pc, #8]	; (8009160 <raise+0xc>)
 8009156:	4601      	mov	r1, r0
 8009158:	6818      	ldr	r0, [r3, #0]
 800915a:	f7ff bfd3 	b.w	8009104 <_raise_r>
 800915e:	bf00      	nop
 8009160:	2000006c 	.word	0x2000006c

08009164 <_kill_r>:
 8009164:	b538      	push	{r3, r4, r5, lr}
 8009166:	4d07      	ldr	r5, [pc, #28]	; (8009184 <_kill_r+0x20>)
 8009168:	2300      	movs	r3, #0
 800916a:	4604      	mov	r4, r0
 800916c:	4608      	mov	r0, r1
 800916e:	4611      	mov	r1, r2
 8009170:	602b      	str	r3, [r5, #0]
 8009172:	f7f7 ffc1 	bl	80010f8 <_kill>
 8009176:	1c43      	adds	r3, r0, #1
 8009178:	d102      	bne.n	8009180 <_kill_r+0x1c>
 800917a:	682b      	ldr	r3, [r5, #0]
 800917c:	b103      	cbz	r3, 8009180 <_kill_r+0x1c>
 800917e:	6023      	str	r3, [r4, #0]
 8009180:	bd38      	pop	{r3, r4, r5, pc}
 8009182:	bf00      	nop
 8009184:	20000524 	.word	0x20000524

08009188 <_getpid_r>:
 8009188:	f7f7 bfae 	b.w	80010e8 <_getpid>

0800918c <__swhatbuf_r>:
 800918c:	b570      	push	{r4, r5, r6, lr}
 800918e:	460c      	mov	r4, r1
 8009190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009194:	2900      	cmp	r1, #0
 8009196:	b096      	sub	sp, #88	; 0x58
 8009198:	4615      	mov	r5, r2
 800919a:	461e      	mov	r6, r3
 800919c:	da0d      	bge.n	80091ba <__swhatbuf_r+0x2e>
 800919e:	89a3      	ldrh	r3, [r4, #12]
 80091a0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80091a4:	f04f 0100 	mov.w	r1, #0
 80091a8:	bf0c      	ite	eq
 80091aa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80091ae:	2340      	movne	r3, #64	; 0x40
 80091b0:	2000      	movs	r0, #0
 80091b2:	6031      	str	r1, [r6, #0]
 80091b4:	602b      	str	r3, [r5, #0]
 80091b6:	b016      	add	sp, #88	; 0x58
 80091b8:	bd70      	pop	{r4, r5, r6, pc}
 80091ba:	466a      	mov	r2, sp
 80091bc:	f000 f848 	bl	8009250 <_fstat_r>
 80091c0:	2800      	cmp	r0, #0
 80091c2:	dbec      	blt.n	800919e <__swhatbuf_r+0x12>
 80091c4:	9901      	ldr	r1, [sp, #4]
 80091c6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80091ca:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80091ce:	4259      	negs	r1, r3
 80091d0:	4159      	adcs	r1, r3
 80091d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091d6:	e7eb      	b.n	80091b0 <__swhatbuf_r+0x24>

080091d8 <__smakebuf_r>:
 80091d8:	898b      	ldrh	r3, [r1, #12]
 80091da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80091dc:	079d      	lsls	r5, r3, #30
 80091de:	4606      	mov	r6, r0
 80091e0:	460c      	mov	r4, r1
 80091e2:	d507      	bpl.n	80091f4 <__smakebuf_r+0x1c>
 80091e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80091e8:	6023      	str	r3, [r4, #0]
 80091ea:	6123      	str	r3, [r4, #16]
 80091ec:	2301      	movs	r3, #1
 80091ee:	6163      	str	r3, [r4, #20]
 80091f0:	b002      	add	sp, #8
 80091f2:	bd70      	pop	{r4, r5, r6, pc}
 80091f4:	ab01      	add	r3, sp, #4
 80091f6:	466a      	mov	r2, sp
 80091f8:	f7ff ffc8 	bl	800918c <__swhatbuf_r>
 80091fc:	9900      	ldr	r1, [sp, #0]
 80091fe:	4605      	mov	r5, r0
 8009200:	4630      	mov	r0, r6
 8009202:	f7fe febd 	bl	8007f80 <_malloc_r>
 8009206:	b948      	cbnz	r0, 800921c <__smakebuf_r+0x44>
 8009208:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800920c:	059a      	lsls	r2, r3, #22
 800920e:	d4ef      	bmi.n	80091f0 <__smakebuf_r+0x18>
 8009210:	f023 0303 	bic.w	r3, r3, #3
 8009214:	f043 0302 	orr.w	r3, r3, #2
 8009218:	81a3      	strh	r3, [r4, #12]
 800921a:	e7e3      	b.n	80091e4 <__smakebuf_r+0xc>
 800921c:	89a3      	ldrh	r3, [r4, #12]
 800921e:	6020      	str	r0, [r4, #0]
 8009220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009224:	81a3      	strh	r3, [r4, #12]
 8009226:	9b00      	ldr	r3, [sp, #0]
 8009228:	6163      	str	r3, [r4, #20]
 800922a:	9b01      	ldr	r3, [sp, #4]
 800922c:	6120      	str	r0, [r4, #16]
 800922e:	b15b      	cbz	r3, 8009248 <__smakebuf_r+0x70>
 8009230:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009234:	4630      	mov	r0, r6
 8009236:	f000 f81d 	bl	8009274 <_isatty_r>
 800923a:	b128      	cbz	r0, 8009248 <__smakebuf_r+0x70>
 800923c:	89a3      	ldrh	r3, [r4, #12]
 800923e:	f023 0303 	bic.w	r3, r3, #3
 8009242:	f043 0301 	orr.w	r3, r3, #1
 8009246:	81a3      	strh	r3, [r4, #12]
 8009248:	89a3      	ldrh	r3, [r4, #12]
 800924a:	431d      	orrs	r5, r3
 800924c:	81a5      	strh	r5, [r4, #12]
 800924e:	e7cf      	b.n	80091f0 <__smakebuf_r+0x18>

08009250 <_fstat_r>:
 8009250:	b538      	push	{r3, r4, r5, lr}
 8009252:	4d07      	ldr	r5, [pc, #28]	; (8009270 <_fstat_r+0x20>)
 8009254:	2300      	movs	r3, #0
 8009256:	4604      	mov	r4, r0
 8009258:	4608      	mov	r0, r1
 800925a:	4611      	mov	r1, r2
 800925c:	602b      	str	r3, [r5, #0]
 800925e:	f7f7 ffaa 	bl	80011b6 <_fstat>
 8009262:	1c43      	adds	r3, r0, #1
 8009264:	d102      	bne.n	800926c <_fstat_r+0x1c>
 8009266:	682b      	ldr	r3, [r5, #0]
 8009268:	b103      	cbz	r3, 800926c <_fstat_r+0x1c>
 800926a:	6023      	str	r3, [r4, #0]
 800926c:	bd38      	pop	{r3, r4, r5, pc}
 800926e:	bf00      	nop
 8009270:	20000524 	.word	0x20000524

08009274 <_isatty_r>:
 8009274:	b538      	push	{r3, r4, r5, lr}
 8009276:	4d06      	ldr	r5, [pc, #24]	; (8009290 <_isatty_r+0x1c>)
 8009278:	2300      	movs	r3, #0
 800927a:	4604      	mov	r4, r0
 800927c:	4608      	mov	r0, r1
 800927e:	602b      	str	r3, [r5, #0]
 8009280:	f7f7 ffa9 	bl	80011d6 <_isatty>
 8009284:	1c43      	adds	r3, r0, #1
 8009286:	d102      	bne.n	800928e <_isatty_r+0x1a>
 8009288:	682b      	ldr	r3, [r5, #0]
 800928a:	b103      	cbz	r3, 800928e <_isatty_r+0x1a>
 800928c:	6023      	str	r3, [r4, #0]
 800928e:	bd38      	pop	{r3, r4, r5, pc}
 8009290:	20000524 	.word	0x20000524

08009294 <_init>:
 8009294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009296:	bf00      	nop
 8009298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800929a:	bc08      	pop	{r3}
 800929c:	469e      	mov	lr, r3
 800929e:	4770      	bx	lr

080092a0 <_fini>:
 80092a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092a2:	bf00      	nop
 80092a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092a6:	bc08      	pop	{r3}
 80092a8:	469e      	mov	lr, r3
 80092aa:	4770      	bx	lr
