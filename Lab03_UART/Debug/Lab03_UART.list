
Lab03_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c2c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002e24  08002e24  00012e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e3c  08002e3c  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08002e3c  08002e3c  00012e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e44  08002e44  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e44  08002e44  00012e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e48  08002e48  00012e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08002e4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000094  08002ee0  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08002ee0  00020140  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c2  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009378  00000000  00000000  00020105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016f2  00000000  00000000  0002947d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d8  00000000  00000000  0002ab70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000535  00000000  00000000  0002b248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000268c6  00000000  00000000  0002b77d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ae95  00000000  00000000  00052043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f02ac  00000000  00000000  0005ced8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001a4c  00000000  00000000  0014d184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0014ebd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000094 	.word	0x20000094
 8000214:	00000000 	.word	0x00000000
 8000218:	08002e0c 	.word	0x08002e0c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000098 	.word	0x20000098
 8000234:	08002e0c 	.word	0x08002e0c

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b970 	b.w	8000540 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9e08      	ldr	r6, [sp, #32]
 800027e:	460d      	mov	r5, r1
 8000280:	4604      	mov	r4, r0
 8000282:	460f      	mov	r7, r1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d14a      	bne.n	800031e <__udivmoddi4+0xa6>
 8000288:	428a      	cmp	r2, r1
 800028a:	4694      	mov	ip, r2
 800028c:	d965      	bls.n	800035a <__udivmoddi4+0xe2>
 800028e:	fab2 f382 	clz	r3, r2
 8000292:	b143      	cbz	r3, 80002a6 <__udivmoddi4+0x2e>
 8000294:	fa02 fc03 	lsl.w	ip, r2, r3
 8000298:	f1c3 0220 	rsb	r2, r3, #32
 800029c:	409f      	lsls	r7, r3
 800029e:	fa20 f202 	lsr.w	r2, r0, r2
 80002a2:	4317      	orrs	r7, r2
 80002a4:	409c      	lsls	r4, r3
 80002a6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002aa:	fa1f f58c 	uxth.w	r5, ip
 80002ae:	fbb7 f1fe 	udiv	r1, r7, lr
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002bc:	fb01 f005 	mul.w	r0, r1, r5
 80002c0:	4290      	cmp	r0, r2
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x62>
 80002c4:	eb1c 0202 	adds.w	r2, ip, r2
 80002c8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002cc:	f080 811c 	bcs.w	8000508 <__udivmoddi4+0x290>
 80002d0:	4290      	cmp	r0, r2
 80002d2:	f240 8119 	bls.w	8000508 <__udivmoddi4+0x290>
 80002d6:	3902      	subs	r1, #2
 80002d8:	4462      	add	r2, ip
 80002da:	1a12      	subs	r2, r2, r0
 80002dc:	b2a4      	uxth	r4, r4
 80002de:	fbb2 f0fe 	udiv	r0, r2, lr
 80002e2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002e6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ea:	fb00 f505 	mul.w	r5, r0, r5
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x90>
 80002f2:	eb1c 0404 	adds.w	r4, ip, r4
 80002f6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002fa:	f080 8107 	bcs.w	800050c <__udivmoddi4+0x294>
 80002fe:	42a5      	cmp	r5, r4
 8000300:	f240 8104 	bls.w	800050c <__udivmoddi4+0x294>
 8000304:	4464      	add	r4, ip
 8000306:	3802      	subs	r0, #2
 8000308:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800030c:	1b64      	subs	r4, r4, r5
 800030e:	2100      	movs	r1, #0
 8000310:	b11e      	cbz	r6, 800031a <__udivmoddi4+0xa2>
 8000312:	40dc      	lsrs	r4, r3
 8000314:	2300      	movs	r3, #0
 8000316:	e9c6 4300 	strd	r4, r3, [r6]
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	428b      	cmp	r3, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0xbc>
 8000322:	2e00      	cmp	r6, #0
 8000324:	f000 80ed 	beq.w	8000502 <__udivmoddi4+0x28a>
 8000328:	2100      	movs	r1, #0
 800032a:	e9c6 0500 	strd	r0, r5, [r6]
 800032e:	4608      	mov	r0, r1
 8000330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000334:	fab3 f183 	clz	r1, r3
 8000338:	2900      	cmp	r1, #0
 800033a:	d149      	bne.n	80003d0 <__udivmoddi4+0x158>
 800033c:	42ab      	cmp	r3, r5
 800033e:	d302      	bcc.n	8000346 <__udivmoddi4+0xce>
 8000340:	4282      	cmp	r2, r0
 8000342:	f200 80f8 	bhi.w	8000536 <__udivmoddi4+0x2be>
 8000346:	1a84      	subs	r4, r0, r2
 8000348:	eb65 0203 	sbc.w	r2, r5, r3
 800034c:	2001      	movs	r0, #1
 800034e:	4617      	mov	r7, r2
 8000350:	2e00      	cmp	r6, #0
 8000352:	d0e2      	beq.n	800031a <__udivmoddi4+0xa2>
 8000354:	e9c6 4700 	strd	r4, r7, [r6]
 8000358:	e7df      	b.n	800031a <__udivmoddi4+0xa2>
 800035a:	b902      	cbnz	r2, 800035e <__udivmoddi4+0xe6>
 800035c:	deff      	udf	#255	; 0xff
 800035e:	fab2 f382 	clz	r3, r2
 8000362:	2b00      	cmp	r3, #0
 8000364:	f040 8090 	bne.w	8000488 <__udivmoddi4+0x210>
 8000368:	1a8a      	subs	r2, r1, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2101      	movs	r1, #1
 8000374:	fbb2 f5f7 	udiv	r5, r2, r7
 8000378:	fb07 2015 	mls	r0, r7, r5, r2
 800037c:	0c22      	lsrs	r2, r4, #16
 800037e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000382:	fb0e f005 	mul.w	r0, lr, r5
 8000386:	4290      	cmp	r0, r2
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x124>
 800038a:	eb1c 0202 	adds.w	r2, ip, r2
 800038e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x122>
 8000394:	4290      	cmp	r0, r2
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2b8>
 800039a:	4645      	mov	r5, r8
 800039c:	1a12      	subs	r2, r2, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb2 f0f7 	udiv	r0, r2, r7
 80003a4:	fb07 2210 	mls	r2, r7, r0, r2
 80003a8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x14e>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x14c>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2c2>
 80003c4:	4610      	mov	r0, r2
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ce:	e79f      	b.n	8000310 <__udivmoddi4+0x98>
 80003d0:	f1c1 0720 	rsb	r7, r1, #32
 80003d4:	408b      	lsls	r3, r1
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa05 f401 	lsl.w	r4, r5, r1
 80003e2:	fa20 f307 	lsr.w	r3, r0, r7
 80003e6:	40fd      	lsrs	r5, r7
 80003e8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ec:	4323      	orrs	r3, r4
 80003ee:	fbb5 f8f9 	udiv	r8, r5, r9
 80003f2:	fa1f fe8c 	uxth.w	lr, ip
 80003f6:	fb09 5518 	mls	r5, r9, r8, r5
 80003fa:	0c1c      	lsrs	r4, r3, #16
 80003fc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000400:	fb08 f50e 	mul.w	r5, r8, lr
 8000404:	42a5      	cmp	r5, r4
 8000406:	fa02 f201 	lsl.w	r2, r2, r1
 800040a:	fa00 f001 	lsl.w	r0, r0, r1
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b0>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2b4>
 800041c:	42a5      	cmp	r5, r4
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2b4>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4464      	add	r4, ip
 8000428:	1b64      	subs	r4, r4, r5
 800042a:	b29d      	uxth	r5, r3
 800042c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000430:	fb09 4413 	mls	r4, r9, r3, r4
 8000434:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000438:	fb03 fe0e 	mul.w	lr, r3, lr
 800043c:	45a6      	cmp	lr, r4
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1da>
 8000440:	eb1c 0404 	adds.w	r4, ip, r4
 8000444:	f103 35ff 	add.w	r5, r3, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2ac>
 800044a:	45a6      	cmp	lr, r4
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2ac>
 800044e:	3b02      	subs	r3, #2
 8000450:	4464      	add	r4, ip
 8000452:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000456:	fba3 9502 	umull	r9, r5, r3, r2
 800045a:	eba4 040e 	sub.w	r4, r4, lr
 800045e:	42ac      	cmp	r4, r5
 8000460:	46c8      	mov	r8, r9
 8000462:	46ae      	mov	lr, r5
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x29c>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x298>
 8000468:	b156      	cbz	r6, 8000480 <__udivmoddi4+0x208>
 800046a:	ebb0 0208 	subs.w	r2, r0, r8
 800046e:	eb64 040e 	sbc.w	r4, r4, lr
 8000472:	fa04 f707 	lsl.w	r7, r4, r7
 8000476:	40ca      	lsrs	r2, r1
 8000478:	40cc      	lsrs	r4, r1
 800047a:	4317      	orrs	r7, r2
 800047c:	e9c6 7400 	strd	r7, r4, [r6]
 8000480:	4618      	mov	r0, r3
 8000482:	2100      	movs	r1, #0
 8000484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000488:	f1c3 0120 	rsb	r1, r3, #32
 800048c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000490:	fa20 f201 	lsr.w	r2, r0, r1
 8000494:	fa25 f101 	lsr.w	r1, r5, r1
 8000498:	409d      	lsls	r5, r3
 800049a:	432a      	orrs	r2, r5
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a8:	fb07 1510 	mls	r5, r7, r0, r1
 80004ac:	0c11      	lsrs	r1, r2, #16
 80004ae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004b2:	fb00 f50e 	mul.w	r5, r0, lr
 80004b6:	428d      	cmp	r5, r1
 80004b8:	fa04 f403 	lsl.w	r4, r4, r3
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x258>
 80004be:	eb1c 0101 	adds.w	r1, ip, r1
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004c8:	428d      	cmp	r5, r1
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4461      	add	r1, ip
 80004d0:	1b49      	subs	r1, r1, r5
 80004d2:	b292      	uxth	r2, r2
 80004d4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004d8:	fb07 1115 	mls	r1, r7, r5, r1
 80004dc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004e0:	fb05 f10e 	mul.w	r1, r5, lr
 80004e4:	4291      	cmp	r1, r2
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x282>
 80004e8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ec:	f105 38ff 	add.w	r8, r5, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 80004f2:	4291      	cmp	r1, r2
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2a8>
 80004f6:	3d02      	subs	r5, #2
 80004f8:	4462      	add	r2, ip
 80004fa:	1a52      	subs	r2, r2, r1
 80004fc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0xfc>
 8000502:	4631      	mov	r1, r6
 8000504:	4630      	mov	r0, r6
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xa2>
 8000508:	4639      	mov	r1, r7
 800050a:	e6e6      	b.n	80002da <__udivmoddi4+0x62>
 800050c:	4610      	mov	r0, r2
 800050e:	e6fb      	b.n	8000308 <__udivmoddi4+0x90>
 8000510:	4548      	cmp	r0, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f0>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb65 0e0c 	sbc.w	lr, r5, ip
 800051c:	3b01      	subs	r3, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f0>
 8000520:	4645      	mov	r5, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x282>
 8000524:	462b      	mov	r3, r5
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1da>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x258>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b0>
 8000530:	3d02      	subs	r5, #2
 8000532:	4462      	add	r2, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x124>
 8000536:	4608      	mov	r0, r1
 8000538:	e70a      	b.n	8000350 <__udivmoddi4+0xd8>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x14e>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b088      	sub	sp, #32
 8000548:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054a:	f107 030c 	add.w	r3, r7, #12
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
 8000558:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800055a:	4b18      	ldr	r3, [pc, #96]	; (80005bc <MX_GPIO_Init+0x78>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	4a17      	ldr	r2, [pc, #92]	; (80005bc <MX_GPIO_Init+0x78>)
 8000560:	f043 0308 	orr.w	r3, r3, #8
 8000564:	6313      	str	r3, [r2, #48]	; 0x30
 8000566:	4b15      	ldr	r3, [pc, #84]	; (80005bc <MX_GPIO_Init+0x78>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	f003 0308 	and.w	r3, r3, #8
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000572:	4b12      	ldr	r3, [pc, #72]	; (80005bc <MX_GPIO_Init+0x78>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a11      	ldr	r2, [pc, #68]	; (80005bc <MX_GPIO_Init+0x78>)
 8000578:	f043 0304 	orr.w	r3, r3, #4
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
 800057e:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <MX_GPIO_Init+0x78>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	f003 0304 	and.w	r3, r3, #4
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000590:	480b      	ldr	r0, [pc, #44]	; (80005c0 <MX_GPIO_Init+0x7c>)
 8000592:	f000 fd89 	bl	80010a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000596:	f44f 7340 	mov.w	r3, #768	; 0x300
 800059a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059c:	2301      	movs	r3, #1
 800059e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	4619      	mov	r1, r3
 80005ae:	4804      	ldr	r0, [pc, #16]	; (80005c0 <MX_GPIO_Init+0x7c>)
 80005b0:	f000 fbce 	bl	8000d50 <HAL_GPIO_Init>

}
 80005b4:	bf00      	nop
 80005b6:	3720      	adds	r7, #32
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40023800 	.word	0x40023800
 80005c0:	40020800 	.word	0x40020800

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f000 fa5b 	bl	8000a82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f8de 	bl	800078c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f7ff ffb8 	bl	8000544 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005d4:	f000 f99c 	bl	8000910 <MX_USART3_UART_Init>
//		  break;
//	  }
//	  HAL_Delay(300);

	  //4
	  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80005d8:	bf00      	nop
 80005da:	4b64      	ldr	r3, [pc, #400]	; (800076c <main+0x1a8>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	69db      	ldr	r3, [r3, #28]
 80005e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005e4:	2b40      	cmp	r3, #64	; 0x40
 80005e6:	d1f8      	bne.n	80005da <main+0x16>
	  HAL_UART_Transmit(&huart3, (uint8_t*) str, strlen(str),1000);
 80005e8:	4861      	ldr	r0, [pc, #388]	; (8000770 <main+0x1ac>)
 80005ea:	f7ff fe25 	bl	8000238 <strlen>
 80005ee:	4603      	mov	r3, r0
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f6:	495e      	ldr	r1, [pc, #376]	; (8000770 <main+0x1ac>)
 80005f8:	485c      	ldr	r0, [pc, #368]	; (800076c <main+0x1a8>)
 80005fa:	f001 fe79 	bl	80022f0 <HAL_UART_Transmit>
	  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_RXNE)== RESET){}
 80005fe:	bf00      	nop
 8000600:	4b5a      	ldr	r3, [pc, #360]	; (800076c <main+0x1a8>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	69db      	ldr	r3, [r3, #28]
 8000606:	f003 0320 	and.w	r3, r3, #32
 800060a:	2b20      	cmp	r3, #32
 800060c:	d1f8      	bne.n	8000600 <main+0x3c>
	  HAL_UART_Receive(&huart3, (uint8_t*) &ch1, 1, 1000);
 800060e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000612:	2201      	movs	r2, #1
 8000614:	4957      	ldr	r1, [pc, #348]	; (8000774 <main+0x1b0>)
 8000616:	4855      	ldr	r0, [pc, #340]	; (800076c <main+0x1a8>)
 8000618:	f001 feed 	bl	80023f6 <HAL_UART_Receive>
	  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 800061c:	bf00      	nop
 800061e:	4b53      	ldr	r3, [pc, #332]	; (800076c <main+0x1a8>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	69db      	ldr	r3, [r3, #28]
 8000624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000628:	2b40      	cmp	r3, #64	; 0x40
 800062a:	d1f8      	bne.n	800061e <main+0x5a>
	  HAL_UART_Transmit(&huart3, (uint8_t*) &ch1, 1,1000);
 800062c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000630:	2201      	movs	r2, #1
 8000632:	4950      	ldr	r1, [pc, #320]	; (8000774 <main+0x1b0>)
 8000634:	484d      	ldr	r0, [pc, #308]	; (800076c <main+0x1a8>)
 8000636:	f001 fe5b 	bl	80022f0 <HAL_UART_Transmit>
	  if (ch1 == '1'){
 800063a:	4b4e      	ldr	r3, [pc, #312]	; (8000774 <main+0x1b0>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	2b31      	cmp	r3, #49	; 0x31
 8000640:	d122      	bne.n	8000688 <main+0xc4>
		  for (i = 0; i < 3; i++){
 8000642:	4b4d      	ldr	r3, [pc, #308]	; (8000778 <main+0x1b4>)
 8000644:	2200      	movs	r2, #0
 8000646:	701a      	strb	r2, [r3, #0]
 8000648:	e019      	b.n	800067e <main+0xba>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800064a:	2201      	movs	r2, #1
 800064c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000650:	484a      	ldr	r0, [pc, #296]	; (800077c <main+0x1b8>)
 8000652:	f000 fd29 	bl	80010a8 <HAL_GPIO_WritePin>
			  HAL_Delay(300);
 8000656:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800065a:	f000 fa6f 	bl	8000b3c <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000664:	4845      	ldr	r0, [pc, #276]	; (800077c <main+0x1b8>)
 8000666:	f000 fd1f 	bl	80010a8 <HAL_GPIO_WritePin>
			  HAL_Delay(300);
 800066a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800066e:	f000 fa65 	bl	8000b3c <HAL_Delay>
		  for (i = 0; i < 3; i++){
 8000672:	4b41      	ldr	r3, [pc, #260]	; (8000778 <main+0x1b4>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	3301      	adds	r3, #1
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4b3f      	ldr	r3, [pc, #252]	; (8000778 <main+0x1b4>)
 800067c:	701a      	strb	r2, [r3, #0]
 800067e:	4b3e      	ldr	r3, [pc, #248]	; (8000778 <main+0x1b4>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b02      	cmp	r3, #2
 8000684:	d9e1      	bls.n	800064a <main+0x86>
 8000686:	e069      	b.n	800075c <main+0x198>
		  }
	  }
	  else if(ch1 == '2'){
 8000688:	4b3a      	ldr	r3, [pc, #232]	; (8000774 <main+0x1b0>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b32      	cmp	r3, #50	; 0x32
 800068e:	d122      	bne.n	80006d6 <main+0x112>
		  for (i = 0; i < 3; i++){
 8000690:	4b39      	ldr	r3, [pc, #228]	; (8000778 <main+0x1b4>)
 8000692:	2200      	movs	r2, #0
 8000694:	701a      	strb	r2, [r3, #0]
 8000696:	e019      	b.n	80006cc <main+0x108>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000698:	2201      	movs	r2, #1
 800069a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800069e:	4837      	ldr	r0, [pc, #220]	; (800077c <main+0x1b8>)
 80006a0:	f000 fd02 	bl	80010a8 <HAL_GPIO_WritePin>
			  HAL_Delay(300);
 80006a4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006a8:	f000 fa48 	bl	8000b3c <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b2:	4832      	ldr	r0, [pc, #200]	; (800077c <main+0x1b8>)
 80006b4:	f000 fcf8 	bl	80010a8 <HAL_GPIO_WritePin>
			  HAL_Delay(300);
 80006b8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006bc:	f000 fa3e 	bl	8000b3c <HAL_Delay>
		  for (i = 0; i < 3; i++){
 80006c0:	4b2d      	ldr	r3, [pc, #180]	; (8000778 <main+0x1b4>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	3301      	adds	r3, #1
 80006c6:	b2da      	uxtb	r2, r3
 80006c8:	4b2b      	ldr	r3, [pc, #172]	; (8000778 <main+0x1b4>)
 80006ca:	701a      	strb	r2, [r3, #0]
 80006cc:	4b2a      	ldr	r3, [pc, #168]	; (8000778 <main+0x1b4>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b02      	cmp	r3, #2
 80006d2:	d9e1      	bls.n	8000698 <main+0xd4>
 80006d4:	e042      	b.n	800075c <main+0x198>
		  }
	  }
	  else if(ch1 == 'm'){
 80006d6:	4b27      	ldr	r3, [pc, #156]	; (8000774 <main+0x1b0>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b6d      	cmp	r3, #109	; 0x6d
 80006dc:	d113      	bne.n	8000706 <main+0x142>
		  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80006de:	bf00      	nop
 80006e0:	4b22      	ldr	r3, [pc, #136]	; (800076c <main+0x1a8>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006ea:	2b40      	cmp	r3, #64	; 0x40
 80006ec:	d1f8      	bne.n	80006e0 <main+0x11c>
		  HAL_UART_Transmit(&huart3, (uint8_t*) name, strlen(name),1000);
 80006ee:	4824      	ldr	r0, [pc, #144]	; (8000780 <main+0x1bc>)
 80006f0:	f7ff fda2 	bl	8000238 <strlen>
 80006f4:	4603      	mov	r3, r0
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006fc:	4920      	ldr	r1, [pc, #128]	; (8000780 <main+0x1bc>)
 80006fe:	481b      	ldr	r0, [pc, #108]	; (800076c <main+0x1a8>)
 8000700:	f001 fdf6 	bl	80022f0 <HAL_UART_Transmit>
 8000704:	e02a      	b.n	800075c <main+0x198>
	  }
	  else if(ch1 == 'q'){
 8000706:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <main+0x1b0>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b71      	cmp	r3, #113	; 0x71
 800070c:	d113      	bne.n	8000736 <main+0x172>
		  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 800070e:	bf00      	nop
 8000710:	4b16      	ldr	r3, [pc, #88]	; (800076c <main+0x1a8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	69db      	ldr	r3, [r3, #28]
 8000716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800071a:	2b40      	cmp	r3, #64	; 0x40
 800071c:	d1f8      	bne.n	8000710 <main+0x14c>
		  HAL_UART_Transmit(&huart3, (uint8_t*) quit, strlen(quit),1000);
 800071e:	4819      	ldr	r0, [pc, #100]	; (8000784 <main+0x1c0>)
 8000720:	f7ff fd8a 	bl	8000238 <strlen>
 8000724:	4603      	mov	r3, r0
 8000726:	b29a      	uxth	r2, r3
 8000728:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800072c:	4915      	ldr	r1, [pc, #84]	; (8000784 <main+0x1c0>)
 800072e:	480f      	ldr	r0, [pc, #60]	; (800076c <main+0x1a8>)
 8000730:	f001 fdde 	bl	80022f0 <HAL_UART_Transmit>
		  break;
 8000734:	e017      	b.n	8000766 <main+0x1a2>
	  }
	  else{
		  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000736:	bf00      	nop
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <main+0x1a8>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	69db      	ldr	r3, [r3, #28]
 800073e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000742:	2b40      	cmp	r3, #64	; 0x40
 8000744:	d1f8      	bne.n	8000738 <main+0x174>
		  HAL_UART_Transmit(&huart3, (uint8_t*) unknown, strlen(unknown),1000);
 8000746:	4810      	ldr	r0, [pc, #64]	; (8000788 <main+0x1c4>)
 8000748:	f7ff fd76 	bl	8000238 <strlen>
 800074c:	4603      	mov	r3, r0
 800074e:	b29a      	uxth	r2, r3
 8000750:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000754:	490c      	ldr	r1, [pc, #48]	; (8000788 <main+0x1c4>)
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <main+0x1a8>)
 8000758:	f001 fdca 	bl	80022f0 <HAL_UART_Transmit>
	  }
	  HAL_Delay(300);
 800075c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000760:	f000 f9ec 	bl	8000b3c <HAL_Delay>
	  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000764:	e738      	b.n	80005d8 <main+0x14>
 8000766:	2300      	movs	r3, #0


    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000768:	4618      	mov	r0, r3
 800076a:	bd80      	pop	{r7, pc}
 800076c:	200000b4 	.word	0x200000b4
 8000770:	20000000 	.word	0x20000000
 8000774:	200000b0 	.word	0x200000b0
 8000778:	200000b1 	.word	0x200000b1
 800077c:	40020800 	.word	0x40020800
 8000780:	20000010 	.word	0x20000010
 8000784:	2000006c 	.word	0x2000006c
 8000788:	20000074 	.word	0x20000074

0800078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b094      	sub	sp, #80	; 0x50
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	2234      	movs	r2, #52	; 0x34
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f002 fb09 	bl	8002db2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	f107 0308 	add.w	r3, r7, #8
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b0:	4b22      	ldr	r3, [pc, #136]	; (800083c <SystemClock_Config+0xb0>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b4:	4a21      	ldr	r2, [pc, #132]	; (800083c <SystemClock_Config+0xb0>)
 80007b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ba:	6413      	str	r3, [r2, #64]	; 0x40
 80007bc:	4b1f      	ldr	r3, [pc, #124]	; (800083c <SystemClock_Config+0xb0>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007c8:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <SystemClock_Config+0xb4>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007d0:	4a1b      	ldr	r2, [pc, #108]	; (8000840 <SystemClock_Config+0xb4>)
 80007d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d6:	6013      	str	r3, [r2, #0]
 80007d8:	4b19      	ldr	r3, [pc, #100]	; (8000840 <SystemClock_Config+0xb4>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007e4:	2302      	movs	r3, #2
 80007e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e8:	2301      	movs	r3, #1
 80007ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ec:	2310      	movs	r3, #16
 80007ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007f0:	2300      	movs	r3, #0
 80007f2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 fc6f 	bl	80010dc <HAL_RCC_OscConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000804:	f000 f81e 	bl	8000844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000808:	230f      	movs	r3, #15
 800080a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800081c:	f107 0308 	add.w	r3, r7, #8
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f000 ff08 	bl	8001638 <HAL_RCC_ClockConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800082e:	f000 f809 	bl	8000844 <Error_Handler>
  }
}
 8000832:	bf00      	nop
 8000834:	3750      	adds	r7, #80	; 0x50
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800
 8000840:	40007000 	.word	0x40007000

08000844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000848:	b672      	cpsid	i
}
 800084a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084c:	e7fe      	b.n	800084c <Error_Handler+0x8>
	...

08000850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <HAL_MspInit+0x44>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085a:	4a0e      	ldr	r2, [pc, #56]	; (8000894 <HAL_MspInit+0x44>)
 800085c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000860:	6413      	str	r3, [r2, #64]	; 0x40
 8000862:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <HAL_MspInit+0x44>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <HAL_MspInit+0x44>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000872:	4a08      	ldr	r2, [pc, #32]	; (8000894 <HAL_MspInit+0x44>)
 8000874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000878:	6453      	str	r3, [r2, #68]	; 0x44
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <HAL_MspInit+0x44>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800

08000898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800089c:	e7fe      	b.n	800089c <NMI_Handler+0x4>

0800089e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <HardFault_Handler+0x4>

080008a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <MemManage_Handler+0x4>

080008aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <BusFault_Handler+0x4>

080008b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <UsageFault_Handler+0x4>

080008b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e4:	f000 f90a 	bl	8000afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}

080008ec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <SystemInit+0x20>)
 80008f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008f6:	4a05      	ldr	r2, [pc, #20]	; (800090c <SystemInit+0x20>)
 80008f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_USART3_UART_Init+0x58>)
 8000916:	4a15      	ldr	r2, [pc, #84]	; (800096c <MX_USART3_UART_Init+0x5c>)
 8000918:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800091a:	4b13      	ldr	r3, [pc, #76]	; (8000968 <MX_USART3_UART_Init+0x58>)
 800091c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000920:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_USART3_UART_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_USART3_UART_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_USART3_UART_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_USART3_UART_Init+0x58>)
 8000936:	220c      	movs	r2, #12
 8000938:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <MX_USART3_UART_Init+0x58>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_USART3_UART_Init+0x58>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <MX_USART3_UART_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_USART3_UART_Init+0x58>)
 800094e:	2200      	movs	r2, #0
 8000950:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_USART3_UART_Init+0x58>)
 8000954:	f001 fc7e 	bl	8002254 <HAL_UART_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800095e:	f7ff ff71 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	200000b4 	.word	0x200000b4
 800096c:	40004800 	.word	0x40004800

08000970 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b0ae      	sub	sp, #184	; 0xb8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	2290      	movs	r2, #144	; 0x90
 800098e:	2100      	movs	r1, #0
 8000990:	4618      	mov	r0, r3
 8000992:	f002 fa0e 	bl	8002db2 <memset>
  if(uartHandle->Instance==USART3)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a22      	ldr	r2, [pc, #136]	; (8000a24 <HAL_UART_MspInit+0xb4>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d13c      	bne.n	8000a1a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80009a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009a4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009a6:	2300      	movs	r3, #0
 80009a8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	4618      	mov	r0, r3
 80009b0:	f001 f828 	bl	8001a04 <HAL_RCCEx_PeriphCLKConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009ba:	f7ff ff43 	bl	8000844 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009be:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <HAL_UART_MspInit+0xb8>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	4a19      	ldr	r2, [pc, #100]	; (8000a28 <HAL_UART_MspInit+0xb8>)
 80009c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009c8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ca:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <HAL_UART_MspInit+0xb8>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009d6:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <HAL_UART_MspInit+0xb8>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a13      	ldr	r2, [pc, #76]	; (8000a28 <HAL_UART_MspInit+0xb8>)
 80009dc:	f043 0308 	orr.w	r3, r3, #8
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <HAL_UART_MspInit+0xb8>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0308 	and.w	r3, r3, #8
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a02:	2303      	movs	r3, #3
 8000a04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a08:	2307      	movs	r3, #7
 8000a0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a0e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <HAL_UART_MspInit+0xbc>)
 8000a16:	f000 f99b 	bl	8000d50 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000a1a:	bf00      	nop
 8000a1c:	37b8      	adds	r7, #184	; 0xb8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40004800 	.word	0x40004800
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40020c00 	.word	0x40020c00

08000a30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a34:	480d      	ldr	r0, [pc, #52]	; (8000a6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a36:	490e      	ldr	r1, [pc, #56]	; (8000a70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a38:	4a0e      	ldr	r2, [pc, #56]	; (8000a74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a3c:	e002      	b.n	8000a44 <LoopCopyDataInit>

08000a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a42:	3304      	adds	r3, #4

08000a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a48:	d3f9      	bcc.n	8000a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4a:	4a0b      	ldr	r2, [pc, #44]	; (8000a78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a4c:	4c0b      	ldr	r4, [pc, #44]	; (8000a7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a50:	e001      	b.n	8000a56 <LoopFillZerobss>

08000a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a54:	3204      	adds	r2, #4

08000a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a58:	d3fb      	bcc.n	8000a52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a5a:	f7ff ff47 	bl	80008ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a5e:	f002 f9b1 	bl	8002dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a62:	f7ff fdaf 	bl	80005c4 <main>
  bx  lr    
 8000a66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a68:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a70:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8000a74:	08002e4c 	.word	0x08002e4c
  ldr r2, =_sbss
 8000a78:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8000a7c:	20000140 	.word	0x20000140

08000a80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a80:	e7fe      	b.n	8000a80 <ADC_IRQHandler>

08000a82 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a86:	2003      	movs	r0, #3
 8000a88:	f000 f92e 	bl	8000ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a8c:	200f      	movs	r0, #15
 8000a8e:	f000 f805 	bl	8000a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a92:	f7ff fedd 	bl	8000850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a96:	2300      	movs	r3, #0
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <HAL_InitTick+0x54>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <HAL_InitTick+0x58>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	4619      	mov	r1, r3
 8000aae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aba:	4618      	mov	r0, r3
 8000abc:	f000 f93b 	bl	8000d36 <HAL_SYSTICK_Config>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e00e      	b.n	8000ae8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2b0f      	cmp	r3, #15
 8000ace:	d80a      	bhi.n	8000ae6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	6879      	ldr	r1, [r7, #4]
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	f000 f911 	bl	8000cfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000adc:	4a06      	ldr	r2, [pc, #24]	; (8000af8 <HAL_InitTick+0x5c>)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e000      	b.n	8000ae8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000088 	.word	0x20000088
 8000af4:	20000090 	.word	0x20000090
 8000af8:	2000008c 	.word	0x2000008c

08000afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_IncTick+0x20>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	461a      	mov	r2, r3
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_IncTick+0x24>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <HAL_IncTick+0x24>)
 8000b0e:	6013      	str	r3, [r2, #0]
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	20000090 	.word	0x20000090
 8000b20:	2000013c 	.word	0x2000013c

08000b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return uwTick;
 8000b28:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <HAL_GetTick+0x14>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	2000013c 	.word	0x2000013c

08000b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b44:	f7ff ffee 	bl	8000b24 <HAL_GetTick>
 8000b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b54:	d005      	beq.n	8000b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b56:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <HAL_Delay+0x44>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	4413      	add	r3, r2
 8000b60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b62:	bf00      	nop
 8000b64:	f7ff ffde 	bl	8000b24 <HAL_GetTick>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	68fa      	ldr	r2, [r7, #12]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d8f7      	bhi.n	8000b64 <HAL_Delay+0x28>
  {
  }
}
 8000b74:	bf00      	nop
 8000b76:	bf00      	nop
 8000b78:	3710      	adds	r7, #16
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000090 	.word	0x20000090

08000b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f003 0307 	and.w	r3, r3, #7
 8000b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b94:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <__NVIC_SetPriorityGrouping+0x40>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b9a:	68ba      	ldr	r2, [r7, #8]
 8000b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb2:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <__NVIC_SetPriorityGrouping+0x40>)
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	60d3      	str	r3, [r2, #12]
}
 8000bb8:	bf00      	nop
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000ed00 	.word	0xe000ed00
 8000bc8:	05fa0000 	.word	0x05fa0000

08000bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd0:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	0a1b      	lsrs	r3, r3, #8
 8000bd6:	f003 0307 	and.w	r3, r3, #7
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	6039      	str	r1, [r7, #0]
 8000bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	db0a      	blt.n	8000c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	490c      	ldr	r1, [pc, #48]	; (8000c34 <__NVIC_SetPriority+0x4c>)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	0112      	lsls	r2, r2, #4
 8000c08:	b2d2      	uxtb	r2, r2
 8000c0a:	440b      	add	r3, r1
 8000c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c10:	e00a      	b.n	8000c28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	4908      	ldr	r1, [pc, #32]	; (8000c38 <__NVIC_SetPriority+0x50>)
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	f003 030f 	and.w	r3, r3, #15
 8000c1e:	3b04      	subs	r3, #4
 8000c20:	0112      	lsls	r2, r2, #4
 8000c22:	b2d2      	uxtb	r2, r2
 8000c24:	440b      	add	r3, r1
 8000c26:	761a      	strb	r2, [r3, #24]
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000e100 	.word	0xe000e100
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b089      	sub	sp, #36	; 0x24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	f1c3 0307 	rsb	r3, r3, #7
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	bf28      	it	cs
 8000c5a:	2304      	movcs	r3, #4
 8000c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3304      	adds	r3, #4
 8000c62:	2b06      	cmp	r3, #6
 8000c64:	d902      	bls.n	8000c6c <NVIC_EncodePriority+0x30>
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	3b03      	subs	r3, #3
 8000c6a:	e000      	b.n	8000c6e <NVIC_EncodePriority+0x32>
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c70:	f04f 32ff 	mov.w	r2, #4294967295
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43da      	mvns	r2, r3
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	401a      	ands	r2, r3
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c84:	f04f 31ff 	mov.w	r1, #4294967295
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8e:	43d9      	mvns	r1, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	4313      	orrs	r3, r2
         );
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3724      	adds	r7, #36	; 0x24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
	...

08000ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cb4:	d301      	bcc.n	8000cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e00f      	b.n	8000cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cba:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <SysTick_Config+0x40>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cc2:	210f      	movs	r1, #15
 8000cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc8:	f7ff ff8e 	bl	8000be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <SysTick_Config+0x40>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cd2:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <SysTick_Config+0x40>)
 8000cd4:	2207      	movs	r2, #7
 8000cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	e000e010 	.word	0xe000e010

08000ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff ff47 	bl	8000b84 <__NVIC_SetPriorityGrouping>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b086      	sub	sp, #24
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	4603      	mov	r3, r0
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
 8000d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d10:	f7ff ff5c 	bl	8000bcc <__NVIC_GetPriorityGrouping>
 8000d14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	68b9      	ldr	r1, [r7, #8]
 8000d1a:	6978      	ldr	r0, [r7, #20]
 8000d1c:	f7ff ff8e 	bl	8000c3c <NVIC_EncodePriority>
 8000d20:	4602      	mov	r2, r0
 8000d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d26:	4611      	mov	r1, r2
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff5d 	bl	8000be8 <__NVIC_SetPriority>
}
 8000d2e:	bf00      	nop
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff ffb0 	bl	8000ca4 <SysTick_Config>
 8000d44:	4603      	mov	r3, r0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b089      	sub	sp, #36	; 0x24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
 8000d6e:	e175      	b.n	800105c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000d70:	2201      	movs	r2, #1
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	697a      	ldr	r2, [r7, #20]
 8000d80:	4013      	ands	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	f040 8164 	bne.w	8001056 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f003 0303 	and.w	r3, r3, #3
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d005      	beq.n	8000da6 <HAL_GPIO_Init+0x56>
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f003 0303 	and.w	r3, r3, #3
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d130      	bne.n	8000e08 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	2203      	movs	r2, #3
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43db      	mvns	r3, r3
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	68da      	ldr	r2, [r3, #12]
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ddc:	2201      	movs	r2, #1
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	43db      	mvns	r3, r3
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	4013      	ands	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	091b      	lsrs	r3, r3, #4
 8000df2:	f003 0201 	and.w	r2, r3, #1
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 0303 	and.w	r3, r3, #3
 8000e10:	2b03      	cmp	r3, #3
 8000e12:	d017      	beq.n	8000e44 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	2203      	movs	r2, #3
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	43db      	mvns	r3, r3
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	689a      	ldr	r2, [r3, #8]
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 0303 	and.w	r3, r3, #3
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d123      	bne.n	8000e98 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	08da      	lsrs	r2, r3, #3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3208      	adds	r2, #8
 8000e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	f003 0307 	and.w	r3, r3, #7
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	220f      	movs	r2, #15
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	691a      	ldr	r2, [r3, #16]
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	08da      	lsrs	r2, r3, #3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	3208      	adds	r2, #8
 8000e92:	69b9      	ldr	r1, [r7, #24]
 8000e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 0203 	and.w	r2, r3, #3
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	f000 80be 	beq.w	8001056 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eda:	4b66      	ldr	r3, [pc, #408]	; (8001074 <HAL_GPIO_Init+0x324>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	4a65      	ldr	r2, [pc, #404]	; (8001074 <HAL_GPIO_Init+0x324>)
 8000ee0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ee6:	4b63      	ldr	r3, [pc, #396]	; (8001074 <HAL_GPIO_Init+0x324>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000ef2:	4a61      	ldr	r2, [pc, #388]	; (8001078 <HAL_GPIO_Init+0x328>)
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	089b      	lsrs	r3, r3, #2
 8000ef8:	3302      	adds	r3, #2
 8000efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f003 0303 	and.w	r3, r3, #3
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	220f      	movs	r2, #15
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4013      	ands	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a58      	ldr	r2, [pc, #352]	; (800107c <HAL_GPIO_Init+0x32c>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d037      	beq.n	8000f8e <HAL_GPIO_Init+0x23e>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a57      	ldr	r2, [pc, #348]	; (8001080 <HAL_GPIO_Init+0x330>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d031      	beq.n	8000f8a <HAL_GPIO_Init+0x23a>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a56      	ldr	r2, [pc, #344]	; (8001084 <HAL_GPIO_Init+0x334>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d02b      	beq.n	8000f86 <HAL_GPIO_Init+0x236>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a55      	ldr	r2, [pc, #340]	; (8001088 <HAL_GPIO_Init+0x338>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d025      	beq.n	8000f82 <HAL_GPIO_Init+0x232>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a54      	ldr	r2, [pc, #336]	; (800108c <HAL_GPIO_Init+0x33c>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d01f      	beq.n	8000f7e <HAL_GPIO_Init+0x22e>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a53      	ldr	r2, [pc, #332]	; (8001090 <HAL_GPIO_Init+0x340>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d019      	beq.n	8000f7a <HAL_GPIO_Init+0x22a>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a52      	ldr	r2, [pc, #328]	; (8001094 <HAL_GPIO_Init+0x344>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d013      	beq.n	8000f76 <HAL_GPIO_Init+0x226>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a51      	ldr	r2, [pc, #324]	; (8001098 <HAL_GPIO_Init+0x348>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d00d      	beq.n	8000f72 <HAL_GPIO_Init+0x222>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a50      	ldr	r2, [pc, #320]	; (800109c <HAL_GPIO_Init+0x34c>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d007      	beq.n	8000f6e <HAL_GPIO_Init+0x21e>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a4f      	ldr	r2, [pc, #316]	; (80010a0 <HAL_GPIO_Init+0x350>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d101      	bne.n	8000f6a <HAL_GPIO_Init+0x21a>
 8000f66:	2309      	movs	r3, #9
 8000f68:	e012      	b.n	8000f90 <HAL_GPIO_Init+0x240>
 8000f6a:	230a      	movs	r3, #10
 8000f6c:	e010      	b.n	8000f90 <HAL_GPIO_Init+0x240>
 8000f6e:	2308      	movs	r3, #8
 8000f70:	e00e      	b.n	8000f90 <HAL_GPIO_Init+0x240>
 8000f72:	2307      	movs	r3, #7
 8000f74:	e00c      	b.n	8000f90 <HAL_GPIO_Init+0x240>
 8000f76:	2306      	movs	r3, #6
 8000f78:	e00a      	b.n	8000f90 <HAL_GPIO_Init+0x240>
 8000f7a:	2305      	movs	r3, #5
 8000f7c:	e008      	b.n	8000f90 <HAL_GPIO_Init+0x240>
 8000f7e:	2304      	movs	r3, #4
 8000f80:	e006      	b.n	8000f90 <HAL_GPIO_Init+0x240>
 8000f82:	2303      	movs	r3, #3
 8000f84:	e004      	b.n	8000f90 <HAL_GPIO_Init+0x240>
 8000f86:	2302      	movs	r3, #2
 8000f88:	e002      	b.n	8000f90 <HAL_GPIO_Init+0x240>
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e000      	b.n	8000f90 <HAL_GPIO_Init+0x240>
 8000f8e:	2300      	movs	r3, #0
 8000f90:	69fa      	ldr	r2, [r7, #28]
 8000f92:	f002 0203 	and.w	r2, r2, #3
 8000f96:	0092      	lsls	r2, r2, #2
 8000f98:	4093      	lsls	r3, r2
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000fa0:	4935      	ldr	r1, [pc, #212]	; (8001078 <HAL_GPIO_Init+0x328>)
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	089b      	lsrs	r3, r3, #2
 8000fa6:	3302      	adds	r3, #2
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fae:	4b3d      	ldr	r3, [pc, #244]	; (80010a4 <HAL_GPIO_Init+0x354>)
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fd2:	4a34      	ldr	r2, [pc, #208]	; (80010a4 <HAL_GPIO_Init+0x354>)
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fd8:	4b32      	ldr	r3, [pc, #200]	; (80010a4 <HAL_GPIO_Init+0x354>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d003      	beq.n	8000ffc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ffc:	4a29      	ldr	r2, [pc, #164]	; (80010a4 <HAL_GPIO_Init+0x354>)
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001002:	4b28      	ldr	r3, [pc, #160]	; (80010a4 <HAL_GPIO_Init+0x354>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	43db      	mvns	r3, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4013      	ands	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001026:	4a1f      	ldr	r2, [pc, #124]	; (80010a4 <HAL_GPIO_Init+0x354>)
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800102c:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <HAL_GPIO_Init+0x354>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001050:	4a14      	ldr	r2, [pc, #80]	; (80010a4 <HAL_GPIO_Init+0x354>)
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3301      	adds	r3, #1
 800105a:	61fb      	str	r3, [r7, #28]
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	2b0f      	cmp	r3, #15
 8001060:	f67f ae86 	bls.w	8000d70 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	3724      	adds	r7, #36	; 0x24
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40023800 	.word	0x40023800
 8001078:	40013800 	.word	0x40013800
 800107c:	40020000 	.word	0x40020000
 8001080:	40020400 	.word	0x40020400
 8001084:	40020800 	.word	0x40020800
 8001088:	40020c00 	.word	0x40020c00
 800108c:	40021000 	.word	0x40021000
 8001090:	40021400 	.word	0x40021400
 8001094:	40021800 	.word	0x40021800
 8001098:	40021c00 	.word	0x40021c00
 800109c:	40022000 	.word	0x40022000
 80010a0:	40022400 	.word	0x40022400
 80010a4:	40013c00 	.word	0x40013c00

080010a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	460b      	mov	r3, r1
 80010b2:	807b      	strh	r3, [r7, #2]
 80010b4:	4613      	mov	r3, r2
 80010b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010b8:	787b      	ldrb	r3, [r7, #1]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010be:	887a      	ldrh	r2, [r7, #2]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80010c4:	e003      	b.n	80010ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80010c6:	887b      	ldrh	r3, [r7, #2]
 80010c8:	041a      	lsls	r2, r3, #16
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	619a      	str	r2, [r3, #24]
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
	...

080010dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80010e4:	2300      	movs	r3, #0
 80010e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d101      	bne.n	80010f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e29b      	b.n	800162a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f000 8087 	beq.w	800120e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001100:	4b96      	ldr	r3, [pc, #600]	; (800135c <HAL_RCC_OscConfig+0x280>)
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f003 030c 	and.w	r3, r3, #12
 8001108:	2b04      	cmp	r3, #4
 800110a:	d00c      	beq.n	8001126 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800110c:	4b93      	ldr	r3, [pc, #588]	; (800135c <HAL_RCC_OscConfig+0x280>)
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f003 030c 	and.w	r3, r3, #12
 8001114:	2b08      	cmp	r3, #8
 8001116:	d112      	bne.n	800113e <HAL_RCC_OscConfig+0x62>
 8001118:	4b90      	ldr	r3, [pc, #576]	; (800135c <HAL_RCC_OscConfig+0x280>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001120:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001124:	d10b      	bne.n	800113e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001126:	4b8d      	ldr	r3, [pc, #564]	; (800135c <HAL_RCC_OscConfig+0x280>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d06c      	beq.n	800120c <HAL_RCC_OscConfig+0x130>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d168      	bne.n	800120c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e275      	b.n	800162a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001146:	d106      	bne.n	8001156 <HAL_RCC_OscConfig+0x7a>
 8001148:	4b84      	ldr	r3, [pc, #528]	; (800135c <HAL_RCC_OscConfig+0x280>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a83      	ldr	r2, [pc, #524]	; (800135c <HAL_RCC_OscConfig+0x280>)
 800114e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	e02e      	b.n	80011b4 <HAL_RCC_OscConfig+0xd8>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d10c      	bne.n	8001178 <HAL_RCC_OscConfig+0x9c>
 800115e:	4b7f      	ldr	r3, [pc, #508]	; (800135c <HAL_RCC_OscConfig+0x280>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a7e      	ldr	r2, [pc, #504]	; (800135c <HAL_RCC_OscConfig+0x280>)
 8001164:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001168:	6013      	str	r3, [r2, #0]
 800116a:	4b7c      	ldr	r3, [pc, #496]	; (800135c <HAL_RCC_OscConfig+0x280>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a7b      	ldr	r2, [pc, #492]	; (800135c <HAL_RCC_OscConfig+0x280>)
 8001170:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	e01d      	b.n	80011b4 <HAL_RCC_OscConfig+0xd8>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001180:	d10c      	bne.n	800119c <HAL_RCC_OscConfig+0xc0>
 8001182:	4b76      	ldr	r3, [pc, #472]	; (800135c <HAL_RCC_OscConfig+0x280>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a75      	ldr	r2, [pc, #468]	; (800135c <HAL_RCC_OscConfig+0x280>)
 8001188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800118c:	6013      	str	r3, [r2, #0]
 800118e:	4b73      	ldr	r3, [pc, #460]	; (800135c <HAL_RCC_OscConfig+0x280>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a72      	ldr	r2, [pc, #456]	; (800135c <HAL_RCC_OscConfig+0x280>)
 8001194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001198:	6013      	str	r3, [r2, #0]
 800119a:	e00b      	b.n	80011b4 <HAL_RCC_OscConfig+0xd8>
 800119c:	4b6f      	ldr	r3, [pc, #444]	; (800135c <HAL_RCC_OscConfig+0x280>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a6e      	ldr	r2, [pc, #440]	; (800135c <HAL_RCC_OscConfig+0x280>)
 80011a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011a6:	6013      	str	r3, [r2, #0]
 80011a8:	4b6c      	ldr	r3, [pc, #432]	; (800135c <HAL_RCC_OscConfig+0x280>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a6b      	ldr	r2, [pc, #428]	; (800135c <HAL_RCC_OscConfig+0x280>)
 80011ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d013      	beq.n	80011e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011bc:	f7ff fcb2 	bl	8000b24 <HAL_GetTick>
 80011c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c2:	e008      	b.n	80011d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011c4:	f7ff fcae 	bl	8000b24 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b64      	cmp	r3, #100	; 0x64
 80011d0:	d901      	bls.n	80011d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e229      	b.n	800162a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d6:	4b61      	ldr	r3, [pc, #388]	; (800135c <HAL_RCC_OscConfig+0x280>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d0f0      	beq.n	80011c4 <HAL_RCC_OscConfig+0xe8>
 80011e2:	e014      	b.n	800120e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e4:	f7ff fc9e 	bl	8000b24 <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011ec:	f7ff fc9a 	bl	8000b24 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b64      	cmp	r3, #100	; 0x64
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e215      	b.n	800162a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011fe:	4b57      	ldr	r3, [pc, #348]	; (800135c <HAL_RCC_OscConfig+0x280>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1f0      	bne.n	80011ec <HAL_RCC_OscConfig+0x110>
 800120a:	e000      	b.n	800120e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800120c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d069      	beq.n	80012ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800121a:	4b50      	ldr	r3, [pc, #320]	; (800135c <HAL_RCC_OscConfig+0x280>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f003 030c 	and.w	r3, r3, #12
 8001222:	2b00      	cmp	r3, #0
 8001224:	d00b      	beq.n	800123e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001226:	4b4d      	ldr	r3, [pc, #308]	; (800135c <HAL_RCC_OscConfig+0x280>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f003 030c 	and.w	r3, r3, #12
 800122e:	2b08      	cmp	r3, #8
 8001230:	d11c      	bne.n	800126c <HAL_RCC_OscConfig+0x190>
 8001232:	4b4a      	ldr	r3, [pc, #296]	; (800135c <HAL_RCC_OscConfig+0x280>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d116      	bne.n	800126c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800123e:	4b47      	ldr	r3, [pc, #284]	; (800135c <HAL_RCC_OscConfig+0x280>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d005      	beq.n	8001256 <HAL_RCC_OscConfig+0x17a>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d001      	beq.n	8001256 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e1e9      	b.n	800162a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001256:	4b41      	ldr	r3, [pc, #260]	; (800135c <HAL_RCC_OscConfig+0x280>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	691b      	ldr	r3, [r3, #16]
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	493d      	ldr	r1, [pc, #244]	; (800135c <HAL_RCC_OscConfig+0x280>)
 8001266:	4313      	orrs	r3, r2
 8001268:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800126a:	e040      	b.n	80012ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d023      	beq.n	80012bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001274:	4b39      	ldr	r3, [pc, #228]	; (800135c <HAL_RCC_OscConfig+0x280>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a38      	ldr	r2, [pc, #224]	; (800135c <HAL_RCC_OscConfig+0x280>)
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001280:	f7ff fc50 	bl	8000b24 <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001288:	f7ff fc4c 	bl	8000b24 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e1c7      	b.n	800162a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800129a:	4b30      	ldr	r3, [pc, #192]	; (800135c <HAL_RCC_OscConfig+0x280>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d0f0      	beq.n	8001288 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a6:	4b2d      	ldr	r3, [pc, #180]	; (800135c <HAL_RCC_OscConfig+0x280>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	691b      	ldr	r3, [r3, #16]
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	4929      	ldr	r1, [pc, #164]	; (800135c <HAL_RCC_OscConfig+0x280>)
 80012b6:	4313      	orrs	r3, r2
 80012b8:	600b      	str	r3, [r1, #0]
 80012ba:	e018      	b.n	80012ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012bc:	4b27      	ldr	r3, [pc, #156]	; (800135c <HAL_RCC_OscConfig+0x280>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a26      	ldr	r2, [pc, #152]	; (800135c <HAL_RCC_OscConfig+0x280>)
 80012c2:	f023 0301 	bic.w	r3, r3, #1
 80012c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c8:	f7ff fc2c 	bl	8000b24 <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012d0:	f7ff fc28 	bl	8000b24 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e1a3      	b.n	800162a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e2:	4b1e      	ldr	r3, [pc, #120]	; (800135c <HAL_RCC_OscConfig+0x280>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1f0      	bne.n	80012d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0308 	and.w	r3, r3, #8
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d038      	beq.n	800136c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d019      	beq.n	8001336 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001302:	4b16      	ldr	r3, [pc, #88]	; (800135c <HAL_RCC_OscConfig+0x280>)
 8001304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001306:	4a15      	ldr	r2, [pc, #84]	; (800135c <HAL_RCC_OscConfig+0x280>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800130e:	f7ff fc09 	bl	8000b24 <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001314:	e008      	b.n	8001328 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001316:	f7ff fc05 	bl	8000b24 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e180      	b.n	800162a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <HAL_RCC_OscConfig+0x280>)
 800132a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0f0      	beq.n	8001316 <HAL_RCC_OscConfig+0x23a>
 8001334:	e01a      	b.n	800136c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <HAL_RCC_OscConfig+0x280>)
 8001338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800133a:	4a08      	ldr	r2, [pc, #32]	; (800135c <HAL_RCC_OscConfig+0x280>)
 800133c:	f023 0301 	bic.w	r3, r3, #1
 8001340:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001342:	f7ff fbef 	bl	8000b24 <HAL_GetTick>
 8001346:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001348:	e00a      	b.n	8001360 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800134a:	f7ff fbeb 	bl	8000b24 <HAL_GetTick>
 800134e:	4602      	mov	r2, r0
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d903      	bls.n	8001360 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e166      	b.n	800162a <HAL_RCC_OscConfig+0x54e>
 800135c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001360:	4b92      	ldr	r3, [pc, #584]	; (80015ac <HAL_RCC_OscConfig+0x4d0>)
 8001362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1ee      	bne.n	800134a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0304 	and.w	r3, r3, #4
 8001374:	2b00      	cmp	r3, #0
 8001376:	f000 80a4 	beq.w	80014c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800137a:	4b8c      	ldr	r3, [pc, #560]	; (80015ac <HAL_RCC_OscConfig+0x4d0>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d10d      	bne.n	80013a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001386:	4b89      	ldr	r3, [pc, #548]	; (80015ac <HAL_RCC_OscConfig+0x4d0>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	4a88      	ldr	r2, [pc, #544]	; (80015ac <HAL_RCC_OscConfig+0x4d0>)
 800138c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001390:	6413      	str	r3, [r2, #64]	; 0x40
 8001392:	4b86      	ldr	r3, [pc, #536]	; (80015ac <HAL_RCC_OscConfig+0x4d0>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800139e:	2301      	movs	r3, #1
 80013a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013a2:	4b83      	ldr	r3, [pc, #524]	; (80015b0 <HAL_RCC_OscConfig+0x4d4>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d118      	bne.n	80013e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80013ae:	4b80      	ldr	r3, [pc, #512]	; (80015b0 <HAL_RCC_OscConfig+0x4d4>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a7f      	ldr	r2, [pc, #508]	; (80015b0 <HAL_RCC_OscConfig+0x4d4>)
 80013b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013ba:	f7ff fbb3 	bl	8000b24 <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013c2:	f7ff fbaf 	bl	8000b24 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b64      	cmp	r3, #100	; 0x64
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e12a      	b.n	800162a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013d4:	4b76      	ldr	r3, [pc, #472]	; (80015b0 <HAL_RCC_OscConfig+0x4d4>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0f0      	beq.n	80013c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d106      	bne.n	80013f6 <HAL_RCC_OscConfig+0x31a>
 80013e8:	4b70      	ldr	r3, [pc, #448]	; (80015ac <HAL_RCC_OscConfig+0x4d0>)
 80013ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ec:	4a6f      	ldr	r2, [pc, #444]	; (80015ac <HAL_RCC_OscConfig+0x4d0>)
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	6713      	str	r3, [r2, #112]	; 0x70
 80013f4:	e02d      	b.n	8001452 <HAL_RCC_OscConfig+0x376>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d10c      	bne.n	8001418 <HAL_RCC_OscConfig+0x33c>
 80013fe:	4b6b      	ldr	r3, [pc, #428]	; (80015ac <HAL_RCC_OscConfig+0x4d0>)
 8001400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001402:	4a6a      	ldr	r2, [pc, #424]	; (80015ac <HAL_RCC_OscConfig+0x4d0>)
 8001404:	f023 0301 	bic.w	r3, r3, #1
 8001408:	6713      	str	r3, [r2, #112]	; 0x70
 800140a:	4b68      	ldr	r3, [pc, #416]	; (80015ac <HAL_RCC_OscConfig+0x4d0>)
 800140c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800140e:	4a67      	ldr	r2, [pc, #412]	; (80015ac <HAL_RCC_OscConfig+0x4d0>)
 8001410:	f023 0304 	bic.w	r3, r3, #4
 8001414:	6713      	str	r3, [r2, #112]	; 0x70
 8001416:	e01c      	b.n	8001452 <HAL_RCC_OscConfig+0x376>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	2b05      	cmp	r3, #5
 800141e:	d10c      	bne.n	800143a <HAL_RCC_OscConfig+0x35e>
 8001420:	4b62      	ldr	r3, [pc, #392]	; (80015ac <HAL_RCC_OscConfig+0x4d0>)
 8001422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001424:	4a61      	ldr	r2, [pc, #388]	; (80015ac <HAL_RCC_OscConfig+0x4d0>)
 8001426:	f043 0304 	orr.w	r3, r3, #4
 800142a:	6713      	str	r3, [r2, #112]	; 0x70
 800142c:	4b5f      	ldr	r3, [pc, #380]	; (80015ac <HAL_RCC_OscConfig+0x4d0>)
 800142e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001430:	4a5e      	ldr	r2, [pc, #376]	; (80015ac <HAL_RCC_OscConfig+0x4d0>)
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	6713      	str	r3, [r2, #112]	; 0x70
 8001438:	e00b      	b.n	8001452 <HAL_RCC_OscConfig+0x376>
 800143a:	4b5c      	ldr	r3, [pc, #368]	; (80015ac <HAL_RCC_OscConfig+0x4d0>)
 800143c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800143e:	4a5b      	ldr	r2, [pc, #364]	; (80015ac <HAL_RCC_OscConfig+0x4d0>)
 8001440:	f023 0301 	bic.w	r3, r3, #1
 8001444:	6713      	str	r3, [r2, #112]	; 0x70
 8001446:	4b59      	ldr	r3, [pc, #356]	; (80015ac <HAL_RCC_OscConfig+0x4d0>)
 8001448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800144a:	4a58      	ldr	r2, [pc, #352]	; (80015ac <HAL_RCC_OscConfig+0x4d0>)
 800144c:	f023 0304 	bic.w	r3, r3, #4
 8001450:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d015      	beq.n	8001486 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800145a:	f7ff fb63 	bl	8000b24 <HAL_GetTick>
 800145e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001460:	e00a      	b.n	8001478 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001462:	f7ff fb5f 	bl	8000b24 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001470:	4293      	cmp	r3, r2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e0d8      	b.n	800162a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001478:	4b4c      	ldr	r3, [pc, #304]	; (80015ac <HAL_RCC_OscConfig+0x4d0>)
 800147a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d0ee      	beq.n	8001462 <HAL_RCC_OscConfig+0x386>
 8001484:	e014      	b.n	80014b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001486:	f7ff fb4d 	bl	8000b24 <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800148c:	e00a      	b.n	80014a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800148e:	f7ff fb49 	bl	8000b24 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	f241 3288 	movw	r2, #5000	; 0x1388
 800149c:	4293      	cmp	r3, r2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e0c2      	b.n	800162a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014a4:	4b41      	ldr	r3, [pc, #260]	; (80015ac <HAL_RCC_OscConfig+0x4d0>)
 80014a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d1ee      	bne.n	800148e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80014b0:	7dfb      	ldrb	r3, [r7, #23]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d105      	bne.n	80014c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014b6:	4b3d      	ldr	r3, [pc, #244]	; (80015ac <HAL_RCC_OscConfig+0x4d0>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	4a3c      	ldr	r2, [pc, #240]	; (80015ac <HAL_RCC_OscConfig+0x4d0>)
 80014bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f000 80ae 	beq.w	8001628 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014cc:	4b37      	ldr	r3, [pc, #220]	; (80015ac <HAL_RCC_OscConfig+0x4d0>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f003 030c 	and.w	r3, r3, #12
 80014d4:	2b08      	cmp	r3, #8
 80014d6:	d06d      	beq.n	80015b4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d14b      	bne.n	8001578 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e0:	4b32      	ldr	r3, [pc, #200]	; (80015ac <HAL_RCC_OscConfig+0x4d0>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a31      	ldr	r2, [pc, #196]	; (80015ac <HAL_RCC_OscConfig+0x4d0>)
 80014e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ec:	f7ff fb1a 	bl	8000b24 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014f4:	f7ff fb16 	bl	8000b24 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e091      	b.n	800162a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001506:	4b29      	ldr	r3, [pc, #164]	; (80015ac <HAL_RCC_OscConfig+0x4d0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f0      	bne.n	80014f4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	69da      	ldr	r2, [r3, #28]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a1b      	ldr	r3, [r3, #32]
 800151a:	431a      	orrs	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001520:	019b      	lsls	r3, r3, #6
 8001522:	431a      	orrs	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001528:	085b      	lsrs	r3, r3, #1
 800152a:	3b01      	subs	r3, #1
 800152c:	041b      	lsls	r3, r3, #16
 800152e:	431a      	orrs	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001534:	061b      	lsls	r3, r3, #24
 8001536:	431a      	orrs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153c:	071b      	lsls	r3, r3, #28
 800153e:	491b      	ldr	r1, [pc, #108]	; (80015ac <HAL_RCC_OscConfig+0x4d0>)
 8001540:	4313      	orrs	r3, r2
 8001542:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001544:	4b19      	ldr	r3, [pc, #100]	; (80015ac <HAL_RCC_OscConfig+0x4d0>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a18      	ldr	r2, [pc, #96]	; (80015ac <HAL_RCC_OscConfig+0x4d0>)
 800154a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800154e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001550:	f7ff fae8 	bl	8000b24 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001558:	f7ff fae4 	bl	8000b24 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e05f      	b.n	800162a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <HAL_RCC_OscConfig+0x4d0>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0f0      	beq.n	8001558 <HAL_RCC_OscConfig+0x47c>
 8001576:	e057      	b.n	8001628 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <HAL_RCC_OscConfig+0x4d0>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a0b      	ldr	r2, [pc, #44]	; (80015ac <HAL_RCC_OscConfig+0x4d0>)
 800157e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001582:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001584:	f7ff face 	bl	8000b24 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800158c:	f7ff faca 	bl	8000b24 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e045      	b.n	800162a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800159e:	4b03      	ldr	r3, [pc, #12]	; (80015ac <HAL_RCC_OscConfig+0x4d0>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1f0      	bne.n	800158c <HAL_RCC_OscConfig+0x4b0>
 80015aa:	e03d      	b.n	8001628 <HAL_RCC_OscConfig+0x54c>
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80015b4:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <HAL_RCC_OscConfig+0x558>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d030      	beq.n	8001624 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d129      	bne.n	8001624 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015da:	429a      	cmp	r2, r3
 80015dc:	d122      	bne.n	8001624 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015e4:	4013      	ands	r3, r2
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015ea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d119      	bne.n	8001624 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fa:	085b      	lsrs	r3, r3, #1
 80015fc:	3b01      	subs	r3, #1
 80015fe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001600:	429a      	cmp	r2, r3
 8001602:	d10f      	bne.n	8001624 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001610:	429a      	cmp	r2, r3
 8001612:	d107      	bne.n	8001624 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001620:	429a      	cmp	r2, r3
 8001622:	d001      	beq.n	8001628 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e000      	b.n	800162a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3718      	adds	r7, #24
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40023800 	.word	0x40023800

08001638 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d101      	bne.n	8001650 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e0d0      	b.n	80017f2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001650:	4b6a      	ldr	r3, [pc, #424]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 030f 	and.w	r3, r3, #15
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	429a      	cmp	r2, r3
 800165c:	d910      	bls.n	8001680 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165e:	4b67      	ldr	r3, [pc, #412]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f023 020f 	bic.w	r2, r3, #15
 8001666:	4965      	ldr	r1, [pc, #404]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	4313      	orrs	r3, r2
 800166c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800166e:	4b63      	ldr	r3, [pc, #396]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	683a      	ldr	r2, [r7, #0]
 8001678:	429a      	cmp	r2, r3
 800167a:	d001      	beq.n	8001680 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e0b8      	b.n	80017f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d020      	beq.n	80016ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	2b00      	cmp	r3, #0
 8001696:	d005      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001698:	4b59      	ldr	r3, [pc, #356]	; (8001800 <HAL_RCC_ClockConfig+0x1c8>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	4a58      	ldr	r2, [pc, #352]	; (8001800 <HAL_RCC_ClockConfig+0x1c8>)
 800169e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0308 	and.w	r3, r3, #8
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d005      	beq.n	80016bc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016b0:	4b53      	ldr	r3, [pc, #332]	; (8001800 <HAL_RCC_ClockConfig+0x1c8>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	4a52      	ldr	r2, [pc, #328]	; (8001800 <HAL_RCC_ClockConfig+0x1c8>)
 80016b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016bc:	4b50      	ldr	r3, [pc, #320]	; (8001800 <HAL_RCC_ClockConfig+0x1c8>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	494d      	ldr	r1, [pc, #308]	; (8001800 <HAL_RCC_ClockConfig+0x1c8>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d040      	beq.n	800175c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d107      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e2:	4b47      	ldr	r3, [pc, #284]	; (8001800 <HAL_RCC_ClockConfig+0x1c8>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d115      	bne.n	800171a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e07f      	b.n	80017f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d107      	bne.n	800170a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016fa:	4b41      	ldr	r3, [pc, #260]	; (8001800 <HAL_RCC_ClockConfig+0x1c8>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d109      	bne.n	800171a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e073      	b.n	80017f2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170a:	4b3d      	ldr	r3, [pc, #244]	; (8001800 <HAL_RCC_ClockConfig+0x1c8>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e06b      	b.n	80017f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800171a:	4b39      	ldr	r3, [pc, #228]	; (8001800 <HAL_RCC_ClockConfig+0x1c8>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f023 0203 	bic.w	r2, r3, #3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	4936      	ldr	r1, [pc, #216]	; (8001800 <HAL_RCC_ClockConfig+0x1c8>)
 8001728:	4313      	orrs	r3, r2
 800172a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800172c:	f7ff f9fa 	bl	8000b24 <HAL_GetTick>
 8001730:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001732:	e00a      	b.n	800174a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001734:	f7ff f9f6 	bl	8000b24 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001742:	4293      	cmp	r3, r2
 8001744:	d901      	bls.n	800174a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e053      	b.n	80017f2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800174a:	4b2d      	ldr	r3, [pc, #180]	; (8001800 <HAL_RCC_ClockConfig+0x1c8>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 020c 	and.w	r2, r3, #12
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	429a      	cmp	r2, r3
 800175a:	d1eb      	bne.n	8001734 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800175c:	4b27      	ldr	r3, [pc, #156]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 030f 	and.w	r3, r3, #15
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	429a      	cmp	r2, r3
 8001768:	d210      	bcs.n	800178c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176a:	4b24      	ldr	r3, [pc, #144]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f023 020f 	bic.w	r2, r3, #15
 8001772:	4922      	ldr	r1, [pc, #136]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	4313      	orrs	r3, r2
 8001778:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800177a:	4b20      	ldr	r3, [pc, #128]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	683a      	ldr	r2, [r7, #0]
 8001784:	429a      	cmp	r2, r3
 8001786:	d001      	beq.n	800178c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e032      	b.n	80017f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b00      	cmp	r3, #0
 8001796:	d008      	beq.n	80017aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001798:	4b19      	ldr	r3, [pc, #100]	; (8001800 <HAL_RCC_ClockConfig+0x1c8>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	4916      	ldr	r1, [pc, #88]	; (8001800 <HAL_RCC_ClockConfig+0x1c8>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d009      	beq.n	80017ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017b6:	4b12      	ldr	r3, [pc, #72]	; (8001800 <HAL_RCC_ClockConfig+0x1c8>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	490e      	ldr	r1, [pc, #56]	; (8001800 <HAL_RCC_ClockConfig+0x1c8>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017ca:	f000 f821 	bl	8001810 <HAL_RCC_GetSysClockFreq>
 80017ce:	4602      	mov	r2, r0
 80017d0:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <HAL_RCC_ClockConfig+0x1c8>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	091b      	lsrs	r3, r3, #4
 80017d6:	f003 030f 	and.w	r3, r3, #15
 80017da:	490a      	ldr	r1, [pc, #40]	; (8001804 <HAL_RCC_ClockConfig+0x1cc>)
 80017dc:	5ccb      	ldrb	r3, [r1, r3]
 80017de:	fa22 f303 	lsr.w	r3, r2, r3
 80017e2:	4a09      	ldr	r2, [pc, #36]	; (8001808 <HAL_RCC_ClockConfig+0x1d0>)
 80017e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <HAL_RCC_ClockConfig+0x1d4>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff f956 	bl	8000a9c <HAL_InitTick>

  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40023c00 	.word	0x40023c00
 8001800:	40023800 	.word	0x40023800
 8001804:	08002e24 	.word	0x08002e24
 8001808:	20000088 	.word	0x20000088
 800180c:	2000008c 	.word	0x2000008c

08001810 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001814:	b090      	sub	sp, #64	; 0x40
 8001816:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	637b      	str	r3, [r7, #52]	; 0x34
 800181c:	2300      	movs	r3, #0
 800181e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001820:	2300      	movs	r3, #0
 8001822:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001828:	4b59      	ldr	r3, [pc, #356]	; (8001990 <HAL_RCC_GetSysClockFreq+0x180>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f003 030c 	and.w	r3, r3, #12
 8001830:	2b08      	cmp	r3, #8
 8001832:	d00d      	beq.n	8001850 <HAL_RCC_GetSysClockFreq+0x40>
 8001834:	2b08      	cmp	r3, #8
 8001836:	f200 80a1 	bhi.w	800197c <HAL_RCC_GetSysClockFreq+0x16c>
 800183a:	2b00      	cmp	r3, #0
 800183c:	d002      	beq.n	8001844 <HAL_RCC_GetSysClockFreq+0x34>
 800183e:	2b04      	cmp	r3, #4
 8001840:	d003      	beq.n	800184a <HAL_RCC_GetSysClockFreq+0x3a>
 8001842:	e09b      	b.n	800197c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001844:	4b53      	ldr	r3, [pc, #332]	; (8001994 <HAL_RCC_GetSysClockFreq+0x184>)
 8001846:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001848:	e09b      	b.n	8001982 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800184a:	4b53      	ldr	r3, [pc, #332]	; (8001998 <HAL_RCC_GetSysClockFreq+0x188>)
 800184c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800184e:	e098      	b.n	8001982 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001850:	4b4f      	ldr	r3, [pc, #316]	; (8001990 <HAL_RCC_GetSysClockFreq+0x180>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001858:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800185a:	4b4d      	ldr	r3, [pc, #308]	; (8001990 <HAL_RCC_GetSysClockFreq+0x180>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d028      	beq.n	80018b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001866:	4b4a      	ldr	r3, [pc, #296]	; (8001990 <HAL_RCC_GetSysClockFreq+0x180>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	099b      	lsrs	r3, r3, #6
 800186c:	2200      	movs	r2, #0
 800186e:	623b      	str	r3, [r7, #32]
 8001870:	627a      	str	r2, [r7, #36]	; 0x24
 8001872:	6a3b      	ldr	r3, [r7, #32]
 8001874:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001878:	2100      	movs	r1, #0
 800187a:	4b47      	ldr	r3, [pc, #284]	; (8001998 <HAL_RCC_GetSysClockFreq+0x188>)
 800187c:	fb03 f201 	mul.w	r2, r3, r1
 8001880:	2300      	movs	r3, #0
 8001882:	fb00 f303 	mul.w	r3, r0, r3
 8001886:	4413      	add	r3, r2
 8001888:	4a43      	ldr	r2, [pc, #268]	; (8001998 <HAL_RCC_GetSysClockFreq+0x188>)
 800188a:	fba0 1202 	umull	r1, r2, r0, r2
 800188e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001890:	460a      	mov	r2, r1
 8001892:	62ba      	str	r2, [r7, #40]	; 0x28
 8001894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001896:	4413      	add	r3, r2
 8001898:	62fb      	str	r3, [r7, #44]	; 0x2c
 800189a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800189c:	2200      	movs	r2, #0
 800189e:	61bb      	str	r3, [r7, #24]
 80018a0:	61fa      	str	r2, [r7, #28]
 80018a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80018aa:	f7fe fccd 	bl	8000248 <__aeabi_uldivmod>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	4613      	mov	r3, r2
 80018b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018b6:	e053      	b.n	8001960 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018b8:	4b35      	ldr	r3, [pc, #212]	; (8001990 <HAL_RCC_GetSysClockFreq+0x180>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	099b      	lsrs	r3, r3, #6
 80018be:	2200      	movs	r2, #0
 80018c0:	613b      	str	r3, [r7, #16]
 80018c2:	617a      	str	r2, [r7, #20]
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80018ca:	f04f 0b00 	mov.w	fp, #0
 80018ce:	4652      	mov	r2, sl
 80018d0:	465b      	mov	r3, fp
 80018d2:	f04f 0000 	mov.w	r0, #0
 80018d6:	f04f 0100 	mov.w	r1, #0
 80018da:	0159      	lsls	r1, r3, #5
 80018dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018e0:	0150      	lsls	r0, r2, #5
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	ebb2 080a 	subs.w	r8, r2, sl
 80018ea:	eb63 090b 	sbc.w	r9, r3, fp
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	f04f 0300 	mov.w	r3, #0
 80018f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80018fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80018fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001902:	ebb2 0408 	subs.w	r4, r2, r8
 8001906:	eb63 0509 	sbc.w	r5, r3, r9
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	f04f 0300 	mov.w	r3, #0
 8001912:	00eb      	lsls	r3, r5, #3
 8001914:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001918:	00e2      	lsls	r2, r4, #3
 800191a:	4614      	mov	r4, r2
 800191c:	461d      	mov	r5, r3
 800191e:	eb14 030a 	adds.w	r3, r4, sl
 8001922:	603b      	str	r3, [r7, #0]
 8001924:	eb45 030b 	adc.w	r3, r5, fp
 8001928:	607b      	str	r3, [r7, #4]
 800192a:	f04f 0200 	mov.w	r2, #0
 800192e:	f04f 0300 	mov.w	r3, #0
 8001932:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001936:	4629      	mov	r1, r5
 8001938:	028b      	lsls	r3, r1, #10
 800193a:	4621      	mov	r1, r4
 800193c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001940:	4621      	mov	r1, r4
 8001942:	028a      	lsls	r2, r1, #10
 8001944:	4610      	mov	r0, r2
 8001946:	4619      	mov	r1, r3
 8001948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800194a:	2200      	movs	r2, #0
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	60fa      	str	r2, [r7, #12]
 8001950:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001954:	f7fe fc78 	bl	8000248 <__aeabi_uldivmod>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	4613      	mov	r3, r2
 800195e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001960:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <HAL_RCC_GetSysClockFreq+0x180>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	0c1b      	lsrs	r3, r3, #16
 8001966:	f003 0303 	and.w	r3, r3, #3
 800196a:	3301      	adds	r3, #1
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001970:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001974:	fbb2 f3f3 	udiv	r3, r2, r3
 8001978:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800197a:	e002      	b.n	8001982 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800197c:	4b05      	ldr	r3, [pc, #20]	; (8001994 <HAL_RCC_GetSysClockFreq+0x184>)
 800197e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001980:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001984:	4618      	mov	r0, r3
 8001986:	3740      	adds	r7, #64	; 0x40
 8001988:	46bd      	mov	sp, r7
 800198a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800198e:	bf00      	nop
 8001990:	40023800 	.word	0x40023800
 8001994:	00f42400 	.word	0x00f42400
 8001998:	017d7840 	.word	0x017d7840

0800199c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019a0:	4b03      	ldr	r3, [pc, #12]	; (80019b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80019a2:	681b      	ldr	r3, [r3, #0]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	20000088 	.word	0x20000088

080019b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019b8:	f7ff fff0 	bl	800199c <HAL_RCC_GetHCLKFreq>
 80019bc:	4602      	mov	r2, r0
 80019be:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	0a9b      	lsrs	r3, r3, #10
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	4903      	ldr	r1, [pc, #12]	; (80019d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019ca:	5ccb      	ldrb	r3, [r1, r3]
 80019cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40023800 	.word	0x40023800
 80019d8:	08002e34 	.word	0x08002e34

080019dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019e0:	f7ff ffdc 	bl	800199c <HAL_RCC_GetHCLKFreq>
 80019e4:	4602      	mov	r2, r0
 80019e6:	4b05      	ldr	r3, [pc, #20]	; (80019fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	0b5b      	lsrs	r3, r3, #13
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	4903      	ldr	r1, [pc, #12]	; (8001a00 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019f2:	5ccb      	ldrb	r3, [r1, r3]
 80019f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40023800 	.word	0x40023800
 8001a00:	08002e34 	.word	0x08002e34

08001a04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b088      	sub	sp, #32
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d012      	beq.n	8001a52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001a2c:	4b69      	ldr	r3, [pc, #420]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	4a68      	ldr	r2, [pc, #416]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a32:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a36:	6093      	str	r3, [r2, #8]
 8001a38:	4b66      	ldr	r3, [pc, #408]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a40:	4964      	ldr	r1, [pc, #400]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d017      	beq.n	8001a8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001a5e:	4b5d      	ldr	r3, [pc, #372]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a6c:	4959      	ldr	r1, [pc, #356]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a7c:	d101      	bne.n	8001a82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d017      	beq.n	8001aca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001a9a:	4b4e      	ldr	r3, [pc, #312]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001aa0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa8:	494a      	ldr	r1, [pc, #296]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ab8:	d101      	bne.n	8001abe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001aba:	2301      	movs	r3, #1
 8001abc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0320 	and.w	r3, r3, #32
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 808b 	beq.w	8001bfe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ae8:	4b3a      	ldr	r3, [pc, #232]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	4a39      	ldr	r2, [pc, #228]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af2:	6413      	str	r3, [r2, #64]	; 0x40
 8001af4:	4b37      	ldr	r3, [pc, #220]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001b00:	4b35      	ldr	r3, [pc, #212]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a34      	ldr	r2, [pc, #208]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b0c:	f7ff f80a 	bl	8000b24 <HAL_GetTick>
 8001b10:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001b12:	e008      	b.n	8001b26 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b14:	f7ff f806 	bl	8000b24 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b64      	cmp	r3, #100	; 0x64
 8001b20:	d901      	bls.n	8001b26 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e38f      	b.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001b26:	4b2c      	ldr	r3, [pc, #176]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d0f0      	beq.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b32:	4b28      	ldr	r3, [pc, #160]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b3a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d035      	beq.n	8001bae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d02e      	beq.n	8001bae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b50:	4b20      	ldr	r3, [pc, #128]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b58:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b5a:	4b1e      	ldr	r3, [pc, #120]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5e:	4a1d      	ldr	r2, [pc, #116]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b64:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b66:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6a:	4a1a      	ldr	r2, [pc, #104]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b70:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001b72:	4a18      	ldr	r2, [pc, #96]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001b78:	4b16      	ldr	r3, [pc, #88]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d114      	bne.n	8001bae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b84:	f7fe ffce 	bl	8000b24 <HAL_GetTick>
 8001b88:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b8a:	e00a      	b.n	8001ba2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b8c:	f7fe ffca 	bl	8000b24 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e351      	b.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba2:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d0ee      	beq.n	8001b8c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001bba:	d111      	bne.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001bbc:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bc8:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001bca:	400b      	ands	r3, r1
 8001bcc:	4901      	ldr	r1, [pc, #4]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	608b      	str	r3, [r1, #8]
 8001bd2:	e00b      	b.n	8001bec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40007000 	.word	0x40007000
 8001bdc:	0ffffcff 	.word	0x0ffffcff
 8001be0:	4bac      	ldr	r3, [pc, #688]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	4aab      	ldr	r2, [pc, #684]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001be6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001bea:	6093      	str	r3, [r2, #8]
 8001bec:	4ba9      	ldr	r3, [pc, #676]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001bee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bf8:	49a6      	ldr	r1, [pc, #664]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0310 	and.w	r3, r3, #16
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d010      	beq.n	8001c2c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001c0a:	4ba2      	ldr	r3, [pc, #648]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c10:	4aa0      	ldr	r2, [pc, #640]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c16:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001c1a:	4b9e      	ldr	r3, [pc, #632]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c1c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c24:	499b      	ldr	r1, [pc, #620]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d00a      	beq.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c38:	4b96      	ldr	r3, [pc, #600]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c46:	4993      	ldr	r1, [pc, #588]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00a      	beq.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001c5a:	4b8e      	ldr	r3, [pc, #568]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c68:	498a      	ldr	r1, [pc, #552]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d00a      	beq.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001c7c:	4b85      	ldr	r3, [pc, #532]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c8a:	4982      	ldr	r1, [pc, #520]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00a      	beq.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001c9e:	4b7d      	ldr	r3, [pc, #500]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cac:	4979      	ldr	r1, [pc, #484]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00a      	beq.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001cc0:	4b74      	ldr	r3, [pc, #464]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc6:	f023 0203 	bic.w	r2, r3, #3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	4971      	ldr	r1, [pc, #452]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00a      	beq.n	8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ce2:	4b6c      	ldr	r3, [pc, #432]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce8:	f023 020c 	bic.w	r2, r3, #12
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cf0:	4968      	ldr	r1, [pc, #416]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d00a      	beq.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d04:	4b63      	ldr	r3, [pc, #396]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d0a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d12:	4960      	ldr	r1, [pc, #384]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00a      	beq.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001d26:	4b5b      	ldr	r3, [pc, #364]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d2c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d34:	4957      	ldr	r1, [pc, #348]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d00a      	beq.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001d48:	4b52      	ldr	r3, [pc, #328]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d56:	494f      	ldr	r1, [pc, #316]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00a      	beq.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001d6a:	4b4a      	ldr	r3, [pc, #296]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d70:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d78:	4946      	ldr	r1, [pc, #280]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d00a      	beq.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001d8c:	4b41      	ldr	r3, [pc, #260]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d92:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9a:	493e      	ldr	r1, [pc, #248]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00a      	beq.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001dae:	4b39      	ldr	r3, [pc, #228]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dbc:	4935      	ldr	r1, [pc, #212]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d00a      	beq.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001dd0:	4b30      	ldr	r3, [pc, #192]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001dde:	492d      	ldr	r1, [pc, #180]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d011      	beq.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001df2:	4b28      	ldr	r3, [pc, #160]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e00:	4924      	ldr	r1, [pc, #144]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e10:	d101      	bne.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001e12:	2301      	movs	r3, #1
 8001e14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0308 	and.w	r3, r3, #8
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001e22:	2301      	movs	r3, #1
 8001e24:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00a      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e32:	4b18      	ldr	r3, [pc, #96]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e38:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e40:	4914      	ldr	r1, [pc, #80]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00b      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001e54:	4b0f      	ldr	r3, [pc, #60]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e64:	490b      	ldr	r1, [pc, #44]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00f      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001e78:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e7e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e88:	4902      	ldr	r1, [pc, #8]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001e90:	e002      	b.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8001e92:	bf00      	nop
 8001e94:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00b      	beq.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001ea4:	4b8a      	ldr	r3, [pc, #552]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001ea6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001eaa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb4:	4986      	ldr	r1, [pc, #536]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00b      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001ec8:	4b81      	ldr	r3, [pc, #516]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001eca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ece:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ed8:	497d      	ldr	r1, [pc, #500]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d006      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 80d6 	beq.w	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001ef4:	4b76      	ldr	r3, [pc, #472]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a75      	ldr	r2, [pc, #468]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001efa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001efe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f00:	f7fe fe10 	bl	8000b24 <HAL_GetTick>
 8001f04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001f08:	f7fe fe0c 	bl	8000b24 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b64      	cmp	r3, #100	; 0x64
 8001f14:	d901      	bls.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e195      	b.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f1a:	4b6d      	ldr	r3, [pc, #436]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f0      	bne.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d021      	beq.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d11d      	bne.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001f3a:	4b65      	ldr	r3, [pc, #404]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f40:	0c1b      	lsrs	r3, r3, #16
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001f48:	4b61      	ldr	r3, [pc, #388]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f4e:	0e1b      	lsrs	r3, r3, #24
 8001f50:	f003 030f 	and.w	r3, r3, #15
 8001f54:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	019a      	lsls	r2, r3, #6
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	041b      	lsls	r3, r3, #16
 8001f60:	431a      	orrs	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	061b      	lsls	r3, r3, #24
 8001f66:	431a      	orrs	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	071b      	lsls	r3, r3, #28
 8001f6e:	4958      	ldr	r1, [pc, #352]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d004      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f8a:	d00a      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d02e      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fa0:	d129      	bne.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001fa2:	4b4b      	ldr	r3, [pc, #300]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fa8:	0c1b      	lsrs	r3, r3, #16
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001fb0:	4b47      	ldr	r3, [pc, #284]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fb6:	0f1b      	lsrs	r3, r3, #28
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	019a      	lsls	r2, r3, #6
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	041b      	lsls	r3, r3, #16
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	061b      	lsls	r3, r3, #24
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	071b      	lsls	r3, r3, #28
 8001fd6:	493e      	ldr	r1, [pc, #248]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001fde:	4b3c      	ldr	r3, [pc, #240]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fe4:	f023 021f 	bic.w	r2, r3, #31
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	3b01      	subs	r3, #1
 8001fee:	4938      	ldr	r1, [pc, #224]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d01d      	beq.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002002:	4b33      	ldr	r3, [pc, #204]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002004:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002008:	0e1b      	lsrs	r3, r3, #24
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002010:	4b2f      	ldr	r3, [pc, #188]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002012:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002016:	0f1b      	lsrs	r3, r3, #28
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	019a      	lsls	r2, r3, #6
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	041b      	lsls	r3, r3, #16
 800202a:	431a      	orrs	r2, r3
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	061b      	lsls	r3, r3, #24
 8002030:	431a      	orrs	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	071b      	lsls	r3, r3, #28
 8002036:	4926      	ldr	r1, [pc, #152]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002038:	4313      	orrs	r3, r2
 800203a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d011      	beq.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	019a      	lsls	r2, r3, #6
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	041b      	lsls	r3, r3, #16
 8002056:	431a      	orrs	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	061b      	lsls	r3, r3, #24
 800205e:	431a      	orrs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	071b      	lsls	r3, r3, #28
 8002066:	491a      	ldr	r1, [pc, #104]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002068:	4313      	orrs	r3, r2
 800206a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800206e:	4b18      	ldr	r3, [pc, #96]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a17      	ldr	r2, [pc, #92]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002074:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002078:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800207a:	f7fe fd53 	bl	8000b24 <HAL_GetTick>
 800207e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002080:	e008      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002082:	f7fe fd4f 	bl	8000b24 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b64      	cmp	r3, #100	; 0x64
 800208e:	d901      	bls.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e0d8      	b.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002094:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0f0      	beq.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	f040 80ce 	bne.w	8002244 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80020a8:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a08      	ldr	r2, [pc, #32]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020b4:	f7fe fd36 	bl	8000b24 <HAL_GetTick>
 80020b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80020ba:	e00b      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80020bc:	f7fe fd32 	bl	8000b24 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b64      	cmp	r3, #100	; 0x64
 80020c8:	d904      	bls.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e0bb      	b.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80020ce:	bf00      	nop
 80020d0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80020d4:	4b5e      	ldr	r3, [pc, #376]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020e0:	d0ec      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d009      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d02e      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	2b00      	cmp	r3, #0
 8002108:	d12a      	bne.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800210a:	4b51      	ldr	r3, [pc, #324]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800210c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002110:	0c1b      	lsrs	r3, r3, #16
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002118:	4b4d      	ldr	r3, [pc, #308]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800211a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800211e:	0f1b      	lsrs	r3, r3, #28
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	019a      	lsls	r2, r3, #6
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	041b      	lsls	r3, r3, #16
 8002130:	431a      	orrs	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	061b      	lsls	r3, r3, #24
 8002138:	431a      	orrs	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	071b      	lsls	r3, r3, #28
 800213e:	4944      	ldr	r1, [pc, #272]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002140:	4313      	orrs	r3, r2
 8002142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002146:	4b42      	ldr	r3, [pc, #264]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002148:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800214c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002154:	3b01      	subs	r3, #1
 8002156:	021b      	lsls	r3, r3, #8
 8002158:	493d      	ldr	r1, [pc, #244]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800215a:	4313      	orrs	r3, r2
 800215c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d022      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002170:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002174:	d11d      	bne.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002176:	4b36      	ldr	r3, [pc, #216]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217c:	0e1b      	lsrs	r3, r3, #24
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002184:	4b32      	ldr	r3, [pc, #200]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800218a:	0f1b      	lsrs	r3, r3, #28
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	019a      	lsls	r2, r3, #6
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	041b      	lsls	r3, r3, #16
 800219e:	431a      	orrs	r2, r3
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	061b      	lsls	r3, r3, #24
 80021a4:	431a      	orrs	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	071b      	lsls	r3, r3, #28
 80021aa:	4929      	ldr	r1, [pc, #164]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d028      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80021be:	4b24      	ldr	r3, [pc, #144]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c4:	0e1b      	lsrs	r3, r3, #24
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80021cc:	4b20      	ldr	r3, [pc, #128]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d2:	0c1b      	lsrs	r3, r3, #16
 80021d4:	f003 0303 	and.w	r3, r3, #3
 80021d8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	019a      	lsls	r2, r3, #6
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	041b      	lsls	r3, r3, #16
 80021e4:	431a      	orrs	r2, r3
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	061b      	lsls	r3, r3, #24
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	071b      	lsls	r3, r3, #28
 80021f2:	4917      	ldr	r1, [pc, #92]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80021fa:	4b15      	ldr	r3, [pc, #84]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002200:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002208:	4911      	ldr	r1, [pc, #68]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800220a:	4313      	orrs	r3, r2
 800220c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002210:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a0e      	ldr	r2, [pc, #56]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800221a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800221c:	f7fe fc82 	bl	8000b24 <HAL_GetTick>
 8002220:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002224:	f7fe fc7e 	bl	8000b24 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b64      	cmp	r3, #100	; 0x64
 8002230:	d901      	bls.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e007      	b.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002236:	4b06      	ldr	r3, [pc, #24]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800223e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002242:	d1ef      	bne.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3720      	adds	r7, #32
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40023800 	.word	0x40023800

08002254 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e040      	b.n	80022e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800226a:	2b00      	cmp	r3, #0
 800226c:	d106      	bne.n	800227c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7fe fb7a 	bl	8000970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2224      	movs	r2, #36	; 0x24
 8002280:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 0201 	bic.w	r2, r2, #1
 8002290:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f974 	bl	8002580 <UART_SetConfig>
 8002298:	4603      	mov	r3, r0
 800229a:	2b01      	cmp	r3, #1
 800229c:	d101      	bne.n	80022a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e022      	b.n	80022e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d002      	beq.n	80022b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 fbcc 	bl	8002a48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f042 0201 	orr.w	r2, r2, #1
 80022de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 fc53 	bl	8002b8c <UART_CheckIdleState>
 80022e6:	4603      	mov	r3, r0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08a      	sub	sp, #40	; 0x28
 80022f4:	af02      	add	r7, sp, #8
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	603b      	str	r3, [r7, #0]
 80022fc:	4613      	mov	r3, r2
 80022fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002304:	2b20      	cmp	r3, #32
 8002306:	d171      	bne.n	80023ec <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d002      	beq.n	8002314 <HAL_UART_Transmit+0x24>
 800230e:	88fb      	ldrh	r3, [r7, #6]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e06a      	b.n	80023ee <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2221      	movs	r2, #33	; 0x21
 8002324:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002326:	f7fe fbfd 	bl	8000b24 <HAL_GetTick>
 800232a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	88fa      	ldrh	r2, [r7, #6]
 8002330:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	88fa      	ldrh	r2, [r7, #6]
 8002338:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002344:	d108      	bne.n	8002358 <HAL_UART_Transmit+0x68>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d104      	bne.n	8002358 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	61bb      	str	r3, [r7, #24]
 8002356:	e003      	b.n	8002360 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800235c:	2300      	movs	r3, #0
 800235e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002360:	e02c      	b.n	80023bc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	2200      	movs	r2, #0
 800236a:	2180      	movs	r1, #128	; 0x80
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f000 fc5a 	bl	8002c26 <UART_WaitOnFlagUntilTimeout>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e038      	b.n	80023ee <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10b      	bne.n	800239a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	881b      	ldrh	r3, [r3, #0]
 8002386:	461a      	mov	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002390:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	3302      	adds	r3, #2
 8002396:	61bb      	str	r3, [r7, #24]
 8002398:	e007      	b.n	80023aa <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	781a      	ldrb	r2, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	3301      	adds	r3, #1
 80023a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	3b01      	subs	r3, #1
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1cc      	bne.n	8002362 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	2200      	movs	r2, #0
 80023d0:	2140      	movs	r1, #64	; 0x40
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 fc27 	bl	8002c26 <UART_WaitOnFlagUntilTimeout>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e005      	b.n	80023ee <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2220      	movs	r2, #32
 80023e6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	e000      	b.n	80023ee <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80023ec:	2302      	movs	r3, #2
  }
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3720      	adds	r7, #32
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b08a      	sub	sp, #40	; 0x28
 80023fa:	af02      	add	r7, sp, #8
 80023fc:	60f8      	str	r0, [r7, #12]
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	603b      	str	r3, [r7, #0]
 8002402:	4613      	mov	r3, r2
 8002404:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800240c:	2b20      	cmp	r3, #32
 800240e:	f040 80b1 	bne.w	8002574 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d002      	beq.n	800241e <HAL_UART_Receive+0x28>
 8002418:	88fb      	ldrh	r3, [r7, #6]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e0a9      	b.n	8002576 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2200      	movs	r2, #0
 8002426:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2222      	movs	r2, #34	; 0x22
 800242e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002438:	f7fe fb74 	bl	8000b24 <HAL_GetTick>
 800243c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	88fa      	ldrh	r2, [r7, #6]
 8002442:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	88fa      	ldrh	r2, [r7, #6]
 800244a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002456:	d10e      	bne.n	8002476 <HAL_UART_Receive+0x80>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d105      	bne.n	800246c <HAL_UART_Receive+0x76>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002466:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800246a:	e02d      	b.n	80024c8 <HAL_UART_Receive+0xd2>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	22ff      	movs	r2, #255	; 0xff
 8002470:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002474:	e028      	b.n	80024c8 <HAL_UART_Receive+0xd2>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10d      	bne.n	800249a <HAL_UART_Receive+0xa4>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d104      	bne.n	8002490 <HAL_UART_Receive+0x9a>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	22ff      	movs	r2, #255	; 0xff
 800248a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800248e:	e01b      	b.n	80024c8 <HAL_UART_Receive+0xd2>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	227f      	movs	r2, #127	; 0x7f
 8002494:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002498:	e016      	b.n	80024c8 <HAL_UART_Receive+0xd2>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024a2:	d10d      	bne.n	80024c0 <HAL_UART_Receive+0xca>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d104      	bne.n	80024b6 <HAL_UART_Receive+0xc0>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	227f      	movs	r2, #127	; 0x7f
 80024b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80024b4:	e008      	b.n	80024c8 <HAL_UART_Receive+0xd2>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	223f      	movs	r2, #63	; 0x3f
 80024ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80024be:	e003      	b.n	80024c8 <HAL_UART_Receive+0xd2>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80024ce:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024d8:	d108      	bne.n	80024ec <HAL_UART_Receive+0xf6>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d104      	bne.n	80024ec <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	61bb      	str	r3, [r7, #24]
 80024ea:	e003      	b.n	80024f4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024f0:	2300      	movs	r3, #0
 80024f2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80024f4:	e032      	b.n	800255c <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	2200      	movs	r2, #0
 80024fe:	2120      	movs	r1, #32
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f000 fb90 	bl	8002c26 <UART_WaitOnFlagUntilTimeout>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e032      	b.n	8002576 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10c      	bne.n	8002530 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251c:	b29a      	uxth	r2, r3
 800251e:	8a7b      	ldrh	r3, [r7, #18]
 8002520:	4013      	ands	r3, r2
 8002522:	b29a      	uxth	r2, r3
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	3302      	adds	r3, #2
 800252c:	61bb      	str	r3, [r7, #24]
 800252e:	e00c      	b.n	800254a <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	b2da      	uxtb	r2, r3
 8002538:	8a7b      	ldrh	r3, [r7, #18]
 800253a:	b2db      	uxtb	r3, r3
 800253c:	4013      	ands	r3, r2
 800253e:	b2da      	uxtb	r2, r3
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	3301      	adds	r3, #1
 8002548:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002550:	b29b      	uxth	r3, r3
 8002552:	3b01      	subs	r3, #1
 8002554:	b29a      	uxth	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002562:	b29b      	uxth	r3, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1c6      	bne.n	80024f6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2220      	movs	r2, #32
 800256c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002570:	2300      	movs	r3, #0
 8002572:	e000      	b.n	8002576 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8002574:	2302      	movs	r3, #2
  }
}
 8002576:	4618      	mov	r0, r3
 8002578:	3720      	adds	r7, #32
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
	...

08002580 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b088      	sub	sp, #32
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002588:	2300      	movs	r3, #0
 800258a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	431a      	orrs	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	4ba6      	ldr	r3, [pc, #664]	; (8002844 <UART_SetConfig+0x2c4>)
 80025ac:	4013      	ands	r3, r2
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6812      	ldr	r2, [r2, #0]
 80025b2:	6979      	ldr	r1, [r7, #20]
 80025b4:	430b      	orrs	r3, r1
 80025b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68da      	ldr	r2, [r3, #12]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	697a      	ldr	r2, [r7, #20]
 80025da:	4313      	orrs	r3, r2
 80025dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a94      	ldr	r2, [pc, #592]	; (8002848 <UART_SetConfig+0x2c8>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d120      	bne.n	800263e <UART_SetConfig+0xbe>
 80025fc:	4b93      	ldr	r3, [pc, #588]	; (800284c <UART_SetConfig+0x2cc>)
 80025fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002602:	f003 0303 	and.w	r3, r3, #3
 8002606:	2b03      	cmp	r3, #3
 8002608:	d816      	bhi.n	8002638 <UART_SetConfig+0xb8>
 800260a:	a201      	add	r2, pc, #4	; (adr r2, 8002610 <UART_SetConfig+0x90>)
 800260c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002610:	08002621 	.word	0x08002621
 8002614:	0800262d 	.word	0x0800262d
 8002618:	08002627 	.word	0x08002627
 800261c:	08002633 	.word	0x08002633
 8002620:	2301      	movs	r3, #1
 8002622:	77fb      	strb	r3, [r7, #31]
 8002624:	e150      	b.n	80028c8 <UART_SetConfig+0x348>
 8002626:	2302      	movs	r3, #2
 8002628:	77fb      	strb	r3, [r7, #31]
 800262a:	e14d      	b.n	80028c8 <UART_SetConfig+0x348>
 800262c:	2304      	movs	r3, #4
 800262e:	77fb      	strb	r3, [r7, #31]
 8002630:	e14a      	b.n	80028c8 <UART_SetConfig+0x348>
 8002632:	2308      	movs	r3, #8
 8002634:	77fb      	strb	r3, [r7, #31]
 8002636:	e147      	b.n	80028c8 <UART_SetConfig+0x348>
 8002638:	2310      	movs	r3, #16
 800263a:	77fb      	strb	r3, [r7, #31]
 800263c:	e144      	b.n	80028c8 <UART_SetConfig+0x348>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a83      	ldr	r2, [pc, #524]	; (8002850 <UART_SetConfig+0x2d0>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d132      	bne.n	80026ae <UART_SetConfig+0x12e>
 8002648:	4b80      	ldr	r3, [pc, #512]	; (800284c <UART_SetConfig+0x2cc>)
 800264a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264e:	f003 030c 	and.w	r3, r3, #12
 8002652:	2b0c      	cmp	r3, #12
 8002654:	d828      	bhi.n	80026a8 <UART_SetConfig+0x128>
 8002656:	a201      	add	r2, pc, #4	; (adr r2, 800265c <UART_SetConfig+0xdc>)
 8002658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265c:	08002691 	.word	0x08002691
 8002660:	080026a9 	.word	0x080026a9
 8002664:	080026a9 	.word	0x080026a9
 8002668:	080026a9 	.word	0x080026a9
 800266c:	0800269d 	.word	0x0800269d
 8002670:	080026a9 	.word	0x080026a9
 8002674:	080026a9 	.word	0x080026a9
 8002678:	080026a9 	.word	0x080026a9
 800267c:	08002697 	.word	0x08002697
 8002680:	080026a9 	.word	0x080026a9
 8002684:	080026a9 	.word	0x080026a9
 8002688:	080026a9 	.word	0x080026a9
 800268c:	080026a3 	.word	0x080026a3
 8002690:	2300      	movs	r3, #0
 8002692:	77fb      	strb	r3, [r7, #31]
 8002694:	e118      	b.n	80028c8 <UART_SetConfig+0x348>
 8002696:	2302      	movs	r3, #2
 8002698:	77fb      	strb	r3, [r7, #31]
 800269a:	e115      	b.n	80028c8 <UART_SetConfig+0x348>
 800269c:	2304      	movs	r3, #4
 800269e:	77fb      	strb	r3, [r7, #31]
 80026a0:	e112      	b.n	80028c8 <UART_SetConfig+0x348>
 80026a2:	2308      	movs	r3, #8
 80026a4:	77fb      	strb	r3, [r7, #31]
 80026a6:	e10f      	b.n	80028c8 <UART_SetConfig+0x348>
 80026a8:	2310      	movs	r3, #16
 80026aa:	77fb      	strb	r3, [r7, #31]
 80026ac:	e10c      	b.n	80028c8 <UART_SetConfig+0x348>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a68      	ldr	r2, [pc, #416]	; (8002854 <UART_SetConfig+0x2d4>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d120      	bne.n	80026fa <UART_SetConfig+0x17a>
 80026b8:	4b64      	ldr	r3, [pc, #400]	; (800284c <UART_SetConfig+0x2cc>)
 80026ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026be:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80026c2:	2b30      	cmp	r3, #48	; 0x30
 80026c4:	d013      	beq.n	80026ee <UART_SetConfig+0x16e>
 80026c6:	2b30      	cmp	r3, #48	; 0x30
 80026c8:	d814      	bhi.n	80026f4 <UART_SetConfig+0x174>
 80026ca:	2b20      	cmp	r3, #32
 80026cc:	d009      	beq.n	80026e2 <UART_SetConfig+0x162>
 80026ce:	2b20      	cmp	r3, #32
 80026d0:	d810      	bhi.n	80026f4 <UART_SetConfig+0x174>
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d002      	beq.n	80026dc <UART_SetConfig+0x15c>
 80026d6:	2b10      	cmp	r3, #16
 80026d8:	d006      	beq.n	80026e8 <UART_SetConfig+0x168>
 80026da:	e00b      	b.n	80026f4 <UART_SetConfig+0x174>
 80026dc:	2300      	movs	r3, #0
 80026de:	77fb      	strb	r3, [r7, #31]
 80026e0:	e0f2      	b.n	80028c8 <UART_SetConfig+0x348>
 80026e2:	2302      	movs	r3, #2
 80026e4:	77fb      	strb	r3, [r7, #31]
 80026e6:	e0ef      	b.n	80028c8 <UART_SetConfig+0x348>
 80026e8:	2304      	movs	r3, #4
 80026ea:	77fb      	strb	r3, [r7, #31]
 80026ec:	e0ec      	b.n	80028c8 <UART_SetConfig+0x348>
 80026ee:	2308      	movs	r3, #8
 80026f0:	77fb      	strb	r3, [r7, #31]
 80026f2:	e0e9      	b.n	80028c8 <UART_SetConfig+0x348>
 80026f4:	2310      	movs	r3, #16
 80026f6:	77fb      	strb	r3, [r7, #31]
 80026f8:	e0e6      	b.n	80028c8 <UART_SetConfig+0x348>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a56      	ldr	r2, [pc, #344]	; (8002858 <UART_SetConfig+0x2d8>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d120      	bne.n	8002746 <UART_SetConfig+0x1c6>
 8002704:	4b51      	ldr	r3, [pc, #324]	; (800284c <UART_SetConfig+0x2cc>)
 8002706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800270e:	2bc0      	cmp	r3, #192	; 0xc0
 8002710:	d013      	beq.n	800273a <UART_SetConfig+0x1ba>
 8002712:	2bc0      	cmp	r3, #192	; 0xc0
 8002714:	d814      	bhi.n	8002740 <UART_SetConfig+0x1c0>
 8002716:	2b80      	cmp	r3, #128	; 0x80
 8002718:	d009      	beq.n	800272e <UART_SetConfig+0x1ae>
 800271a:	2b80      	cmp	r3, #128	; 0x80
 800271c:	d810      	bhi.n	8002740 <UART_SetConfig+0x1c0>
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <UART_SetConfig+0x1a8>
 8002722:	2b40      	cmp	r3, #64	; 0x40
 8002724:	d006      	beq.n	8002734 <UART_SetConfig+0x1b4>
 8002726:	e00b      	b.n	8002740 <UART_SetConfig+0x1c0>
 8002728:	2300      	movs	r3, #0
 800272a:	77fb      	strb	r3, [r7, #31]
 800272c:	e0cc      	b.n	80028c8 <UART_SetConfig+0x348>
 800272e:	2302      	movs	r3, #2
 8002730:	77fb      	strb	r3, [r7, #31]
 8002732:	e0c9      	b.n	80028c8 <UART_SetConfig+0x348>
 8002734:	2304      	movs	r3, #4
 8002736:	77fb      	strb	r3, [r7, #31]
 8002738:	e0c6      	b.n	80028c8 <UART_SetConfig+0x348>
 800273a:	2308      	movs	r3, #8
 800273c:	77fb      	strb	r3, [r7, #31]
 800273e:	e0c3      	b.n	80028c8 <UART_SetConfig+0x348>
 8002740:	2310      	movs	r3, #16
 8002742:	77fb      	strb	r3, [r7, #31]
 8002744:	e0c0      	b.n	80028c8 <UART_SetConfig+0x348>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a44      	ldr	r2, [pc, #272]	; (800285c <UART_SetConfig+0x2dc>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d125      	bne.n	800279c <UART_SetConfig+0x21c>
 8002750:	4b3e      	ldr	r3, [pc, #248]	; (800284c <UART_SetConfig+0x2cc>)
 8002752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800275a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800275e:	d017      	beq.n	8002790 <UART_SetConfig+0x210>
 8002760:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002764:	d817      	bhi.n	8002796 <UART_SetConfig+0x216>
 8002766:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800276a:	d00b      	beq.n	8002784 <UART_SetConfig+0x204>
 800276c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002770:	d811      	bhi.n	8002796 <UART_SetConfig+0x216>
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <UART_SetConfig+0x1fe>
 8002776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800277a:	d006      	beq.n	800278a <UART_SetConfig+0x20a>
 800277c:	e00b      	b.n	8002796 <UART_SetConfig+0x216>
 800277e:	2300      	movs	r3, #0
 8002780:	77fb      	strb	r3, [r7, #31]
 8002782:	e0a1      	b.n	80028c8 <UART_SetConfig+0x348>
 8002784:	2302      	movs	r3, #2
 8002786:	77fb      	strb	r3, [r7, #31]
 8002788:	e09e      	b.n	80028c8 <UART_SetConfig+0x348>
 800278a:	2304      	movs	r3, #4
 800278c:	77fb      	strb	r3, [r7, #31]
 800278e:	e09b      	b.n	80028c8 <UART_SetConfig+0x348>
 8002790:	2308      	movs	r3, #8
 8002792:	77fb      	strb	r3, [r7, #31]
 8002794:	e098      	b.n	80028c8 <UART_SetConfig+0x348>
 8002796:	2310      	movs	r3, #16
 8002798:	77fb      	strb	r3, [r7, #31]
 800279a:	e095      	b.n	80028c8 <UART_SetConfig+0x348>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a2f      	ldr	r2, [pc, #188]	; (8002860 <UART_SetConfig+0x2e0>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d125      	bne.n	80027f2 <UART_SetConfig+0x272>
 80027a6:	4b29      	ldr	r3, [pc, #164]	; (800284c <UART_SetConfig+0x2cc>)
 80027a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80027b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80027b4:	d017      	beq.n	80027e6 <UART_SetConfig+0x266>
 80027b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80027ba:	d817      	bhi.n	80027ec <UART_SetConfig+0x26c>
 80027bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027c0:	d00b      	beq.n	80027da <UART_SetConfig+0x25a>
 80027c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027c6:	d811      	bhi.n	80027ec <UART_SetConfig+0x26c>
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <UART_SetConfig+0x254>
 80027cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027d0:	d006      	beq.n	80027e0 <UART_SetConfig+0x260>
 80027d2:	e00b      	b.n	80027ec <UART_SetConfig+0x26c>
 80027d4:	2301      	movs	r3, #1
 80027d6:	77fb      	strb	r3, [r7, #31]
 80027d8:	e076      	b.n	80028c8 <UART_SetConfig+0x348>
 80027da:	2302      	movs	r3, #2
 80027dc:	77fb      	strb	r3, [r7, #31]
 80027de:	e073      	b.n	80028c8 <UART_SetConfig+0x348>
 80027e0:	2304      	movs	r3, #4
 80027e2:	77fb      	strb	r3, [r7, #31]
 80027e4:	e070      	b.n	80028c8 <UART_SetConfig+0x348>
 80027e6:	2308      	movs	r3, #8
 80027e8:	77fb      	strb	r3, [r7, #31]
 80027ea:	e06d      	b.n	80028c8 <UART_SetConfig+0x348>
 80027ec:	2310      	movs	r3, #16
 80027ee:	77fb      	strb	r3, [r7, #31]
 80027f0:	e06a      	b.n	80028c8 <UART_SetConfig+0x348>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a1b      	ldr	r2, [pc, #108]	; (8002864 <UART_SetConfig+0x2e4>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d138      	bne.n	800286e <UART_SetConfig+0x2ee>
 80027fc:	4b13      	ldr	r3, [pc, #76]	; (800284c <UART_SetConfig+0x2cc>)
 80027fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002802:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002806:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800280a:	d017      	beq.n	800283c <UART_SetConfig+0x2bc>
 800280c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002810:	d82a      	bhi.n	8002868 <UART_SetConfig+0x2e8>
 8002812:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002816:	d00b      	beq.n	8002830 <UART_SetConfig+0x2b0>
 8002818:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800281c:	d824      	bhi.n	8002868 <UART_SetConfig+0x2e8>
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <UART_SetConfig+0x2aa>
 8002822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002826:	d006      	beq.n	8002836 <UART_SetConfig+0x2b6>
 8002828:	e01e      	b.n	8002868 <UART_SetConfig+0x2e8>
 800282a:	2300      	movs	r3, #0
 800282c:	77fb      	strb	r3, [r7, #31]
 800282e:	e04b      	b.n	80028c8 <UART_SetConfig+0x348>
 8002830:	2302      	movs	r3, #2
 8002832:	77fb      	strb	r3, [r7, #31]
 8002834:	e048      	b.n	80028c8 <UART_SetConfig+0x348>
 8002836:	2304      	movs	r3, #4
 8002838:	77fb      	strb	r3, [r7, #31]
 800283a:	e045      	b.n	80028c8 <UART_SetConfig+0x348>
 800283c:	2308      	movs	r3, #8
 800283e:	77fb      	strb	r3, [r7, #31]
 8002840:	e042      	b.n	80028c8 <UART_SetConfig+0x348>
 8002842:	bf00      	nop
 8002844:	efff69f3 	.word	0xefff69f3
 8002848:	40011000 	.word	0x40011000
 800284c:	40023800 	.word	0x40023800
 8002850:	40004400 	.word	0x40004400
 8002854:	40004800 	.word	0x40004800
 8002858:	40004c00 	.word	0x40004c00
 800285c:	40005000 	.word	0x40005000
 8002860:	40011400 	.word	0x40011400
 8002864:	40007800 	.word	0x40007800
 8002868:	2310      	movs	r3, #16
 800286a:	77fb      	strb	r3, [r7, #31]
 800286c:	e02c      	b.n	80028c8 <UART_SetConfig+0x348>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a72      	ldr	r2, [pc, #456]	; (8002a3c <UART_SetConfig+0x4bc>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d125      	bne.n	80028c4 <UART_SetConfig+0x344>
 8002878:	4b71      	ldr	r3, [pc, #452]	; (8002a40 <UART_SetConfig+0x4c0>)
 800287a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002882:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002886:	d017      	beq.n	80028b8 <UART_SetConfig+0x338>
 8002888:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800288c:	d817      	bhi.n	80028be <UART_SetConfig+0x33e>
 800288e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002892:	d00b      	beq.n	80028ac <UART_SetConfig+0x32c>
 8002894:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002898:	d811      	bhi.n	80028be <UART_SetConfig+0x33e>
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <UART_SetConfig+0x326>
 800289e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028a2:	d006      	beq.n	80028b2 <UART_SetConfig+0x332>
 80028a4:	e00b      	b.n	80028be <UART_SetConfig+0x33e>
 80028a6:	2300      	movs	r3, #0
 80028a8:	77fb      	strb	r3, [r7, #31]
 80028aa:	e00d      	b.n	80028c8 <UART_SetConfig+0x348>
 80028ac:	2302      	movs	r3, #2
 80028ae:	77fb      	strb	r3, [r7, #31]
 80028b0:	e00a      	b.n	80028c8 <UART_SetConfig+0x348>
 80028b2:	2304      	movs	r3, #4
 80028b4:	77fb      	strb	r3, [r7, #31]
 80028b6:	e007      	b.n	80028c8 <UART_SetConfig+0x348>
 80028b8:	2308      	movs	r3, #8
 80028ba:	77fb      	strb	r3, [r7, #31]
 80028bc:	e004      	b.n	80028c8 <UART_SetConfig+0x348>
 80028be:	2310      	movs	r3, #16
 80028c0:	77fb      	strb	r3, [r7, #31]
 80028c2:	e001      	b.n	80028c8 <UART_SetConfig+0x348>
 80028c4:	2310      	movs	r3, #16
 80028c6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	69db      	ldr	r3, [r3, #28]
 80028cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028d0:	d15b      	bne.n	800298a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80028d2:	7ffb      	ldrb	r3, [r7, #31]
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	d828      	bhi.n	800292a <UART_SetConfig+0x3aa>
 80028d8:	a201      	add	r2, pc, #4	; (adr r2, 80028e0 <UART_SetConfig+0x360>)
 80028da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028de:	bf00      	nop
 80028e0:	08002905 	.word	0x08002905
 80028e4:	0800290d 	.word	0x0800290d
 80028e8:	08002915 	.word	0x08002915
 80028ec:	0800292b 	.word	0x0800292b
 80028f0:	0800291b 	.word	0x0800291b
 80028f4:	0800292b 	.word	0x0800292b
 80028f8:	0800292b 	.word	0x0800292b
 80028fc:	0800292b 	.word	0x0800292b
 8002900:	08002923 	.word	0x08002923
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002904:	f7ff f856 	bl	80019b4 <HAL_RCC_GetPCLK1Freq>
 8002908:	61b8      	str	r0, [r7, #24]
        break;
 800290a:	e013      	b.n	8002934 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800290c:	f7ff f866 	bl	80019dc <HAL_RCC_GetPCLK2Freq>
 8002910:	61b8      	str	r0, [r7, #24]
        break;
 8002912:	e00f      	b.n	8002934 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002914:	4b4b      	ldr	r3, [pc, #300]	; (8002a44 <UART_SetConfig+0x4c4>)
 8002916:	61bb      	str	r3, [r7, #24]
        break;
 8002918:	e00c      	b.n	8002934 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800291a:	f7fe ff79 	bl	8001810 <HAL_RCC_GetSysClockFreq>
 800291e:	61b8      	str	r0, [r7, #24]
        break;
 8002920:	e008      	b.n	8002934 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002926:	61bb      	str	r3, [r7, #24]
        break;
 8002928:	e004      	b.n	8002934 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800292a:	2300      	movs	r3, #0
 800292c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	77bb      	strb	r3, [r7, #30]
        break;
 8002932:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d074      	beq.n	8002a24 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	005a      	lsls	r2, r3, #1
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	085b      	lsrs	r3, r3, #1
 8002944:	441a      	add	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	fbb2 f3f3 	udiv	r3, r2, r3
 800294e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	2b0f      	cmp	r3, #15
 8002954:	d916      	bls.n	8002984 <UART_SetConfig+0x404>
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800295c:	d212      	bcs.n	8002984 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	b29b      	uxth	r3, r3
 8002962:	f023 030f 	bic.w	r3, r3, #15
 8002966:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	085b      	lsrs	r3, r3, #1
 800296c:	b29b      	uxth	r3, r3
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	b29a      	uxth	r2, r3
 8002974:	89fb      	ldrh	r3, [r7, #14]
 8002976:	4313      	orrs	r3, r2
 8002978:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	89fa      	ldrh	r2, [r7, #14]
 8002980:	60da      	str	r2, [r3, #12]
 8002982:	e04f      	b.n	8002a24 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	77bb      	strb	r3, [r7, #30]
 8002988:	e04c      	b.n	8002a24 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800298a:	7ffb      	ldrb	r3, [r7, #31]
 800298c:	2b08      	cmp	r3, #8
 800298e:	d828      	bhi.n	80029e2 <UART_SetConfig+0x462>
 8002990:	a201      	add	r2, pc, #4	; (adr r2, 8002998 <UART_SetConfig+0x418>)
 8002992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002996:	bf00      	nop
 8002998:	080029bd 	.word	0x080029bd
 800299c:	080029c5 	.word	0x080029c5
 80029a0:	080029cd 	.word	0x080029cd
 80029a4:	080029e3 	.word	0x080029e3
 80029a8:	080029d3 	.word	0x080029d3
 80029ac:	080029e3 	.word	0x080029e3
 80029b0:	080029e3 	.word	0x080029e3
 80029b4:	080029e3 	.word	0x080029e3
 80029b8:	080029db 	.word	0x080029db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029bc:	f7fe fffa 	bl	80019b4 <HAL_RCC_GetPCLK1Freq>
 80029c0:	61b8      	str	r0, [r7, #24]
        break;
 80029c2:	e013      	b.n	80029ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80029c4:	f7ff f80a 	bl	80019dc <HAL_RCC_GetPCLK2Freq>
 80029c8:	61b8      	str	r0, [r7, #24]
        break;
 80029ca:	e00f      	b.n	80029ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029cc:	4b1d      	ldr	r3, [pc, #116]	; (8002a44 <UART_SetConfig+0x4c4>)
 80029ce:	61bb      	str	r3, [r7, #24]
        break;
 80029d0:	e00c      	b.n	80029ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029d2:	f7fe ff1d 	bl	8001810 <HAL_RCC_GetSysClockFreq>
 80029d6:	61b8      	str	r0, [r7, #24]
        break;
 80029d8:	e008      	b.n	80029ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029de:	61bb      	str	r3, [r7, #24]
        break;
 80029e0:	e004      	b.n	80029ec <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	77bb      	strb	r3, [r7, #30]
        break;
 80029ea:	bf00      	nop
    }

    if (pclk != 0U)
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d018      	beq.n	8002a24 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	085a      	lsrs	r2, r3, #1
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	441a      	add	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a04:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	2b0f      	cmp	r3, #15
 8002a0a:	d909      	bls.n	8002a20 <UART_SetConfig+0x4a0>
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a12:	d205      	bcs.n	8002a20 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	60da      	str	r2, [r3, #12]
 8002a1e:	e001      	b.n	8002a24 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002a30:	7fbb      	ldrb	r3, [r7, #30]
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3720      	adds	r7, #32
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40007c00 	.word	0x40007c00
 8002a40:	40023800 	.word	0x40023800
 8002a44:	00f42400 	.word	0x00f42400

08002a48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00a      	beq.n	8002a72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00a      	beq.n	8002a94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00a      	beq.n	8002ab6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	f003 0308 	and.w	r3, r3, #8
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00a      	beq.n	8002ad8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002adc:	f003 0310 	and.w	r3, r3, #16
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00a      	beq.n	8002afa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	f003 0320 	and.w	r3, r3, #32
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00a      	beq.n	8002b1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d01a      	beq.n	8002b5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b46:	d10a      	bne.n	8002b5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00a      	beq.n	8002b80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	605a      	str	r2, [r3, #4]
  }
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af02      	add	r7, sp, #8
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b9c:	f7fd ffc2 	bl	8000b24 <HAL_GetTick>
 8002ba0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0308 	and.w	r3, r3, #8
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d10e      	bne.n	8002bce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f831 	bl	8002c26 <UART_WaitOnFlagUntilTimeout>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e027      	b.n	8002c1e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b04      	cmp	r3, #4
 8002bda:	d10e      	bne.n	8002bfa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002be0:	9300      	str	r3, [sp, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f81b 	bl	8002c26 <UART_WaitOnFlagUntilTimeout>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e011      	b.n	8002c1e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2220      	movs	r2, #32
 8002c04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b09c      	sub	sp, #112	; 0x70
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	60f8      	str	r0, [r7, #12]
 8002c2e:	60b9      	str	r1, [r7, #8]
 8002c30:	603b      	str	r3, [r7, #0]
 8002c32:	4613      	mov	r3, r2
 8002c34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c36:	e0a7      	b.n	8002d88 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3e:	f000 80a3 	beq.w	8002d88 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c42:	f7fd ff6f 	bl	8000b24 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d302      	bcc.n	8002c58 <UART_WaitOnFlagUntilTimeout+0x32>
 8002c52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d13f      	bne.n	8002cd8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c60:	e853 3f00 	ldrex	r3, [r3]
 8002c64:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c68:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c6c:	667b      	str	r3, [r7, #100]	; 0x64
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	461a      	mov	r2, r3
 8002c74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c78:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c7a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002c7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002c7e:	e841 2300 	strex	r3, r2, [r1]
 8002c82:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002c84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1e6      	bne.n	8002c58 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	3308      	adds	r3, #8
 8002c90:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c94:	e853 3f00 	ldrex	r3, [r3]
 8002c98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9c:	f023 0301 	bic.w	r3, r3, #1
 8002ca0:	663b      	str	r3, [r7, #96]	; 0x60
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	3308      	adds	r3, #8
 8002ca8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002caa:	64ba      	str	r2, [r7, #72]	; 0x48
 8002cac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002cb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002cb2:	e841 2300 	strex	r3, r2, [r1]
 8002cb6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002cb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1e5      	bne.n	8002c8a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e068      	b.n	8002daa <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0304 	and.w	r3, r3, #4
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d050      	beq.n	8002d88 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	69db      	ldr	r3, [r3, #28]
 8002cec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cf4:	d148      	bne.n	8002d88 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cfe:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d08:	e853 3f00 	ldrex	r3, [r3]
 8002d0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d1e:	637b      	str	r3, [r7, #52]	; 0x34
 8002d20:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d26:	e841 2300 	strex	r3, r2, [r1]
 8002d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1e6      	bne.n	8002d00 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	3308      	adds	r3, #8
 8002d38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	e853 3f00 	ldrex	r3, [r3]
 8002d40:	613b      	str	r3, [r7, #16]
   return(result);
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	f023 0301 	bic.w	r3, r3, #1
 8002d48:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	3308      	adds	r3, #8
 8002d50:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002d52:	623a      	str	r2, [r7, #32]
 8002d54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d56:	69f9      	ldr	r1, [r7, #28]
 8002d58:	6a3a      	ldr	r2, [r7, #32]
 8002d5a:	e841 2300 	strex	r3, r2, [r1]
 8002d5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1e5      	bne.n	8002d32 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2220      	movs	r2, #32
 8002d6a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e010      	b.n	8002daa <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	69da      	ldr	r2, [r3, #28]
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	4013      	ands	r3, r2
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	bf0c      	ite	eq
 8002d98:	2301      	moveq	r3, #1
 8002d9a:	2300      	movne	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	461a      	mov	r2, r3
 8002da0:	79fb      	ldrb	r3, [r7, #7]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	f43f af48 	beq.w	8002c38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3770      	adds	r7, #112	; 0x70
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <memset>:
 8002db2:	4402      	add	r2, r0
 8002db4:	4603      	mov	r3, r0
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d100      	bne.n	8002dbc <memset+0xa>
 8002dba:	4770      	bx	lr
 8002dbc:	f803 1b01 	strb.w	r1, [r3], #1
 8002dc0:	e7f9      	b.n	8002db6 <memset+0x4>
	...

08002dc4 <__libc_init_array>:
 8002dc4:	b570      	push	{r4, r5, r6, lr}
 8002dc6:	4d0d      	ldr	r5, [pc, #52]	; (8002dfc <__libc_init_array+0x38>)
 8002dc8:	4c0d      	ldr	r4, [pc, #52]	; (8002e00 <__libc_init_array+0x3c>)
 8002dca:	1b64      	subs	r4, r4, r5
 8002dcc:	10a4      	asrs	r4, r4, #2
 8002dce:	2600      	movs	r6, #0
 8002dd0:	42a6      	cmp	r6, r4
 8002dd2:	d109      	bne.n	8002de8 <__libc_init_array+0x24>
 8002dd4:	4d0b      	ldr	r5, [pc, #44]	; (8002e04 <__libc_init_array+0x40>)
 8002dd6:	4c0c      	ldr	r4, [pc, #48]	; (8002e08 <__libc_init_array+0x44>)
 8002dd8:	f000 f818 	bl	8002e0c <_init>
 8002ddc:	1b64      	subs	r4, r4, r5
 8002dde:	10a4      	asrs	r4, r4, #2
 8002de0:	2600      	movs	r6, #0
 8002de2:	42a6      	cmp	r6, r4
 8002de4:	d105      	bne.n	8002df2 <__libc_init_array+0x2e>
 8002de6:	bd70      	pop	{r4, r5, r6, pc}
 8002de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dec:	4798      	blx	r3
 8002dee:	3601      	adds	r6, #1
 8002df0:	e7ee      	b.n	8002dd0 <__libc_init_array+0xc>
 8002df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002df6:	4798      	blx	r3
 8002df8:	3601      	adds	r6, #1
 8002dfa:	e7f2      	b.n	8002de2 <__libc_init_array+0x1e>
 8002dfc:	08002e44 	.word	0x08002e44
 8002e00:	08002e44 	.word	0x08002e44
 8002e04:	08002e44 	.word	0x08002e44
 8002e08:	08002e48 	.word	0x08002e48

08002e0c <_init>:
 8002e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e0e:	bf00      	nop
 8002e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e12:	bc08      	pop	{r3}
 8002e14:	469e      	mov	lr, r3
 8002e16:	4770      	bx	lr

08002e18 <_fini>:
 8002e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e1a:	bf00      	nop
 8002e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e1e:	bc08      	pop	{r3}
 8002e20:	469e      	mov	lr, r3
 8002e22:	4770      	bx	lr
